{"version":3,"file":"285.0f53426aebe7f3ec2953.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/api/stateHistoryApi.ts","webpack://grafana/./public/app/features/alerting/unified/components/rules/state-history/LogTimelineViewer.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/state-history/LogRecordViewer.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/state-history/LokiStateHistory.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/state-history/common.ts","webpack://grafana/./public/app/features/alerting/unified/components/rules/state-history/useRuleHistoryRecords.tsx"],"sourcesContent":["import { DataFrameJSON } from '@grafana/data';\n\nimport { alertingApi } from './alertingApi';\n\nexport const stateHistoryApi = alertingApi.injectEndpoints({\n  endpoints: (build) => ({\n    getRuleHistory: build.query<DataFrameJSON, { ruleUid?: string; from?: number; to?: number; limit?: number }>({\n      query: ({ ruleUid, from, to, limit = 100 }) => ({\n        url: '/api/v1/rules/history',\n        params: { ruleUID: ruleUid, from, to, limit },\n      }),\n    }),\n  }),\n});\n","import { memo } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { DataFrame, InterpolateFunction, TimeRange } from '@grafana/data';\nimport { VisibilityMode } from '@grafana/schema';\nimport { LegendDisplayMode, useTheme2 } from '@grafana/ui';\nimport { TimelineChart } from 'app/core/components/TimelineChart/TimelineChart';\nimport { TimelineMode } from 'app/core/components/TimelineChart/utils';\n\ninterface LogTimelineViewerProps {\n  frames: DataFrame[];\n  timeRange: TimeRange;\n}\n\n// noop\nconst replaceVariables: InterpolateFunction = (v) => v;\n\nexport const LogTimelineViewer = memo(({ frames, timeRange }: LogTimelineViewerProps) => {\n  const theme = useTheme2();\n\n  return (\n    <AutoSizer disableHeight>\n      {({ width }) => (\n        <TimelineChart\n          frames={frames}\n          timeRange={timeRange}\n          timeZone={'browser'}\n          mode={TimelineMode.Changes}\n          height={18 * frames.length + 50}\n          width={width}\n          showValue={VisibilityMode.Never}\n          theme={theme}\n          rowHeight={0.8}\n          legend={{\n            calcs: [],\n            displayMode: LegendDisplayMode.List,\n            placement: 'bottom',\n            showLegend: true,\n          }}\n          legendItems={[\n            { label: 'Normal', color: theme.colors.success.main, yAxis: 1 },\n            { label: 'Pending', color: theme.colors.warning.main, yAxis: 1 },\n            { label: 'Firing', color: theme.colors.error.main, yAxis: 1 },\n            { label: 'No Data', color: theme.colors.info.main, yAxis: 1 },\n            { label: 'Mixed', color: theme.colors.text.secondary, yAxis: 1 },\n          ]}\n          replaceVariables={replaceVariables}\n        />\n      )}\n    </AutoSizer>\n  );\n});\n\nLogTimelineViewer.displayName = 'LogTimelineViewer';\n","import { css } from '@emotion/css';\nimport { formatDistanceToNowStrict } from 'date-fns';\nimport { groupBy, uniqueId } from 'lodash';\nimport { memo, Fragment, useEffect } from 'react';\n\nimport { dateTimeFormat, GrafanaTheme2 } from '@grafana/data';\nimport { Icon, TagList, useStyles2, Stack } from '@grafana/ui';\n\nimport { Label } from '../../Label';\nimport { AlertStateTag } from '../AlertStateTag';\n\nimport { LogRecord, omitLabels } from './common';\n\ntype LogRecordViewerProps = {\n  records: LogRecord[];\n  commonLabels: Array<[string, string]>;\n};\n\ntype AdditionalLogRecordViewerProps = {\n  onRecordsRendered?: (timestampRefs: Map<number, HTMLElement>) => void;\n  onLabelClick?: (label: string) => void;\n};\n\nfunction groupRecordsByTimestamp(records: LogRecord[]) {\n  // groupBy has been replaced by the reduce to avoid back and forth conversion of timestamp from number to string\n  const groupedLines = records.reduce((acc, current) => {\n    const tsGroup = acc.get(current.timestamp);\n    if (tsGroup) {\n      tsGroup.push(current);\n    } else {\n      acc.set(current.timestamp, [current]);\n    }\n\n    return acc;\n  }, new Map<number, LogRecord[]>());\n\n  return new Map([...groupedLines].sort((a, b) => b[0] - a[0]));\n}\n\nexport const LogRecordViewerByTimestamp = memo(\n  ({\n    records,\n    commonLabels,\n    onLabelClick,\n    onRecordsRendered,\n  }: LogRecordViewerProps & AdditionalLogRecordViewerProps) => {\n    const styles = useStyles2(getStyles);\n\n    const groupedLines = groupRecordsByTimestamp(records);\n\n    const timestampRefs = new Map<number, HTMLElement>();\n    useEffect(() => {\n      onRecordsRendered && onRecordsRendered(timestampRefs);\n    });\n\n    return (\n      <ul className={styles.logsScrollable} aria-label=\"State history by timestamp\">\n        {Array.from(groupedLines.entries()).map(([key, records]) => {\n          return (\n            <li\n              id={key.toString(10)}\n              key={key}\n              data-testid={key}\n              ref={(element) => element && timestampRefs.set(key, element)}\n              className={styles.listItemWrapper}\n            >\n              <Timestamp time={key} />\n              <div className={styles.logsContainer}>\n                {records.map(({ line }) => (\n                  <Fragment key={uniqueId()}>\n                    <AlertStateTag state={line.previous} size=\"sm\" muted />\n                    <Icon name=\"arrow-right\" size=\"sm\" />\n                    <AlertStateTag state={line.current} />\n                    <Stack>{line.values && <AlertInstanceValues record={line.values} />}</Stack>\n                    <div>\n                      {line.labels && (\n                        <TagList\n                          tags={omitLabels(Object.entries(line.labels), commonLabels).map(\n                            ([key, value]) => `${key}=${value}`\n                          )}\n                          onClick={onLabelClick}\n                        />\n                      )}\n                    </div>\n                  </Fragment>\n                ))}\n              </div>\n            </li>\n          );\n        })}\n      </ul>\n    );\n  }\n);\nLogRecordViewerByTimestamp.displayName = 'LogRecordViewerByTimestamp';\n\nexport function LogRecordViewerByInstance({ records, commonLabels }: LogRecordViewerProps) {\n  const styles = useStyles2(getStyles);\n\n  const groupedLines = groupBy(records, (record: LogRecord) => {\n    return JSON.stringify(record.line.labels);\n  });\n\n  return (\n    <>\n      {Object.entries(groupedLines).map(([key, records]) => {\n        return (\n          <Stack direction=\"column\" key={key}>\n            <h4>\n              <TagList\n                tags={omitLabels(Object.entries(records[0].line.labels ?? {}), commonLabels).map(\n                  ([key, value]) => `${key}=${value}`\n                )}\n              />\n            </h4>\n            <div className={styles.logsContainer}>\n              {records.map(({ line, timestamp }) => (\n                <div key={uniqueId()}>\n                  <AlertStateTag state={line.previous} size=\"sm\" muted />\n                  <Icon name=\"arrow-right\" size=\"sm\" />\n                  <AlertStateTag state={line.current} />\n                  <Stack>{line.values && <AlertInstanceValues record={line.values} />}</Stack>\n                  <div>{dateTimeFormat(timestamp)}</div>\n                </div>\n              ))}\n            </div>\n          </Stack>\n        );\n      })}\n    </>\n  );\n}\n\ninterface TimestampProps {\n  time: number; // epoch timestamp\n}\n\nconst Timestamp = ({ time }: TimestampProps) => {\n  const dateTime = new Date(time);\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.timestampWrapper}>\n      <Stack alignItems=\"center\" gap={1}>\n        <Icon name=\"clock-nine\" size=\"sm\" />\n        <span className={styles.timestampText}>{dateTimeFormat(dateTime)}</span>\n        <small>({formatDistanceToNowStrict(dateTime)} ago)</small>\n      </Stack>\n    </div>\n  );\n};\n\nconst AlertInstanceValues = memo(({ record }: { record: Record<string, number> }) => {\n  const values = Object.entries(record);\n\n  return (\n    <>\n      {values.map(([key, value]) => (\n        <Label key={key} label={key} value={value} />\n      ))}\n    </>\n  );\n});\nAlertInstanceValues.displayName = 'AlertInstanceValues';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  logsContainer: css({\n    display: 'grid',\n    gridTemplateColumns: 'max-content max-content max-content auto max-content',\n    gap: theme.spacing(2, 1),\n    alignItems: 'center',\n  }),\n  logsScrollable: css({\n    height: '500px',\n    overflow: 'scroll',\n\n    flex: 1,\n  }),\n  timestampWrapper: css({\n    color: theme.colors.text.secondary,\n  }),\n  timestampText: css({\n    color: theme.colors.text.primary,\n    fontSize: theme.typography.bodySmall.fontSize,\n    fontWeight: theme.typography.fontWeightBold,\n  }),\n  listItemWrapper: css({\n    background: 'transparent',\n    outline: '1px solid transparent',\n    padding: `${theme.spacing(1)} ${theme.spacing(1.5)}`,\n    [theme.transitions.handleMotion('no-preference', 'reduce')]: {\n      transition: 'background 150ms, outline 150ms',\n    },\n  }),\n});\n","import { css } from '@emotion/css';\nimport { fromPairs, isEmpty, sortBy, take, uniq } from 'lodash';\nimport * as React from 'react';\nimport { useCallback, useMemo, useRef, useState } from 'react';\nimport { useForm } from 'react-hook-form';\n\nimport { DataFrame, dateTime, GrafanaTheme2, TimeRange } from '@grafana/data';\nimport { Alert, Button, Field, Icon, Input, Label, Stack, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { stateHistoryApi } from '../../../api/stateHistoryApi';\nimport { combineMatcherStrings } from '../../../utils/alertmanager';\nimport { AlertLabels } from '../../AlertLabels';\nimport { HoverCard } from '../../HoverCard';\n\nimport { LogRecordViewerByTimestamp } from './LogRecordViewer';\nimport { LogTimelineViewer } from './LogTimelineViewer';\nimport { useRuleHistoryRecords } from './useRuleHistoryRecords';\n\ninterface Props {\n  ruleUID: string;\n}\n\nconst STATE_HISTORY_POLLING_INTERVAL = 10 * 1000; // 10 seconds\nconst MAX_TIMELINE_SERIES = 12;\n\nconst LokiStateHistory = ({ ruleUID }: Props) => {\n  const styles = useStyles2(getStyles);\n  const [instancesFilter, setInstancesFilter] = useState('');\n  const logsRef = useRef<Map<number, HTMLElement>>(new Map<number, HTMLElement>());\n\n  const { getValues, setValue, register, handleSubmit } = useForm({ defaultValues: { query: '' } });\n\n  const { useGetRuleHistoryQuery } = stateHistoryApi;\n\n  // We prefer log count-based limit rather than time-based, but the API doesn't support it yet\n  const queryTimeRange = useMemo(() => getDefaultTimeRange(), []);\n\n  const {\n    currentData: stateHistory,\n    isLoading,\n    isError,\n    error,\n  } = useGetRuleHistoryQuery(\n    {\n      ruleUid: ruleUID,\n      from: queryTimeRange.from.unix(),\n      to: queryTimeRange.to.unix(),\n      limit: 250,\n    },\n    {\n      refetchOnFocus: true,\n      refetchOnReconnect: true,\n      pollingInterval: STATE_HISTORY_POLLING_INTERVAL,\n    }\n  );\n\n  const { dataFrames, historyRecords, commonLabels, totalRecordsCount } = useRuleHistoryRecords(\n    stateHistory,\n    instancesFilter\n  );\n\n  const { frameSubset, frameTimeRange } = useFrameSubset(dataFrames);\n\n  const onLogRecordLabelClick = useCallback(\n    (label: string) => {\n      const matcherString = combineMatcherStrings(getValues('query'), label);\n      setInstancesFilter(matcherString);\n      setValue('query', matcherString);\n    },\n    [setInstancesFilter, setValue, getValues]\n  );\n\n  const onFilterCleared = useCallback(() => {\n    setInstancesFilter('');\n    setValue('query', '');\n  }, [setInstancesFilter, setValue]);\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n  if (isError) {\n    return (\n      <Alert title=\"Error fetching the state history\" severity=\"error\">\n        {error instanceof Error ? error.message : 'Unable to fetch alert state history'}\n      </Alert>\n    );\n  }\n\n  const hasMoreInstances = frameSubset.length < dataFrames.length;\n  const emptyStateMessage =\n    totalRecordsCount > 0\n      ? `No matches were found for the given filters among the ${totalRecordsCount} instances`\n      : 'No state transitions have occurred in the last 30 days';\n\n  return (\n    <div className={styles.fullSize}>\n      <form onSubmit={handleSubmit((data) => setInstancesFilter(data.query))}>\n        <SearchFieldInput\n          {...register('query')}\n          showClearFilterSuffix={!!instancesFilter}\n          onClearFilterClick={onFilterCleared}\n        />\n        <input type=\"submit\" hidden />\n      </form>\n      {!isEmpty(commonLabels) && (\n        <div className={styles.commonLabels}>\n          <Stack gap={1} alignItems=\"center\">\n            <strong>Common labels</strong>\n            <Tooltip content=\"Common labels are the ones attached to all of the alert instances\">\n              <Icon name=\"info-circle\" />\n            </Tooltip>\n            <AlertLabels labels={fromPairs(commonLabels)} size=\"sm\" />\n          </Stack>\n        </div>\n      )}\n      {isEmpty(frameSubset) ? (\n        <>\n          <div className={styles.emptyState}>\n            {emptyStateMessage}\n            {totalRecordsCount > 0 && (\n              <Button variant=\"secondary\" type=\"button\" onClick={onFilterCleared}>\n                Clear filters\n              </Button>\n            )}\n          </div>\n        </>\n      ) : (\n        <>\n          <div className={styles.graphWrapper}>\n            <LogTimelineViewer frames={frameSubset} timeRange={frameTimeRange} />\n          </div>\n          {hasMoreInstances && (\n            <div className={styles.moreInstancesWarning}>\n              <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n                <Icon name=\"exclamation-triangle\" size=\"sm\" />\n                <small>{`Only showing ${frameSubset.length} out of ${dataFrames.length} instances. Click on the labels to narrow down the results`}</small>\n              </Stack>\n            </div>\n          )}\n          <LogRecordViewerByTimestamp\n            records={historyRecords}\n            commonLabels={commonLabels}\n            onRecordsRendered={(recordRefs) => (logsRef.current = recordRefs)}\n            onLabelClick={onLogRecordLabelClick}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport function useFrameSubset(frames: DataFrame[]) {\n  return useMemo(() => {\n    const frameSubset = take(frames, MAX_TIMELINE_SERIES);\n    const frameSubsetTimestamps = sortBy(uniq(frameSubset.flatMap((frame) => frame.fields[0].values)));\n\n    const minTs = Math.min(...frameSubsetTimestamps);\n    const maxTs = Math.max(...frameSubsetTimestamps);\n\n    const rangeStart = dateTime(minTs);\n    const rangeStop = dateTime(maxTs);\n\n    const frameTimeRange: TimeRange = {\n      from: rangeStart,\n      to: rangeStop,\n      raw: {\n        from: rangeStart,\n        to: rangeStop,\n      },\n    };\n\n    return { frameSubset, frameSubsetTimestamps, frameTimeRange };\n  }, [frames]);\n}\n\ninterface SearchFieldInputProps extends Omit<React.ComponentProps<typeof Input>, 'prefix' | 'suffix' | 'placeholder'> {\n  showClearFilterSuffix: boolean;\n  onClearFilterClick: () => void;\n}\n\nconst SearchFieldInput = React.forwardRef<HTMLInputElement, SearchFieldInputProps>(\n  ({ showClearFilterSuffix, onClearFilterClick, ...rest }: SearchFieldInputProps, ref) => {\n    return (\n      <Field\n        label={\n          <Label htmlFor=\"instancesSearchInput\">\n            <Stack gap={0.5}>\n              <span>Filter instances</span>\n              <HoverCard\n                content={\n                  <>\n                    Use label matcher expression (like <code>{'{foo=bar}'}</code>) or click on an instance label to\n                    filter instances\n                  </>\n                }\n              >\n                <Icon name=\"info-circle\" size=\"sm\" />\n              </HoverCard>\n            </Stack>\n          </Label>\n        }\n      >\n        <Input\n          id=\"instancesSearchInput\"\n          prefix={<Icon name=\"search\" />}\n          suffix={\n            showClearFilterSuffix && (\n              <Button fill=\"text\" icon=\"times\" size=\"sm\" onClick={onClearFilterClick}>\n                Clear\n              </Button>\n            )\n          }\n          placeholder=\"Filter instances\"\n          ref={ref}\n          {...rest}\n        />\n      </Field>\n    );\n  }\n);\nSearchFieldInput.displayName = 'SearchFieldInput';\n\nfunction getDefaultTimeRange(): TimeRange {\n  const fromDateTime = dateTime().subtract(30, 'days');\n  const toDateTime = dateTime();\n  return {\n    from: fromDateTime,\n    to: toDateTime,\n    raw: { from: fromDateTime, to: toDateTime },\n  };\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  fullSize: css({\n    minWidth: '100%',\n    height: '100%',\n\n    display: 'flex',\n    flexDirection: 'column',\n  }),\n  graphWrapper: css({\n    padding: `${theme.spacing()} 0`,\n  }),\n  emptyState: css({\n    color: theme.colors.text.secondary,\n\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(2),\n    alignItems: 'center',\n    margin: 'auto auto',\n  }),\n  moreInstancesWarning: css({\n    color: theme.colors.warning.text,\n    padding: theme.spacing(),\n  }),\n  commonLabels: css({\n    display: 'grid',\n    gridTemplateColumns: 'max-content auto',\n  }),\n  // we need !important here to override the list item default styles\n  highlightedLogRecord: css({\n    background: `${theme.colors.primary.transparent} !important`,\n    outline: `1px solid ${theme.colors.primary.shade} !important`,\n  }),\n});\n\nexport default LokiStateHistory;\n","import { isEqual, uniqBy } from 'lodash';\n\nimport { GrafanaAlertStateWithReason } from 'app/types/unified-alerting-dto';\n\nexport interface Line {\n  previous: GrafanaAlertStateWithReason;\n  current: GrafanaAlertStateWithReason;\n  values?: Record<string, number>;\n  labels?: Record<string, string>;\n  fingerprint?: string;\n  ruleUID?: string;\n}\n\nexport interface LogRecord {\n  timestamp: number;\n  line: Line;\n}\n\nexport type Label = [string, string];\n\n// omit \"common\" labels from \"labels\"\nexport function omitLabels(labels: Label[], common: Label[]): Label[] {\n  return labels.filter((label) => {\n    return !common.find((commonLabel) => JSON.stringify(commonLabel) === JSON.stringify(label));\n  });\n}\n\n// find all common labels by looking at which ones occur in every record, then create a unique array of items for those\nexport function extractCommonLabels(labels: Label[][]): Label[] {\n  const flatLabels = labels.flatMap((label) => label);\n\n  const commonLabels = uniqBy(\n    flatLabels.filter((label) => {\n      const count = flatLabels.filter((l) => isEqual(label, l)).length;\n      return count === Object.keys(labels).length;\n    }),\n    (label) => JSON.stringify(label)\n  );\n\n  return commonLabels;\n}\n","import { groupBy } from 'lodash';\nimport { useMemo } from 'react';\n\nimport {\n  DataFrame,\n  Field as DataFrameField,\n  DataFrameJSON,\n  FieldType,\n  getDisplayProcessor,\n  GrafanaTheme2,\n} from '@grafana/data';\nimport { fieldIndexComparer } from '@grafana/data/src/field/fieldComparers';\nimport { MappingType, ThresholdsMode } from '@grafana/schema';\nimport { useTheme2 } from '@grafana/ui';\n\nimport { labelsMatchMatchers } from '../../../utils/alertmanager';\nimport { parsePromQLStyleMatcherLooseSafe } from '../../../utils/matchers';\n\nimport { extractCommonLabels, Line, LogRecord, omitLabels } from './common';\n\nexport function useRuleHistoryRecords(stateHistory?: DataFrameJSON, filter?: string) {\n  const theme = useTheme2();\n\n  return useMemo(() => {\n    // merge timestamp with \"line\"\n    const tsValues = stateHistory?.data?.values[0] ?? [];\n    const timestamps: number[] = isNumbers(tsValues) ? tsValues : [];\n    const lines = stateHistory?.data?.values[1] ?? [];\n\n    const logRecords = timestamps.reduce((acc: LogRecord[], timestamp: number, index: number) => {\n      const line = lines[index];\n      // values property can be undefined for some instance states (e.g. NoData)\n      if (isLine(line)) {\n        acc.push({ timestamp, line });\n      }\n\n      return acc;\n    }, []);\n\n    // group all records by alert instance (unique set of labels)\n    const logRecordsByInstance = groupBy(logRecords, (record: LogRecord) => {\n      return JSON.stringify(record.line.labels);\n    });\n\n    // CommonLabels should not be affected by the filter\n    // find common labels so we can extract those from the instances\n    const groupLabels = Object.keys(logRecordsByInstance);\n    const groupLabelsArray: Array<Array<[string, string]>> = groupLabels.map((label) => {\n      return Object.entries(JSON.parse(label));\n    });\n\n    const commonLabels = extractCommonLabels(groupLabelsArray);\n\n    const filterMatchers = filter ? parsePromQLStyleMatcherLooseSafe(filter) : [];\n    const filteredGroupedLines = Object.entries(logRecordsByInstance).filter(([key]) => {\n      const labels = JSON.parse(key);\n      return labelsMatchMatchers(labels, filterMatchers);\n    });\n\n    const dataFrames: DataFrame[] = filteredGroupedLines.map<DataFrame>(([key, records]) => {\n      return logRecordsToDataFrame(key, records, commonLabels, theme);\n    });\n\n    return {\n      historyRecords: logRecords.filter(({ line }) => line.labels && labelsMatchMatchers(line.labels, filterMatchers)),\n      dataFrames,\n      commonLabels,\n      totalRecordsCount: logRecords.length,\n    };\n  }, [stateHistory, filter, theme]);\n}\n\nexport function isNumbers(value: unknown[]): value is number[] {\n  return value.every((v) => typeof v === 'number');\n}\n\nexport function isLine(value: unknown): value is Line {\n  return typeof value === 'object' && value !== null && 'current' in value && 'previous' in value;\n}\n\n// Each alert instance is represented by a data frame\n// Each frame consists of two fields: timestamp and state change\nexport function logRecordsToDataFrame(\n  instanceLabels: string,\n  records: LogRecord[],\n  commonLabels: Array<[string, string]>,\n  theme: GrafanaTheme2\n): DataFrame {\n  const parsedInstanceLabels = Object.entries<string>(JSON.parse(instanceLabels));\n\n  // There is an artificial element at the end meaning Date.now()\n  // It exist to draw the state change from when it happened to the current time\n  const timeField: DataFrameField = {\n    name: 'time',\n    type: FieldType.time,\n    values: [...records.map((record) => record.timestamp), Date.now()],\n    config: { displayName: 'Time', custom: { fillOpacity: 100 } },\n  };\n\n  const timeIndex = timeField.values.map((_, index) => index);\n  timeIndex.sort(fieldIndexComparer(timeField));\n\n  const stateValues = [...records.map((record) => record.line.current), records.at(-1)?.line.current];\n\n  const frame: DataFrame = {\n    fields: [\n      {\n        ...timeField,\n        values: timeField.values.map((_, i) => timeField.values[timeIndex[i]]),\n      },\n      {\n        name: 'State',\n        type: FieldType.string,\n        values: stateValues.map((_, i) => stateValues[timeIndex[i]]),\n        config: {\n          displayName: omitLabels(parsedInstanceLabels, commonLabels)\n            .map(([key, label]) => `${key}=${label}`)\n            .join(', '),\n          color: { mode: 'thresholds' },\n          custom: { fillOpacity: 100 },\n          mappings: [\n            {\n              type: MappingType.ValueToText,\n              options: {\n                Alerting: {\n                  color: theme.colors.error.main,\n                },\n                Pending: {\n                  color: theme.colors.warning.main,\n                },\n                Normal: {\n                  color: theme.colors.success.main,\n                },\n                NoData: {\n                  color: theme.colors.info.main,\n                },\n              },\n            },\n          ],\n          thresholds: {\n            mode: ThresholdsMode.Absolute,\n            steps: [],\n          },\n        },\n      },\n    ],\n    length: timeField.values.length,\n    name: instanceLabels,\n  };\n\n  frame.fields.forEach((field) => {\n    field.display = getDisplayProcessor({ field, theme });\n  });\n\n  return frame;\n}\n"],"names":["stateHistoryApi","build","ruleUid","from","to","limit","replaceVariables","v","LogTimelineViewer","frames","timeRange","theme","width","groupRecordsByTimestamp","records","groupedLines","acc","current","tsGroup","b","LogRecordViewerByTimestamp","commonLabels","onLabelClick","onRecordsRendered","styles","getStyles","timestampRefs","key","element","Timestamp","line","Fragment","AlertInstanceValues","value","LogRecordViewerByInstance","record","timestamp","time","dateTime","formatDistanceToNowStrict","values","STATE_HISTORY_POLLING_INTERVAL","MAX_TIMELINE_SERIES","LokiStateHistory","ruleUID","instancesFilter","setInstancesFilter","logsRef","getValues","setValue","register","handleSubmit","useGetRuleHistoryQuery","queryTimeRange","getDefaultTimeRange","stateHistory","isLoading","isError","error","dataFrames","historyRecords","totalRecordsCount","useRuleHistoryRecords","frameSubset","frameTimeRange","useFrameSubset","onLogRecordLabelClick","label","matcherString","onFilterCleared","Alert","hasMoreInstances","emptyStateMessage","data","SearchFieldInput","Tooltip","AlertLabels","Button","recordRefs","frameSubsetTimestamps","frame","minTs","maxTs","rangeStart","rangeStop","showClearFilterSuffix","onClearFilterClick","rest","ref","Field","Label","HoverCard","Input","fromDateTime","toDateTime","omitLabels","labels","common","commonLabel","extractCommonLabels","flatLabels","l","filter","tsValues","timestamps","isNumbers","lines","logRecords","index","isLine","logRecordsByInstance","groupLabelsArray","filterMatchers","logRecordsToDataFrame","instanceLabels","parsedInstanceLabels","timeField","timeIndex","_","stateValues","i","field"],"sourceRoot":""}