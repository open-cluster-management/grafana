{"version":3,"file":"RecentlyDeletedPage.6dbee7285ecc770572e8.js","mappings":"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","sources":["webpack://grafana/./public/app/features/browse-dashboards/api/useRecentlyDeletedStateManager.ts","webpack://grafana/./public/app/features/browse-dashboards/components/PermanentlyDeleteModal.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/RestoreModal.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/RecentlyDeletedActions.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/RecentlyDeletedEmptyState.tsx","webpack://grafana/./public/app/features/browse-dashboards/RecentlyDeletedPage.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/SearchView.tsx","webpack://grafana/./public/app/features/browse-dashboards/permissions.ts","webpack://grafana/./public/app/features/search/page/components/ActionRow.tsx","webpack://grafana/./public/app/features/search/state/SearchStateManager.ts"],"sourcesContent":["import { SEARCH_SELECTED_SORT } from 'app/features/search/constants';\nimport { SearchState } from 'app/features/search/types';\n\nimport { initialState, SearchStateManager } from '../../search/state/SearchStateManager';\n\n// Subclass SearchStateMananger to customise the setStateAndDoSearch behaviour.\n// We want to clear the search results when the user clears any search input\n// to trigger the skeleton state.\nexport class TrashStateManager extends SearchStateManager {\n  setStateAndDoSearch(state: Partial<SearchState>) {\n    const sort = state.sort || this.state.sort || localStorage.getItem(SEARCH_SELECTED_SORT) || undefined;\n\n    const query = state.query ?? this.state.query;\n    const tags = state.tag ?? this.state.tag;\n\n    // When the user clears the search, and we revert back to list listing all\n    const clearResults = query.length === 0 && tags.length === 0;\n\n    // Set internal state\n    this.setState({\n      sort,\n      result: clearResults ? undefined : this.state.result,\n      ...state,\n    });\n\n    // Update url state\n    this.updateLocation({\n      query: this.state.query.length === 0 ? null : this.state.query,\n      tag: this.state.tag,\n      datasource: this.state.datasource,\n      panel_type: this.state.panel_type,\n      starred: this.state.starred ? this.state.starred : null,\n      sort: this.state.sort,\n    });\n\n    // Prevent searching when user is only clearing the input.\n    // We don't show these results anyway\n    if (this.hasSearchFilters()) {\n      this.doSearchWithDebounce();\n    }\n  }\n}\n\nlet recentlyDeletedStateManager: TrashStateManager;\nfunction getRecentlyDeletedStateManager() {\n  if (!recentlyDeletedStateManager) {\n    recentlyDeletedStateManager = new TrashStateManager({ ...initialState, includePanels: false, deleted: true });\n  }\n\n  return recentlyDeletedStateManager;\n}\n\nexport function useRecentlyDeletedStateManager() {\n  const stateManager = getRecentlyDeletedStateManager();\n  const state = stateManager.useState();\n\n  return [state, stateManager] as const;\n}\n","import { reportInteraction } from '@grafana/runtime';\nimport { ConfirmModal, Text } from '@grafana/ui';\n\nimport { Trans, t } from '../../../core/internationalization';\n\nimport { Props as ModalProps } from './RestoreModal';\n\nexport const PermanentlyDeleteModal = ({\n  onConfirm,\n  onDismiss,\n  selectedDashboards,\n  isLoading,\n  ...props\n}: ModalProps) => {\n  const numberOfDashboards = selectedDashboards.length;\n\n  const onDelete = async () => {\n    reportInteraction('grafana_delete_permanently_confirm_clicked', {\n      item_counts: {\n        dashboard: numberOfDashboards,\n      },\n    });\n    await onConfirm();\n    onDismiss();\n  };\n  return (\n    <ConfirmModal\n      body={\n        <Text element=\"p\">\n          <Trans i18nKey=\"recently-deleted.permanently-delete-modal.text\" count={numberOfDashboards}>\n            This action will delete {{ numberOfDashboards }} dashboards.\n          </Trans>\n        </Text>\n      }\n      title={t('recently-deleted.permanently-delete-modal.title', 'Permanently Delete Dashboards')}\n      confirmationText={t('recently-deleted.permanently-delete-modal.confirm-text', 'Delete')}\n      confirmText={\n        isLoading\n          ? t('recently-deleted.permanently-delete-modal.delete-loading', 'Deleting...')\n          : t('recently-deleted.permanently-delete-modal.delete-button', 'Delete')\n      }\n      confirmButtonVariant=\"destructive\"\n      onConfirm={onDelete}\n      onDismiss={onDismiss}\n      {...props}\n    />\n  );\n};\n","import { reportInteraction } from '@grafana/runtime';\nimport { ConfirmModal, Text } from '@grafana/ui';\n\nimport { Trans, t } from '../../../core/internationalization';\n\nexport interface Props {\n  isOpen: boolean;\n  onConfirm: () => Promise<void>;\n  onDismiss: () => void;\n  selectedDashboards: string[];\n  isLoading: boolean;\n}\n\nexport const RestoreModal = ({ onConfirm, onDismiss, selectedDashboards, isLoading, ...props }: Props) => {\n  const numberOfDashboards = selectedDashboards.length;\n\n  const onRestore = async () => {\n    reportInteraction('grafana_restore_confirm_clicked', {\n      item_counts: {\n        dashboard: numberOfDashboards,\n      },\n    });\n    await onConfirm();\n    onDismiss();\n  };\n\n  return (\n    <ConfirmModal\n      body={\n        <Text element=\"p\">\n          <Trans i18nKey=\"recently-deleted.restore-modal.text\" count={numberOfDashboards}>\n            This action will restore {{ numberOfDashboards }} dashboards.\n          </Trans>\n        </Text>\n        // TODO: replace by list of dashboards (list up to 5 dashboards) or number (from 6 dashboards)?\n      }\n      confirmText={\n        isLoading\n          ? t('recently-deleted.restore-modal.restore-loading', 'Restoring...')\n          : t('recently-deleted.restore-modal.restore-button', 'Restore')\n      }\n      confirmButtonVariant=\"primary\"\n      onDismiss={onDismiss}\n      onConfirm={onRestore}\n      title={t('recently-deleted.restore-modal.title', 'Restore Dashboards')}\n      {...props}\n    />\n  );\n};\n","import { useMemo } from 'react';\n\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, Stack } from '@grafana/ui';\nimport { GENERAL_FOLDER_UID } from 'app/features/search/constants';\n\nimport appEvents from '../../../core/app_events';\nimport { Trans } from '../../../core/internationalization';\nimport { useDispatch } from '../../../types';\nimport { ShowModalReactEvent } from '../../../types/events';\nimport { useHardDeleteDashboardMutation, useRestoreDashboardMutation } from '../api/browseDashboardsAPI';\nimport { useRecentlyDeletedStateManager } from '../api/useRecentlyDeletedStateManager';\nimport { clearFolders, setAllSelection, useActionSelectionState } from '../state';\n\nimport { PermanentlyDeleteModal } from './PermanentlyDeleteModal';\nimport { RestoreModal } from './RestoreModal';\n\nexport function RecentlyDeletedActions() {\n  const dispatch = useDispatch();\n  const selectedItemsState = useActionSelectionState();\n  const [, stateManager] = useRecentlyDeletedStateManager();\n\n  const [restoreDashboard, { isLoading: isRestoreLoading }] = useRestoreDashboardMutation();\n  const [deleteDashboard, { isLoading: isDeleteLoading }] = useHardDeleteDashboardMutation();\n\n  const selectedDashboards = useMemo(() => {\n    return Object.entries(selectedItemsState.dashboard)\n      .filter(([_, selected]) => selected)\n      .map(([uid]) => uid);\n  }, [selectedItemsState.dashboard]);\n\n  const onActionComplete = () => {\n    dispatch(setAllSelection({ isSelected: false, folderUID: undefined }));\n\n    stateManager.doSearchWithDebounce();\n  };\n\n  const onRestore = async () => {\n    const resultsView = stateManager.state.result?.view.toArray();\n    if (!resultsView) {\n      return;\n    }\n\n    const promises = selectedDashboards.map((uid) => {\n      return restoreDashboard({ dashboardUID: uid });\n    });\n\n    await Promise.all(promises);\n\n    const parentUIDs = new Set<string | undefined>();\n    for (const uid of selectedDashboards) {\n      const foundItem = resultsView.find((v) => v.uid === uid);\n      if (!foundItem) {\n        continue;\n      }\n\n      // Search API returns items with no parent with a location of 'general', so we\n      // need to convert that back to undefined\n      const folderUID = foundItem.location === GENERAL_FOLDER_UID ? undefined : foundItem.location;\n      parentUIDs.add(folderUID);\n    }\n    dispatch(clearFolders(Array.from(parentUIDs)));\n\n    onActionComplete();\n  };\n\n  const onDelete = async () => {\n    const promises = selectedDashboards.map((uid) => deleteDashboard({ dashboardUID: uid }));\n\n    await Promise.all(promises);\n    onActionComplete();\n  };\n\n  const showRestoreModal = () => {\n    reportInteraction('grafana_restore_clicked', {\n      item_counts: {\n        dashboard: selectedDashboards.length,\n      },\n    });\n    appEvents.publish(\n      new ShowModalReactEvent({\n        component: RestoreModal,\n        props: {\n          selectedDashboards,\n          onConfirm: onRestore,\n          isLoading: isRestoreLoading,\n        },\n      })\n    );\n  };\n\n  const showDeleteModal = () => {\n    reportInteraction('grafana_delete_permanently_clicked', {\n      item_counts: {\n        dashboard: selectedDashboards.length,\n      },\n    });\n    appEvents.publish(\n      new ShowModalReactEvent({\n        component: PermanentlyDeleteModal,\n        props: {\n          selectedDashboards,\n          onConfirm: onDelete,\n          isLoading: isDeleteLoading,\n        },\n      })\n    );\n  };\n\n  return (\n    <Stack gap={1}>\n      <Button onClick={showRestoreModal} variant=\"secondary\">\n        <Trans i18nKey=\"recently-deleted.buttons.restore\">Restore</Trans>\n      </Button>\n      <Button onClick={showDeleteModal} variant=\"destructive\">\n        <Trans i18nKey=\"recently-deleted.buttons.delete\">Delete permanently</Trans>\n      </Button>\n    </Stack>\n  );\n}\n","import { EmptyState } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\nimport { SearchState } from 'app/features/search/types';\n\ninterface RecentlyDeletedEmptyStateProps {\n  searchState: SearchState;\n}\n\nexport const RecentlyDeletedEmptyState = ({ searchState }: RecentlyDeletedEmptyStateProps) => {\n  const userIsSearching = Boolean(searchState.query || searchState.tag.length);\n  return (\n    <EmptyState\n      message={\n        userIsSearching\n          ? t('recently-deleted.page.no-search-result', 'No results found for your query')\n          : t('recently-deleted.page.no-deleted-dashboards', \"You haven't deleted any dashboards recently.\")\n      }\n      variant={userIsSearching ? 'not-found' : 'completed'}\n      role=\"alert\"\n    >\n      <Trans i18nKey={'recently-deleted.page.no-deleted-dashboards-text'}>\n        When you delete a dashboard, it will appear here for 30 days before being permanently deleted. Your organization\n        administrator can restore recently-deleted dashboards.\n      </Trans>\n    </EmptyState>\n  );\n};\n","import { css } from '@emotion/css';\nimport { memo, useEffect } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { FilterInput, useStyles2 } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { t } from 'app/core/internationalization';\nimport { ActionRow } from 'app/features/search/page/components/ActionRow';\nimport { getGrafanaSearcher } from 'app/features/search/service';\n\nimport { useDispatch } from '../../types';\n\nimport { useRecentlyDeletedStateManager } from './api/useRecentlyDeletedStateManager';\nimport { RecentlyDeletedActions } from './components/RecentlyDeletedActions';\nimport { RecentlyDeletedEmptyState } from './components/RecentlyDeletedEmptyState';\nimport { SearchView } from './components/SearchView';\nimport { getFolderPermissions } from './permissions';\nimport { setAllSelection, useHasSelection } from './state';\n\nconst RecentlyDeletedPage = memo(() => {\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n\n  const [searchState, stateManager] = useRecentlyDeletedStateManager();\n  const hasSelection = useHasSelection();\n\n  const { canEditFolders, canEditDashboards } = getFolderPermissions();\n  const canSelect = canEditFolders || canEditDashboards;\n\n  useEffect(() => {\n    stateManager.initStateFromUrl(undefined);\n\n    // Clear selected state when folderUID changes\n    dispatch(\n      setAllSelection({\n        isSelected: false,\n        folderUID: undefined,\n      })\n    );\n  }, [dispatch, stateManager]);\n\n  return (\n    <Page navId=\"dashboards/recently-deleted\">\n      <Page.Contents className={styles.pageContents}>\n        <div>\n          <FilterInput\n            placeholder={t('recentlyDeleted.filter.placeholder', 'Search for dashboards')}\n            value={searchState.query}\n            escapeRegex={false}\n            onChange={stateManager.onQueryChange}\n          />\n        </div>\n\n        {hasSelection ? (\n          <RecentlyDeletedActions />\n        ) : (\n          <div className={styles.filters}>\n            <ActionRow\n              state={searchState}\n              getTagOptions={stateManager.getTagOptions}\n              getSortOptions={getGrafanaSearcher().getSortOptions}\n              sortPlaceholder={getGrafanaSearcher().sortPlaceholder}\n              onLayoutChange={stateManager.onLayoutChange}\n              onSortChange={stateManager.onSortChange}\n              onTagFilterChange={stateManager.onTagFilterChange}\n              onDatasourceChange={stateManager.onDatasourceChange}\n              onPanelTypeChange={stateManager.onPanelTypeChange}\n              onSetIncludePanels={stateManager.onSetIncludePanels}\n            />\n          </div>\n        )}\n\n        <div className={styles.subView}>\n          <AutoSizer>\n            {({ width, height }) => (\n              <SearchView\n                canSelect={canSelect}\n                width={width}\n                height={height}\n                searchStateManager={stateManager}\n                searchState={searchState}\n                emptyState={<RecentlyDeletedEmptyState searchState={searchState} />}\n              />\n            )}\n          </AutoSizer>\n        </div>\n      </Page.Contents>\n    </Page>\n  );\n});\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  pageContents: css({\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(1),\n    height: '100%',\n  }),\n\n  // AutoSizer needs an element to measure the full height available\n  subView: css({\n    height: '100%',\n  }),\n\n  filters: css({\n    display: 'none',\n\n    [theme.breakpoints.up('md')]: {\n      display: 'block',\n    },\n  }),\n});\n\nRecentlyDeletedPage.displayName = 'RecentlyDeletedPage';\nexport default RecentlyDeletedPage;\n","import { ReactNode, useCallback } from 'react';\n\nimport { DataFrameView, toDataFrame } from '@grafana/data';\nimport { Button, EmptyState } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { useKeyNavigationListener } from 'app/features/search/hooks/useSearchKeyboardSelection';\nimport { SearchResultsProps, SearchResultsTable } from 'app/features/search/page/components/SearchResultsTable';\nimport { SearchStateManager } from 'app/features/search/state/SearchStateManager';\nimport { DashboardViewItemKind, SearchState } from 'app/features/search/types';\nimport { useDispatch, useSelector } from 'app/types';\n\nimport { setAllSelection, setItemSelectionState, useHasSelection } from '../state';\n\ninterface SearchViewProps {\n  height: number;\n  width: number;\n  canSelect: boolean;\n  searchState: SearchState;\n  searchStateManager: SearchStateManager;\n  emptyState?: ReactNode;\n}\n\nconst NUM_PLACEHOLDER_ROWS = 25;\nconst initialLoadingView = {\n  view: new DataFrameView(\n    toDataFrame({\n      fields: [\n        { name: 'uid', display: true, values: Array(NUM_PLACEHOLDER_ROWS).fill(null) },\n        { name: 'kind', display: true, values: Array(NUM_PLACEHOLDER_ROWS).fill('dashboard') },\n        { name: 'name', display: true, values: Array(NUM_PLACEHOLDER_ROWS).fill('') },\n        { name: 'location', display: true, values: Array(NUM_PLACEHOLDER_ROWS).fill('') },\n        { name: 'tags', display: true, values: Array(NUM_PLACEHOLDER_ROWS).fill([]) },\n      ],\n      meta: {\n        custom: {\n          locationInfo: [],\n        },\n      },\n    })\n  ),\n  loadMoreItems: () => Promise.resolve(),\n  // this is key and controls whether to show the skeleton in generateColumns\n  isItemLoaded: () => false,\n  totalRows: NUM_PLACEHOLDER_ROWS,\n};\n\nexport function SearchView({\n  width,\n  height,\n  canSelect,\n  searchState,\n  searchStateManager: stateManager,\n  emptyState: emptyStateProp,\n}: SearchViewProps) {\n  const dispatch = useDispatch();\n  const selectedItems = useSelector((wholeState) => wholeState.browseDashboards.selectedItems);\n  const hasSelection = useHasSelection();\n\n  const { keyboardEvents } = useKeyNavigationListener();\n\n  const value = searchState.result ?? initialLoadingView;\n\n  const selectionChecker = useCallback(\n    (kind: string | undefined, uid: string): boolean => {\n      if (!kind) {\n        return false;\n      }\n\n      // Currently, this indicates _some_ items are selected, not nessicarily all are\n      // selected.\n      if (kind === '*' && uid === '*') {\n        return hasSelection;\n      } else if (kind === '*') {\n        // Unsure how this case can happen\n        return false;\n      }\n\n      return selectedItems[assertDashboardViewItemKind(kind)][uid] ?? false;\n    },\n    [selectedItems, hasSelection]\n  );\n\n  const clearSelection = useCallback(() => {\n    dispatch(setAllSelection({ isSelected: false, folderUID: undefined }));\n  }, [dispatch]);\n\n  const handleItemSelectionChange = useCallback(\n    (kind: string, uid: string) => {\n      const newIsSelected = !selectionChecker(kind, uid);\n\n      dispatch(\n        setItemSelectionState({ item: { kind: assertDashboardViewItemKind(kind), uid }, isSelected: newIsSelected })\n      );\n    },\n    [selectionChecker, dispatch]\n  );\n\n  if (value.totalRows === 0) {\n    const emptyState = emptyStateProp ?? (\n      <EmptyState\n        button={\n          <Button variant=\"secondary\" onClick={stateManager.onClearSearchAndFilters}>\n            <Trans i18nKey=\"browse-dashboards.no-results.clear\">Clear search and filters</Trans>\n          </Button>\n        }\n        message={t('browse-dashboards.no-results.text', 'No results found for your query')}\n        variant=\"not-found\"\n        role=\"alert\"\n      />\n    );\n\n    return <div style={{ width }}>{emptyState}</div>;\n  }\n\n  const props: SearchResultsProps = {\n    response: value,\n    selection: canSelect ? selectionChecker : undefined,\n    selectionToggle: canSelect ? handleItemSelectionChange : undefined,\n    clearSelection,\n    width: width,\n    height: height,\n    onTagSelected: stateManager.onAddTag,\n    keyboardEvents,\n    onDatasourceChange: searchState.datasource ? stateManager.onDatasourceChange : undefined,\n    onClickItem: stateManager.onSearchItemClicked,\n  };\n\n  return <SearchResultsTable {...props} />;\n}\n\nfunction assertDashboardViewItemKind(kind: string): DashboardViewItemKind {\n  switch (kind) {\n    case 'folder':\n      return 'folder';\n    case 'dashboard':\n      return 'dashboard';\n    case 'panel':\n      return 'panel';\n  }\n\n  throw new Error('Unsupported kind' + kind);\n}\n","import { config } from '@grafana/runtime';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, FolderDTO } from 'app/types';\n\nfunction checkFolderPermission(action: AccessControlAction, folderDTO?: FolderDTO) {\n  // Only some permissions are assigned in the root folder (aka \"general\" folder), so we can ignore them in most cases\n  return folderDTO && folderDTO.uid !== 'general'\n    ? contextSrv.hasPermissionInMetadata(action, folderDTO)\n    : contextSrv.hasPermission(action);\n}\n\nfunction checkCanCreateFolders(folderDTO?: FolderDTO) {\n  // Can only create a folder if we have permissions and either we're at root or nestedFolders is enabled\n  if (folderDTO && !config.featureToggles.nestedFolders) {\n    return false;\n  }\n\n  if (!config.featureToggles.accessActionSets) {\n    if (!folderDTO || folderDTO.uid === 'general') {\n      return checkFolderPermission(AccessControlAction.FoldersCreate);\n    }\n    return (\n      checkFolderPermission(AccessControlAction.FoldersCreate) &&\n      checkFolderPermission(AccessControlAction.FoldersWrite, folderDTO)\n    );\n  }\n\n  return folderDTO\n    ? contextSrv.hasPermissionInMetadata(AccessControlAction.FoldersCreate, folderDTO)\n    : contextSrv.hasPermission(AccessControlAction.FoldersCreate);\n}\n\nexport function getFolderPermissions(folderDTO?: FolderDTO) {\n  const canCreateDashboards = checkFolderPermission(AccessControlAction.DashboardsCreate, folderDTO);\n  const canCreateFolders = checkCanCreateFolders(folderDTO);\n  const canDeleteFolders = checkFolderPermission(AccessControlAction.FoldersDelete, folderDTO);\n  const canEditDashboards = checkFolderPermission(AccessControlAction.DashboardsWrite, folderDTO);\n  const canEditFolders = checkFolderPermission(AccessControlAction.FoldersWrite, folderDTO);\n  const canSetPermissions = checkFolderPermission(AccessControlAction.FoldersPermissionsWrite, folderDTO);\n  const canViewPermissions = checkFolderPermission(AccessControlAction.FoldersPermissionsRead, folderDTO);\n\n  return {\n    canCreateDashboards,\n    canCreateFolders,\n    canDeleteFolders,\n    canEditDashboards,\n    canEditFolders,\n    canSetPermissions,\n    canViewPermissions,\n  };\n}\n","import { css } from '@emotion/css';\nimport { FormEvent } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Button, Checkbox, Stack, RadioButtonGroup, useStyles2 } from '@grafana/ui';\nimport { SortPicker } from 'app/core/components/Select/SortPicker';\nimport { TagFilter, TermCount } from 'app/core/components/TagFilter/TagFilter';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { SearchLayout, SearchState } from '../../types';\n\nfunction getLayoutOptions() {\n  return [\n    {\n      value: SearchLayout.Folders,\n      icon: 'folder',\n      description: t('search.actions.view-as-folders', 'View by folders'),\n    },\n    { value: SearchLayout.List, icon: 'list-ul', description: t('search.actions.view-as-list', 'View as list') },\n  ];\n}\n\ninterface ActionRowProps {\n  state: SearchState;\n  showStarredFilter?: boolean;\n  showLayout?: boolean;\n  sortPlaceholder?: string;\n\n  onLayoutChange: (layout: SearchLayout) => void;\n  onSortChange: (value?: string) => void;\n  onStarredFilterChange?: (event: FormEvent<HTMLInputElement>) => void;\n  onTagFilterChange: (tags: string[]) => void;\n  getTagOptions: () => Promise<TermCount[]>;\n  getSortOptions: () => Promise<SelectableValue[]>;\n  onDatasourceChange: (ds?: string) => void;\n  onPanelTypeChange: (pt?: string) => void;\n  onSetIncludePanels: (v: boolean) => void;\n}\n\nexport function getValidQueryLayout(q: SearchState): SearchLayout {\n  const layout = q.layout ?? SearchLayout.Folders;\n\n  // Folders is not valid when a query exists\n  if (layout === SearchLayout.Folders) {\n    if (q.query || q.sort || q.starred || q.tag.length > 0) {\n      return SearchLayout.List;\n    }\n  }\n\n  return layout;\n}\n\nexport const ActionRow = ({\n  state,\n  showStarredFilter,\n  showLayout,\n  sortPlaceholder,\n  onLayoutChange,\n  onSortChange,\n  onStarredFilterChange = () => {},\n  onTagFilterChange,\n  getTagOptions,\n  getSortOptions,\n  onDatasourceChange,\n  onPanelTypeChange,\n  onSetIncludePanels,\n}: ActionRowProps) => {\n  const styles = useStyles2(getStyles);\n  const layout = getValidQueryLayout(state);\n\n  // Disabled folder layout option when query is present\n  const disabledOptions =\n    state.tag.length || state.starred || state.query || state.datasource || state.panel_type\n      ? [SearchLayout.Folders]\n      : [];\n\n  return (\n    <Stack justifyContent=\"space-between\" alignItems=\"center\">\n      <Stack gap={2} alignItems=\"center\">\n        <TagFilter isClearable={false} tags={state.tag} tagOptions={getTagOptions} onChange={onTagFilterChange} />\n        {config.featureToggles.panelTitleSearch && (\n          <Checkbox\n            data-testid=\"include-panels\"\n            disabled={layout === SearchLayout.Folders}\n            value={state.includePanels}\n            onChange={() => onSetIncludePanels(!state.includePanels)}\n            label={t('search.actions.include-panels', 'Include panels')}\n          />\n        )}\n\n        {showStarredFilter && (\n          <div className={styles.checkboxWrapper}>\n            <Checkbox\n              label={t('search.actions.starred', 'Starred')}\n              onChange={onStarredFilterChange}\n              value={state.starred}\n            />\n          </div>\n        )}\n        {state.datasource && (\n          <Button icon=\"times\" variant=\"secondary\" onClick={() => onDatasourceChange(undefined)}>\n            <Trans i18nKey=\"search.actions.remove-datasource-filter\">\n              Datasource: {{ datasource: state.datasource }}\n            </Trans>\n          </Button>\n        )}\n        {state.panel_type && (\n          <Button icon=\"times\" variant=\"secondary\" onClick={() => onPanelTypeChange(undefined)}>\n            Panel: {state.panel_type}\n          </Button>\n        )}\n      </Stack>\n\n      <Stack gap={2}>\n        {showLayout && (\n          <RadioButtonGroup\n            options={getLayoutOptions()}\n            disabledOptions={disabledOptions}\n            onChange={onLayoutChange}\n            value={layout}\n          />\n        )}\n        <SortPicker\n          onChange={(change) => onSortChange(change?.value)}\n          value={state.sort}\n          getSortOptions={getSortOptions}\n          placeholder={sortPlaceholder || t('search.actions.sort-placeholder', 'Sort')}\n          isClearable\n        />\n      </Stack>\n    </Stack>\n  );\n};\n\nActionRow.displayName = 'ActionRow';\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    checkboxWrapper: css({\n      label: {\n        lineHeight: '1.2',\n      },\n    }),\n  };\n};\n","import { debounce } from 'lodash';\nimport { FormEvent } from 'react';\n\nimport { locationService } from '@grafana/runtime';\nimport { TermCount } from 'app/core/components/TagFilter/TagFilter';\nimport { StateManagerBase } from 'app/core/services/StateManagerBase';\nimport store from 'app/core/store';\n\nimport { SEARCH_PANELS_LOCAL_STORAGE_KEY, SEARCH_SELECTED_LAYOUT, SEARCH_SELECTED_SORT } from '../constants';\nimport {\n  reportDashboardListViewed,\n  reportSearchFailedQueryInteraction,\n  reportSearchQueryInteraction,\n  reportSearchResultInteraction,\n} from '../page/reporting';\nimport { getGrafanaSearcher, SearchQuery } from '../service';\nimport { SearchLayout, SearchQueryParams, SearchState } from '../types';\nimport { parseRouteParams } from '../utils';\n\nexport const initialState: SearchState = {\n  query: '',\n  tag: [],\n  starred: false,\n  layout: SearchLayout.Folders,\n  sort: undefined,\n  prevSort: undefined,\n  eventTrackingNamespace: 'dashboard_search',\n  deleted: false,\n};\n\nexport const defaultQueryParams: SearchQueryParams = {\n  sort: null,\n  starred: null,\n  query: null,\n  tag: null,\n  layout: null,\n};\n\nconst getLocalStorageLayout = () => {\n  const selectedLayout = localStorage.getItem(SEARCH_SELECTED_LAYOUT);\n  if (selectedLayout === SearchLayout.List) {\n    return SearchLayout.List;\n  } else {\n    return SearchLayout.Folders;\n  }\n};\nexport class SearchStateManager extends StateManagerBase<SearchState> {\n  updateLocation = debounce((query) => locationService.partial(query, true), 300);\n  doSearchWithDebounce = debounce(() => this.doSearch(), 300);\n  lastQuery?: SearchQuery;\n\n  lastSearchTimestamp = 0;\n\n  initStateFromUrl(folderUid?: string, doInitialSearch = true) {\n    const stateFromUrl = parseRouteParams(locationService.getSearchObject());\n\n    // Force list view when conditions are specified from the URL\n    if (stateFromUrl.query || stateFromUrl.datasource || stateFromUrl.panel_type) {\n      stateFromUrl.layout = SearchLayout.List;\n    }\n\n    const layout = getLocalStorageLayout();\n    const prevSort = localStorage.getItem(SEARCH_SELECTED_SORT) ?? undefined;\n    const sort = layout === SearchLayout.List ? stateFromUrl.sort || prevSort : null;\n\n    this.setState({\n      ...initialState,\n      ...stateFromUrl,\n      layout,\n      sort: sort ?? initialState.sort,\n      prevSort,\n      folderUid: folderUid,\n      eventTrackingNamespace: folderUid ? 'manage_dashboards' : 'dashboard_search',\n      deleted: this.state.deleted,\n    });\n\n    if (doInitialSearch && this.hasSearchFilters()) {\n      this.doSearch();\n    }\n  }\n\n  /**\n   * Updates internal and url state, then triggers a new search\n   */\n  setStateAndDoSearch(state: Partial<SearchState>) {\n    const sort = state.sort || this.state.sort || localStorage.getItem(SEARCH_SELECTED_SORT) || undefined;\n\n    // Set internal state\n    this.setState({ sort, ...state });\n\n    // Update url state\n    this.updateLocation({\n      query: this.state.query.length === 0 ? null : this.state.query,\n      tag: this.state.tag,\n      datasource: this.state.datasource,\n      panel_type: this.state.panel_type,\n      starred: this.state.starred ? this.state.starred : null,\n      sort: this.state.sort,\n    });\n\n    // Prevent searching when user is only clearing the input.\n    // We don't show these results anyway\n    if (this.hasSearchFilters()) {\n      this.doSearchWithDebounce();\n    }\n  }\n\n  onCloseSearch = () => {\n    this.updateLocation({\n      search: null,\n      folder: null,\n      ...defaultQueryParams,\n    });\n  };\n\n  onClearSearchAndFilters = () => {\n    this.setStateAndDoSearch({\n      query: '',\n      datasource: undefined,\n      tag: [],\n      panel_type: undefined,\n      starred: undefined,\n      sort: undefined,\n    });\n  };\n\n  onQueryChange = (query: string) => {\n    this.setStateAndDoSearch({ query });\n  };\n\n  onRemoveTag = (tagToRemove: string) => {\n    this.setStateAndDoSearch({ tag: this.state.tag.filter((tag) => tag !== tagToRemove) });\n  };\n\n  onTagFilterChange = (tags: string[]) => {\n    this.setStateAndDoSearch({ tag: tags });\n  };\n\n  onAddTag = (newTag: string) => {\n    if (this.state.tag && this.state.tag.includes(newTag)) {\n      return;\n    }\n\n    this.setStateAndDoSearch({ tag: [...this.state.tag, newTag] });\n  };\n\n  onDatasourceChange = (datasource: string | undefined) => {\n    this.setStateAndDoSearch({ datasource });\n  };\n\n  onPanelTypeChange = (panel_type?: string) => {\n    this.setStateAndDoSearch({ panel_type });\n  };\n\n  onStarredFilterChange = (e: FormEvent<HTMLInputElement>) => {\n    const starred = e.currentTarget.checked;\n    this.setStateAndDoSearch({ starred });\n  };\n\n  onClearStarred = () => {\n    this.setStateAndDoSearch({ starred: false });\n  };\n\n  onSetStarred = (starred: boolean) => {\n    if (starred !== this.state.starred) {\n      this.setStateAndDoSearch({ starred });\n    }\n  };\n\n  onSortChange = (sort: string | undefined) => {\n    if (sort) {\n      localStorage.setItem(SEARCH_SELECTED_SORT, sort);\n    } else {\n      localStorage.removeItem(SEARCH_SELECTED_SORT);\n    }\n\n    if (this.state.layout === SearchLayout.Folders) {\n      this.setStateAndDoSearch({ sort, layout: SearchLayout.List });\n    } else {\n      this.setStateAndDoSearch({ sort });\n    }\n  };\n\n  onLayoutChange = (layout: SearchLayout) => {\n    localStorage.setItem(SEARCH_SELECTED_LAYOUT, layout);\n\n    if (this.state.sort && layout === SearchLayout.Folders) {\n      this.setStateAndDoSearch({ layout, prevSort: this.state.sort, sort: undefined });\n    } else {\n      this.setStateAndDoSearch({ layout, sort: this.state.prevSort });\n    }\n  };\n\n  onSetIncludePanels = (includePanels: boolean) => {\n    this.setStateAndDoSearch({ includePanels });\n    store.set(SEARCH_PANELS_LOCAL_STORAGE_KEY, includePanels);\n  };\n\n  hasSearchFilters() {\n    return Boolean(\n      this.state.query ||\n        this.state.tag.length ||\n        this.state.starred ||\n        this.state.panel_type ||\n        this.state.sort ||\n        this.state.deleted ||\n        this.state.layout === SearchLayout.List\n    );\n  }\n\n  getSearchQuery() {\n    const q: SearchQuery = {\n      query: this.state.query,\n      tags: this.state.tag,\n      ds_uid: this.state.datasource,\n      panel_type: this.state.panel_type,\n      location: this.state.folderUid, // This will scope all results to the prefix\n      sort: this.state.sort,\n      explain: this.state.explain,\n      withAllowedActions: this.state.explain, // allowedActions are currently not used for anything on the UI and added only in `explain` mode\n      starred: this.state.starred,\n      deleted: this.state.deleted,\n    };\n\n    // Only dashboards have additional properties\n    if (q.sort?.length && !q.sort.includes('name')) {\n      q.kind = ['dashboard', 'folder']; // skip panels\n    }\n\n    if (!q.query?.length) {\n      q.query = '*';\n      if (!q.location) {\n        q.kind = ['dashboard', 'folder']; // skip panels\n      }\n    }\n\n    if (!this.state.includePanels && !q.kind) {\n      q.kind = ['dashboard', 'folder']; // skip panels\n    }\n\n    if (q.panel_type?.length) {\n      q.kind = ['panel'];\n    }\n\n    return q;\n  }\n\n  private doSearch() {\n    const trackingInfo = {\n      layout: this.state.layout,\n      starred: this.state.starred,\n      sortValue: this.state.sort,\n      query: this.state.query,\n      tagCount: this.state.tag?.length,\n      includePanels: this.state.includePanels,\n      deleted: this.state.deleted,\n    };\n\n    reportSearchQueryInteraction(this.state.eventTrackingNamespace, trackingInfo);\n\n    this.lastQuery = this.getSearchQuery();\n\n    this.setState({ loading: true });\n\n    const searcher = getGrafanaSearcher();\n\n    const searchTimestamp = Date.now();\n    const searchPromise = this.state.starred ? searcher.starred(this.lastQuery) : searcher.search(this.lastQuery);\n\n    searchPromise\n      .then((result) => {\n        // Only keep the results if it's was issued after the most recently resolved search.\n        // This prevents results showing out of order if first request is slower than later ones\n        if (searchTimestamp > this.lastSearchTimestamp) {\n          this.setState({ result, loading: false });\n          this.lastSearchTimestamp = searchTimestamp;\n        }\n      })\n      .catch((error) => {\n        reportSearchFailedQueryInteraction(this.state.eventTrackingNamespace, {\n          ...trackingInfo,\n          error: error?.message,\n        });\n        this.setState({ loading: false });\n      });\n  }\n\n  // This gets the possible tags from within the query results\n  getTagOptions = (): Promise<TermCount[]> => {\n    const query = this.lastQuery ?? {\n      kind: ['dashboard', 'folder'],\n      query: '*',\n    };\n    return getGrafanaSearcher().tags(query);\n  };\n\n  /**\n   * When item is selected clear some filters and report interaction\n   */\n  onSearchItemClicked = (e: React.MouseEvent<HTMLElement>) => {\n    reportSearchResultInteraction(this.state.eventTrackingNamespace, {\n      layout: this.state.layout,\n      starred: this.state.starred,\n      sortValue: this.state.sort,\n      query: this.state.query,\n      tagCount: this.state.tag?.length,\n      includePanels: this.state.includePanels,\n      deleted: this.state.deleted,\n    });\n  };\n\n  /**\n   * Caller should handle debounce\n   */\n  onReportSearchUsage = () => {\n    reportDashboardListViewed(this.state.eventTrackingNamespace, {\n      layout: this.state.layout,\n      starred: this.state.starred,\n      sortValue: this.state.sort,\n      query: this.state.query,\n      tagCount: this.state.tag?.length,\n      includePanels: this.state.includePanels,\n      deleted: this.state.deleted,\n    });\n  };\n}\n\nlet stateManager: SearchStateManager;\n\nexport function getSearchStateManager() {\n  if (!stateManager) {\n    const selectedLayout = localStorage.getItem(SEARCH_SELECTED_LAYOUT) as SearchLayout;\n    const layout = selectedLayout ?? initialState.layout;\n\n    let includePanels = store.getBool(SEARCH_PANELS_LOCAL_STORAGE_KEY, true);\n    if (includePanels) {\n      includePanels = false;\n    }\n\n    stateManager = new SearchStateManager({ ...initialState, layout, includePanels });\n  }\n\n  return stateManager;\n}\n\nexport function useSearchStateManager() {\n  const stateManager = getSearchStateManager();\n  const state = stateManager.useState();\n\n  return [state, stateManager] as const;\n}\n"],"names":["TrashStateManager","SearchStateManager","state","sort","query","tags","clearResults","recentlyDeletedStateManager","getRecentlyDeletedStateManager","useRecentlyDeletedStateManager","stateManager","PermanentlyDeleteModal","onConfirm","onDismiss","selectedDashboards","isLoading","props","numberOfDashboards","onDelete","ConfirmModal","Text","RestoreModal","onRestore","RecentlyDeletedActions","dispatch","selectedItemsState","restoreDashboard","isRestoreLoading","deleteDashboard","isDeleteLoading","_","selected","uid","onActionComplete","resultsView","promises","parentUIDs","foundItem","v","folderUID","showRestoreModal","showDeleteModal","Stack","Button","RecentlyDeletedEmptyState","searchState","userIsSearching","EmptyState","RecentlyDeletedPage","styles","getStyles","hasSelection","canEditFolders","canEditDashboards","canSelect","Page","FilterInput","ActionRow","width","height","SearchView","theme","NUM_PLACEHOLDER_ROWS","initialLoadingView","emptyStateProp","selectedItems","wholeState","keyboardEvents","value","selectionChecker","kind","assertDashboardViewItemKind","clearSelection","handleItemSelectionChange","newIsSelected","emptyState","checkFolderPermission","action","folderDTO","checkCanCreateFolders","getFolderPermissions","canCreateDashboards","canCreateFolders","canDeleteFolders","canSetPermissions","canViewPermissions","getLayoutOptions","getValidQueryLayout","q","layout","showStarredFilter","showLayout","sortPlaceholder","onLayoutChange","onSortChange","onStarredFilterChange","onTagFilterChange","getTagOptions","getSortOptions","onDatasourceChange","onPanelTypeChange","onSetIncludePanels","disabledOptions","change","initialState","defaultQueryParams","getLocalStorageLayout","tagToRemove","tag","newTag","datasource","panel_type","e","starred","includePanels","folderUid","doInitialSearch","stateFromUrl","prevSort","trackingInfo","searcher","searchTimestamp","result","error","getSearchStateManager","useSearchStateManager"],"sourceRoot":""}