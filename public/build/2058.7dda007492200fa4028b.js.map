{"version":3,"file":"2058.7dda007492200fa4028b.js","mappings":"4NAkBO,MAAMA,UAA4B,IAA8B,CACrE,YAAYC,EAA8C,CACxD,MAAMA,CAAgB,CACxB,CAEA,iBAAiBC,EAAuB,CACtC,MAAO,wBAAwBA,EAAM,OAAO,EAC9C,CAEA,MAAMC,EAA0E,CAC9E,MAAMC,EAAwCD,EAAQ,YAAY,cAClE,IAAIE,EAAiCD,EAAkBA,EAAe,MAAM,QAAQ,EAAoB,OAExG,GAAID,EAAQ,UAAU,QAAQ,OAAO,EAAI,GACvC,MAAM,IAAI,MAAM,8DAA8D,EAGhF,GAAI,CAACE,EACH,MAAM,IAAI,MAAM,iCAAiC,EAGnD,MAAMH,EAAQC,EAAQ,QAAQ,CAAC,EAC/B,GAAI,CAACD,EACH,SAAOI,EAAA,IAAG,CAAE,KAAM,CAAC,CAAE,CAAC,EAGxB,MAAMC,EAAUL,EAAM,QAEtB,GAAI,CAACK,EACH,SAAOD,EAAA,IAAG,CAAE,KAAM,CAAC,CAAE,CAAC,EAGxB,IAAIE,EAAc,KAAK,gBAAgBH,EAAOE,CAAO,EAErD,GAAI,CAACC,EACH,SAAOF,EAAA,IAAG,CAAE,KAAM,CAAC,EAAG,MAAO,CAAE,QAAS,6BAA8B,CAAE,CAAC,EAG3E,IAAIG,EAAoDD,EAAY,MAAM,MAM1E,MAJI,CAACN,EAAM,gBAAkBO,aAA8B,OACzDA,EAAqBA,EAAmB,MAAM,OAG5C,CAACA,GAAsB,CAACA,EAAmB,oBACtCH,EAAA,IAAG,CAAE,KAAM,CAAC,CAAE,CAAC,KAGjBI,EAAA,GAAM,IAAM,CACb,CAACD,EAAoB,UAAYA,GAAoB,mBACvDA,GAAoB,kBAAkB,GAAG,EAG3C,MAAME,EAAUF,EAAoB,SAAS,EAE7C,OAAOA,EAAoB,iBAAkB,EAAE,QAC7CG,EAAA,GAAKC,IACI,CACL,KAAMA,EAAO,KAAK,OAClB,MAAOA,EAAO,KAAK,MACnB,OAAQA,EAAO,KAAK,OACpB,MAAOA,EAAO,KAAK,MACnB,IAAK,oBACP,EACD,KACDC,EAAA,GAASH,CAAO,CAClB,CACF,CAAC,CACH,CAEQ,gBAAgBN,EAAoBE,EAAiB,CAC3D,SAAO,MAAkBF,KAAO,MAAyBE,CAAO,CAAC,CACnE,CAEA,gBAAkD,CAChD,OAAO,QAAQ,QAAQ,CAAE,QAAS,GAAI,OAAQ,EAAG,CAAC,CACpD,CACF,CC1FO,MAAM,EAAS,IAAI,KAAiBP,CAAmB,EAAE,eAAee,EAAA,CAAoB,C","sources":["webpack://grafana/./public/app/plugins/datasource/dashboard/datasource.ts","webpack://grafana/./public/app/plugins/datasource/dashboard/module.ts"],"sourcesContent":["import { Observable, defer, finalize, map, of } from 'rxjs';\n\nimport {\n  DataSourceApi,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  TestDataSourceResponse,\n  ScopedVar,\n} from '@grafana/data';\nimport { SceneDataProvider, SceneDataTransformer, SceneObject } from '@grafana/scenes';\nimport { findVizPanelByKey, getVizPanelKeyForPanelId } from 'app/features/dashboard-scene/utils/utils';\n\nimport { DashboardQuery } from './types';\n\n/**\n * This should not really be called\n */\nexport class DashboardDatasource extends DataSourceApi<DashboardQuery> {\n  constructor(instanceSettings: DataSourceInstanceSettings) {\n    super(instanceSettings);\n  }\n\n  getCollapsedText(query: DashboardQuery) {\n    return `Dashboard Reference: ${query.panelId}`;\n  }\n\n  query(options: DataQueryRequest<DashboardQuery>): Observable<DataQueryResponse> {\n    const sceneScopedVar: ScopedVar | undefined = options.scopedVars?.__sceneObject;\n    let scene: SceneObject | undefined = sceneScopedVar ? (sceneScopedVar.value.valueOf() as SceneObject) : undefined;\n\n    if (options.requestId.indexOf('mixed') > -1) {\n      throw new Error('Dashboard data source cannot be used with Mixed data source.');\n    }\n\n    if (!scene) {\n      throw new Error('Can only be called from a scene');\n    }\n\n    const query = options.targets[0];\n    if (!query) {\n      return of({ data: [] });\n    }\n\n    const panelId = query.panelId;\n\n    if (!panelId) {\n      return of({ data: [] });\n    }\n\n    let sourcePanel = this.findSourcePanel(scene, panelId);\n\n    if (!sourcePanel) {\n      return of({ data: [], error: { message: 'Could not find source panel' } });\n    }\n\n    let sourceDataProvider: SceneDataProvider | undefined = sourcePanel.state.$data;\n\n    if (!query.withTransforms && sourceDataProvider instanceof SceneDataTransformer) {\n      sourceDataProvider = sourceDataProvider.state.$data;\n    }\n\n    if (!sourceDataProvider || !sourceDataProvider.getResultsStream) {\n      return of({ data: [] });\n    }\n\n    return defer(() => {\n      if (!sourceDataProvider!.isActive && sourceDataProvider?.setContainerWidth) {\n        sourceDataProvider?.setContainerWidth(500);\n      }\n\n      const cleanUp = sourceDataProvider!.activate();\n\n      return sourceDataProvider!.getResultsStream!().pipe(\n        map((result) => {\n          return {\n            data: result.data.series,\n            state: result.data.state,\n            errors: result.data.errors,\n            error: result.data.error,\n            key: 'source-ds-provider',\n          };\n        }),\n        finalize(cleanUp)\n      );\n    });\n  }\n\n  private findSourcePanel(scene: SceneObject, panelId: number) {\n    return findVizPanelByKey(scene, getVizPanelKeyForPanelId(panelId));\n  }\n\n  testDatasource(): Promise<TestDataSourceResponse> {\n    return Promise.resolve({ message: '', status: '' });\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport { DashboardQueryEditor } from './DashboardQueryEditor';\nimport { DashboardDatasource } from './datasource';\n\nexport const plugin = new DataSourcePlugin(DashboardDatasource).setQueryEditor(DashboardQueryEditor);\n"],"names":["DashboardDatasource","instanceSettings","query","options","sceneScopedVar","scene","of","panelId","sourcePanel","sourceDataProvider","defer","cleanUp","map","result","finalize","DashboardQueryEditor"],"sourceRoot":""}