{"version":3,"file":"influxdbPlugin.a92455128ea404b01663.js","mappings":"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AAY,YAAYO,EAAQ,KAAK,IAAI,CAAC,GAC5C,CAEA,OAAIT,EAAI,SAAS,SAAS,OACxBE,GAAY,aAAaF,EAAI,QAAQ,SAAS,IAAI,MAGhDA,EAAI,SAAS,SAAS,MAAQA,EAAI,mBACpCE,GAAY,GAAGF,EAAI,gBAAgB,KAIjCU,GAAQV,EAAI,KAAK,IACnBE,GAAY,SAASF,EAAI,KAAK,IAGzBE,CACT,CAIA,SAASI,GAAgBK,EAAuC,CAC9D,OAAIA,IAAc,IACTA,EAGF,IAAIA,CAAS,GACtB,CAEA,MAAMD,GAAWE,GAAuCA,IAAU,QAAaA,GAAS,EAGjF,SAASC,GAA2BxE,EAAe,CACxD,OAAOyE,GAAkBzE,CAAK,EAAIA,EAAQ,IAAKA,CAAK,GACtD,CAMO,SAASyE,GAAkBC,EAA6B,CAC7D,MAAMC,EAAc,6BAA6B,KAAKD,CAAU,EAEhE,MAAO,CADgBE,GAAe,SAASF,EAAW,YAAY,CAAC,GAC7CC,CAC5B,CAEA,MAAMC,GAAiB,CACrB,aACA,MACA,MACA,QACA,UACA,MACA,KACA,MACA,aACA,SACA,UACA,SACA,SACA,OACA,OACA,KACA,OACA,UACA,OACA,SACA,OACA,YACA,QACA,UACA,SACA,YACA,aACA,WACA,UACA,SACA,QACA,OACA,YACA,eACA,eACA,oBACA,eACA,SACA,WACA,YACA,WACA,kBACA,aACA,aACA,MACA,UACA,UACA,UACA,UACA,SACA,aACA,OACA,WACA,gBACA,WACA,cACA,MACA,SACA,OACA,OACA,OACA,OACA,SACA,QACA,WACA,UACA,SACA,SACA,OACA,UACA,QACA,QACA,cACA,QACA,SACA,SACA,MACA,QACA,UACA,OACA,WACA,WACA,YACA,MACA,QACA,QACA,WACA,SACA,SACA,gBACA,mBACA,cACA,cACA,KACA,SACA,KACA,QACA,SACA,QACA,QACA,cACA,SACA,MACA,OACA,OACA,OACA,OACA,OACA,UACA,YACA,WACA,OACA,iBACA,kBACA,KACA,UACA,OACA,aACA,MACA,OACA,OACA,MACA,aACA,UACA,OACA,UACA,QACA,OACA,OACA,QACA,SACA,QACA,OACA,YACA,iBACA,OACA,OACA,WACA,WACA,OACA,eACA,cACA,gCACA,QACA,WACA,aACA,YACA,aACA,YACA,qBACA,gBACA,MACA,WACA,UACA,MACA,qBACA,YACA,QACA,OACA,UACA,KACA,KACA,WACA,kBACA,SACA,aACA,KACA,QACA,MACA,QACA,UACA,OACA,YACA,eACA,YACA,UACA,YACA,QACA,QACA,OACA,OACA,QACA,aACA,OACA,YACA,aACA,SACA,UACA,SACA,SACA,UACA,UACA,WACA,WACA,SACA,SACA,QACA,QACA,MACA,OACA,aACA,SACA,UACA,qBACA,SACA,YACA,YACA,MACA,OACA,SACA,WACA,UACA,WACA,MACA,eACA,WACA,aACA,iBACA,sBACA,mBACA,MACA,WACA,SACA,gBACA,SACA,QACA,aACA,OACA,WACA,UACA,WACA,KACA,WACA,UACA,OACA,OACA,QACA,SACA,SACA,WACA,SACA,QACA,MACA,QACA,WACA,WACA,gBACA,SACA,YACA,UACA,eACA,UACA,UACA,OACA,QACA,QACA,SACA,OACA,QACA,MACA,aACA,UACF,ECvWO,SAASC,GAAgBC,EAAkB,CAEhD,MAAO,yEADUA,IAAY,OAAYC,EAAoBD,CAAO,EAAI,YACgB,sBAC1F,CAEO,SAASE,IAAgB,CAC9B,MAAO,qHACT,CAEO,SAASC,GAAiBrB,EAAesB,EAAiB,CAC/D,IAAIzF,EAAQ,uEACZ,OAAAA,GAAS0F,GAAqBvB,EAAOsB,CAAM,EAE3CzF,GAAS,wBAEFA,CACT,CAEO,SAAS0F,GAAqBvB,EAAesB,EAAiB,CACnE,IAAIzF,EAAQ,GAGZ,GAAImE,EAAM,SAAS,GAAG,EAAG,CACvB,MAAMlE,EAAQkE,EAAM,MAAM,GAAG,EAC7B,OAAAnE,EAAQ,kBAAoBsF,EAAoBrF,EAAM,CAAC,CAAC,EACxDD,GAAS,qBAAuBsF,EAAoBrF,EAAM,CAAC,CAAC,EACrDD,CACT,KAEE,QAAAA,EAAQ,kBADSyF,IAAW,OAAYH,EAAoBG,CAAM,EAAI,YACpC,qB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","sources":["webpack://grafana/./public/app/plugins/datasource/influxdb/constants.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/types.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/config/constants.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/config/InfluxFluxConfig.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/config/InfluxInfluxQLConfig.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/config/InfluxSQLConfig.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/config/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/query_part.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/influx_query_model.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/queryUtils.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/flux/FluxQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/fsql/fields.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/fsql/sqlUtil.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/fsql/flightsqlMetaQuery.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/fsql/sqlCompletionProvider.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/fsql/datasource.flightsql.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/fsql/FSQLEditor.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/QueryEditorModeSwitcher.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/constants.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/hooks/useShadowedState.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/code/RawInfluxQLEditor.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/influxql_query_builder.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/influxql_metadata_query.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/utils/filterTags.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/utils/toSelectableValue.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/utils/unwrap.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/utils/partListUtils.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/utils/getTemplateVariableOptions.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/utils/withTemplateVariableOptions.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/utils/wrapper.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/visual/styles.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/visual/FormatAsSection.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/visual/Seg.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/visual/FromSection.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/visual/InputSection.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/visual/OrderByTimeSection.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/visual/AddButton.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/visual/PartListSection.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/utils/tagUtils.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/visual/TagsSection.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/visual/VisualInfluxQLEditor.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/QueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/InfluxCheatSheet.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/query/influxql/InfluxStartPage.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/annotation/AnnotationEditor.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/influx_series.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/migrations.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/response_parser.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/editor/variable/VariableQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/variables.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/datasource.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/module.ts"],"sourcesContent":["export const BROWSER_MODE_DISABLED_MESSAGE =\n  'Direct browser access in the InfluxDB datasource is no longer available. Switch to server access mode.';\n","import { AdHocVariableFilter, DataQuery, DataSourceJsonData } from '@grafana/data';\n\nexport const DEFAULT_POLICY = 'default';\n\nexport enum InfluxVersion {\n  InfluxQL = 'InfluxQL',\n  Flux = 'Flux',\n  SQL = 'SQL',\n}\n\nexport interface InfluxOptions extends DataSourceJsonData {\n  version?: InfluxVersion;\n\n  timeInterval?: string;\n  httpMode?: string;\n\n  dbName?: string;\n\n  // With Flux\n  organization?: string;\n  defaultBucket?: string;\n  maxSeries?: number;\n\n  // With SQL\n  metadata?: Array<Record<string, string>>;\n  insecureGrpc?: boolean;\n}\n\n/**\n * @deprecated\n */\nexport interface InfluxOptionsV1 extends InfluxOptions {\n  user?: string;\n  database?: string;\n}\n\nexport interface InfluxSecureJsonData {\n  // For Flux\n  token?: string;\n\n  // In 1x a different password can be sent than then HTTP auth\n  password?: string;\n}\n\nexport interface InfluxQueryPart {\n  type: string;\n  params?: Array<string | number>;\n  // FIXME: `interval` does not seem to be used.\n  // check all the influxdb parts (query-generation etc.),\n  // if it is really so, and if yes, remove it\n  interval?: string;\n}\n\nexport interface InfluxQueryTag {\n  key: string;\n  operator?: string;\n  condition?: string;\n  value: string;\n}\n\nexport type ResultFormat = 'time_series' | 'table' | 'logs';\n\nexport interface InfluxVariableQuery extends DataQuery {\n  query: string;\n  maxDataPoints?: number;\n}\n\nexport interface InfluxQuery extends DataQuery {\n  policy?: string;\n  measurement?: string;\n  resultFormat?: ResultFormat;\n  orderByTime?: string;\n  tags?: InfluxQueryTag[];\n  groupBy?: InfluxQueryPart[];\n  select?: InfluxQueryPart[][];\n  limit?: string | number;\n  slimit?: string | number;\n  tz?: string;\n  // NOTE: `fill` is not used in the query-editor anymore, and is removed\n  // if any change happens in the query-editor. the query-generation still\n  // supports it for now.\n  fill?: string;\n  rawQuery?: boolean;\n  query?: string;\n  alias?: string;\n  // for migrated InfluxQL annotations\n  queryType?: string;\n  fromAnnotations?: boolean;\n  tagsColumn?: string;\n  textColumn?: string;\n  timeEndColumn?: string;\n  titleColumn?: string;\n  name?: string;\n  matchAny?: boolean;\n  type?: string;\n\n  textEditor?: boolean;\n  adhocFilters?: AdHocVariableFilter[];\n}\n\nexport type MetadataQueryType = 'TAG_KEYS' | 'TAG_VALUES' | 'MEASUREMENTS' | 'FIELDS' | 'RETENTION_POLICIES';\n","export const WIDTH_SHORT = 20;\n","import { uniqueId } from 'lodash';\n\nimport {\n  DataSourcePluginOptionsEditorProps,\n  onUpdateDatasourceJsonDataOption,\n  onUpdateDatasourceSecureJsonDataOption,\n  updateDatasourcePluginResetOption,\n} from '@grafana/data';\nimport { InlineField, InlineFieldRow, Input, SecretInput } from '@grafana/ui';\n\nimport { InfluxOptions, InfluxSecureJsonData } from '../../../types';\n\nimport { WIDTH_SHORT } from './constants';\n\nexport type Props = DataSourcePluginOptionsEditorProps<InfluxOptions, InfluxSecureJsonData>;\n\nexport const InfluxFluxConfig = (props: Props) => {\n  const {\n    options: { jsonData, secureJsonData, secureJsonFields },\n  } = props;\n  const htmlPrefix = uniqueId('influxdb-flux-config');\n\n  return (\n    <>\n      <InlineFieldRow>\n        <InlineField labelWidth={WIDTH_SHORT} label=\"Organization\" htmlFor={`${htmlPrefix}-org`}>\n          <Input\n            id={`${htmlPrefix}-org`}\n            className=\"width-20\"\n            value={jsonData.organization || ''}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'organization')}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField labelWidth={WIDTH_SHORT} label=\"Token\">\n          <SecretInput\n            isConfigured={Boolean(secureJsonFields && secureJsonFields.token)}\n            value={secureJsonData?.token || ''}\n            label=\"Token\"\n            aria-label=\"Token\"\n            className=\"width-20\"\n            onReset={() => updateDatasourcePluginResetOption(props, 'token')}\n            onChange={onUpdateDatasourceSecureJsonDataOption(props, 'token')}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField labelWidth={WIDTH_SHORT} label=\"Default Bucket\">\n          <Input\n            className=\"width-20\"\n            placeholder=\"default bucket\"\n            value={jsonData.defaultBucket || ''}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'defaultBucket')}\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          labelWidth={WIDTH_SHORT}\n          label=\"Min time interval\"\n          tooltip=\"A lower limit for the auto group by time interval. Recommended to be set to write frequency,\n\t\t\t\tfor example 1m if your data is written every minute.\"\n        >\n          <Input\n            className=\"width-20\"\n            placeholder=\"10s\"\n            value={jsonData.timeInterval || ''}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'timeInterval')}\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport { uniqueId } from 'lodash';\n\nimport {\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme2,\n  onUpdateDatasourceJsonDataOption,\n  onUpdateDatasourceJsonDataOptionSelect,\n  onUpdateDatasourceOption,\n  onUpdateDatasourceSecureJsonDataOption,\n  SelectableValue,\n  updateDatasourcePluginResetOption,\n} from '@grafana/data';\nimport { Alert, Field, InlineLabel, Input, SecretInput, Select, useStyles2 } from '@grafana/ui';\n\nimport { InfluxOptions, InfluxSecureJsonData } from '../../../types';\n\nimport { WIDTH_SHORT } from './constants';\n\nconst httpModes: SelectableValue[] = [\n  { label: 'GET', value: 'GET' },\n  { label: 'POST', value: 'POST' },\n];\n\nexport type Props = DataSourcePluginOptionsEditorProps<InfluxOptions, InfluxSecureJsonData>;\n\nexport const InfluxInfluxQLConfig = (props: Props) => {\n  const { options, onOptionsChange } = props;\n  const { database, jsonData, secureJsonData, secureJsonFields } = options;\n  const styles = useStyles2(getStyles);\n\n  const htmlPrefix = uniqueId('influxdb-influxql-config');\n\n  return (\n    <>\n      <Alert severity=\"info\" title=\"Database Access\">\n        <p>\n          Setting the database for this datasource does not deny access to other databases. The InfluxDB query syntax\n          allows switching the database in the query. For example:\n          <code>SHOW MEASUREMENTS ON _internal</code> or\n          <code>SELECT * FROM &quot;_internal&quot;..&quot;database&quot; LIMIT 10</code>\n          <br />\n          <br />\n          To support data isolation and security, make sure appropriate permissions are configured in InfluxDB.\n        </p>\n      </Alert>\n\n      <Field\n        horizontal\n        label={<InlineLabel width={WIDTH_SHORT}>Database</InlineLabel>}\n        className={styles.horizontalField}\n        htmlFor={`${htmlPrefix}-db`}\n      >\n        <Input\n          id={`${htmlPrefix}-db`}\n          className=\"width-20\"\n          value={jsonData.dbName ?? database}\n          onChange={(event) => {\n            onOptionsChange({\n              ...options,\n              database: '',\n              jsonData: {\n                ...jsonData,\n                dbName: event.currentTarget.value,\n              },\n            });\n          }}\n        />\n      </Field>\n      <Field\n        horizontal\n        label={<InlineLabel width={WIDTH_SHORT}>User</InlineLabel>}\n        className={styles.horizontalField}\n        htmlFor={`${htmlPrefix}-user`}\n      >\n        <Input\n          id={`${htmlPrefix}-user`}\n          className=\"width-20\"\n          value={options.user || ''}\n          onChange={onUpdateDatasourceOption(props, 'user')}\n        />\n      </Field>\n      <Field\n        horizontal\n        label={<InlineLabel width={WIDTH_SHORT}>Password</InlineLabel>}\n        className={styles.horizontalField}\n      >\n        <SecretInput\n          isConfigured={Boolean(secureJsonFields && secureJsonFields.password)}\n          value={secureJsonData?.password || ''}\n          label=\"Password\"\n          aria-label=\"Password\"\n          className=\"width-20\"\n          onReset={() => updateDatasourcePluginResetOption(props, 'password')}\n          onChange={onUpdateDatasourceSecureJsonDataOption(props, 'password')}\n        />\n      </Field>\n      <Field\n        horizontal\n        label={\n          <InlineLabel\n            width={WIDTH_SHORT}\n            tooltip=\"You can use either GET or POST HTTP method to query your InfluxDB database. The POST\n          method allows you to perform heavy requests (with a lots of WHERE clause) while the GET method\n          will restrict you and return an error if the query is too large.\"\n          >\n            HTTP Method\n          </InlineLabel>\n        }\n        htmlFor={`${htmlPrefix}-http-method`}\n        className={styles.horizontalField}\n      >\n        <Select\n          inputId={`${htmlPrefix}-http-method`}\n          className=\"width-20\"\n          value={httpModes.find((httpMode) => httpMode.value === options.jsonData.httpMode)}\n          options={httpModes}\n          defaultValue={options.jsonData.httpMode}\n          onChange={onUpdateDatasourceJsonDataOptionSelect(props, 'httpMode')}\n        />\n      </Field>\n\n      <Field\n        horizontal\n        label={\n          <InlineLabel\n            width={WIDTH_SHORT}\n            tooltip=\"A lower limit for the auto group by time interval. Recommended to be set to write frequency, for example 1m if your data is written every minute.\"\n          >\n            Min time interval\n          </InlineLabel>\n        }\n        className={styles.horizontalField}\n      >\n        <Input\n          className=\"width-20\"\n          placeholder=\"10s\"\n          value={options.jsonData.timeInterval || ''}\n          onChange={onUpdateDatasourceJsonDataOption(props, 'timeInterval')}\n        />\n      </Field>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  horizontalField: css({\n    justifyContent: 'initial',\n    margin: `0 ${theme.spacing(0.5)} ${theme.spacing(0.5)} 0`,\n  }),\n});\n","import { css } from '@emotion/css';\nimport { uniqueId } from 'lodash';\n\nimport {\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme2,\n  onUpdateDatasourceSecureJsonDataOption,\n  updateDatasourcePluginResetOption,\n} from '@grafana/data';\nimport { Field, InlineLabel, InlineSwitch, Input, SecretInput, useStyles2 } from '@grafana/ui';\n\nimport { InfluxOptions, InfluxSecureJsonData } from '../../../types';\n\nimport { WIDTH_SHORT } from './constants';\n\nexport type Props = DataSourcePluginOptionsEditorProps<InfluxOptions, InfluxSecureJsonData>;\n\nexport const InfluxSqlConfig = (props: Props) => {\n  const { options, onOptionsChange } = props;\n  const { jsonData, secureJsonData, secureJsonFields } = options;\n  const styles = useStyles2(getStyles);\n  const htmlPrefix = uniqueId('influxdb-sql-config');\n\n  return (\n    <div>\n      <Field\n        horizontal\n        label={<InlineLabel width={WIDTH_SHORT}>Database</InlineLabel>}\n        className={styles.horizontalField}\n        htmlFor={`${htmlPrefix}-dbName`}\n      >\n        <Input\n          id={`${htmlPrefix}-dbName`}\n          className=\"width-20\"\n          aria-label=\"Database or bucket name\"\n          value={jsonData.dbName}\n          onChange={(event) => {\n            onOptionsChange({\n              ...options,\n              jsonData: {\n                ...jsonData,\n                dbName: event.currentTarget.value,\n              },\n            });\n          }}\n        />\n      </Field>\n      <Field horizontal label={<InlineLabel width={WIDTH_SHORT}>Token</InlineLabel>} className={styles.horizontalField}>\n        <SecretInput\n          label=\"Token\"\n          aria-label=\"Token\"\n          className=\"width-20\"\n          value={secureJsonData?.token || ''}\n          onReset={() => updateDatasourcePluginResetOption(props, 'token')}\n          onChange={onUpdateDatasourceSecureJsonDataOption(props, 'token')}\n          isConfigured={Boolean(secureJsonFields && secureJsonFields.token)}\n        />\n      </Field>\n      <Field\n        horizontal\n        label={<InlineLabel width={WIDTH_SHORT}>Insecure Connection</InlineLabel>}\n        className={styles.horizontalField}\n      >\n        <InlineSwitch\n          id={`${htmlPrefix}-insecure-grpc`}\n          value={jsonData.insecureGrpc ?? false}\n          onChange={(event) => {\n            onOptionsChange({\n              ...options,\n              jsonData: {\n                ...jsonData,\n                insecureGrpc: event.currentTarget.checked,\n              },\n            });\n          }}\n        />\n      </Field>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  horizontalField: css({\n    justifyContent: 'initial',\n    margin: `0 ${theme.spacing(0.5)} ${theme.spacing(0.5)} 0`,\n  }),\n});\n","import { uniqueId } from 'lodash';\nimport { PureComponent } from 'react';\n\nimport {\n  DataSourcePluginOptionsEditorProps,\n  DataSourceSettings,\n  SelectableValue,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Alert, DataSourceHttpSettings, InlineField, Select, Field, Input, FieldSet } from '@grafana/ui';\n\nimport { BROWSER_MODE_DISABLED_MESSAGE } from '../../../constants';\nimport { InfluxOptions, InfluxOptionsV1, InfluxVersion } from '../../../types';\n\nimport { InfluxFluxConfig } from './InfluxFluxConfig';\nimport { InfluxInfluxQLConfig } from './InfluxInfluxQLConfig';\nimport { InfluxSqlConfig } from './InfluxSQLConfig';\n\nconst versionMap: Record<InfluxVersion, SelectableValue<InfluxVersion>> = {\n  [InfluxVersion.InfluxQL]: {\n    label: 'InfluxQL',\n    value: InfluxVersion.InfluxQL,\n    description: 'The InfluxDB SQL-like query language.',\n  },\n  [InfluxVersion.SQL]: {\n    label: 'SQL',\n    value: InfluxVersion.SQL,\n    description: 'Native SQL language. Supported in InfluxDB 3.0',\n  },\n  [InfluxVersion.Flux]: {\n    label: 'Flux',\n    value: InfluxVersion.Flux,\n    description: 'Supported in InfluxDB 2.x and 1.8+',\n  },\n};\n\nconst versions: Array<SelectableValue<InfluxVersion>> = [\n  versionMap[InfluxVersion.InfluxQL],\n  versionMap[InfluxVersion.SQL],\n  versionMap[InfluxVersion.Flux],\n];\n\nexport type Props = DataSourcePluginOptionsEditorProps<InfluxOptions>;\ntype State = {\n  maxSeries: string | undefined;\n};\n\nexport class ConfigEditor extends PureComponent<Props, State> {\n  state = {\n    maxSeries: '',\n  };\n\n  htmlPrefix: string;\n\n  constructor(props: Props) {\n    super(props);\n    this.state.maxSeries = props.options.jsonData.maxSeries?.toString() || '';\n    this.htmlPrefix = uniqueId('influxdb-config');\n  }\n\n  versionNotice = {\n    Flux: 'Support for Flux in Grafana is currently in beta',\n    SQL: 'Support for SQL in Grafana is currently in alpha',\n  };\n\n  onVersionChanged = (selected: SelectableValue<InfluxVersion>) => {\n    const { options, onOptionsChange } = this.props;\n\n    const copy: DataSourceSettings<InfluxOptionsV1, {}> = {\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        version: selected.value,\n      },\n    };\n    if (selected.value === InfluxVersion.Flux) {\n      copy.access = 'proxy';\n      copy.basicAuth = true;\n      copy.jsonData.httpMode = 'POST';\n\n      // Remove old 1x configs\n      const { user, database, ...rest } = copy;\n\n      onOptionsChange(rest as DataSourceSettings<InfluxOptions, {}>);\n    } else {\n      onOptionsChange(copy);\n    }\n  };\n\n  renderJsonDataOptions() {\n    switch (this.props.options.jsonData.version) {\n      case InfluxVersion.InfluxQL:\n        return <InfluxInfluxQLConfig {...this.props} />;\n      case InfluxVersion.Flux:\n        return <InfluxFluxConfig {...this.props} />;\n      case InfluxVersion.SQL:\n        return <InfluxSqlConfig {...this.props} />;\n      default:\n        return <InfluxInfluxQLConfig {...this.props} />;\n    }\n  }\n\n  render() {\n    const { options, onOptionsChange } = this.props;\n    const isDirectAccess = options.access === 'direct';\n\n    return (\n      <>\n        <FieldSet>\n          <h3 className=\"page-heading\">Query language</h3>\n          <Field>\n            <Select\n              aria-label=\"Query language\"\n              className=\"width-30\"\n              value={versionMap[options.jsonData.version ?? InfluxVersion.InfluxQL]}\n              options={versions}\n              defaultValue={versionMap[InfluxVersion.InfluxQL]}\n              onChange={this.onVersionChanged}\n            />\n          </Field>\n        </FieldSet>\n\n        {options.jsonData.version !== InfluxVersion.InfluxQL && (\n          <Alert severity=\"info\" title={this.versionNotice[options.jsonData.version!]}>\n            <p>\n              Please report any issues to: <br />\n              <a href=\"https://github.com/grafana/grafana/issues/new/choose\">\n                https://github.com/grafana/grafana/issues\n              </a>\n            </p>\n          </Alert>\n        )}\n\n        {isDirectAccess && (\n          <Alert title=\"Error\" severity=\"error\">\n            {BROWSER_MODE_DISABLED_MESSAGE}\n          </Alert>\n        )}\n\n        <DataSourceHttpSettings\n          showAccessOptions={isDirectAccess}\n          dataSourceConfig={options}\n          defaultUrl=\"http://localhost:8086\"\n          onChange={onOptionsChange}\n          secureSocksDSProxyEnabled={config.secureSocksDSProxyEnabled}\n        />\n        <FieldSet>\n          <h3 className=\"page-heading\">InfluxDB Details</h3>\n          {this.renderJsonDataOptions()}\n          <InlineField\n            labelWidth={20}\n            label=\"Max series\"\n            tooltip=\"Limit the number of series/tables that Grafana will process. Lower this number to prevent abuse, and increase it if you have lots of small time series and not all are shown. Defaults to 1000.\"\n          >\n            <Input\n              placeholder=\"1000\"\n              type=\"number\"\n              className=\"width-20\"\n              value={this.state.maxSeries}\n              onChange={(event: { currentTarget: { value: string } }) => {\n                // We duplicate this state so that we allow to write freely inside the input. We don't have\n                // any influence over saving so this seems to be only way to do this.\n                this.setState({ maxSeries: event.currentTarget.value });\n                const val = parseInt(event.currentTarget.value, 10);\n                updateDatasourcePluginJsonDataOption(this.props, 'maxSeries', Number.isFinite(val) ? val : undefined);\n              }}\n            />\n          </InlineField>\n        </FieldSet>\n      </>\n    );\n  }\n}\n\nexport default ConfigEditor;\n","import { clone, map } from 'lodash';\n\nimport { functionRenderer, QueryPart, QueryPartDef, suffixRenderer } from 'app/features/alerting/state/query_part';\n\nconst index: any[] = [];\nconst categories: any = {\n  Aggregations: [],\n  Selectors: [],\n  Transformations: [],\n  Predictors: [],\n  Math: [],\n  Aliasing: [],\n  Fields: [],\n};\n\nfunction createPart(part: any) {\n  const def = index[part.type];\n  if (!def) {\n    throw { message: 'Could not find query part ' + part.type };\n  }\n\n  return new QueryPart(part, def);\n}\n\nfunction register(options: any) {\n  index[options.type] = new QueryPartDef(options);\n  options.category.push(index[options.type]);\n}\n\nconst groupByTimeFunctions: any[] = [];\n\nfunction aliasRenderer(part: { params: string[] }, innerExpr: string) {\n  return innerExpr + ' AS ' + '\"' + part.params[0] + '\"';\n}\n\nfunction fieldRenderer(part: { params: string[] }) {\n  const param = part.params[0];\n\n  if (param === '*') {\n    return '*';\n  }\n\n  let escapedParam = `\"${param}\"`;\n\n  if (param.endsWith('::tag')) {\n    escapedParam = `\"${param.slice(0, -5)}\"::tag`;\n  }\n\n  if (param.endsWith('::field')) {\n    escapedParam = `\"${param.slice(0, -7)}\"::field`;\n  }\n\n  return escapedParam;\n}\n\nfunction replaceAggregationAddStrategy(selectParts: any[], partModel: { def: { type: string } }) {\n  // look for existing aggregation\n  for (let i = 0; i < selectParts.length; i++) {\n    const part = selectParts[i];\n    if (part.def.category === categories.Aggregations) {\n      if (part.def.type === partModel.def.type) {\n        return;\n      }\n      // count distinct is allowed\n      if (part.def.type === 'count' && partModel.def.type === 'distinct') {\n        break;\n      }\n      // remove next aggregation if distinct was replaced\n      if (part.def.type === 'distinct') {\n        const morePartsAvailable = selectParts.length >= i + 2;\n        if (partModel.def.type !== 'count' && morePartsAvailable) {\n          const nextPart = selectParts[i + 1];\n          if (nextPart.def.category === categories.Aggregations) {\n            selectParts.splice(i + 1, 1);\n          }\n        } else if (partModel.def.type === 'count') {\n          if (!morePartsAvailable || selectParts[i + 1].def.type !== 'count') {\n            selectParts.splice(i + 1, 0, partModel);\n          }\n          return;\n        }\n      }\n      selectParts[i] = partModel;\n      return;\n    }\n    if (part.def.category === categories.Selectors) {\n      selectParts[i] = partModel;\n      return;\n    }\n  }\n\n  selectParts.splice(1, 0, partModel);\n}\n\nfunction addTransformationStrategy(selectParts: any[], partModel: any) {\n  let i;\n  // look for index to add transformation\n  for (i = 0; i < selectParts.length; i++) {\n    const part = selectParts[i];\n    if (part.def.category === categories.Math || part.def.category === categories.Aliasing) {\n      break;\n    }\n  }\n\n  selectParts.splice(i, 0, partModel);\n}\n\nfunction addMathStrategy(selectParts: any[], partModel: any) {\n  const partCount = selectParts.length;\n  if (partCount > 0) {\n    // if last is math, replace it\n    if (selectParts[partCount - 1].def.type === 'math') {\n      selectParts[partCount - 1] = partModel;\n      return;\n    }\n    // if next to last is math, replace it\n    if (partCount > 1 && selectParts[partCount - 2].def.type === 'math') {\n      selectParts[partCount - 2] = partModel;\n      return;\n    } else if (selectParts[partCount - 1].def.type === 'alias') {\n      // if last is alias add it before\n      selectParts.splice(partCount - 1, 0, partModel);\n      return;\n    }\n  }\n  selectParts.push(partModel);\n}\n\nfunction addAliasStrategy(selectParts: any[], partModel: any) {\n  const partCount = selectParts.length;\n  if (partCount > 0) {\n    // if last is alias, replace it\n    if (selectParts[partCount - 1].def.type === 'alias') {\n      selectParts[partCount - 1] = partModel;\n      return;\n    }\n  }\n  selectParts.push(partModel);\n}\n\nfunction addFieldStrategy(selectParts: any, partModel: any, query: { selectModels: any[][] }) {\n  // copy all parts\n  const parts = map(selectParts, (part) => {\n    return createPart({ type: part.def.type, params: clone(part.params) });\n  });\n\n  query.selectModels.push(parts);\n}\n\nregister({\n  type: 'field',\n  addStrategy: addFieldStrategy,\n  category: categories.Fields,\n  params: [{ type: 'field', dynamicLookup: true }],\n  defaultParams: ['value'],\n  renderer: fieldRenderer,\n});\n\n// Aggregations\nregister({\n  type: 'count',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'distinct',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'integral',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'mean',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'median',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'mode',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'sum',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\n// transformations\n\nregister({\n  type: 'derivative',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [\n    {\n      name: 'duration',\n      type: 'interval',\n      options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['10s'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'spread',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'non_negative_derivative',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [\n    {\n      name: 'duration',\n      type: 'interval',\n      options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['10s'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'difference',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'non_negative_difference',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'moving_average',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [{ name: 'window', type: 'int', options: [5, 10, 20, 30, 40] }],\n  defaultParams: [10],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'cumulative_sum',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'stddev',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'time',\n  category: groupByTimeFunctions,\n  params: [\n    {\n      name: 'interval',\n      type: 'time',\n      options: ['$__interval', '1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['$__interval'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'fill',\n  category: groupByTimeFunctions,\n  params: [\n    {\n      name: 'fill',\n      type: 'string',\n      options: ['none', 'null', '0', 'previous', 'linear'],\n    },\n  ],\n  defaultParams: ['null'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'elapsed',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [\n    {\n      name: 'duration',\n      type: 'interval',\n      options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['10s'],\n  renderer: functionRenderer,\n});\n\n// predictions\nregister({\n  type: 'holt_winters',\n  addStrategy: addTransformationStrategy,\n  category: categories.Predictors,\n  params: [\n    { name: 'number', type: 'int', options: [5, 10, 20, 30, 40] },\n    { name: 'season', type: 'int', options: [0, 1, 2, 5, 10] },\n  ],\n  defaultParams: [10, 2],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'holt_winters_with_fit',\n  addStrategy: addTransformationStrategy,\n  category: categories.Predictors,\n  params: [\n    { name: 'number', type: 'int', options: [5, 10, 20, 30, 40] },\n    { name: 'season', type: 'int', options: [0, 1, 2, 5, 10] },\n  ],\n  defaultParams: [10, 2],\n  renderer: functionRenderer,\n});\n\n// Selectors\nregister({\n  type: 'bottom',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [3],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'first',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'last',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'max',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'min',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'percentile',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{ name: 'nth', type: 'int' }],\n  defaultParams: [95],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'top',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [3],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'tag',\n  category: groupByTimeFunctions,\n  params: [{ name: 'tag', type: 'string', dynamicLookup: true }],\n  defaultParams: ['tag'],\n  renderer: fieldRenderer,\n});\n\nregister({\n  type: 'math',\n  addStrategy: addMathStrategy,\n  category: categories.Math,\n  params: [{ name: 'expr', type: 'string' }],\n  defaultParams: [' / 100'],\n  renderer: suffixRenderer,\n});\n\nregister({\n  type: 'alias',\n  addStrategy: addAliasStrategy,\n  category: categories.Aliasing,\n  params: [{ name: 'name', type: 'string', quote: 'double' }],\n  defaultParams: ['alias'],\n  renderMode: 'suffix',\n  renderer: aliasRenderer,\n});\n\nexport default {\n  create: createPart,\n  getCategories: () => {\n    return categories;\n  },\n  replaceAggregationAdd: replaceAggregationAddStrategy,\n};\n","import { filter, find, indexOf, map } from 'lodash';\n\nimport { AdHocVariableFilter, escapeRegex, ScopedVars } from '@grafana/data';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { QueryPart } from 'app/features/alerting/state/query_part';\n\nimport { removeRegexWrapper } from './queryUtils';\nimport queryPart from './query_part';\nimport { DEFAULT_POLICY, InfluxQuery, InfluxQueryTag } from './types';\n\nexport default class InfluxQueryModel {\n  target: InfluxQuery;\n  selectModels: QueryPart[][] = [];\n  queryBuilder: any;\n  groupByParts: QueryPart[] = [];\n  templateSrv: any;\n  scopedVars: ScopedVars | undefined;\n  refId?: string;\n\n  constructor(target: InfluxQuery, templateSrv?: TemplateSrv, scopedVars?: ScopedVars) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n\n    target.policy = target.policy || DEFAULT_POLICY;\n    target.resultFormat = target.resultFormat || 'time_series';\n    target.orderByTime = target.orderByTime || 'ASC';\n    target.tags = target.tags || [];\n    target.groupBy = target.groupBy || [\n      { type: 'time', params: ['$__interval'] },\n      { type: 'fill', params: ['null'] },\n    ];\n    target.select = target.select || [\n      [\n        { type: 'field', params: ['value'] },\n        { type: 'mean', params: [] },\n      ],\n    ];\n\n    this.updateProjection();\n  }\n\n  updateProjection() {\n    this.selectModels = map(this.target.select, (parts) => {\n      return map(parts, queryPart.create);\n    });\n    this.groupByParts = map(this.target.groupBy, queryPart.create);\n  }\n\n  updatePersistedParts() {\n    this.target.select = map(this.selectModels, (selectParts) => {\n      return map(selectParts, (part) => {\n        return { type: part.def.type, params: part.params };\n      });\n    });\n  }\n\n  hasGroupByTime() {\n    return find(this.target.groupBy, (g) => g.type === 'time');\n  }\n\n  hasFill() {\n    return find(this.target.groupBy, (g) => g.type === 'fill');\n  }\n\n  addGroupBy(value: string) {\n    let stringParts = value.match(/^(\\w+)\\((.*)\\)$/);\n\n    if (!stringParts || !this.target.groupBy) {\n      return;\n    }\n\n    const typePart = stringParts[1];\n    const arg = stringParts[2];\n    const partModel = queryPart.create({ type: typePart, params: [arg] });\n    const partCount = this.target.groupBy.length;\n\n    if (partCount === 0) {\n      this.target.groupBy.push(partModel.part);\n    } else if (typePart === 'time') {\n      this.target.groupBy.splice(0, 0, partModel.part);\n    } else if (typePart === 'tag') {\n      if (this.target.groupBy[partCount - 1].type === 'fill') {\n        this.target.groupBy.splice(partCount - 1, 0, partModel.part);\n      } else {\n        this.target.groupBy.push(partModel.part);\n      }\n    } else {\n      this.target.groupBy.push(partModel.part);\n    }\n\n    this.updateProjection();\n  }\n\n  removeGroupByPart(part: { def: { type: string } }, index: number) {\n    const categories = queryPart.getCategories();\n\n    if (part.def.type === 'time') {\n      // remove fill\n      this.target.groupBy = filter(this.target.groupBy, (g) => g.type !== 'fill');\n      // remove aggregations\n      this.target.select = map(this.target.select, (s) => {\n        return filter(s, (part) => {\n          const partModel = queryPart.create(part);\n          if (partModel.def.category === categories.Aggregations) {\n            return false;\n          }\n          if (partModel.def.category === categories.Selectors) {\n            return false;\n          }\n          return true;\n        });\n      });\n    }\n\n    this.target.groupBy!.splice(index, 1);\n    this.updateProjection();\n  }\n\n  removeSelect(index: number) {\n    this.target.select!.splice(index, 1);\n    this.updateProjection();\n  }\n\n  removeSelectPart(selectParts: any[], part: any) {\n    // if we remove the field remove the whole statement\n    if (part.def.type === 'field') {\n      if (this.selectModels.length > 1) {\n        const modelsIndex = indexOf(this.selectModels, selectParts);\n        this.selectModels.splice(modelsIndex, 1);\n      }\n    } else {\n      const partIndex = indexOf(selectParts, part);\n      selectParts.splice(partIndex, 1);\n    }\n\n    this.updatePersistedParts();\n  }\n\n  addSelectPart(selectParts: any[], type: string) {\n    const partModel = queryPart.create({ type: type });\n    partModel.def.addStrategy(selectParts, partModel, this);\n    this.updatePersistedParts();\n  }\n\n  private isOperatorTypeHandler(operator: string, value: string, fieldName: string) {\n    let textValue;\n    if (operator === 'Is Not') {\n      operator = '!=';\n    } else {\n      operator = '=';\n    }\n\n    // Tags should always quote\n    if (fieldName.endsWith('::tag')) {\n      textValue = \"'\" + removeRegexWrapper(value.replace(/\\\\/g, '\\\\\\\\').replace(/\\'/g, \"\\\\'\")) + \"'\";\n      return {\n        operator: operator,\n        value: textValue,\n      };\n    }\n\n    let lowerValue = value.toLowerCase();\n\n    // Try and discern type\n    if (!isNaN(parseFloat(value))) {\n      // Integer or float, don't quote\n      textValue = value;\n    } else if (['true', 'false'].includes(lowerValue)) {\n      // It's a boolean, don't quite\n      textValue = lowerValue;\n    } else {\n      // String or unrecognised: quote\n      textValue = \"'\" + removeRegexWrapper(value.replace(/\\\\/g, '\\\\\\\\').replace(/\\'/g, \"\\\\'\")) + \"'\";\n    }\n    return {\n      operator: operator,\n      value: textValue,\n    };\n  }\n\n  private renderTagCondition(tag: InfluxQueryTag, index: number, interpolate?: boolean) {\n    // FIXME: merge this function with query_builder/renderTagCondition\n    let str = '';\n    let operator = tag.operator;\n    let value = tag.value;\n    if (index > 0) {\n      str = (tag.condition || 'AND') + ' ';\n    }\n\n    if (!operator) {\n      if (/^\\/.*\\/$/.test(value)) {\n        operator = '=~';\n      } else {\n        operator = '=';\n      }\n    }\n\n    // quote value unless regex\n    if (operator !== '=~' && operator !== '!~') {\n      if (interpolate) {\n        value = this.templateSrv.replace(value, this.scopedVars);\n      }\n      value = removeRegexWrapper(value);\n      if (operator.startsWith('Is')) {\n        let r = this.isOperatorTypeHandler(operator, value, tag.key);\n        operator = r.operator;\n        value = r.value;\n      } else if ((!operator.startsWith('>') && !operator.startsWith('<')) || operator === '<>') {\n        value = \"'\" + value.replace(/\\\\/g, '\\\\\\\\').replace(/\\'/g, \"\\\\'\") + \"'\";\n      }\n    } else if (interpolate) {\n      value = this.templateSrv.replace(value, this.scopedVars, 'regex');\n    }\n\n    let escapedKey = `\"${tag.key}\"`;\n\n    if (tag.key.endsWith('::tag')) {\n      escapedKey = `\"${tag.key.slice(0, -5)}\"::tag`;\n    }\n\n    if (tag.key.endsWith('::field')) {\n      escapedKey = `\"${tag.key.slice(0, -7)}\"::field`;\n    }\n\n    return str + escapedKey + ' ' + operator + ' ' + value;\n  }\n\n  getMeasurementAndPolicy(interpolate?: boolean) {\n    let policy = this.target.policy;\n    let measurement = this.target.measurement || 'measurement';\n\n    if (!measurement.match('^/.*/$')) {\n      measurement = '\"' + measurement + '\"';\n    } else if (interpolate) {\n      measurement = this.templateSrv.replace(measurement, this.scopedVars, 'regex');\n    }\n\n    if (policy !== DEFAULT_POLICY) {\n      policy = '\"' + this.target.policy + '\".';\n    } else {\n      policy = '';\n    }\n\n    return policy + measurement;\n  }\n\n  interpolateQueryStr(value: string | string[], variable: { multi: boolean; includeAll: boolean }) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return value;\n    }\n\n    if (typeof value === 'string') {\n      return escapeRegex(value);\n    }\n\n    const escapedValues = map(value, escapeRegex);\n    return '(' + escapedValues.join('|') + ')';\n  }\n\n  render(interpolate?: boolean) {\n    const target = this.target;\n\n    if (target.rawQuery) {\n      if (interpolate) {\n        return this.templateSrv.replace(target.query, this.scopedVars, this.interpolateQueryStr);\n      } else {\n        return target.query;\n      }\n    }\n\n    let query = 'SELECT ';\n    let i, y;\n    for (i = 0; i < this.selectModels.length; i++) {\n      const parts = this.selectModels[i];\n      let selectText = '';\n      for (y = 0; y < parts.length; y++) {\n        const part = parts[y];\n        selectText = part.render(selectText);\n      }\n\n      if (i > 0) {\n        query += ', ';\n      }\n      query += selectText;\n    }\n\n    query += ' FROM ' + this.getMeasurementAndPolicy(interpolate) + ' WHERE ';\n    const conditions = map(target.tags, (tag, index) => {\n      return this.renderTagCondition(tag, index, interpolate);\n    });\n\n    if (conditions.length > 0) {\n      query += '(' + conditions.join(' ') + ') AND ';\n    }\n\n    query += '$timeFilter';\n\n    let groupBySection = '';\n    for (i = 0; i < this.groupByParts.length; i++) {\n      const part = this.groupByParts[i];\n      if (i > 0) {\n        // for some reason fill has no separator\n        groupBySection += part.def.type === 'fill' ? ' ' : ', ';\n      }\n      groupBySection += part.render('');\n    }\n\n    if (groupBySection.length) {\n      query += ' GROUP BY ' + groupBySection;\n    }\n\n    if (target.fill) {\n      query += ' fill(' + target.fill + ')';\n    }\n\n    if (target.orderByTime === 'DESC') {\n      query += ' ORDER BY time DESC';\n    }\n\n    if (target.limit) {\n      query += ' LIMIT ' + target.limit;\n    }\n\n    if (target.slimit) {\n      query += ' SLIMIT ' + target.slimit;\n    }\n\n    if (target.tz) {\n      query += \" tz('\" + target.tz + \"')\";\n    }\n\n    return query;\n  }\n\n  renderAdhocFilters(filters: AdHocVariableFilter[]) {\n    const conditions = map(filters, (tag, index) => {\n      return this.renderTagCondition(tag, index, true);\n    });\n    return conditions.join(' ');\n  }\n}\n","import { cloneDeep } from 'lodash';\n\nimport InfluxQueryModel from './influx_query_model';\nimport { InfluxQuery } from './types'; // FIXME: these functions are a beginning of a refactoring of influx_query_model.ts\n\n// FIXME: these functions are a beginning of a refactoring of influx_query_model.ts\n// into a simpler approach with full typescript types.\n// later we should be able to migrate the unit-tests\n// that relate to these functions here, and then perhaps even move the implementation\n// to this place\n\nexport function buildRawQuery(query: InfluxQuery): string {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  return model.render(false);\n}\n\nexport function normalizeQuery(query: InfluxQuery): InfluxQuery {\n  // we return the original query if there is no need to update it\n  if (\n    query.policy !== undefined &&\n    query.resultFormat !== undefined &&\n    query.orderByTime !== undefined &&\n    query.tags !== undefined &&\n    query.groupBy !== undefined &&\n    query.select !== undefined\n  ) {\n    return query;\n  }\n\n  // FIXME: we should move the whole normalizeQuery logic here,\n  // and then have influxQueryModel call this function,\n  // to concentrate the whole logic here\n\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  return new InfluxQueryModel(queryCopy).target;\n}\n\nexport function addNewSelectPart(query: InfluxQuery, type: string, index: number): InfluxQuery {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  model.addSelectPart(model.selectModels[index], type);\n  return model.target;\n}\n\nexport function removeSelectPart(query: InfluxQuery, partIndex: number, index: number): InfluxQuery {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  const selectModel = model.selectModels[index];\n  model.removeSelectPart(selectModel, selectModel[partIndex]);\n  return model.target;\n}\n\nexport function changeSelectPart(\n  query: InfluxQuery,\n  listIndex: number,\n  partIndex: number,\n  newParams: string[]\n): InfluxQuery {\n  // we need to make shallow copy of `query.select` down to `query.select[listIndex][partIndex]`\n  const newSel = [...(query.select ?? [])];\n  newSel[listIndex] = [...newSel[listIndex]];\n  newSel[listIndex][partIndex] = {\n    ...newSel[listIndex][partIndex],\n    params: newParams,\n  };\n  return { ...query, select: newSel };\n}\n\nexport function addNewGroupByPart(query: InfluxQuery, type: string): InfluxQuery {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  model.addGroupBy(type);\n  return model.target;\n}\n\nexport function removeGroupByPart(query: InfluxQuery, partIndex: number): InfluxQuery {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  model.removeGroupByPart(model.groupByParts[partIndex], partIndex);\n  return model.target;\n}\n\nexport function changeGroupByPart(query: InfluxQuery, partIndex: number, newParams: string[]): InfluxQuery {\n  // we need to make shallow copy of `query.groupBy` down to `query.groupBy[partIndex]`\n  const newGroupBy = [...(query.groupBy ?? [])];\n  newGroupBy[partIndex] = {\n    ...newGroupBy[partIndex],\n    params: newParams,\n  };\n  return { ...query, groupBy: newGroupBy };\n}\n\nexport function removeRegexWrapper(str: string) {\n  const regex = /\\/\\^(.*?)\\$\\//; // match any string that starts with \"/^\" and ends with \"$/\", capturing the characters in between\n  const match = str.match(regex);\n\n  if (match && match.length > 1) {\n    return match[1];\n  }\n\n  return str;\n}\n","import { css, cx } from '@emotion/css';\nimport { PureComponent } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data/src';\nimport { getTemplateSrv } from '@grafana/runtime/src';\nimport {\n  CodeEditor,\n  CodeEditorSuggestionItem,\n  CodeEditorSuggestionItemKind,\n  InlineFormLabel,\n  LinkButton,\n  MonacoEditor,\n  Segment,\n  Themeable2,\n  withTheme2,\n} from '@grafana/ui/src';\n\nimport InfluxDatasource from '../../../../datasource';\nimport { InfluxQuery } from '../../../../types';\n\ninterface Props extends Themeable2 {\n  onChange: (query: InfluxQuery) => void;\n  query: InfluxQuery;\n  // `datasource` is not used internally, but this component is used at some places\n  // directly, where the `datasource` prop has to exist. later, when the whole\n  // query-editor gets converted to react we can stop using this component directly\n  // and then we can probably remove the datasource attribute.\n  datasource: InfluxDatasource;\n}\n\nconst samples: Array<SelectableValue<string>> = [\n  { label: 'Show buckets', description: 'List the available buckets (table)', value: 'buckets()' },\n  {\n    label: 'Simple query',\n    description: 'filter by measurement and field',\n    value: `from(bucket: \"db/rp\")\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\n  |> filter(fn: (r) =>\n    r._measurement == \"example-measurement\" and\n    r._field == \"example-field\"\n  )`,\n  },\n  {\n    label: 'Grouped Query',\n    description: 'Group by (min/max/sum/median)',\n    value: `// v.windowPeriod is a variable referring to the current optimized window period (currently: $interval)\nfrom(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"measurement1\" or r[\"_measurement\"] =~ /^.*?regex.*$/)\n  |> filter(fn: (r) => r[\"_field\"] == \"field2\" or r[\"_field\"] =~ /^.*?regex.*$/)\n  |> aggregateWindow(every: v.windowPeriod, fn: mean|median|max|count|derivative|sum)\n  |> yield(name: \"some-name\")`,\n  },\n  {\n    label: 'Filter by value',\n    description: 'Results between a min/max',\n    value: `// v.bucket, v.timeRangeStart, and v.timeRange stop are all variables supported by the flux plugin and influxdb\nfrom(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_value\"] >= 10 and r[\"_value\"] <= 20)`,\n  },\n  {\n    label: 'Schema Exploration: (measurements)',\n    description: 'Get a list of measurement using flux',\n    value: `import \"influxdata/influxdb/v1\"\nv1.measurements(bucket: v.bucket)`,\n  },\n  {\n    label: 'Schema Exploration: (fields)',\n    description: 'Return every possible key in a single table',\n    value: `from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\n  |> keys()\n  |> keep(columns: [\"_value\"])\n  |> group()\n  |> distinct()`,\n  },\n  {\n    label: 'Schema Exploration: (tag keys)',\n    description: 'Get a list of tag keys using flux',\n    value: `import \"influxdata/influxdb/v1\"\nv1.tagKeys(bucket: v.bucket)`,\n  },\n  {\n    label: 'Schema Exploration: (tag values)',\n    description: 'Get a list of tag values using flux',\n    value: `import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: v.bucket,\n    tag: \"host\",\n    predicate: (r) => true,\n    start: -1d\n)`,\n  },\n];\n\nclass UnthemedFluxQueryEditor extends PureComponent<Props> {\n  onFluxQueryChange = (query: string) => {\n    this.props.onChange({ ...this.props.query, query });\n  };\n\n  onSampleChange = (val: SelectableValue<string>) => {\n    this.props.onChange({\n      ...this.props.query,\n      query: val.value!,\n    });\n\n    // Angular HACK: Since the target does not actually change!\n    this.forceUpdate();\n  };\n\n  getSuggestions = (): CodeEditorSuggestionItem[] => {\n    const sugs: CodeEditorSuggestionItem[] = [\n      {\n        label: 'v.timeRangeStart',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'The start time',\n      },\n      {\n        label: 'v.timeRangeStop',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'The stop time',\n      },\n      {\n        label: 'v.windowPeriod',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'based on max data points',\n      },\n      {\n        label: 'v.defaultBucket',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'bucket configured in the datsource',\n      },\n      {\n        label: 'v.organization',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'org configured for the datsource',\n      },\n    ];\n\n    const templateSrv = getTemplateSrv();\n    templateSrv.getVariables().forEach((variable) => {\n      const label = '${' + variable.name + '}';\n      let val = templateSrv.replace(label);\n      if (val === label) {\n        val = '';\n      }\n      sugs.push({\n        label,\n        kind: CodeEditorSuggestionItemKind.Text,\n        detail: `(Template Variable) ${val}`,\n      });\n    });\n\n    return sugs;\n  };\n\n  // For some reason in angular, when this component gets re-mounted, the width\n  // is not set properly.  This forces the layout shortly after mount so that it\n  // displays OK.  Note: this is not an issue when used directly in react\n  editorDidMountCallbackHack = (editor: MonacoEditor) => {\n    setTimeout(() => editor.layout(), 100);\n  };\n\n  render() {\n    const { query, theme } = this.props;\n    const styles = getStyles(theme);\n\n    const helpTooltip = (\n      <div>\n        Type: <i>ctrl+space</i> to show template variable suggestions <br />\n        Many queries can be copied from Chronograf\n      </div>\n    );\n\n    return (\n      <>\n        <CodeEditor\n          height={'100%'}\n          containerStyles={styles.editorContainerStyles}\n          language=\"sql\"\n          value={query.query || ''}\n          onBlur={this.onFluxQueryChange}\n          onSave={this.onFluxQueryChange}\n          showMiniMap={false}\n          showLineNumbers={true}\n          getSuggestions={this.getSuggestions}\n          onEditorDidMount={this.editorDidMountCallbackHack}\n        />\n        <div className={cx('gf-form-inline', styles.editorActions)}>\n          <LinkButton\n            icon=\"external-link-alt\"\n            variant=\"secondary\"\n            target=\"blank\"\n            href=\"https://docs.influxdata.com/influxdb/latest/query-data/get-started/\"\n          >\n            Flux language syntax\n          </LinkButton>\n          <Segment\n            options={samples}\n            value=\"Sample query\"\n            onChange={this.onSampleChange}\n            className={css`\n              margin-top: -${theme.spacing(0.5)};\n              margin-left: ${theme.spacing(0.5)};\n            `}\n          />\n          <div className=\"gf-form gf-form--grow\">\n            <div className=\"gf-form-label gf-form-label--grow\"></div>\n          </div>\n          <InlineFormLabel width={5} tooltip={helpTooltip}>\n            Help\n          </InlineFormLabel>\n        </div>\n      </>\n    );\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  editorContainerStyles: css`\n    height: 200px;\n    max-width: 100%;\n    resize: vertical;\n    overflow: auto;\n    background-color: ${theme.isDark ? theme.colors.background.canvas : theme.colors.background.primary};\n    padding-bottom: ${theme.spacing(1)};\n  `,\n  editorActions: css`\n    margin-top: 6px;\n  `,\n});\n\nexport const FluxQueryEditor = withTheme2(UnthemedFluxQueryEditor);\n","import { RAQBFieldTypes, SQLSelectableValue } from '@grafana/sql';\n\nexport function mapFieldsToTypes(columns: SQLSelectableValue[]) {\n  const fields: SQLSelectableValue[] = [];\n  for (const col of columns) {\n    let type: RAQBFieldTypes = 'text';\n    switch (col.type?.toUpperCase()) {\n      case 'BOOLEAN':\n      case 'BOOL': {\n        type = 'boolean';\n        break;\n      }\n      case 'BYTES':\n      case 'VARCHAR': {\n        type = 'text';\n        break;\n      }\n      case 'FLOAT':\n      case 'FLOAT64':\n      case 'INT':\n      case 'INTEGER':\n      case 'INT64':\n      case 'NUMERIC':\n      case 'BIGNUMERIC': {\n        type = 'number';\n        break;\n      }\n      case 'DATE': {\n        type = 'date';\n        break;\n      }\n      case 'TIMESTAMP(NANOSECOND, NONE)':\n      case 'DATETIME': {\n        type = 'datetime';\n        break;\n      }\n      case 'TIME': {\n        type = 'time';\n        break;\n      }\n      case 'TIMESTAMP': {\n        type = 'datetime';\n        break;\n      }\n      case 'GEOGRAPHY': {\n        type = 'text';\n        break;\n      }\n      default:\n        break;\n    }\n\n    fields.push({ ...col, raqbFieldType: type, icon: mapColumnTypeToIcon(col.type!.toUpperCase()) });\n  }\n  return fields;\n}\n\nexport function mapColumnTypeToIcon(type: string) {\n  switch (type) {\n    case 'TIME':\n    case 'DATETIME':\n    case 'TIMESTAMP':\n      return 'clock-nine';\n    case 'BOOLEAN':\n      return 'toggle-off';\n    case 'INTEGER':\n    case 'FLOAT':\n    case 'FLOAT64':\n    case 'INT':\n    case 'SMALLINT':\n    case 'BIGINT':\n    case 'TINYINT':\n    case 'BYTEINT':\n    case 'INT64':\n    case 'NUMERIC':\n    case 'DECIMAL':\n      return 'calculator-alt';\n    case 'CHAR':\n    case 'VARCHAR':\n    case 'STRING':\n    case 'BYTES':\n    case 'TEXT':\n    case 'TINYTEXT':\n    case 'MEDIUMTEXT':\n    case 'LONGTEXT':\n      return 'text';\n    case 'GEOGRAPHY':\n      return 'map';\n    default:\n      return undefined;\n  }\n}\n","import { isEmpty } from 'lodash';\n\nimport { createSelectClause, haveColumns, SQLQuery } from '@grafana/sql';\n\n// remove identifier quoting from identifier to use in metadata queries\nexport function unquoteIdentifier(value: string) {\n  if (value[0] === '\"' && value[value.length - 1] === '\"') {\n    return value.substring(1, value.length - 1).replace(/\"\"/g, '\"');\n  } else if (value[0] === '`' && value[value.length - 1] === '`') {\n    return value.substring(1, value.length - 1);\n  } else {\n    return value;\n  }\n}\n\nexport function quoteLiteral(value: string) {\n  return \"'\" + value.replace(/'/g, \"''\") + \"'\";\n}\n\nexport function toRawSql({ sql, table }: SQLQuery): string {\n  let rawQuery = '';\n\n  // Return early with empty string if there is no sql column\n  if (!sql || !haveColumns(sql.columns)) {\n    return rawQuery;\n  }\n\n  // wrapping the column name with quotes\n  const sc = sql.columns.map((c) => ({\n    ...c,\n    parameters: c.parameters?.map((p) => ({ ...p, name: formatTableName(p.name) })),\n  }));\n  rawQuery += createSelectClause(sc);\n\n  if (table) {\n    rawQuery += `FROM \"${table}\" `;\n  }\n\n  // $__timeFrom and $__timeTo will be interpolated on the backend\n  rawQuery += `WHERE \"time\" >= $__timeFrom AND \"time\" <= $__timeTo `;\n  if (sql.whereString) {\n    // whereString is generated by the react-awesome-query-builder\n    // we use SQLWhereRow as a common component\n    // in order to not mess with common component here we just modify the string\n    const wherePattern = new RegExp('(\\\\s?)([^\\\\(]\\\\S+)(\\\\s?=)', 'g');\n    const subst = `$1\"$2\"$3`;\n    const whereString = sql.whereString.replace(wherePattern, subst);\n    rawQuery += `AND ${whereString} `;\n  }\n\n  if (sql.groupBy?.[0]?.property.name) {\n    const groupBy = sql.groupBy.map((g) => `\"${g.property.name}\"`).filter((g) => !isEmpty(g));\n    rawQuery += `GROUP BY ${groupBy.join(', ')} `;\n  }\n\n  if (sql.orderBy?.property.name) {\n    rawQuery += `ORDER BY \"${sql.orderBy.property.name}\" `;\n  }\n\n  if (sql.orderBy?.property.name && sql.orderByDirection) {\n    rawQuery += `${sql.orderByDirection} `;\n  }\n\n  // Although LIMIT 0 doesn't make sense, it is still possible to have LIMIT 0\n  if (isLimit(sql.limit)) {\n    rawQuery += `LIMIT ${sql.limit}`;\n  }\n\n  return rawQuery;\n}\n\n// When the column name is *, do not wrap the column name in double-quotes.\n// See: https://github.com/grafana/grafana/issues/88008\nfunction formatTableName(parameter: string | undefined): string {\n  if (parameter === '*') {\n    return parameter;\n  }\n\n  return `\"${parameter}\"`;\n}\n\nconst isLimit = (limit: number | undefined): boolean => limit !== undefined && limit >= 0;\n\n// Puts double quotes (\") around the identifier if it is necessary.\nexport function quoteIdentifierIfNecessary(value: string) {\n  return isValidIdentifier(value) ? value : `\\\"${value}\\\"`;\n}\n\n/**\n * Validates the identifier from MySql and returns true if it\n * doesn't need to be escaped.\n */\nexport function isValidIdentifier(identifier: string): boolean {\n  const isValidName = /^[a-zA-Z_][a-zA-Z0-9_$]*$/g.test(identifier);\n  const isReservedWord = RESERVED_WORDS.includes(identifier.toUpperCase());\n  return !isReservedWord && isValidName;\n}\n\nconst RESERVED_WORDS = [\n  'ACCESSIBLE',\n  'ADD',\n  'ALL',\n  'ALTER',\n  'ANALYZE',\n  'AND',\n  'AS',\n  'ASC',\n  'ASENSITIVE',\n  'BEFORE',\n  'BETWEEN',\n  'BIGINT',\n  'BINARY',\n  'BLOB',\n  'BOTH',\n  'BY',\n  'CALL',\n  'CASCADE',\n  'CASE',\n  'CHANGE',\n  'CHAR',\n  'CHARACTER',\n  'CHECK',\n  'COLLATE',\n  'COLUMN',\n  'CONDITION',\n  'CONSTRAINT',\n  'CONTINUE',\n  'CONVERT',\n  'CREATE',\n  'CROSS',\n  'CUBE',\n  'CUME_DIST',\n  'CURRENT_DATE',\n  'CURRENT_TIME',\n  'CURRENT_TIMESTAMP',\n  'CURRENT_USER',\n  'CURSOR',\n  'DATABASE',\n  'DATABASES',\n  'DAY_HOUR',\n  'DAY_MICROSECOND',\n  'DAY_MINUTE',\n  'DAY_SECOND',\n  'DEC',\n  'DECIMAL',\n  'DECLARE',\n  'DEFAULT',\n  'DELAYED',\n  'DELETE',\n  'DENSE_RANK',\n  'DESC',\n  'DESCRIBE',\n  'DETERMINISTIC',\n  'DISTINCT',\n  'DISTINCTROW',\n  'DIV',\n  'DOUBLE',\n  'DROP',\n  'DUAL',\n  'EACH',\n  'ELSE',\n  'ELSEIF',\n  'EMPTY',\n  'ENCLOSED',\n  'ESCAPED',\n  'EXCEPT',\n  'EXISTS',\n  'EXIT',\n  'EXPLAIN',\n  'FALSE',\n  'FETCH',\n  'FIRST_VALUE',\n  'FLOAT',\n  'FLOAT4',\n  'FLOAT8',\n  'FOR',\n  'FORCE',\n  'FOREIGN',\n  'FROM',\n  'FULLTEXT',\n  'FUNCTION',\n  'GENERATED',\n  'GET',\n  'GRANT',\n  'GROUP',\n  'GROUPING',\n  'GROUPS',\n  'HAVING',\n  'HIGH_PRIORITY',\n  'HOUR_MICROSECOND',\n  'HOUR_MINUTE',\n  'HOUR_SECOND',\n  'IF',\n  'IGNORE',\n  'IN',\n  'INDEX',\n  'INFILE',\n  'INNER',\n  'INOUT',\n  'INSENSITIVE',\n  'INSERT',\n  'INT',\n  'INT1',\n  'INT2',\n  'INT3',\n  'INT4',\n  'INT8',\n  'INTEGER',\n  'INTERSECT',\n  'INTERVAL',\n  'INTO',\n  'IO_AFTER_GTIDS',\n  'IO_BEFORE_GTIDS',\n  'IS',\n  'ITERATE',\n  'JOIN',\n  'JSON_TABLE',\n  'KEY',\n  'KEYS',\n  'KILL',\n  'LAG',\n  'LAST_VALUE',\n  'LATERAL',\n  'LEAD',\n  'LEADING',\n  'LEAVE',\n  'LEFT',\n  'LIKE',\n  'LIMIT',\n  'LINEAR',\n  'LINES',\n  'LOAD',\n  'LOCALTIME',\n  'LOCALTIMESTAMP',\n  'LOCK',\n  'LONG',\n  'LONGBLOB',\n  'LONGTEXT',\n  'LOOP',\n  'LOW_PRIORITY',\n  'MASTER_BIND',\n  'MASTER_SSL_VERIFY_SERVER_CERT',\n  'MATCH',\n  'MAXVALUE',\n  'MEDIUMBLOB',\n  'MEDIUMINT',\n  'MEDIUMTEXT',\n  'MIDDLEINT',\n  'MINUTE_MICROSECOND',\n  'MINUTE_SECOND',\n  'MOD',\n  'MODIFIES',\n  'NATURAL',\n  'NOT',\n  'NO_WRITE_TO_BINLOG',\n  'NTH_VALUE',\n  'NTILE',\n  'NULL',\n  'NUMERIC',\n  'OF',\n  'ON',\n  'OPTIMIZE',\n  'OPTIMIZER_COSTS',\n  'OPTION',\n  'OPTIONALLY',\n  'OR',\n  'ORDER',\n  'OUT',\n  'OUTER',\n  'OUTFILE',\n  'OVER',\n  'PARTITION',\n  'PERCENT_RANK',\n  'PRECISION',\n  'PRIMARY',\n  'PROCEDURE',\n  'PURGE',\n  'RANGE',\n  'RANK',\n  'READ',\n  'READS',\n  'READ_WRITE',\n  'REAL',\n  'RECURSIVE',\n  'REFERENCES',\n  'REGEXP',\n  'RELEASE',\n  'RENAME',\n  'REPEAT',\n  'REPLACE',\n  'REQUIRE',\n  'RESIGNAL',\n  'RESTRICT',\n  'RETURN',\n  'REVOKE',\n  'RIGHT',\n  'RLIKE',\n  'ROW',\n  'ROWS',\n  'ROW_NUMBER',\n  'SCHEMA',\n  'SCHEMAS',\n  'SECOND_MICROSECOND',\n  'SELECT',\n  'SENSITIVE',\n  'SEPARATOR',\n  'SET',\n  'SHOW',\n  'SIGNAL',\n  'SMALLINT',\n  'SPATIAL',\n  'SPECIFIC',\n  'SQL',\n  'SQLEXCEPTION',\n  'SQLSTATE',\n  'SQLWARNING',\n  'SQL_BIG_RESULT',\n  'SQL_CALC_FOUND_ROWS',\n  'SQL_SMALL_RESULT',\n  'SSL',\n  'STARTING',\n  'STORED',\n  'STRAIGHT_JOIN',\n  'SYSTEM',\n  'TABLE',\n  'TERMINATED',\n  'THEN',\n  'TINYBLOB',\n  'TINYINT',\n  'TINYTEXT',\n  'TO',\n  'TRAILING',\n  'TRIGGER',\n  'TRUE',\n  'UNDO',\n  'UNION',\n  'UNIQUE',\n  'UNLOCK',\n  'UNSIGNED',\n  'UPDATE',\n  'USAGE',\n  'USE',\n  'USING',\n  'UTC_DATE',\n  'UTC_TIME',\n  'UTC_TIMESTAMP',\n  'VALUES',\n  'VARBINARY',\n  'VARCHAR',\n  'VARCHARACTER',\n  'VARYING',\n  'VIRTUAL',\n  'WHEN',\n  'WHERE',\n  'WHILE',\n  'WINDOW',\n  'WITH',\n  'WRITE',\n  'XOR',\n  'YEAR_MONTH',\n  'ZEROFILL',\n];\n","import { quoteLiteral, unquoteIdentifier } from './sqlUtil';\n\nexport function buildTableQuery(dataset?: string) {\n  const database = dataset !== undefined ? quoteIdentAsLiteral(dataset) : 'database()';\n  return `SELECT table_name FROM information_schema.tables WHERE table_schema = ${database} ORDER BY table_name`;\n}\n\nexport function showDatabases() {\n  return `SELECT DISTINCT TABLE_SCHEMA from information_schema.TABLES where TABLE_TYPE != 'SYSTEM VIEW' ORDER BY TABLE_SCHEMA`;\n}\n\nexport function buildColumnQuery(table: string, dbName?: string) {\n  let query = 'SELECT column_name, data_type FROM information_schema.columns WHERE ';\n  query += buildTableConstraint(table, dbName);\n\n  query += ' ORDER BY column_name';\n\n  return query;\n}\n\nexport function buildTableConstraint(table: string, dbName?: string) {\n  let query = '';\n\n  // check for schema qualified table\n  if (table.includes('.')) {\n    const parts = table.split('.');\n    query = 'table_schema = ' + quoteIdentAsLiteral(parts[0]);\n    query += ' AND table_name = ' + quoteIdentAsLiteral(parts[1]);\n    return query;\n  } else {\n    const database = dbName !== undefined ? quoteIdentAsLiteral(dbName) : 'database()';\n    query = `table_schema = ${database} AND table_name = ` + quoteIdentAsLiteral(table);\n\n    return query;\n  }\n}\n\nexport function quoteIdentAsLiteral(value: string) {\n  return quoteLiteral(unquoteIdentifier(value));\n}\n","import {\n  CompletionItemKind,\n  CompletionItemPriority,\n  getStandardSQLCompletionProvider,\n  LanguageCompletionProvider,\n  LinkedToken,\n  PositionContext,\n  StatementPlacementProvider,\n  SuggestionKind,\n  SuggestionKindProvider,\n  TableDefinition,\n  TableIdentifier,\n  TokenType,\n} from '@grafana/experimental';\n\ninterface CompletionProviderGetterArgs {\n  getMeta: (t?: TableIdentifier) => Promise<TableDefinition[]>;\n}\n\nexport const getSqlCompletionProvider: (args: CompletionProviderGetterArgs) => LanguageCompletionProvider =\n  ({ getMeta }) =>\n  (monaco, language) => ({\n    ...(language && getStandardSQLCompletionProvider(monaco, language)),\n    customStatementPlacement: customStatementPlacementProvider,\n    customSuggestionKinds: customSuggestionKinds(getMeta),\n  });\n\nconst customStatementPlacement = {\n  afterDatabase: 'afterDatabase',\n};\n\nconst customSuggestionKind = {\n  tablesWithinDatabase: 'tablesWithinDatabase',\n};\n\nconst FROMKEYWORD = 'FROM';\n\nexport const customStatementPlacementProvider: StatementPlacementProvider = () => [\n  {\n    id: customStatementPlacement.afterDatabase,\n    resolve: (currentToken, previousKeyword, previousNonWhiteSpace) => {\n      return Boolean(\n        currentToken?.is(TokenType.Delimiter, '.') &&\n          previousKeyword?.value === FROMKEYWORD &&\n          (previousNonWhiteSpace?.is(TokenType.IdentifierQuote) || previousNonWhiteSpace?.isIdentifier()) &&\n          // don't match after table name\n          currentToken\n            ?.getPreviousUntil(TokenType.Keyword, [TokenType.IdentifierQuote], FROMKEYWORD)\n            ?.filter((t) => t.isIdentifier()).length === 1\n      );\n    },\n  },\n];\n\nexport const customSuggestionKinds: (getMeta: CompletionProviderGetterArgs['getMeta']) => SuggestionKindProvider =\n  (getMeta) => () => [\n    {\n      id: SuggestionKind.Tables,\n      overrideDefault: true,\n      suggestionsResolver: async (ctx) => {\n        const databaseName = getDatabaseName(ctx.currentToken);\n\n        const suggestions = await getMeta({ schema: databaseName });\n\n        return suggestions.map(mapToSuggestion(ctx));\n      },\n    },\n    {\n      id: SuggestionKind.Columns,\n      overrideDefault: true,\n      suggestionsResolver: async (ctx) => {\n        const databaseToken = getDatabaseToken(ctx.currentToken);\n        const databaseName = getDatabaseName(databaseToken);\n        const tableName = getTableName(databaseToken);\n\n        if (!databaseName || !tableName) {\n          return [];\n        }\n\n        const suggestions = await getMeta({ schema: databaseName, table: tableName });\n\n        return suggestions.map(mapToSuggestion(ctx));\n      },\n    },\n    {\n      id: customSuggestionKind.tablesWithinDatabase,\n      applyTo: [customStatementPlacement.afterDatabase],\n      suggestionsResolver: async (ctx) => {\n        const databaseName = getDatabaseName(ctx.currentToken);\n\n        const suggestions = await getMeta({ schema: databaseName });\n\n        return suggestions.map(mapToSuggestion(ctx));\n      },\n    },\n  ];\n\nfunction mapToSuggestion(ctx: PositionContext) {\n  return function (tableDefinition: TableDefinition) {\n    return {\n      label: tableDefinition.name,\n      insertText: tableDefinition.completion ?? tableDefinition.name,\n      command: { id: 'editor.action.triggerSuggest', title: '' },\n      kind: CompletionItemKind.Field,\n      sortText: CompletionItemPriority.High,\n      range: {\n        ...ctx.range,\n        startColumn: ctx.range.endColumn,\n        endColumn: ctx.range.endColumn,\n      },\n    };\n  };\n}\n\nfunction getDatabaseName(token: LinkedToken | null | undefined) {\n  if (token?.isIdentifier() && token.value[token.value.length - 1] !== '.') {\n    return token.value;\n  }\n\n  if (token?.is(TokenType.Delimiter, '.')) {\n    return token.getPreviousOfType(TokenType.Identifier)?.value;\n  }\n\n  if (token?.is(TokenType.IdentifierQuote)) {\n    return token.getPreviousOfType(TokenType.Identifier)?.value || token.getNextOfType(TokenType.Identifier)?.value;\n  }\n  return;\n}\n\nfunction getTableName(token: LinkedToken | null | undefined) {\n  const identifier = token?.getNextOfType(TokenType.Identifier);\n  return identifier?.value;\n}\n\nconst getFromKeywordToken = (currentToken: LinkedToken | null) => {\n  const selectToken = currentToken?.getPreviousOfType(TokenType.Keyword, 'SELECT') ?? null;\n  return selectToken?.getNextOfType(TokenType.Keyword, FROMKEYWORD);\n};\n\nconst getDatabaseToken = (currentToken: LinkedToken | null) => {\n  const fromToken = getFromKeywordToken(currentToken);\n  const nextIdentifier = fromToken?.getNextOfType(TokenType.Identifier);\n  if (nextIdentifier?.isKeyword() && nextIdentifier.next?.is(TokenType.Parenthesis, '(')) {\n    return null;\n  } else {\n    return nextIdentifier;\n  }\n};\n","import { DataSourceInstanceSettings, TimeRange } from '@grafana/data';\nimport { CompletionItemKind, LanguageDefinition, TableIdentifier } from '@grafana/experimental';\nimport { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport { DB, formatSQL, SqlDatasource, SQLQuery } from '@grafana/sql';\n\nimport { mapFieldsToTypes } from './fields';\nimport { buildColumnQuery, buildTableQuery } from './flightsqlMetaQuery';\nimport { getSqlCompletionProvider } from './sqlCompletionProvider';\nimport { quoteIdentifierIfNecessary, quoteLiteral, toRawSql } from './sqlUtil';\nimport { FlightSQLOptions } from './types';\n\nexport class FlightSQLDatasource extends SqlDatasource {\n  sqlLanguageDefinition: LanguageDefinition | undefined;\n\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings<FlightSQLOptions>,\n    protected readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n  }\n\n  getQueryModel() {\n    return { quoteLiteral };\n  }\n\n  getSqlLanguageDefinition(): LanguageDefinition {\n    if (this.sqlLanguageDefinition !== undefined) {\n      return this.sqlLanguageDefinition;\n    }\n\n    const args = {\n      getMeta: (identifier?: TableIdentifier) => this.fetchMeta(identifier),\n    };\n    this.sqlLanguageDefinition = {\n      id: 'flightsql',\n      completionProvider: getSqlCompletionProvider(args),\n      formatter: formatSQL,\n    };\n    return this.sqlLanguageDefinition;\n  }\n\n  async fetchDatasets(): Promise<string[]> {\n    return Promise.resolve(['iox']);\n  }\n\n  async fetchTables(dataset?: string): Promise<string[]> {\n    const query = buildTableQuery(dataset);\n    const tables = await this.runSql<string[]>(query, { refId: 'tables' });\n    const tableNames = tables.map((t) => quoteIdentifierIfNecessary(t[0]));\n    tableNames.unshift(...this.getTemplateVariables());\n    return tableNames;\n  }\n\n  async fetchFields(query: Partial<SQLQuery>) {\n    if (!query.dataset || !query.table) {\n      return [];\n    }\n    const interpolatedTable = this.templateSrv.replace(query.table);\n    const queryString = buildColumnQuery(interpolatedTable, query.dataset);\n    const frame = await this.runSql<string[]>(queryString, { refId: 'fields' });\n    const fields = frame.map((f) => ({\n      name: f[0],\n      text: f[0],\n      value: quoteIdentifierIfNecessary(f[0]),\n      type: f[1],\n      label: f[0],\n    }));\n    fields.unshift(\n      ...this.getTemplateVariables().map((v) => ({\n        name: v,\n        text: v,\n        value: quoteIdentifierIfNecessary(v),\n        type: '',\n        label: v,\n      }))\n    );\n    return mapFieldsToTypes(fields);\n  }\n\n  getTemplateVariables() {\n    return this.templateSrv.getVariables().map((v) => `$${v.name}`);\n  }\n\n  async fetchMeta(identifier?: TableIdentifier) {\n    const defaultDB = this.instanceSettings.jsonData.database;\n    if (!identifier?.schema && defaultDB) {\n      const tables = await this.fetchTables(defaultDB);\n      return tables.map((t) => ({ name: t, completion: `${defaultDB}.${t}`, kind: CompletionItemKind.Class }));\n    } else if (!identifier?.schema && !defaultDB) {\n      const datasets = await this.fetchDatasets();\n      return datasets.map((d) => ({ name: d, completion: `${d}.`, kind: CompletionItemKind.Module }));\n    } else {\n      if (!identifier?.table && (!defaultDB || identifier?.schema)) {\n        const tables = await this.fetchTables(identifier?.schema);\n        return tables.map((t) => ({ name: t, completion: t, kind: CompletionItemKind.Class }));\n      } else if (identifier?.table && identifier.schema) {\n        const fields = await this.fetchFields({ dataset: identifier.schema, table: identifier.table });\n        return fields.map((t) => ({ name: t.name, completion: t.value, kind: CompletionItemKind.Field }));\n      } else {\n        return [];\n      }\n    }\n  }\n\n  getDB(): DB {\n    if (this.db !== undefined) {\n      return this.db;\n    }\n    return {\n      datasets: () => this.fetchDatasets(),\n      tables: (dataset?: string) => this.fetchTables(dataset),\n      fields: (query: SQLQuery) => this.fetchFields(query),\n      validateQuery: (query: SQLQuery, range?: TimeRange) =>\n        Promise.resolve({ query, error: '', isError: false, isValid: true }),\n      dsID: () => this.id,\n      toRawSql,\n      functions: () => ['VARIANCE', 'STDDEV'],\n      getEditorLanguageDefinition: () => this.getSqlLanguageDefinition(),\n    };\n  }\n}\n","import { css, cx } from '@emotion/css';\nimport { PureComponent } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport { SQLQuery, SqlQueryEditor, applyQueryDefaults } from '@grafana/sql';\nimport { InlineFormLabel, LinkButton, Themeable2, withTheme2 } from '@grafana/ui/src';\n\nimport InfluxDatasource from '../../../../datasource';\nimport { FlightSQLDatasource } from '../../../../fsql/datasource.flightsql';\nimport { InfluxQuery } from '../../../../types';\n\ninterface Props extends Themeable2 {\n  onChange: (query: InfluxQuery) => void;\n  onRunQuery: () => void;\n  query: InfluxQuery;\n  datasource: InfluxDatasource;\n}\n\nclass UnthemedSQLQueryEditor extends PureComponent<Props> {\n  datasource: FlightSQLDatasource;\n\n  constructor(props: Props) {\n    super(props);\n    const { datasource: influxDatasource } = props;\n\n    this.datasource = new FlightSQLDatasource(\n      {\n        url: influxDatasource.urls[0],\n        access: influxDatasource.access,\n        id: influxDatasource.id,\n\n        jsonData: {\n          // TODO Clean this\n          allowCleartextPasswords: false,\n          tlsAuth: false,\n          tlsAuthWithCACert: false,\n          tlsSkipVerify: false,\n          maxIdleConns: 1,\n          maxOpenConns: 1,\n          maxIdleConnsAuto: true,\n          connMaxLifetime: 1,\n          timezone: '',\n          user: '',\n          database: '',\n          url: influxDatasource.urls[0],\n          timeInterval: '',\n        },\n        meta: influxDatasource.meta,\n        name: influxDatasource.name,\n        readOnly: false,\n        type: influxDatasource.type,\n        uid: influxDatasource.uid,\n      },\n      influxDatasource.templateSrv\n    );\n  }\n\n  transformQuery(query: InfluxQuery & SQLQuery): SQLQuery {\n    const defaultQuery = applyQueryDefaults(query);\n    return {\n      ...defaultQuery,\n      dataset: 'iox',\n      sql: {\n        ...defaultQuery.sql,\n        limit: undefined,\n      },\n    };\n  }\n\n  render() {\n    const { query, theme, onRunQuery, onChange } = this.props;\n    const styles = getStyles(theme);\n\n    const onRunSQLQuery = () => {\n      return onRunQuery();\n    };\n\n    const onSQLChange = (query: SQLQuery) => {\n      // query => rawSql for now\n      onChange({ ...query });\n    };\n\n    const helpTooltip = (\n      <div>\n        Type: <i>ctrl+space</i> to show template variable suggestions <br />\n        Many queries can be copied from Chronograf\n      </div>\n    );\n\n    return (\n      <>\n        <SqlQueryEditor\n          datasource={this.datasource}\n          query={this.transformQuery(query)}\n          onRunQuery={onRunSQLQuery}\n          onChange={onSQLChange}\n          queryHeaderProps={{ dialect: 'influx' }}\n        />\n        <div className={cx('gf-form-inline', styles.editorActions)}>\n          <LinkButton\n            icon=\"external-link-alt\"\n            variant=\"secondary\"\n            target=\"blank\"\n            href=\"https://docs.influxdata.com/influxdb/cloud-serverless/query-data/sql/\"\n          >\n            SQL language syntax\n          </LinkButton>\n          <div className=\"gf-form gf-form--grow\">\n            <div className=\"gf-form-label gf-form-label--grow\"></div>\n          </div>\n          <InlineFormLabel width={5} tooltip={helpTooltip}>\n            Help\n          </InlineFormLabel>\n        </div>\n      </>\n    );\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  editorContainerStyles: css`\n    height: 200px;\n    max-width: 100%;\n    resize: vertical;\n    overflow: auto;\n    background-color: ${theme.isDark ? theme.colors.background.canvas : theme.colors.background.primary};\n    padding-bottom: ${theme.spacing(1)};\n  `,\n  editorActions: css`\n    margin-top: 6px;\n  `,\n});\n\nexport const FSQLEditor = withTheme2(UnthemedSQLQueryEditor);\n","import { useEffect, useState } from 'react';\n\nimport { Button, ConfirmModal } from '@grafana/ui';\n\ntype Props = {\n  isRaw: boolean;\n  onChange: (newIsRaw: boolean) => void;\n};\n\nexport const QueryEditorModeSwitcher = ({ isRaw, onChange }: Props): JSX.Element => {\n  const [isModalOpen, setModalOpen] = useState(false);\n\n  useEffect(() => {\n    // if the isRaw changes, we hide the modal\n    setModalOpen(false);\n  }, [isRaw]);\n\n  if (isRaw) {\n    return (\n      <>\n        <Button\n          aria-label=\"Switch to visual editor\"\n          icon=\"pen\"\n          variant=\"secondary\"\n          type=\"button\"\n          onClick={() => {\n            // we show the are-you-sure modal\n            setModalOpen(true);\n          }}\n        ></Button>\n        <ConfirmModal\n          isOpen={isModalOpen}\n          title=\"Switch to visual editor mode\"\n          body=\"Are you sure to switch to visual editor mode? You will lose the changes done in raw query mode.\"\n          confirmText=\"Yes, switch to editor mode\"\n          dismissText=\"No, stay in raw query mode\"\n          onConfirm={() => {\n            onChange(false);\n          }}\n          onDismiss={() => {\n            setModalOpen(false);\n          }}\n        />\n      </>\n    );\n  } else {\n    return (\n      <Button\n        aria-label=\"Switch to text editor\"\n        icon=\"pen\"\n        variant=\"secondary\"\n        type=\"button\"\n        onClick={() => {\n          onChange(true);\n        }}\n      ></Button>\n    );\n  }\n};\n","import { SelectableValue } from '@grafana/data/src';\n\nimport { ResultFormat } from '../../types';\n\nexport const RESULT_FORMATS: Array<SelectableValue<ResultFormat>> = [\n  { label: 'Time series', value: 'time_series' },\n  { label: 'Table', value: 'table' },\n  { label: 'Logs', value: 'logs' },\n];\n\nexport const DEFAULT_RESULT_FORMAT: ResultFormat = 'time_series';\n","import { useState, useEffect } from 'react';\nimport { usePrevious } from 'react-use';\n\nexport function useShadowedState<T>(outsideVal: T): [T, (newVal: T) => void] {\n  const [currentVal, setCurrentVal] = useState(outsideVal);\n  const prevOutsideVal = usePrevious(outsideVal);\n\n  useEffect(() => {\n    const isOutsideValChanged = prevOutsideVal !== outsideVal;\n    // if the value changes from the outside, we accept it into the state\n    // (we only set it if it is different from the current value)\n    if (isOutsideValChanged && currentVal !== outsideVal) {\n      setCurrentVal(outsideVal);\n    }\n  }, [outsideVal, currentVal, prevOutsideVal]);\n\n  return [currentVal, setCurrentVal];\n}\n","import { useId } from 'react';\n\nimport { Stack, InlineField, Input, Select, TextArea } from '@grafana/ui';\n\nimport { InfluxQuery } from '../../../../../types';\nimport { DEFAULT_RESULT_FORMAT, RESULT_FORMATS } from '../../../constants';\nimport { useShadowedState } from '../hooks/useShadowedState';\n\ntype Props = {\n  query: InfluxQuery;\n  onChange: (query: InfluxQuery) => void;\n  onRunQuery: () => void;\n};\n\n// we handle 3 fields: \"query\", \"alias\", \"resultFormat\"\n// \"resultFormat\" changes are applied immediately\n// \"query\" and \"alias\" changes only happen on onblur\nexport const RawInfluxQLEditor = ({ query, onChange, onRunQuery }: Props): JSX.Element => {\n  const [currentQuery, setCurrentQuery] = useShadowedState(query.query);\n  const [currentAlias, setCurrentAlias] = useShadowedState(query.alias);\n  const aliasElementId = useId();\n  const selectElementId = useId();\n\n  const resultFormat = query.resultFormat ?? DEFAULT_RESULT_FORMAT;\n\n  const applyDelayedChangesAndRunQuery = () => {\n    onChange({\n      ...query,\n      query: currentQuery,\n      alias: currentAlias,\n      resultFormat,\n    });\n    onRunQuery();\n  };\n\n  return (\n    <Stack direction={'column'}>\n      <TextArea\n        aria-label=\"query\"\n        rows={3}\n        spellCheck={false}\n        placeholder=\"InfluxDB Query\"\n        onBlur={applyDelayedChangesAndRunQuery}\n        onChange={(e) => {\n          setCurrentQuery(e.currentTarget.value);\n        }}\n        value={currentQuery ?? ''}\n      />\n      <Stack>\n        <InlineField htmlFor={selectElementId} label=\"Format as\">\n          <Select\n            inputId={selectElementId}\n            onChange={(v) => {\n              onChange({ ...query, resultFormat: v.value });\n              onRunQuery();\n            }}\n            value={resultFormat}\n            options={RESULT_FORMATS}\n          />\n        </InlineField>\n        <InlineField htmlFor={aliasElementId} label=\"Alias by\">\n          <Input\n            id={aliasElementId}\n            type=\"text\"\n            spellCheck={false}\n            placeholder=\"Naming pattern\"\n            onBlur={applyDelayedChangesAndRunQuery}\n            onChange={(e) => {\n              setCurrentAlias(e.currentTarget.value);\n            }}\n            value={currentAlias ?? ''}\n          />\n        </InlineField>\n      </Stack>\n    </Stack>\n  );\n};\n","import { reduce } from 'lodash';\n\nimport { escapeRegex, ScopedVars } from '@grafana/data';\nimport { TemplateSrv } from '@grafana/runtime';\n\nimport { DEFAULT_POLICY, InfluxQueryTag, MetadataQueryType } from './types';\n\nexport const buildMetadataQuery = (params: {\n  type: MetadataQueryType;\n  templateService: TemplateSrv;\n  scopedVars?: ScopedVars;\n  database?: string;\n  measurement?: string;\n  retentionPolicy?: string;\n  tags?: InfluxQueryTag[];\n  withKey?: string;\n  withMeasurementFilter?: string;\n}): string => {\n  let query = '';\n  let {\n    type,\n    templateService,\n    scopedVars,\n    database,\n    measurement,\n    retentionPolicy,\n    tags,\n    withKey,\n    withMeasurementFilter,\n  } = params;\n\n  switch (type) {\n    case 'RETENTION_POLICIES':\n      return 'SHOW RETENTION POLICIES on \"' + database + '\"';\n    case 'FIELDS':\n      if (!measurement || measurement === '') {\n        return 'SHOW FIELD KEYS';\n      }\n\n      // If there is a measurement and it is not empty string\n      if (measurement && !measurement.match(/^\\/.*\\/|^$/)) {\n        measurement = '\"' + measurement + '\"';\n\n        if (retentionPolicy && retentionPolicy !== DEFAULT_POLICY) {\n          retentionPolicy = '\"' + retentionPolicy + '\"';\n          measurement = retentionPolicy + '.' + measurement;\n        }\n      }\n\n      return 'SHOW FIELD KEYS FROM ' + measurement;\n    case 'TAG_KEYS':\n      query = 'SHOW TAG KEYS';\n      break;\n    case 'TAG_VALUES':\n      query = 'SHOW TAG VALUES';\n      break;\n    case 'MEASUREMENTS':\n      query = 'SHOW MEASUREMENTS';\n      if (withMeasurementFilter) {\n        // we do a case-insensitive regex-based lookup\n        query += ' WITH MEASUREMENT =~ /(?i)' + escapeRegex(withMeasurementFilter) + '/';\n      }\n      break;\n    default:\n      return query;\n  }\n  if (measurement) {\n    if (!measurement.match('^/.*/') && !measurement.match(/^merge\\(.*\\)/)) {\n      measurement = '\"' + measurement + '\"';\n    }\n\n    if (retentionPolicy && retentionPolicy !== DEFAULT_POLICY) {\n      retentionPolicy = '\"' + retentionPolicy + '\"';\n      measurement = retentionPolicy + '.' + measurement;\n    }\n\n    if (measurement !== '') {\n      query += ' FROM ' + measurement;\n    }\n  }\n\n  if (withKey) {\n    let keyIdentifier = withKey;\n\n    if (keyIdentifier.endsWith('::tag')) {\n      keyIdentifier = keyIdentifier.slice(0, -5);\n    }\n\n    query += ' WITH KEY = \"' + keyIdentifier + '\"';\n  }\n\n  if (tags && tags.length > 0) {\n    const whereConditions = reduce<InfluxQueryTag, string[]>(\n      tags,\n      (memo, tag) => {\n        // do not add a condition for the key we want to explore for\n        if (tag.key && tag.key === withKey) {\n          return memo;\n        }\n\n        // value operators not supported in these types of queries\n        if (tag.operator === '>' || tag.operator === '<') {\n          return memo;\n        }\n\n        memo.push(renderTagCondition(tag, memo.length, templateService, scopedVars, true));\n        return memo;\n      },\n      []\n    );\n\n    if (whereConditions.length > 0) {\n      query += ' WHERE ' + whereConditions.join(' ');\n    }\n  }\n\n  if (type === 'MEASUREMENTS') {\n    query += ' LIMIT 100';\n    //Solve issue #2524 by limiting the number of measurements returned\n    //LIMIT must be after WITH MEASUREMENT and WHERE clauses\n    //This also could be used for TAG KEYS and TAG VALUES, if desired\n  }\n\n  return query;\n};\n\n// A merge of query_builder/renderTagCondition and influx_query_model/renderTagCondition\nexport function renderTagCondition(\n  tag: InfluxQueryTag,\n  index: number,\n  templateSrv: TemplateSrv,\n  scopedVars?: ScopedVars,\n  interpolate?: boolean\n) {\n  let str = '';\n  let operator = tag.operator;\n  let value = tag.value;\n  if (index > 0) {\n    str = (tag.condition || 'AND') + ' ';\n  }\n\n  if (!operator) {\n    if (/^\\/.*\\/$/.test(tag.value)) {\n      operator = '=~';\n    } else {\n      operator = '=';\n    }\n  }\n\n  // quote value unless regex or empty-string\n  // Influx versions before 0.13 had inconsistent requirements on if (numeric) tags are quoted or not.\n  if (value === '' || (operator !== '=~' && operator !== '!~')) {\n    value = \"'\" + value.replace(/\\\\/g, '\\\\\\\\').replace(/\\'/g, \"\\\\'\") + \"'\";\n  }\n\n  // quote value unless regex\n  if (operator !== '=~' && operator !== '!~') {\n    if (interpolate) {\n      value = templateSrv.replace(value, scopedVars);\n    } else if (operator !== '>' && operator !== '<') {\n      value = \"'\" + value.replace(/\\\\/g, '\\\\\\\\').replace(/\\'/g, \"\\\\'\") + \"'\";\n    }\n  } else if (interpolate) {\n    value = templateSrv.replace(value, scopedVars, 'regex');\n  }\n\n  let escapedKey = `\"${tag.key}\"`;\n\n  if (tag.key.endsWith('::tag')) {\n    escapedKey = `\"${tag.key.slice(0, -5)}\"::tag`;\n  }\n\n  if (tag.key.endsWith('::field')) {\n    escapedKey = `\"${tag.key.slice(0, -7)}\"::field`;\n  }\n\n  return str + escapedKey + ' ' + operator + ' ' + value;\n}\n","import { ScopedVars } from '@grafana/data/src';\nimport config from 'app/core/config';\n\nimport InfluxDatasource from './datasource';\nimport { buildMetadataQuery } from './influxql_query_builder';\nimport { InfluxQuery, InfluxQueryTag, MetadataQueryType } from './types';\n\ntype MetadataQueryOptions = {\n  type: MetadataQueryType;\n  datasource: InfluxDatasource;\n  scopedVars?: ScopedVars;\n  measurement?: string;\n  retentionPolicy?: string;\n  tags?: InfluxQueryTag[];\n  withKey?: string;\n  withMeasurementFilter?: string;\n};\n\nconst runExploreQuery = async (options: MetadataQueryOptions): Promise<Array<{ text: string }>> => {\n  const { type, datasource, scopedVars, measurement, retentionPolicy, tags, withKey, withMeasurementFilter } = options;\n  const query = buildMetadataQuery({\n    type,\n    scopedVars,\n    measurement,\n    retentionPolicy,\n    tags,\n    withKey,\n    withMeasurementFilter,\n    templateService: datasource.templateSrv,\n    database: datasource.database,\n  });\n  const policy = retentionPolicy ? datasource.templateSrv.replace(retentionPolicy, {}, 'regex') : '';\n  const target: InfluxQuery = {\n    query,\n    policy,\n    rawQuery: true,\n    refId: 'metadataQuery',\n  };\n  if (config.featureToggles.influxdbBackendMigration) {\n    return datasource.runMetadataQuery(target);\n  } else {\n    const options = { policy: target.policy };\n    return datasource.metricFindQuery({ refId: 'run-explore-query', query }, options);\n  }\n};\n\nexport async function getAllPolicies(datasource: InfluxDatasource): Promise<string[]> {\n  const data = await runExploreQuery({ type: 'RETENTION_POLICIES', datasource });\n  return data.map((item) => item.text);\n}\n\nexport async function getAllMeasurements(\n  datasource: InfluxDatasource,\n  tags: InfluxQueryTag[],\n  withMeasurementFilter?: string\n): Promise<string[]> {\n  const data = await runExploreQuery({ type: 'MEASUREMENTS', datasource, tags, withMeasurementFilter });\n  return data.map((item) => item.text);\n}\n\nexport async function getTagKeys(\n  datasource: InfluxDatasource,\n  measurement?: string,\n  retentionPolicy?: string\n): Promise<string[]> {\n  const data = await runExploreQuery({ type: 'TAG_KEYS', datasource, measurement, retentionPolicy });\n  return data.map((item) => item.text);\n}\n\nexport async function getTagValues(\n  datasource: InfluxDatasource,\n  tags: InfluxQueryTag[],\n  withKey: string,\n  measurement?: string,\n  retentionPolicy?: string\n): Promise<string[]> {\n  if (withKey.endsWith('::field')) {\n    return [];\n  }\n  const data = await runExploreQuery({\n    type: 'TAG_VALUES',\n    tags,\n    withKey,\n    datasource,\n    measurement,\n    retentionPolicy,\n  });\n  return data.map((item) => item.text);\n}\n\nexport async function getFieldKeys(\n  datasource: InfluxDatasource,\n  measurement: string,\n  retentionPolicy?: string\n): Promise<string[]> {\n  const data = await runExploreQuery({ type: 'FIELDS', datasource, measurement, retentionPolicy });\n  return data.map((item) => item.text);\n}\n","// it is possible to add fields into the `InfluxQueryTag` structures, and they do work,\n// but in some cases, when we do metadata queries, we have to remove them from the queries.\nimport { InfluxQueryTag } from '../../../../../types';\n\nexport function filterTags(parts: InfluxQueryTag[], allTagKeys: Set<string>): InfluxQueryTag[] {\n  return parts.filter((t) => t.key.endsWith('::tag') || allTagKeys.has(t.key + '::tag'));\n}\n","import { SelectableValue } from '@grafana/data';\n\nexport function toSelectableValue<T extends string>(t: T): SelectableValue<T> {\n  return { label: t, value: t };\n}\n","export function unwrap<T>(value: T | null | undefined): T {\n  if (value == null) {\n    throw new Error('value must not be nullish');\n  }\n  return value;\n}\n","import { SelectableValue } from '@grafana/data';\nimport { QueryPartDef } from 'app/features/alerting/state/query_part';\n\nimport InfluxQueryModel from '../../../../../influx_query_model';\nimport queryPart from '../../../../../query_part';\nimport { InfluxQuery, InfluxQueryPart } from '../../../../../types';\nimport { PartParams } from '../visual/PartListSection';\n\nimport { toSelectableValue } from './toSelectableValue';\nimport { unwrap } from './unwrap';\n\ntype Categories = Record<string, QueryPartDef[]>;\n\nexport function getNewSelectPartOptions(): SelectableValue[] {\n  const categories: Categories = queryPart.getCategories();\n  const options: SelectableValue[] = [];\n\n  const keys = Object.keys(categories);\n\n  keys.forEach((key) => {\n    const children: SelectableValue[] = categories[key].map((x) => toSelectableValue(x.type));\n\n    options.push({\n      label: key,\n      options: children,\n    });\n  });\n\n  return options;\n}\n\nexport async function getNewGroupByPartOptions(\n  query: InfluxQuery,\n  getTagKeys: () => Promise<string[]>\n): Promise<Array<SelectableValue<string>>> {\n  const tagKeys = await getTagKeys();\n  const queryCopy = { ...query }; // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  const options: Array<SelectableValue<string>> = [];\n  if (!model.hasFill()) {\n    options.push(toSelectableValue('fill(null)'));\n  }\n  if (!model.hasGroupByTime()) {\n    options.push(toSelectableValue('time($interval)'));\n  }\n  tagKeys.forEach((key) => {\n    options.push(toSelectableValue(`tag(${key})`));\n  });\n  return options;\n}\n\ntype Part = {\n  name: string;\n  params: PartParams;\n};\n\nfunction getPartParams(part: InfluxQueryPart, dynamicParamOptions: Map<string, () => Promise<string[]>>): PartParams {\n  // NOTE: the way the system is constructed,\n  // there always can only be one possible dynamic-lookup\n  // field. in case of select it is the field,\n  // in case of group-by it is the tag\n  const def = queryPart.create(part).def;\n\n  // we switch the numbers to strings, it will work that way too,\n  // and it makes the code simpler\n  const paramValues = (part.params ?? []).map((p) => p.toString());\n\n  if (paramValues.length !== def.params.length) {\n    throw new Error('Invalid query-segment');\n  }\n\n  return paramValues.map((val, index) => {\n    const defParam = def.params[index];\n    if (defParam.dynamicLookup) {\n      return {\n        value: val,\n        options: unwrap(dynamicParamOptions.get(`${def.type}_${index}`)),\n      };\n    }\n\n    if (defParam.options != null) {\n      return {\n        value: val,\n        options: () => Promise.resolve(defParam.options),\n      };\n    }\n\n    return {\n      value: val,\n      options: null,\n    };\n  });\n}\n\nexport function makePartList(\n  queryParts: InfluxQueryPart[],\n  dynamicParamOptions: Map<string, () => Promise<string[]>>\n): Part[] {\n  return queryParts.map((qp) => {\n    return {\n      name: qp.type,\n      params: getPartParams(qp, dynamicParamOptions),\n    };\n  });\n}\n","import { TypedVariableModel } from '@grafana/data/src';\nimport { getTemplateSrv } from '@grafana/runtime/src';\n\nexport function getTemplateVariableOptions(wrapper: (v: TypedVariableModel) => string) {\n  return (\n    getTemplateSrv()\n      .getVariables()\n      // we make them regex-params, i'm not 100% sure why.\n      // probably because this way multi-value variables work ok too.\n      .map(wrapper)\n  );\n}\n","// helper function to make it easy to call this from the widget-render-code\nimport { TypedVariableModel } from '@grafana/data/src';\n\nimport { getTemplateVariableOptions } from './getTemplateVariableOptions';\n\nexport function withTemplateVariableOptions(\n  optionsPromise: Promise<string[]>,\n  wrapper: (v: TypedVariableModel) => string,\n  filter?: string\n): Promise<string[]> {\n  let templateVariableOptions = getTemplateVariableOptions(wrapper);\n  if (filter) {\n    templateVariableOptions = templateVariableOptions.filter((tvo) => tvo.indexOf(filter) > -1);\n  }\n  return optionsPromise.then((options) => [...templateVariableOptions, ...options]);\n}\n","import { TypedVariableModel } from '@grafana/data/src';\n\nexport function wrapRegex(v: TypedVariableModel): string {\n  return `/^$${v.name}$/`;\n}\n\nexport function wrapPure(v: TypedVariableModel): string {\n  return `$${v.name}`;\n}\n","import { css } from '@emotion/css';\n\nexport const paddingRightClass = css({\n  paddingRight: '4px',\n});\n","import { cx } from '@emotion/css';\n\nimport { Select } from '@grafana/ui';\n\nimport { ResultFormat } from '../../../../../types';\nimport { RESULT_FORMATS } from '../../../constants';\nimport { unwrap } from '../utils/unwrap';\n\nimport { paddingRightClass } from './styles';\n\ntype Props = {\n  inputId?: string;\n  format: ResultFormat;\n  onChange: (newFormat: ResultFormat) => void;\n};\n\nconst className = cx('width-8', paddingRightClass);\n\nexport const FormatAsSection = ({ format, inputId, onChange }: Props): JSX.Element => {\n  return (\n    <Select<ResultFormat>\n      inputId={inputId}\n      className={className}\n      onChange={(v) => {\n        onChange(unwrap(v.value));\n      }}\n      value={format}\n      options={RESULT_FORMATS}\n    />\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport debouncePromise from 'debounce-promise';\nimport { useEffect, useState } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { SelectableValue } from '@grafana/data';\nimport { AsyncSelect, InlineLabel, Input, Select } from '@grafana/ui';\n\nimport { useShadowedState } from '../hooks/useShadowedState';\n\n// this file is a simpler version of `grafana-ui / SegmentAsync.tsx`\n// with some changes:\n// 1. click-outside does not select the value. i think it's better to be explicit here.\n// 2. we set a min-width on the select-element to handle cases where the `value`\n//    is very short, like \"x\", and then you click on it and the select opens,\n//    and it tries to be as short as \"x\" and it does not work well.\n\n// NOTE: maybe these changes could be migrated into the SegmentAsync later\n\ntype SelVal = SelectableValue<string>;\n\n// when allowCustomValue is true, there is no way to enforce the selectableValue\n// enum-type, so i just go with `string`\n\ntype LoadOptions = (filter: string) => Promise<SelVal[]>;\n\ntype Props = {\n  value: string;\n  buttonClassName?: string;\n  loadOptions?: LoadOptions;\n  // if filterByLoadOptions is false,\n  // loadOptions is only executed once,\n  // when the select-box opens,\n  // and as you write, the list gets filtered\n  // by the select-box.\n  // if filterByLoadOptions is true,\n  // as you write the loadOptions is executed again and again,\n  // and it is relied on to filter the results.\n  filterByLoadOptions?: boolean;\n  onChange: (v: SelVal) => void;\n  allowCustomValue?: boolean;\n};\n\nconst selectClass = css({\n  minWidth: '160px',\n});\n\ntype SelProps = {\n  loadOptions: LoadOptions;\n  filterByLoadOptions?: boolean;\n  onClose: () => void;\n  onChange: (v: SelVal) => void;\n  allowCustomValue?: boolean;\n};\n\ntype SelReloadProps = {\n  loadOptions: (filter: string) => Promise<SelVal[]>;\n  onClose: () => void;\n  onChange: (v: SelVal) => void;\n  allowCustomValue?: boolean;\n};\n\n// when a custom value is written into a select-box,\n// by default the new value is prefixed with \"Create:\",\n// and that sounds confusing because here we do not create\n// anything. we change this to just be the entered string.\nconst formatCreateLabel = (v: string) => v;\n\nconst SelReload = ({ loadOptions, allowCustomValue, onChange, onClose }: SelReloadProps): JSX.Element => {\n  // here we rely on the fact that writing text into the <AsyncSelect/>\n  // does not cause a re-render of the current react component.\n  // this way there is only a single render-call,\n  // so there is only a single `debouncedLoadOptions`.\n  // if we want ot make this \"re-render safe,\n  // we will have to put the debounced call into an useRef,\n  // and probably have an useEffect\n  const debouncedLoadOptions = debouncePromise(loadOptions, 1000, { leading: true });\n  return (\n    <div className={selectClass}>\n      <AsyncSelect\n        formatCreateLabel={formatCreateLabel}\n        defaultOptions\n        autoFocus\n        isOpen\n        onCloseMenu={onClose}\n        allowCustomValue={allowCustomValue}\n        loadOptions={debouncedLoadOptions}\n        onChange={onChange}\n        createOptionPosition=\"first\"\n      />\n    </div>\n  );\n};\n\ntype SelSingleLoadProps = {\n  loadOptions: (filter: string) => Promise<SelVal[]>;\n  onClose: () => void;\n  onChange: (v: SelVal) => void;\n  allowCustomValue?: boolean;\n};\n\nconst SelSingleLoad = ({ loadOptions, allowCustomValue, onChange, onClose }: SelSingleLoadProps): JSX.Element => {\n  const [loadState, doLoad] = useAsyncFn(loadOptions, [loadOptions]);\n\n  useEffect(() => {\n    doLoad('');\n  }, [doLoad, loadOptions]);\n\n  return (\n    <div className={selectClass}>\n      <Select\n        isLoading={loadState.loading}\n        formatCreateLabel={formatCreateLabel}\n        autoFocus\n        isOpen={!loadState.loading}\n        onCloseMenu={onClose}\n        allowCustomValue={allowCustomValue}\n        options={loadState.value ?? []}\n        onChange={onChange}\n        createOptionPosition=\"first\"\n      />\n    </div>\n  );\n};\n\nconst Sel = ({ loadOptions, filterByLoadOptions, allowCustomValue, onChange, onClose }: SelProps): JSX.Element => {\n  // unfortunately <Segment/> and <SegmentAsync/> have somewhat different behavior,\n  // so the simplest approach was to just create two separate wrapper-components\n  return filterByLoadOptions ? (\n    <SelReload loadOptions={loadOptions} allowCustomValue={allowCustomValue} onChange={onChange} onClose={onClose} />\n  ) : (\n    <SelSingleLoad\n      loadOptions={loadOptions}\n      allowCustomValue={allowCustomValue}\n      onChange={onChange}\n      onClose={onClose}\n    />\n  );\n};\n\ntype InpProps = {\n  initialValue: string;\n  onChange: (newVal: string) => void;\n  onClose: () => void;\n};\n\nconst Inp = ({ initialValue, onChange, onClose }: InpProps): JSX.Element => {\n  const [currentValue, setCurrentValue] = useShadowedState(initialValue);\n\n  return (\n    <Input\n      autoFocus\n      type=\"text\"\n      spellCheck={false}\n      onBlur={onClose}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter') {\n          onChange(currentValue);\n        }\n      }}\n      onChange={(e) => {\n        setCurrentValue(e.currentTarget.value);\n      }}\n      value={currentValue}\n    />\n  );\n};\n\nconst defaultButtonClass = css({\n  width: 'auto',\n  cursor: 'pointer',\n});\n\nexport const Seg = ({\n  value,\n  buttonClassName,\n  loadOptions,\n  filterByLoadOptions,\n  allowCustomValue,\n  onChange,\n}: Props): JSX.Element => {\n  const [isOpen, setOpen] = useState(false);\n  if (!isOpen) {\n    const className = cx(defaultButtonClass, buttonClassName);\n    return (\n      <InlineLabel\n        as=\"button\"\n        className={className}\n        onClick={() => {\n          setOpen(true);\n        }}\n      >\n        {value}\n      </InlineLabel>\n    );\n  } else {\n    if (loadOptions !== undefined) {\n      return (\n        <Sel\n          loadOptions={loadOptions}\n          filterByLoadOptions={filterByLoadOptions ?? false}\n          allowCustomValue={allowCustomValue}\n          onChange={(v) => {\n            setOpen(false);\n            onChange(v);\n          }}\n          onClose={() => {\n            setOpen(false);\n          }}\n        />\n      );\n    } else {\n      return (\n        <Inp\n          initialValue={value}\n          onClose={() => {\n            setOpen(false);\n          }}\n          onChange={(v) => {\n            setOpen(false);\n            onChange({ value: v, label: v });\n          }}\n        />\n      );\n    }\n  }\n};\n","import { AccessoryButton } from '@grafana/experimental';\n\nimport { DEFAULT_POLICY } from '../../../../../types';\nimport { toSelectableValue } from '../utils/toSelectableValue';\n\nimport { Seg } from './Seg';\n\n// we use the value \"default\" as a magic-value, it means\n// we use the default retention-policy.\n// unfortunately, IF the user has a retention-policy named \"default\",\n// and it is not the default-retention-policy in influxdb,\n// bad things will happen.\n// https://github.com/grafana/grafana/issues/4347 :-(\n// FIXME: we could maybe at least detect here that problem-is-happening,\n// and show an error message or something.\n// unfortunately, currently the ResponseParser does not return the\n// is-default info for the retention-policies, so that should change first.\n\ntype Props = {\n  onChange: (policy: string | undefined, measurement: string | undefined) => void;\n  policy: string | undefined;\n  measurement: string | undefined;\n  getPolicyOptions: () => Promise<string[]>;\n  getMeasurementOptions: (filter: string) => Promise<string[]>;\n};\n\nexport const FromSection = ({\n  policy,\n  measurement,\n  onChange,\n  getPolicyOptions,\n  getMeasurementOptions,\n}: Props): JSX.Element => {\n  const handlePolicyLoadOptions = async () => {\n    const allPolicies = await getPolicyOptions();\n    // if `default` does not exist in the list of policies, we add it\n    const allPoliciesWithDefault = allPolicies.some((p) => p === DEFAULT_POLICY)\n      ? allPolicies\n      : [DEFAULT_POLICY, ...allPolicies];\n\n    return allPoliciesWithDefault.map(toSelectableValue);\n  };\n\n  const handleMeasurementLoadOptions = async (filter: string) => {\n    const allMeasurements = await getMeasurementOptions(filter);\n    return allMeasurements.map(toSelectableValue);\n  };\n\n  return (\n    <>\n      <Seg\n        allowCustomValue\n        value={policy ?? 'using default policy'}\n        loadOptions={handlePolicyLoadOptions}\n        onChange={(v) => {\n          onChange(v.value, measurement);\n        }}\n      />\n      <Seg\n        allowCustomValue\n        value={measurement ?? 'select measurement'}\n        loadOptions={handleMeasurementLoadOptions}\n        filterByLoadOptions\n        onChange={(v) => {\n          onChange(policy, v.value);\n        }}\n      />\n      {measurement && (\n        <AccessoryButton\n          style={{ marginRight: '4px' }}\n          aria-label=\"remove\"\n          icon=\"times\"\n          variant=\"secondary\"\n          onClick={() => {\n            onChange(policy, undefined);\n          }}\n        />\n      )}\n    </>\n  );\n};\n","import { cx } from '@emotion/css';\n\nimport { Input } from '@grafana/ui';\n\nimport { useShadowedState } from '../hooks/useShadowedState';\n\nimport { paddingRightClass } from './styles';\n\ntype Props = {\n  value: string | undefined;\n  onChange: (value: string | undefined) => void;\n  isWide?: boolean;\n  placeholder?: string;\n};\n\nexport const InputSection = ({ value, onChange, isWide, placeholder }: Props): JSX.Element => {\n  const [currentValue, setCurrentValue] = useShadowedState(value);\n\n  const onBlur = () => {\n    // we send empty-string as undefined\n    const newValue = currentValue === '' ? undefined : currentValue;\n    onChange(newValue);\n  };\n\n  return (\n    <>\n      <Input\n        placeholder={placeholder}\n        className={cx((isWide ?? false) ? 'width-14' : 'width-8', paddingRightClass)}\n        type=\"text\"\n        spellCheck={false}\n        onBlur={onBlur}\n        onChange={(e) => {\n          setCurrentValue(e.currentTarget.value);\n        }}\n        value={currentValue ?? ''}\n      />\n    </>\n  );\n};\n","import { cx } from '@emotion/css';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { unwrap } from '../utils/unwrap';\n\nimport { paddingRightClass } from './styles';\n\ntype Mode = 'ASC' | 'DESC';\n\nconst OPTIONS: Array<SelectableValue<Mode>> = [\n  { label: 'ascending', value: 'ASC' },\n  { label: 'descending', value: 'DESC' },\n];\n\nconst className = cx('width-9', paddingRightClass);\n\ntype Props = {\n  value: Mode;\n  onChange: (value: Mode) => void;\n  inputId?: string;\n};\n\nexport const OrderByTimeSection = ({ value, onChange, inputId }: Props): JSX.Element => {\n  return (\n    <>\n      <Select<Mode>\n        inputId={inputId}\n        className={className}\n        onChange={(v) => {\n          onChange(unwrap(v.value));\n        }}\n        value={value}\n        options={OPTIONS}\n      />\n    </>\n  );\n};\n","import { SelectableValue } from '@grafana/data';\n\nimport { unwrap } from '../utils/unwrap';\n\nimport { Seg } from './Seg';\n\ntype Props = {\n  loadOptions: () => Promise<SelectableValue[]>;\n  allowCustomValue?: boolean;\n  onAdd: (v: string) => void;\n};\n\nexport const AddButton = ({ loadOptions, allowCustomValue, onAdd }: Props): JSX.Element => {\n  return (\n    <Seg\n      value=\"+\"\n      loadOptions={loadOptions}\n      allowCustomValue={allowCustomValue}\n      onChange={(v) => {\n        onAdd(unwrap(v.value));\n      }}\n    />\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport { Fragment, useMemo } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { AccessoryButton } from '@grafana/experimental';\nimport { useTheme2 } from '@grafana/ui';\n\nimport { toSelectableValue } from '../utils/toSelectableValue';\nimport { unwrap } from '../utils/unwrap';\n\nimport { AddButton } from './AddButton';\nimport { Seg } from './Seg';\n\nexport type PartParams = Array<{\n  value: string;\n  options: (() => Promise<string[]>) | null;\n}>;\n\ntype Props = {\n  parts: Array<{\n    name: string;\n    params: PartParams;\n  }>;\n  getNewPartOptions: () => Promise<SelectableValue[]>;\n  onChange: (partIndex: number, paramValues: string[]) => void;\n  onRemovePart: (index: number) => void;\n  onAddNewPart: (type: string) => void;\n};\n\nconst noRightMarginPaddingClass = css({\n  paddingRight: '0',\n  marginRight: '0',\n});\n\ntype PartProps = {\n  name: string;\n  params: PartParams;\n  onRemove: () => void;\n  onChange: (paramValues: string[]) => void;\n};\n\nconst noHorizMarginPaddingClass = css({\n  paddingLeft: '0',\n  paddingRight: '0',\n  marginLeft: '0',\n  marginRight: '0',\n});\n\nconst getPartClass = (theme: GrafanaTheme2) => {\n  return cx(\n    'gf-form-label',\n    css({\n      paddingLeft: '0',\n      // gf-form-label class makes certain css attributes incorrect\n      // for the selectbox-dropdown, so we have to \"reset\" them back\n      lineHeight: theme.typography.body.lineHeight,\n      fontSize: theme.typography.body.fontSize,\n    })\n  );\n};\n\nconst Part = ({ name, params, onChange }: PartProps): JSX.Element => {\n  const theme = useTheme2();\n  const partClass = useMemo(() => getPartClass(theme), [theme]);\n\n  const onParamChange = (par: string, i: number) => {\n    const newParams = params.map((p) => p.value);\n    newParams[i] = par;\n    onChange(newParams);\n  };\n  return (\n    <div className={partClass}>\n      <button className={cx('gf-form-label', noRightMarginPaddingClass)}>{name}</button>(\n      {params.map((p, i) => {\n        const { value, options } = p;\n        const isLast = i === params.length - 1;\n        const loadOptions =\n          options !== null ? () => options().then((items) => items.map(toSelectableValue)) : undefined;\n        return (\n          <Fragment key={i}>\n            <Seg\n              allowCustomValue\n              value={value}\n              buttonClassName={noHorizMarginPaddingClass}\n              loadOptions={loadOptions}\n              onChange={(v) => {\n                onParamChange(unwrap(v.value), i);\n              }}\n            />\n            {!isLast && ','}\n          </Fragment>\n        );\n      })}\n      )\n    </div>\n  );\n};\n\nexport const PartListSection = ({\n  parts,\n  getNewPartOptions,\n  onAddNewPart,\n  onRemovePart,\n  onChange,\n}: Props): JSX.Element => {\n  return (\n    <>\n      {parts.map((part, index) => (\n        <Fragment key={index}>\n          <Part\n            name={part.name}\n            params={part.params}\n            onRemove={() => {\n              onRemovePart(index);\n            }}\n            onChange={(pars) => {\n              onChange(index, pars);\n            }}\n          />\n          <AccessoryButton\n            style={{ marginRight: '4px' }}\n            aria-label=\"remove\"\n            icon=\"times\"\n            variant=\"secondary\"\n            onClick={() => {\n              onRemovePart(index);\n            }}\n          />\n        </Fragment>\n      ))}\n      <AddButton loadOptions={getNewPartOptions} onAdd={onAddNewPart} />\n    </>\n  );\n};\n","import { InfluxQueryTag } from '../../../../../types';\n\nfunction isRegex(text: string): boolean {\n  return /^\\/.*\\/$/.test(text);\n}\n\n// FIXME: sync these to the query-string-generation-code\n// probably it's in influx_query_model.ts\nexport function getOperator(tag: InfluxQueryTag): string {\n  return tag.operator ?? (isRegex(tag.value) ? '=~' : '=');\n}\n\n// FIXME: sync these to the query-string-generation-code\n// probably it's in influx_query_model.ts\nexport function getCondition(tag: InfluxQueryTag, isFirst: boolean): string | undefined {\n  return isFirst ? undefined : (tag.condition ?? 'AND');\n}\n\nexport function adjustOperatorIfNeeded(currentOperator: string, newTagValue: string): string {\n  const isCurrentOperatorRegex = currentOperator === '=~' || currentOperator === '!~';\n  const isNewTagValueRegex = isRegex(newTagValue);\n\n  if (isNewTagValueRegex) {\n    return isCurrentOperatorRegex ? currentOperator : '=~';\n  } else {\n    return isCurrentOperatorRegex ? '=' : currentOperator;\n  }\n}\n","import { SelectableValue } from '@grafana/data';\nimport { AccessoryButton } from '@grafana/experimental';\n\nimport { InfluxQueryTag } from '../../../../../types';\nimport { adjustOperatorIfNeeded, getCondition, getOperator } from '../utils/tagUtils';\nimport { toSelectableValue } from '../utils/toSelectableValue';\n\nimport { AddButton } from './AddButton';\nimport { Seg } from './Seg';\n\ntype KnownOperator = '=' | '!=' | '<>' | '<' | '>' | '>=' | '<=' | '=~' | '!~' | 'Is' | 'Is Not';\nconst knownOperators: KnownOperator[] = ['=', '!=', '<>', '<', '>', '>=', '<=', '=~', '!~', 'Is', 'Is Not'];\n\ntype KnownCondition = 'AND' | 'OR';\nconst knownConditions: KnownCondition[] = ['AND', 'OR'];\n\nconst operatorOptions: Array<SelectableValue<KnownOperator>> = knownOperators.map(toSelectableValue);\nconst condititonOptions: Array<SelectableValue<KnownCondition>> = knownConditions.map(toSelectableValue);\n\ntype Props = {\n  tags: InfluxQueryTag[];\n  onChange: (tags: InfluxQueryTag[]) => void;\n  getTagKeyOptions: () => Promise<string[]>;\n  getTagValueOptions: (key: string) => Promise<string[]>;\n};\n\ntype TagProps = {\n  tag: InfluxQueryTag;\n  isFirst: boolean;\n  onRemove: () => void;\n  onChange: (tag: InfluxQueryTag) => void;\n  getTagKeyOptions: () => Promise<string[]>;\n  getTagValueOptions: (key: string) => Promise<string[]>;\n};\n\nconst loadConditionOptions = () => Promise.resolve(condititonOptions);\n\nconst loadOperatorOptions = () => Promise.resolve(operatorOptions);\n\nconst Tag = ({ tag, isFirst, onRemove, onChange, getTagKeyOptions, getTagValueOptions }: TagProps): JSX.Element => {\n  const operator = getOperator(tag);\n  const condition = getCondition(tag, isFirst);\n\n  const getTagKeySegmentOptions = () => {\n    return getTagKeyOptions()\n      .catch((err) => {\n        // in this UI element we add a special item to the list of options,\n        // that is used to remove the element.\n        // this causes a problem: if `getTagKeyOptions` fails with an error,\n        // the remove-filter option is never added to the list,\n        // and the UI element can not be removed.\n        // to avoid it, we catch any potential errors coming from `getTagKeyOptions`,\n        // log the error, and pretend that the list of options is an empty list.\n        // this way the remove-item option can always be added to the list.\n        console.error(err);\n        return [];\n      })\n      .then((tags) => tags.map(toSelectableValue));\n  };\n\n  const getTagValueSegmentOptions = () => {\n    return getTagValueOptions(tag.key).then((tags) => tags.map(toSelectableValue));\n  };\n\n  return (\n    <div className=\"gf-form\">\n      {condition != null && (\n        <Seg\n          value={condition}\n          loadOptions={loadConditionOptions}\n          onChange={(v) => {\n            onChange({ ...tag, condition: v.value });\n          }}\n        />\n      )}\n      <Seg\n        allowCustomValue\n        value={tag.key}\n        loadOptions={getTagKeySegmentOptions}\n        onChange={(v) => {\n          const { value } = v;\n          if (value === undefined) {\n            onRemove();\n          } else {\n            onChange({ ...tag, key: value ?? '' });\n          }\n        }}\n      />\n      <Seg\n        value={operator}\n        loadOptions={loadOperatorOptions}\n        onChange={(op) => {\n          onChange({ ...tag, operator: op.value });\n        }}\n      />\n      <Seg\n        allowCustomValue\n        value={tag.value}\n        loadOptions={getTagValueSegmentOptions}\n        onChange={(v) => {\n          const value = v.value ?? '';\n          onChange({ ...tag, value, operator: adjustOperatorIfNeeded(operator, value) });\n        }}\n      />\n      <AccessoryButton\n        style={{ marginRight: '4px' }}\n        aria-label=\"remove\"\n        icon=\"times\"\n        variant=\"secondary\"\n        onClick={() => {\n          onRemove();\n        }}\n      />\n    </div>\n  );\n};\n\nexport const TagsSection = ({ tags, onChange, getTagKeyOptions, getTagValueOptions }: Props): JSX.Element => {\n  const onTagChange = (newTag: InfluxQueryTag, index: number) => {\n    const newTags = tags.map((tag, i) => {\n      return index === i ? newTag : tag;\n    });\n    onChange(newTags);\n  };\n\n  const onTagRemove = (index: number) => {\n    const newTags = tags.filter((t, i) => i !== index);\n    onChange(newTags);\n  };\n\n  const getTagKeySegmentOptions = () => {\n    return getTagKeyOptions().then((tags) => tags.map(toSelectableValue));\n  };\n\n  const addNewTag = (tagKey: string, isFirst: boolean) => {\n    const minimalTag: InfluxQueryTag = {\n      key: tagKey,\n      value: 'select tag value',\n    };\n\n    const newTag: InfluxQueryTag = {\n      key: minimalTag.key,\n      value: minimalTag.value,\n      operator: getOperator(minimalTag),\n      condition: getCondition(minimalTag, isFirst),\n    };\n\n    onChange([...tags, newTag]);\n  };\n\n  return (\n    <>\n      {tags.map((t, i) => (\n        <Tag\n          tag={t}\n          isFirst={i === 0}\n          key={i}\n          onChange={(newT) => {\n            onTagChange(newT, i);\n          }}\n          onRemove={() => {\n            onTagRemove(i);\n          }}\n          getTagKeyOptions={getTagKeyOptions}\n          getTagValueOptions={getTagValueOptions}\n        />\n      ))}\n      <AddButton\n        allowCustomValue\n        loadOptions={getTagKeySegmentOptions}\n        onAdd={(v) => {\n          addNewTag(v, tags.length === 0);\n        }}\n      />\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport { useId, useMemo } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { InlineLabel, SegmentSection, useStyles2 } from '@grafana/ui';\n\nimport InfluxDatasource from '../../../../../datasource';\nimport {\n  getAllMeasurements,\n  getAllPolicies,\n  getFieldKeys,\n  getTagKeys,\n  getTagValues,\n} from '../../../../../influxql_metadata_query';\nimport {\n  addNewGroupByPart,\n  addNewSelectPart,\n  changeGroupByPart,\n  changeSelectPart,\n  normalizeQuery,\n  removeGroupByPart,\n  removeSelectPart,\n} from '../../../../../queryUtils';\nimport { InfluxQuery, InfluxQueryTag } from '../../../../../types';\nimport { DEFAULT_RESULT_FORMAT } from '../../../constants';\nimport { filterTags } from '../utils/filterTags';\nimport { getNewGroupByPartOptions, getNewSelectPartOptions, makePartList } from '../utils/partListUtils';\nimport { withTemplateVariableOptions } from '../utils/withTemplateVariableOptions';\nimport { wrapPure, wrapRegex } from '../utils/wrapper';\n\nimport { FormatAsSection } from './FormatAsSection';\nimport { FromSection } from './FromSection';\nimport { InputSection } from './InputSection';\nimport { OrderByTimeSection } from './OrderByTimeSection';\nimport { PartListSection } from './PartListSection';\nimport { TagsSection } from './TagsSection';\n\ntype Props = {\n  query: InfluxQuery;\n  onChange: (query: InfluxQuery) => void;\n  onRunQuery: () => void;\n  datasource: InfluxDatasource;\n};\n\nexport const VisualInfluxQLEditor = (props: Props): JSX.Element => {\n  const uniqueId = useId();\n  const formatAsId = `influxdb-qe-format-as-${uniqueId}`;\n  const orderByTimeId = `influxdb-qe-order-by${uniqueId}`;\n\n  const styles = useStyles2(getStyles);\n  const query = normalizeQuery(props.query);\n  const { datasource } = props;\n  const { measurement, policy } = query;\n\n  const allTagKeys = useMemo(async () => {\n    const tagKeys = (await getTagKeys(datasource, measurement, policy)).map((tag) => `${tag}::tag`);\n\n    const fieldKeys = (await getFieldKeys(datasource, measurement || '', policy)).map((field) => `${field}::field`);\n\n    return new Set([...tagKeys, ...fieldKeys]);\n  }, [measurement, policy, datasource]);\n\n  const selectLists = useMemo(() => {\n    const dynamicSelectPartOptions = new Map([\n      [\n        'field_0',\n        () => {\n          return measurement !== undefined ? getFieldKeys(datasource, measurement, policy) : Promise.resolve([]);\n        },\n      ],\n    ]);\n    return (query.select ?? []).map((sel) => makePartList(sel, dynamicSelectPartOptions));\n  }, [measurement, policy, query.select, datasource]);\n\n  // the following function is not complicated enough to memoize, but it's result\n  // is used in both memoized and un-memoized parts, so we have no choice\n  const getMemoizedTagKeys = useMemo(\n    () => async () => {\n      return [...(await allTagKeys)];\n    },\n    [allTagKeys]\n  );\n\n  const groupByList = useMemo(() => {\n    const dynamicGroupByPartOptions = new Map([['tag_0', getMemoizedTagKeys]]);\n\n    return makePartList(query.groupBy ?? [], dynamicGroupByPartOptions);\n  }, [getMemoizedTagKeys, query.groupBy]);\n\n  const onAppliedChange = (newQuery: InfluxQuery) => {\n    props.onChange(newQuery);\n    props.onRunQuery();\n  };\n  const handleFromSectionChange = (p: string | undefined, m: string | undefined) => {\n    onAppliedChange({\n      ...query,\n      policy: p,\n      measurement: m,\n    });\n  };\n\n  const handleTagsSectionChange = (tags: InfluxQueryTag[]) => {\n    // we set empty-arrays to undefined\n    onAppliedChange({\n      ...query,\n      tags: tags.length === 0 ? undefined : tags,\n    });\n  };\n\n  return (\n    <div>\n      <SegmentSection label=\"FROM\" fill={true}>\n        <FromSection\n          policy={policy}\n          measurement={measurement}\n          getPolicyOptions={() => withTemplateVariableOptions(getAllPolicies(datasource), wrapPure)}\n          getMeasurementOptions={(filter) =>\n            withTemplateVariableOptions(\n              allTagKeys.then((keys) =>\n                getAllMeasurements(datasource, filterTags(query.tags ?? [], keys), filter === '' ? undefined : filter)\n              ),\n              wrapRegex,\n              filter\n            )\n          }\n          onChange={handleFromSectionChange}\n        />\n        <InlineLabel width=\"auto\" className={styles.inlineLabel}>\n          WHERE\n        </InlineLabel>\n        <TagsSection\n          tags={query.tags ?? []}\n          onChange={handleTagsSectionChange}\n          getTagKeyOptions={getMemoizedTagKeys}\n          getTagValueOptions={(key) =>\n            withTemplateVariableOptions(\n              allTagKeys.then((keys) => getTagValues(datasource, filterTags(query.tags ?? [], keys), key, measurement)),\n              wrapRegex\n            )\n          }\n        />\n      </SegmentSection>\n      {selectLists.map((sel, index) => (\n        <SegmentSection key={index} label={index === 0 ? 'SELECT' : ''} fill={true}>\n          <PartListSection\n            parts={sel}\n            getNewPartOptions={() => Promise.resolve(getNewSelectPartOptions())}\n            onChange={(partIndex, newParams) => {\n              const newQuery = changeSelectPart(query, index, partIndex, newParams);\n              onAppliedChange(newQuery);\n            }}\n            onAddNewPart={(type) => {\n              onAppliedChange(addNewSelectPart(query, type, index));\n            }}\n            onRemovePart={(partIndex) => {\n              onAppliedChange(removeSelectPart(query, partIndex, index));\n            }}\n          />\n        </SegmentSection>\n      ))}\n      <SegmentSection label=\"GROUP BY\" fill={true}>\n        <PartListSection\n          parts={groupByList}\n          getNewPartOptions={() => getNewGroupByPartOptions(query, getMemoizedTagKeys)}\n          onChange={(partIndex, newParams) => {\n            const newQuery = changeGroupByPart(query, partIndex, newParams);\n            onAppliedChange(newQuery);\n          }}\n          onAddNewPart={(type) => {\n            onAppliedChange(addNewGroupByPart(query, type));\n          }}\n          onRemovePart={(partIndex) => {\n            onAppliedChange(removeGroupByPart(query, partIndex));\n          }}\n        />\n      </SegmentSection>\n      <SegmentSection label=\"TIMEZONE\" fill={true}>\n        <InputSection\n          placeholder=\"(optional)\"\n          value={query.tz}\n          onChange={(tz) => {\n            onAppliedChange({ ...query, tz });\n          }}\n        />\n        <InlineLabel htmlFor={orderByTimeId} width=\"auto\" className={styles.inlineLabel}>\n          ORDER BY TIME\n        </InlineLabel>\n        <OrderByTimeSection\n          inputId={orderByTimeId}\n          value={query.orderByTime === 'DESC' ? 'DESC' : 'ASC' /* FIXME: make this shared with influx_query_model */}\n          onChange={(v) => {\n            onAppliedChange({ ...query, orderByTime: v });\n          }}\n        />\n      </SegmentSection>\n      {/* query.fill is ignored in the query-editor, and it is deleted whenever\n          query-editor changes. the influx_query_model still handles it, but the new\n          approach seem to be to handle \"fill\" inside query.groupBy. so, if you\n          have a panel where in the json you have query.fill, it will be applied,\n          as long as you do not edit that query. */}\n      <SegmentSection label=\"LIMIT\" fill={true}>\n        <InputSection\n          placeholder=\"(optional)\"\n          value={query.limit?.toString()}\n          onChange={(limit) => {\n            onAppliedChange({ ...query, limit });\n          }}\n        />\n        <InlineLabel width=\"auto\" className={styles.inlineLabel}>\n          SLIMIT\n        </InlineLabel>\n        <InputSection\n          placeholder=\"(optional)\"\n          value={query.slimit?.toString()}\n          onChange={(slimit) => {\n            onAppliedChange({ ...query, slimit });\n          }}\n        />\n      </SegmentSection>\n      <SegmentSection htmlFor={formatAsId} label=\"FORMAT AS\" fill={true}>\n        <FormatAsSection\n          inputId={formatAsId}\n          format={query.resultFormat ?? DEFAULT_RESULT_FORMAT}\n          onChange={(format) => {\n            onAppliedChange({ ...query, resultFormat: format });\n          }}\n        />\n        {query.resultFormat !== 'table' && (\n          <>\n            <InlineLabel width=\"auto\" className={styles.inlineLabel}>\n              ALIAS\n            </InlineLabel>\n            <InputSection\n              isWide\n              placeholder=\"Naming pattern\"\n              value={query.alias}\n              onChange={(alias) => {\n                onAppliedChange({ ...query, alias });\n              }}\n            />\n          </>\n        )}\n      </SegmentSection>\n    </div>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    inlineLabel: css`\n      color: ${theme.colors.primary.text};\n    `,\n  };\n}\n","import { css } from '@emotion/css';\n\nimport { QueryEditorProps } from '@grafana/data/src';\n\nimport InfluxDatasource from '../../../datasource';\nimport { buildRawQuery } from '../../../queryUtils';\nimport { InfluxOptions, InfluxQuery, InfluxVersion } from '../../../types';\n\nimport { FluxQueryEditor } from './flux/FluxQueryEditor';\nimport { FSQLEditor } from './fsql/FSQLEditor';\nimport { QueryEditorModeSwitcher } from './influxql/QueryEditorModeSwitcher';\nimport { RawInfluxQLEditor } from './influxql/code/RawInfluxQLEditor';\nimport { VisualInfluxQLEditor as VisualInfluxQLEditor } from './influxql/visual/VisualInfluxQLEditor';\n\ntype Props = QueryEditorProps<InfluxDatasource, InfluxQuery, InfluxOptions>;\n\nexport const QueryEditor = ({ query, onChange, onRunQuery, datasource }: Props) => {\n  switch (datasource.version) {\n    case InfluxVersion.Flux:\n      return (\n        <div className=\"gf-form-query-content\">\n          <FluxQueryEditor query={query} onChange={onChange} datasource={datasource} />\n        </div>\n      );\n    case InfluxVersion.SQL:\n      return <FSQLEditor datasource={datasource} query={query} onChange={onChange} onRunQuery={onRunQuery} />;\n    case InfluxVersion.InfluxQL:\n    default:\n      return (\n        <div className={css({ display: 'flex' })}>\n          <div className={css({ flexGrow: 1 })}>\n            {query.rawQuery ? (\n              <RawInfluxQLEditor query={query} onChange={onChange} onRunQuery={onRunQuery} />\n            ) : (\n              <VisualInfluxQLEditor query={query} onChange={onChange} onRunQuery={onRunQuery} datasource={datasource} />\n            )}\n          </div>\n          <QueryEditorModeSwitcher\n            isRaw={query.rawQuery ?? false}\n            onChange={(value) => {\n              onChange({ ...query, query: buildRawQuery(query), rawQuery: value });\n              onRunQuery();\n            }}\n          />\n        </div>\n      );\n  }\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nconst CHEAT_SHEET_ITEMS = [\n  {\n    title: 'Getting started',\n    label:\n      'Start by selecting a measurement and field from the dropdown above. You can then use the tag selector to further narrow your search.',\n  },\n];\n\nexport const InfluxCheatSheet = () => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div>\n      <h2>InfluxDB Cheat Sheet</h2>\n      {CHEAT_SHEET_ITEMS.map((item) => (\n        <div className={styles.cheatSheetItem} key={item.title}>\n          <div className={styles.cheatSheetItemTitle}>{item.title}</div>\n          {item.label}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  cheatSheetItem: css({\n    margin: theme.spacing(3, 0),\n  }),\n  cheatSheetItemTitle: css({\n    fontSize: theme.typography.h3.fontSize,\n  }),\n});\n","import { InfluxCheatSheet } from './InfluxCheatSheet';\n\nexport function InfluxStartPage() {\n  return <InfluxCheatSheet />;\n}\n","import { useState } from 'react';\n\nimport { QueryEditorProps } from '@grafana/data/src';\nimport { InlineFormLabel, Input, Stack } from '@grafana/ui/src';\n\nimport InfluxDatasource from '../../../datasource';\nimport { InfluxOptions, InfluxQuery } from '../../../types';\n\nexport const AnnotationEditor = (props: QueryEditorProps<InfluxDatasource, InfluxQuery, InfluxOptions>) => {\n  const { query, onChange } = props;\n  const [eventQuery, setEventQuery] = useState<string>(query.query ?? '');\n\n  const [textColumn, setTextColumn] = useState<string>(query.textColumn ?? '');\n  const [tagsColumn, setTagsColumn] = useState<string>(query.tagsColumn ?? '');\n  const [timeEndColumn, setTimeEndColumn] = useState<string>(query?.timeEndColumn ?? '');\n  const [titleColumn] = useState<string>(query?.titleColumn ?? '');\n  const updateValue = <K extends keyof InfluxQuery, V extends InfluxQuery[K]>(key: K, val: V) => {\n    onChange({\n      ...query,\n      [key]: val,\n      rawQuery: true,\n      fromAnnotations: true,\n      textEditor: true,\n    });\n  };\n  return (\n    <Stack gap={5} direction=\"column\">\n      <Stack gap={0.5} direction=\"column\">\n        <Stack gap={0}>\n          <InlineFormLabel width={12}>InfluxQL Query</InlineFormLabel>\n          <Input\n            value={eventQuery}\n            onChange={(e) => setEventQuery(e.currentTarget.value ?? '')}\n            onBlur={() => updateValue('query', eventQuery)}\n            placeholder=\"select text from events where $timeFilter limit 1000\"\n          />\n        </Stack>\n        <InlineFormLabel\n          width={12}\n          tooltip={\n            <div>\n              If your influxdb query returns more than one field you need to specify the column names below. An\n              annotation event is composed of a title, tags, and an additional text field. Optionally you can map the\n              timeEnd column for region annotation usage.\n            </div>\n          }\n        >\n          Field mappings\n        </InlineFormLabel>\n        <Stack gap={0.5} alignItems={'flex-start'} wrap={'wrap'}>\n          <Stack gap={0}>\n            <InlineFormLabel width={12}>Text</InlineFormLabel>\n            <Input\n              value={textColumn}\n              onChange={(e) => setTextColumn(e.currentTarget.value ?? '')}\n              onBlur={() => updateValue('textColumn', textColumn)}\n            />\n          </Stack>\n          <Stack gap={0}>\n            <InlineFormLabel width={12}>Tags</InlineFormLabel>\n            <Input\n              value={tagsColumn}\n              onChange={(e) => setTagsColumn(e.currentTarget.value ?? '')}\n              onBlur={() => updateValue('tagsColumn', tagsColumn)}\n            />\n          </Stack>\n\n          <Stack gap={0}>\n            <InlineFormLabel width={12}>TimeEnd</InlineFormLabel>\n            <Input\n              value={timeEndColumn}\n              onChange={(e) => setTimeEndColumn(e.currentTarget.value ?? '')}\n              onBlur={() => updateValue('timeEndColumn', timeEndColumn)}\n            />\n          </Stack>\n          <div className=\"gf-form ng-hide\">\n            <InlineFormLabel width={12}>Title</InlineFormLabel>\n            <Input defaultValue={titleColumn} />\n          </div>\n        </Stack>\n      </Stack>\n      {/*Empty div to preserve the bottom margin */}\n      <div />\n    </Stack>\n  );\n};\n","import { each, map, includes, flatten, keys } from 'lodash';\n\nimport { FieldType, QueryResultMeta, TimeSeries, TableData } from '@grafana/data';\nimport TableModel from 'app/core/TableModel';\n\nexport default class InfluxSeries {\n  refId?: string;\n  series: any;\n  alias: any;\n  annotation: any;\n  meta?: QueryResultMeta;\n\n  constructor(options: { series: any; alias?: any; annotation?: any; meta?: QueryResultMeta; refId?: string }) {\n    this.series = options.series;\n    this.alias = options.alias;\n    this.annotation = options.annotation;\n    this.meta = options.meta;\n    this.refId = options.refId;\n  }\n\n  getTimeSeries(): TimeSeries[] {\n    const output: TimeSeries[] = [];\n    let i, j;\n\n    if (this.series.length === 0) {\n      return output;\n    }\n\n    each(this.series, (series) => {\n      const columns = series.columns.length;\n      const tags = map(series.tags, (value, key) => {\n        return key + ': ' + value;\n      });\n\n      for (j = 1; j < columns; j++) {\n        let seriesName = series.name;\n        const columnName = series.columns[j];\n        if (columnName !== 'value') {\n          seriesName = seriesName + '.' + columnName;\n        }\n\n        if (this.alias) {\n          seriesName = this._getSeriesName(series, j);\n        } else if (series.tags) {\n          seriesName = seriesName + ' {' + tags.join(', ') + '}';\n        }\n\n        const datapoints = [];\n        if (series.values) {\n          for (i = 0; i < series.values.length; i++) {\n            datapoints[i] = [series.values[i][j], series.values[i][0]];\n          }\n        }\n\n        output.push({\n          title: seriesName,\n          target: seriesName,\n          datapoints: datapoints,\n          tags: series.tags,\n          meta: this.meta,\n          refId: this.refId,\n        });\n      }\n    });\n\n    return output;\n  }\n\n  _getSeriesName(series: any, index: number) {\n    const regex = /\\$(\\w+)|\\[\\[([\\s\\S]+?)\\]\\]/g;\n    const segments = series.name.split('.');\n\n    return this.alias.replace(regex, (match: any, g1: any, g2: any) => {\n      const group = g1 || g2;\n      const segIndex = parseInt(group, 10);\n\n      if (group === 'm' || group === 'measurement') {\n        return series.name;\n      }\n      if (group === 'col') {\n        return series.columns[index];\n      }\n      if (!isNaN(segIndex)) {\n        return segments[segIndex] ?? match;\n      }\n      if (group.indexOf('tag_') !== 0) {\n        return match;\n      }\n\n      const tag = group.replace('tag_', '');\n      if (!series.tags) {\n        return match;\n      }\n      return series.tags[tag];\n    });\n  }\n\n  getAnnotations() {\n    const list: any[] = [];\n\n    each(this.series, (series) => {\n      let titleCol: any = null;\n      let timeCol: any = null;\n      let timeEndCol: any = null;\n      const tagsCol: any = [];\n      let textCol: any = null;\n\n      each(series.columns, (column, index) => {\n        if (column === 'time') {\n          timeCol = index;\n          return;\n        }\n        if (column === 'sequence_number') {\n          return;\n        }\n        if (column === this.annotation.titleColumn) {\n          titleCol = index;\n          return;\n        }\n        if (includes((this.annotation.tagsColumn || '').replace(' ', '').split(','), column)) {\n          tagsCol.push(index);\n          return;\n        }\n        if (column === this.annotation.textColumn) {\n          textCol = index;\n          return;\n        }\n        if (column === this.annotation.timeEndColumn) {\n          timeEndCol = index;\n          return;\n        }\n        // legacy case\n        if (!titleCol && textCol !== index) {\n          titleCol = index;\n        }\n      });\n\n      each(series.values, (value) => {\n        const data = {\n          annotation: this.annotation,\n          time: +new Date(value[timeCol]),\n          title: value[titleCol],\n          timeEnd: value[timeEndCol],\n          // Remove empty values, then split in different tags for comma separated values\n          tags: flatten(\n            tagsCol\n              .filter((t: any) => {\n                return value[t];\n              })\n              .map((t: any) => {\n                return value[t].split(',');\n              })\n          ),\n          text: value[textCol],\n        };\n\n        list.push(data);\n      });\n    });\n\n    return list;\n  }\n\n  getTable(): TableData {\n    const table = new TableModel();\n    let i, j;\n\n    table.refId = this.refId;\n    table.meta = this.meta;\n\n    if (this.series.length === 0) {\n      return table;\n    }\n\n    // the order is:\n    // - first the first item from the value-array (this is often (always?) the timestamp)\n    // - then all the tag-values\n    // - then the rest of the value-array\n    //\n    // we have to keep this order both in table.columns and table.rows\n\n    each(this.series, (series: any, seriesIndex: number) => {\n      if (seriesIndex === 0) {\n        const firstCol = series.columns[0];\n        // Check the first column's name, if it is `time`, we\n        // mark it as having the type time\n        const firstTableCol = firstCol === 'time' ? { text: 'Time', type: FieldType.time } : { text: firstCol };\n        table.columns.push(firstTableCol);\n        each(keys(series.tags), (key) => {\n          table.columns.push({ text: key });\n        });\n        for (j = 1; j < series.columns.length; j++) {\n          table.columns.push({ text: series.columns[j] });\n        }\n      }\n\n      if (series.values) {\n        for (i = 0; i < series.values.length; i++) {\n          const values = series.values[i];\n          const reordered = [values[0]];\n          if (series.tags) {\n            for (const key in series.tags) {\n              if (series.tags.hasOwnProperty(key)) {\n                reordered.push(series.tags[key]);\n              }\n            }\n          }\n          for (j = 1; j < values.length; j++) {\n            reordered.push(values[j]);\n          }\n          table.rows.push(reordered);\n        }\n      }\n    });\n\n    return table;\n  }\n}\n","import { InfluxQuery, InfluxQueryTag } from './types';\n\ntype LegacyAnnotation = {\n  query?: string;\n  queryType?: string;\n  fromAnnotations?: boolean;\n  tagsColumn?: string;\n  textColumn?: string;\n  timeEndColumn?: string;\n  titleColumn?: string;\n  name?: string;\n  target?: {\n    limit?: string | number | undefined;\n    matchAny?: boolean;\n    tags?: InfluxQueryTag[];\n    type?: string;\n  };\n};\n\n// this becomes the target in the migrated annotations\nconst migrateLegacyAnnotation = (json: LegacyAnnotation) => {\n  // eslint-ignore-next-line\n  const target: InfluxQuery = {\n    refId: '',\n    query: json.query ?? '',\n    queryType: 'tags',\n    fromAnnotations: true,\n    tagsColumn: json.tagsColumn ?? '',\n    textColumn: json.textColumn ?? '',\n    timeEndColumn: json.timeEndColumn ?? '',\n    titleColumn: json.titleColumn ?? '',\n    name: json.name ?? '',\n  };\n\n  // handle json target fields\n  if (json.target && json.target.limit) {\n    target.limit = json.target.limit;\n  }\n\n  if (json.target && json.target.matchAny) {\n    target.matchAny = json.target.matchAny;\n  }\n\n  if (json.target && json.target.tags) {\n    target.tags = json.target.tags;\n  }\n\n  if (json.target && json.target.type) {\n    target.type = json.target.type;\n  }\n\n  return target;\n};\n\n// eslint-ignore-next-line\nexport const prepareAnnotation = (json: any) => {\n  // make sure that any additional target fields are migrated\n  json.target = json.target && !json.target?.query ? migrateLegacyAnnotation(json) : json.target;\n\n  return json;\n};\n","import { each, flatten, groupBy, isArray } from 'lodash';\n\nimport { AnnotationEvent, DataFrame, FieldType, QueryResultMeta } from '@grafana/data';\nimport { BackendDataSourceResponse, FetchResponse, toDataQueryResponse } from '@grafana/runtime';\nimport TableModel from 'app/core/TableModel';\n\nimport { InfluxQuery } from './types';\n\nexport default class ResponseParser {\n  parse(query: string, results: { results: any }) {\n    if (!results?.results || results.results.length === 0) {\n      return [];\n    }\n\n    const influxResults = results.results[0];\n    if (!influxResults.series) {\n      return [];\n    }\n\n    const normalizedQuery = query.toLowerCase();\n    const isRetentionPolicyQuery = normalizedQuery.indexOf('show retention policies') >= 0;\n    const isValueFirst = normalizedQuery.indexOf('show field keys') >= 0 || isRetentionPolicyQuery;\n\n    const res = new Set<string>();\n    each(influxResults.series, (serie) => {\n      each(serie.values, (value) => {\n        if (isArray(value)) {\n          // In general, there are 2 possible shapes for the returned value.\n          // The first one is a two-element array,\n          // where the first element is somewhat a metadata value:\n          // the tag name for SHOW TAG VALUES queries,\n          // the time field for SELECT queries, etc.\n          // The second shape is an one-element array,\n          // that is containing an immediate value.\n          // For example, SHOW FIELD KEYS queries return such shape.\n          // Note, pre-0.11 versions return\n          // the second shape for SHOW TAG VALUES queries\n          // (while the newer versions—first).\n\n          if (isValueFirst) {\n            res.add(value[0].toString());\n          } else if (value[1] !== undefined) {\n            res.add(value[1].toString());\n          } else {\n            res.add(value[0].toString());\n          }\n        } else {\n          res.add(value.toString());\n        }\n      });\n    });\n\n    // NOTE: it is important to keep the order of items in the parsed output\n    // the same as it was in the influxdb-response.\n    // we use a `Set` to collect the unique-results, and `Set` iteration\n    // order is insertion-order, so this should be ok.\n    return Array.from(res).map((v) => ({ text: v }));\n  }\n\n  getTable(dfs: DataFrame[], target: InfluxQuery, meta: QueryResultMeta): TableModel {\n    let table = new TableModel();\n\n    if (dfs.length > 0) {\n      table.meta = {\n        ...meta,\n        executedQueryString: dfs[0].meta?.executedQueryString,\n      };\n\n      table.refId = target.refId;\n      table = getTableCols(dfs, table, target);\n\n      // if group by tag(s) added\n      if (dfs[0].fields[1] && dfs[0].fields[1].labels) {\n        let dfsByLabels = groupBy(dfs, (df: DataFrame) =>\n          df.fields[1].labels ? Object.values(df.fields[1].labels!) : null\n        );\n        const labels = Object.keys(dfsByLabels);\n        const dfsByLabelValues = Object.values(dfsByLabels);\n\n        for (let i = 0; i < dfsByLabelValues.length; i++) {\n          table = getTableRows(dfsByLabelValues[i], table, [...labels[i].split(',')]);\n        }\n      } else {\n        table = getTableRows(dfs, table, []);\n      }\n    }\n\n    return table;\n  }\n\n  async transformAnnotationResponse(\n    annotation: InfluxQuery,\n    data: FetchResponse<BackendDataSourceResponse>,\n    target: InfluxQuery\n  ): Promise<AnnotationEvent[]> {\n    const rsp = toDataQueryResponse(data, [target]);\n\n    if (!rsp) {\n      return [];\n    }\n\n    const table = this.getTable(rsp.data, target, {});\n    const list: AnnotationEvent[] = [];\n    let titleColIndex = 0;\n    let timeColIndex = 0;\n    let timeEndColIndex = 0;\n    let textColIndex = 0;\n    const tagsColIndexes: number[] = [];\n\n    each(table.columns, (column, index) => {\n      if (column.text.toLowerCase() === 'time') {\n        timeColIndex = index;\n        return;\n      }\n      if (column.text === annotation.titleColumn) {\n        titleColIndex = index;\n        return;\n      }\n      if (colContainsTag(column.text, annotation.tagsColumn)) {\n        tagsColIndexes.push(index);\n        return;\n      }\n      if (annotation.textColumn && column.text.includes(annotation.textColumn)) {\n        textColIndex = index;\n        return;\n      }\n      if (column.text === annotation.timeEndColumn) {\n        timeEndColIndex = index;\n        return;\n      }\n      // legacy case\n      if (!titleColIndex && textColIndex !== index) {\n        titleColIndex = index;\n      }\n    });\n\n    each(table.rows, (value) => {\n      const data = {\n        annotation: annotation,\n        time: +new Date(value[timeColIndex]),\n        title: value[titleColIndex],\n        timeEnd: value[timeEndColIndex],\n        // Remove empty values, then split in different tags for comma separated values\n        tags: flatten(\n          tagsColIndexes\n            .filter((t) => {\n              return value[t];\n            })\n            .map((t) => {\n              return value[t].split(',');\n            })\n        ),\n        text: value[textColIndex],\n      };\n\n      list.push(data);\n    });\n\n    return list;\n  }\n}\n\nfunction colContainsTag(colText: string, tagsColumn?: string): boolean {\n  const tags = (tagsColumn || '').replace(' ', '').split(',');\n  for (const tag of tags) {\n    if (tag !== '' && colText.includes(tag)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction getTableCols(dfs: DataFrame[], table: TableModel, target: InfluxQuery): TableModel {\n  const selectedParams = getSelectedParams(target);\n\n  dfs[0].fields.forEach((field) => {\n    // Time col\n    if (field.name.toLowerCase() === 'time') {\n      table.columns.push({ text: 'Time', type: FieldType.time });\n    }\n\n    // Group by (label) column(s)\n    else if (field.name.toLowerCase() === 'value') {\n      if (field.labels) {\n        Object.keys(field.labels).forEach((key) => {\n          table.columns.push({ text: key });\n        });\n      }\n    }\n  });\n\n  // Get cols for annotationQuery\n  if (dfs[0].refId === 'metricFindQuery') {\n    dfs.forEach((field) => {\n      if (field.name) {\n        table.columns.push({ text: field.name });\n      }\n    });\n  }\n\n  // Select (metric) column(s)\n  for (let i = 0; i < selectedParams.length; i++) {\n    table.columns.push({ text: selectedParams[i] });\n  }\n\n  // ISSUE: https://github.com/grafana/grafana/issues/63842\n  // if rawQuery and\n  // has other selected fields in the query and\n  // dfs field names are in the rawQuery but\n  // the selected params object doesn't exist in the query then\n  // add columns to the table\n  if (\n    target.rawQuery &&\n    selectedParams.length === 0 &&\n    rawQuerySelectedFieldsInDataframe(target.query, dfs) &&\n    dfs[0].refId !== 'metricFindQuery'\n  ) {\n    dfs.map((df) => {\n      if (df.name) {\n        table.columns.push({ text: df.name });\n      }\n    });\n  }\n\n  return table;\n}\n\nfunction getTableRows(dfs: DataFrame[], table: TableModel, labels: string[]): TableModel {\n  const values = dfs[0].fields[0].values;\n\n  for (let i = 0; i < values.length; i++) {\n    const time = values[i];\n    const metrics = dfs.map((df: DataFrame) => {\n      return df.fields[1] ? df.fields[1].values[i] : null;\n    });\n    if (metrics.indexOf(null) < 0) {\n      table.rows.push([time, ...labels, ...metrics]);\n    }\n  }\n  return table;\n}\n\nexport function getSelectedParams(target: InfluxQuery): string[] {\n  let allParams: string[] = [];\n  target.select?.forEach((select) => {\n    const selector = select.filter((x) => x.type !== 'field');\n    if (selector.length > 0) {\n      const aliasIfExist = selector.find((s) => s.type === 'alias');\n      if (aliasIfExist) {\n        allParams.push(aliasIfExist.params?.[0].toString() ?? '');\n      } else {\n        allParams.push(selector[0].type);\n      }\n    } else {\n      if (select[0] && select[0].params && select[0].params[0]) {\n        allParams.push(select[0].params[0].toString());\n      }\n    }\n  });\n\n  let uniqueParams: string[] = [];\n  allParams.forEach((param) => {\n    uniqueParams.push(incrementName(param, param, uniqueParams, 0));\n  });\n\n  return uniqueParams;\n}\n\nfunction incrementName(name: string, nameIncrement: string, params: string[], index: number): string {\n  if (params.indexOf(nameIncrement) > -1) {\n    index++;\n    return incrementName(name, name + '_' + index, params, index);\n  }\n  return nameIncrement;\n}\n\nfunction rawQuerySelectedFieldsInDataframe(query: string | undefined, dfs: DataFrame[]) {\n  const names: Array<string | undefined> = dfs.map((df: DataFrame) => df.name);\n\n  const colsInRawQuery = names.every((name: string | undefined) => {\n    if (name && query) {\n      // table name and field, i.e. cpu.usage_guest_nice becomes ['cpu', 'usage_guest_nice']\n      const nameParts = name.split('.');\n\n      return nameParts.every((np) => query.toLowerCase().includes(np.toLowerCase()));\n    }\n\n    return false;\n  });\n\n  const queryChecks = ['*', 'SHOW'];\n\n  const otherChecks: boolean = queryChecks.some((qc: string) => {\n    if (query) {\n      return query.toLowerCase().includes(qc.toLowerCase());\n    }\n\n    return false;\n  });\n\n  return colsInRawQuery || otherChecks;\n}\n","import { QueryEditorProps } from '@grafana/data';\nimport { InlineFieldRow, Input, TextArea } from '@grafana/ui';\nimport { InlineField } from '@grafana/ui/';\n\nimport InfluxDatasource from '../../../datasource';\nimport { InfluxOptions, InfluxQuery, InfluxVariableQuery, InfluxVersion } from '../../../types';\nimport { FluxQueryEditor } from '../query/flux/FluxQueryEditor';\n\ntype Props = QueryEditorProps<InfluxDatasource, InfluxQuery, InfluxOptions, InfluxVariableQuery>;\n\nconst refId = 'InfluxVariableQueryEditor-VariableQuery';\n\nexport const InfluxVariableEditor = ({ onChange, datasource, query }: Props) => {\n  const getVariableQuery = (q: InfluxVariableQuery | string) => {\n    // in legacy variable support query can be only a string\n    // in new variable support query can be an object and hold more information\n    // to be able to support old version we check the query here\n    if (typeof q !== 'string') {\n      return q;\n    }\n\n    return {\n      refId,\n      query: q,\n      ...(datasource.version === InfluxVersion.Flux ? { maxDataPoints: 1000 } : {}),\n    };\n  };\n\n  switch (datasource.version) {\n    case InfluxVersion.Flux:\n      return (\n        <>\n          <FluxQueryEditor\n            datasource={datasource}\n            query={getVariableQuery(query)}\n            onChange={(q) => {\n              onChange({ ...query, query: q.query ?? '' });\n            }}\n          />\n          <InlineFieldRow>\n            <InlineField\n              label=\"Max Data Points\"\n              labelWidth={20}\n              required\n              grow\n              aria-labelledby=\"flux-maxdatapoints\"\n              tooltip={<div>Upper boundary of data points will return for the variable query.</div>}\n            >\n              <Input\n                id=\"influx-sql-variable-maxdatapoints\"\n                aria-label=\"flux-maxdatapoints\"\n                type=\"number\"\n                defaultValue={query.maxDataPoints ?? 1000}\n                placeholder=\"Default is 1000\"\n                onBlur={(e) => {\n                  onChange({\n                    refId,\n                    query: query.query,\n                    maxDataPoints: Number.parseInt(e.currentTarget.value, 10),\n                  });\n                }}\n              />\n            </InlineField>\n          </InlineFieldRow>\n        </>\n      );\n    default:\n      return (\n        <InlineFieldRow>\n          <InlineField label=\"Query\" labelWidth={20} required grow aria-labelledby=\"influx-variable-query\">\n            <TextArea\n              aria-label=\"influx-variable-query\"\n              defaultValue={getVariableQuery(query).query}\n              placeholder=\"metric name or tags query\"\n              rows={1}\n              onBlur={(e) => {\n                onChange({ refId, query: e.currentTarget.value ?? '' });\n              }}\n            />\n          </InlineField>\n        </InlineFieldRow>\n      );\n  }\n};\n","import { from, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CustomVariableSupport, DataQueryRequest, DataQueryResponse } from '@grafana/data';\nimport { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\n\nimport { InfluxVariableEditor } from './components/editor/variable/VariableQueryEditor';\nimport InfluxDatasource from './datasource';\nimport { InfluxVariableQuery } from './types';\n\nexport class InfluxVariableSupport extends CustomVariableSupport<InfluxDatasource> {\n  editor = InfluxVariableEditor;\n\n  constructor(\n    private readonly datasource: InfluxDatasource,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super();\n  }\n\n  query(request: DataQueryRequest<InfluxVariableQuery>): Observable<DataQueryResponse> {\n    let query: string | undefined;\n    if (typeof request.targets[0] === 'string') {\n      query = request.targets[0];\n    } else {\n      query = request.targets[0].query;\n    }\n\n    if (!query) {\n      return of({ data: [] });\n    }\n\n    const q = this.templateSrv.replace(query, request.scopedVars, this.datasource.interpolateQueryExpr);\n    const timeFilter = this.datasource.getTimeFilter({ rangeRaw: request.range.raw, timezone: request.timezone });\n    const interpolated = q.replace('$timeFilter', timeFilter);\n    const metricFindStream = from(\n      this.datasource.metricFindQuery(\n        {\n          refId: request.targets[0].refId,\n          query: interpolated,\n          maxDataPoints: request.targets[0].maxDataPoints ?? 1000,\n        },\n        { range: request.range }\n      )\n    );\n    return metricFindStream.pipe(map((results) => ({ data: results })));\n  }\n}\n","import { cloneDeep, extend, has, isString, map as _map, omit, pick, reduce } from 'lodash';\nimport { lastValueFrom, merge, Observable, of, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport {\n  AdHocVariableFilter,\n  AnnotationEvent,\n  DataFrame,\n  DataQueryError,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceGetTagKeysOptions,\n  DataSourceGetTagValuesOptions,\n  DataSourceInstanceSettings,\n  dateMath,\n  DateTime,\n  escapeRegex,\n  FieldType,\n  MetricFindValue,\n  QueryResultMeta,\n  QueryVariableModel,\n  RawTimeRange,\n  ScopedVars,\n  TIME_SERIES_TIME_FIELD_NAME,\n  TIME_SERIES_VALUE_FIELD_NAME,\n  TimeSeries,\n  toDataFrame,\n} from '@grafana/data';\nimport {\n  BackendDataSourceResponse,\n  DataSourceWithBackend,\n  FetchResponse,\n  getBackendSrv,\n  getTemplateSrv,\n  TemplateSrv,\n} from '@grafana/runtime';\nimport { QueryFormat, SQLQuery } from '@grafana/sql';\nimport config from 'app/core/config';\n\nimport { AnnotationEditor } from './components/editor/annotation/AnnotationEditor';\nimport { FluxQueryEditor } from './components/editor/query/flux/FluxQueryEditor';\nimport { BROWSER_MODE_DISABLED_MESSAGE } from './constants';\nimport { toRawSql } from './fsql/sqlUtil';\nimport InfluxQueryModel from './influx_query_model';\nimport InfluxSeries from './influx_series';\nimport { buildMetadataQuery } from './influxql_query_builder';\nimport { prepareAnnotation } from './migrations';\nimport { buildRawQuery, removeRegexWrapper } from './queryUtils';\nimport ResponseParser from './response_parser';\nimport {\n  DEFAULT_POLICY,\n  InfluxOptions,\n  InfluxQuery,\n  InfluxQueryTag,\n  InfluxVariableQuery,\n  InfluxVersion,\n} from './types';\nimport { InfluxVariableSupport } from './variables';\n\nexport default class InfluxDatasource extends DataSourceWithBackend<InfluxQuery, InfluxOptions> {\n  type: string;\n  urls: string[];\n  username: string;\n  password: string;\n  name: string;\n  database?: string;\n  basicAuth?: string;\n  withCredentials?: boolean;\n  access: 'direct' | 'proxy';\n  responseParser: ResponseParser;\n  httpMode: string;\n  version?: InfluxVersion;\n  isProxyAccess: boolean;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<InfluxOptions>,\n    readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n\n    this.type = 'influxdb';\n    this.urls = (instanceSettings.url ?? '').split(',').map((url) => {\n      return url.trim();\n    });\n\n    this.username = instanceSettings.username ?? '';\n    this.password = instanceSettings.password ?? '';\n    this.name = instanceSettings.name;\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.access = instanceSettings.access;\n    const settingsData: InfluxOptions = instanceSettings.jsonData ?? {};\n    this.database = settingsData.dbName ?? instanceSettings.database;\n    this.interval = settingsData.timeInterval;\n    this.httpMode = settingsData.httpMode || 'GET';\n    this.responseParser = new ResponseParser();\n    this.version = settingsData.version ?? InfluxVersion.InfluxQL;\n    this.isProxyAccess = instanceSettings.access === 'proxy';\n    this.variables = new InfluxVariableSupport(this, this.templateSrv);\n\n    if (this.version === InfluxVersion.Flux) {\n      // When flux, use an annotation processor rather than the `annotationQuery` lifecycle\n      this.annotations = {\n        QueryEditor: FluxQueryEditor,\n      };\n    } else {\n      this.annotations = {\n        QueryEditor: AnnotationEditor,\n        prepareAnnotation,\n      };\n    }\n  }\n\n  query(request: DataQueryRequest<InfluxQuery>): Observable<DataQueryResponse> {\n    if (!this.isProxyAccess) {\n      const error = new Error(BROWSER_MODE_DISABLED_MESSAGE);\n      return throwError(() => error);\n    }\n\n    return this._query(request);\n  }\n\n  _query(request: DataQueryRequest<InfluxQuery>): Observable<DataQueryResponse> {\n    // for not-flux queries we call `this.classicQuery`, and that\n    // handles the is-hidden situation.\n    // for the flux-case, we do the filtering here\n    const filteredRequest = {\n      ...request,\n      targets: request.targets.filter((t) => t.hide !== true),\n    };\n\n    // migrate annotations\n    if (filteredRequest.targets.some((target: InfluxQuery) => target.fromAnnotations)) {\n      const streams: Array<Observable<DataQueryResponse>> = [];\n\n      for (const target of filteredRequest.targets) {\n        if (target.query) {\n          streams.push(\n            new Observable((subscriber) => {\n              this.annotationEvents(filteredRequest, target)\n                .then((events) => subscriber.next({ data: [toDataFrame(events)] }))\n                .catch((ex) => subscriber.error(new Error(ex)))\n                .finally(() => subscriber.complete());\n            })\n          );\n        }\n      }\n\n      return merge(...streams);\n    }\n\n    if (this.version === InfluxVersion.InfluxQL && !this.isMigrationToggleOnAndIsAccessProxy()) {\n      // Fallback to classic query support\n      return this.classicQuery(request);\n    }\n\n    return super.query(filteredRequest);\n  }\n\n  getQueryDisplayText(query: InfluxQuery) {\n    switch (this.version) {\n      case InfluxVersion.Flux:\n        return query.query;\n      case InfluxVersion.SQL:\n        return toRawSql(query);\n      case InfluxVersion.InfluxQL:\n        return new InfluxQueryModel(query).render(false);\n      default:\n        return '';\n    }\n  }\n\n  /**\n   * Returns false if the query should be skipped\n   */\n  filterQuery(query: InfluxQuery): boolean {\n    if (this.version === InfluxVersion.Flux) {\n      return !!query.query;\n    }\n    return true;\n  }\n\n  applyTemplateVariables(\n    query: InfluxQuery,\n    scopedVars: ScopedVars,\n    filters?: AdHocVariableFilter[]\n  ): InfluxQuery & SQLQuery {\n    const variables = scopedVars || {};\n\n    // We want to interpolate these variables on backend.\n    // The pre-calculated values are replaced with the variable strings.\n    variables.__interval = {\n      value: '$__interval',\n    };\n    variables.__interval_ms = {\n      value: '$__interval_ms',\n    };\n\n    if (this.version === InfluxVersion.Flux) {\n      return {\n        ...query,\n        query: this.templateSrv.replace(query.query ?? '', variables), // The raw query text\n      };\n    }\n\n    if (this.version === InfluxVersion.SQL || this.isMigrationToggleOnAndIsAccessProxy()) {\n      query = this.applyVariables(query, variables, filters);\n      if (query.adhocFilters?.length) {\n        const adhocFiltersToTags: InfluxQueryTag[] = (query.adhocFilters ?? []).map((af) => {\n          const { condition, ...asTag } = af;\n          return asTag;\n        });\n        query.tags = [...(query.tags ?? []), ...adhocFiltersToTags];\n      }\n    }\n\n    return query;\n  }\n\n  targetContainsTemplate(target: InfluxQuery) {\n    // for flux-mode we just take target.query,\n    // for influxql-mode we use InfluxQueryModel to create the text-representation\n    const queryText = this.version === InfluxVersion.Flux ? target.query : buildRawQuery(target);\n\n    return this.templateSrv.containsTemplate(queryText);\n  }\n\n  interpolateVariablesInQueries(queries: InfluxQuery[], scopedVars: ScopedVars): InfluxQuery[] {\n    if (!queries || queries.length === 0) {\n      return [];\n    }\n\n    return queries.map((query) => {\n      if (this.version === InfluxVersion.Flux) {\n        return {\n          ...query,\n          datasource: this.getRef(),\n          query: this.templateSrv.replace(\n            query.query ?? '',\n            scopedVars,\n            (value: string | string[] = [], variable: QueryVariableModel) =>\n              this.interpolateQueryExpr(value, variable, query.query)\n          ), // The raw query text\n        };\n      }\n\n      return {\n        ...query,\n        datasource: this.getRef(),\n        ...this.applyVariables(query, scopedVars),\n      };\n    });\n  }\n\n  applyVariables(query: InfluxQuery & SQLQuery, scopedVars: ScopedVars, filters?: AdHocVariableFilter[]) {\n    const expandedQuery = { ...query };\n    if (query.groupBy) {\n      expandedQuery.groupBy = query.groupBy.map((groupBy) => {\n        return {\n          ...groupBy,\n          params: groupBy.params?.map((param) => this.templateSrv.replace(param.toString(), undefined)),\n        };\n      });\n    }\n\n    if (query.select) {\n      expandedQuery.select = query.select.map((selects) => {\n        return selects.map((select) => {\n          return {\n            ...select,\n            params: select.params?.map((param) => this.templateSrv.replace(param.toString(), scopedVars)),\n          };\n        });\n      });\n    }\n\n    if (query.tags) {\n      expandedQuery.tags = query.tags.map((tag) => {\n        // Remove the regex wrapper if the operator is not a regex operator\n        if (tag.operator !== '=~' && tag.operator !== '!~') {\n          tag.value = removeRegexWrapper(tag.value);\n        }\n\n        return {\n          ...tag,\n          key: this.templateSrv.replace(tag.key, scopedVars),\n          value: this.templateSrv.replace(\n            tag.value ?? '',\n            scopedVars,\n            (value: string | string[] = [], variable: QueryVariableModel) =>\n              this.interpolateQueryExpr(value, variable, tag.value)\n          ),\n        };\n      });\n    }\n\n    return {\n      ...expandedQuery,\n      adhocFilters: filters ?? [],\n      query: this.templateSrv.replace(\n        query.query ?? '',\n        scopedVars,\n        (value: string | string[] = [], variable: QueryVariableModel) =>\n          this.interpolateQueryExpr(value, variable, query.query)\n      ), // The raw sql query text\n      rawSql: this.templateSrv.replace(\n        query.rawSql ?? '',\n        scopedVars,\n        (value: string | string[] = [], variable: QueryVariableModel) =>\n          this.interpolateQueryExpr(value, variable, query.rawSql)\n      ), // The raw sql query text\n      alias: this.templateSrv.replace(query.alias ?? '', scopedVars),\n      limit: this.templateSrv.replace(query.limit?.toString() ?? '', scopedVars),\n      measurement: this.templateSrv.replace(\n        query.measurement ?? '',\n        scopedVars,\n        (value: string | string[] = [], variable: QueryVariableModel) =>\n          this.interpolateQueryExpr(value, variable, query.measurement)\n      ),\n      policy: this.templateSrv.replace(query.policy ?? '', scopedVars),\n      slimit: this.templateSrv.replace(query.slimit?.toString() ?? '', scopedVars),\n      tz: this.templateSrv.replace(query.tz ?? '', scopedVars),\n    };\n  }\n\n  interpolateQueryExpr(value: string | string[] = [], variable: QueryVariableModel, query?: string) {\n    if (typeof value === 'string') {\n      // Check the value is a number. If not run to escape special characters\n      if (!isNaN(parseFloat(value))) {\n        return value;\n      }\n    }\n\n    // If template variable is a multi-value variable\n    // we always want to deal with special chars.\n    if (variable.multi) {\n      if (typeof value === 'string') {\n        // Check the value is a number. If not run to escape special characters\n        if (isNaN(parseFloat(value))) {\n          return escapeRegex(value);\n        }\n        return value;\n      }\n\n      // If the value is a string array first escape them then join them with pipe\n      // then put inside parenthesis.\n      return `(${value.map((v) => escapeRegex(v)).join('|')})`;\n    }\n\n    // If the variable is not a multi-value variable\n    // we want to see how it's been used. If it is used in a regex expression\n    // we escape it. Otherwise, we return it directly.\n    // regex below checks if the variable inside /^...$/ (^ and $ is optional)\n    // i.e. /^$myVar$/ or /$myVar/ or /^($myVar)$/\n    const regex = new RegExp(`\\\\/(?:\\\\^)?(.*)(\\\\$${variable.name})(.*)(?:\\\\$)?\\\\/`, 'gm');\n    if (query && regex.test(query)) {\n      if (typeof value === 'string') {\n        return escapeRegex(value);\n      }\n\n      // If the value is a string array first escape them then join them with pipe\n      // then put inside parenthesis.\n      return `(${value.map((v) => escapeRegex(v)).join('|')})`;\n    }\n\n    return value;\n  }\n\n  async runMetadataQuery(target: InfluxQuery): Promise<MetricFindValue[]> {\n    return lastValueFrom(\n      super.query({\n        targets: [target],\n      } as DataQueryRequest)\n    ).then(this.toMetricFindValue);\n  }\n\n  async metricFindQuery(query: InfluxVariableQuery, options?: any): Promise<MetricFindValue[]> {\n    if (\n      this.version === InfluxVersion.Flux ||\n      this.version === InfluxVersion.SQL ||\n      this.isMigrationToggleOnAndIsAccessProxy()\n    ) {\n      const target: InfluxQuery & SQLQuery = {\n        refId: 'metricFindQuery',\n        query: query.query,\n        rawQuery: true,\n        ...(this.version === InfluxVersion.SQL ? { rawSql: query.query, format: QueryFormat.Table } : {}),\n      };\n      return lastValueFrom(\n        super.query({\n          ...(options ?? {}), // includes 'range'\n          maxDataPoints: query.maxDataPoints,\n          targets: [target],\n        })\n      ).then(this.toMetricFindValue);\n    }\n\n    const interpolated = this.templateSrv.replace(\n      query.query,\n      options?.scopedVars,\n      (value: string | string[] = [], variable: QueryVariableModel) =>\n        this.interpolateQueryExpr(value, variable, query.query)\n    );\n\n    return lastValueFrom(this._seriesQuery(interpolated, options)).then((resp) => {\n      return this.responseParser.parse(query.query, resp);\n    });\n  }\n\n  toMetricFindValue(rsp: DataQueryResponse): MetricFindValue[] {\n    const valueMap = new Map<string, MetricFindValue>();\n    // Create MetricFindValue object for all frames\n    rsp?.data?.forEach((frame: DataFrame) => {\n      if (frame && frame.length > 0) {\n        let field = frame.fields.find((f) => f.type === FieldType.string);\n        if (!field) {\n          field = frame.fields.find((f) => f.type !== FieldType.time);\n        }\n        if (field) {\n          field.values.forEach((v) => {\n            valueMap.set(v.toString(), { text: v.toString() });\n          });\n        }\n      }\n    });\n    return Array.from(valueMap.values());\n  }\n  // By implementing getTagKeys and getTagValues we add ad-hoc filters functionality\n  // Used in public/app/features/variables/adhoc/picker/AdHocFilterKey.tsx::fetchFilterKeys\n  getTagKeys(options?: DataSourceGetTagKeysOptions<InfluxQuery>) {\n    const query = buildMetadataQuery({\n      type: 'TAG_KEYS',\n      templateService: this.templateSrv,\n      database: this.database,\n    });\n\n    return this.metricFindQuery({ refId: 'get-tag-keys', query });\n  }\n\n  getTagValues(options: DataSourceGetTagValuesOptions<InfluxQuery>) {\n    const query = buildMetadataQuery({\n      type: 'TAG_VALUES',\n      templateService: this.templateSrv,\n      database: this.database,\n      withKey: options.key,\n    });\n\n    return this.metricFindQuery({ refId: 'get-tag-values', query });\n  }\n\n  /**\n   * @deprecated\n   */\n  _seriesQuery(query: string, options?: any) {\n    if (!query) {\n      return of({ results: [] });\n    }\n\n    if (options && options.range) {\n      const timeFilter = this.getTimeFilter({ rangeRaw: options.range, timezone: options.timezone });\n      query = query.replace('$timeFilter', timeFilter);\n    }\n\n    return this._influxRequest(this.httpMode, '/query', { q: query, epoch: 'ms' }, options);\n  }\n\n  /**\n   * @deprecated\n   */\n  serializeParams(params: any) {\n    if (!params) {\n      return '';\n    }\n\n    return reduce(\n      params,\n      (memo: string[], value, key) => {\n        if (value === null || value === undefined) {\n          return memo;\n        }\n        memo.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n        return memo;\n      },\n      []\n    ).join('&');\n  }\n\n  /**\n   * @deprecated\n   */\n  _influxRequest(method: string, url: string, data: any, options?: any) {\n    const currentUrl = this.urls.shift()!;\n    this.urls.push(currentUrl);\n\n    const params: any = {};\n\n    if (this.username) {\n      params.u = this.username;\n      params.p = this.password;\n    }\n\n    if (options && options.database) {\n      params.db = options.database;\n    } else if (this.database) {\n      params.db = this.database;\n    }\n\n    if (options?.policy && options.policy !== DEFAULT_POLICY) {\n      params.rp = options.policy;\n    }\n\n    const { q } = data;\n\n    if (method === 'POST' && has(data, 'q')) {\n      // verb is POST and 'q' param is defined\n      extend(params, omit(data, ['q']));\n      data = this.serializeParams(pick(data, ['q']));\n    } else if (method === 'GET' || method === 'POST') {\n      // verb is GET, or POST without 'q' param\n      extend(params, data);\n      data = null;\n    }\n\n    const req: any = {\n      method: method,\n      url: currentUrl + url,\n      params: params,\n      data: data,\n      precision: 'ms',\n      inspect: { type: 'influxdb' },\n      paramSerializer: this.serializeParams,\n    };\n\n    req.headers = req.headers || {};\n    if (this.basicAuth || this.withCredentials) {\n      req.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      req.headers.Authorization = this.basicAuth;\n    }\n\n    if (method === 'POST') {\n      req.headers['Content-type'] = 'application/x-www-form-urlencoded';\n    }\n\n    return getBackendSrv()\n      .fetch(req)\n      .pipe(\n        map((result: any) => {\n          const { data } = result;\n          if (data) {\n            data.executedQueryString = q;\n            if (data.results) {\n              const errors = result.data.results.filter((elem: any) => elem.error);\n\n              if (errors.length > 0) {\n                throw {\n                  message: 'InfluxDB Error: ' + errors[0].error,\n                  data,\n                };\n              }\n            }\n          }\n          return data;\n        }),\n        catchError((err) => {\n          if (err.cancelled) {\n            return of(err);\n          }\n\n          return throwError(this.handleErrors(err));\n        })\n      );\n  }\n\n  /**\n   * @deprecated\n   */\n  handleErrors(err: any) {\n    const error: DataQueryError = {\n      message:\n        (err && err.status) ||\n        (err && err.message) ||\n        'Unknown error during query transaction. Please check JS console logs.',\n    };\n\n    if ((Number.isInteger(err.status) && err.status !== 0) || err.status >= 300) {\n      if (err.data && err.data.error) {\n        error.message = 'InfluxDB Error: ' + err.data.error;\n        error.data = err.data;\n        // @ts-ignore\n        error.config = err.config;\n      } else {\n        error.message = 'Network Error: ' + err.statusText + '(' + err.status + ')';\n        error.data = err.data;\n        // @ts-ignore\n        error.config = err.config;\n      }\n    }\n\n    return error;\n  }\n\n  getTimeFilter(options: { rangeRaw: RawTimeRange; timezone: string }) {\n    const from = this.getInfluxTime(options.rangeRaw.from, false, options.timezone);\n    const until = this.getInfluxTime(options.rangeRaw.to, true, options.timezone);\n\n    return 'time >= ' + from + ' and time <= ' + until;\n  }\n\n  getInfluxTime(date: DateTime | string, roundUp: boolean, timezone: string) {\n    let outPutDate;\n    if (isString(date)) {\n      if (date === 'now') {\n        return 'now()';\n      }\n\n      const parts = /^now-(\\d+)([dhms])$/.exec(date);\n      if (parts) {\n        const amount = parseInt(parts[1], 10);\n        const unit = parts[2];\n        return 'now() - ' + amount + unit;\n      }\n      outPutDate = dateMath.parse(date, roundUp, timezone);\n      if (!outPutDate) {\n        throw new Error('unable to parse date');\n      }\n      date = outPutDate;\n    }\n\n    return date.valueOf() + 'ms';\n  }\n\n  // ------------------------ Legacy Code - Before Backend Migration ---------------\n\n  isMigrationToggleOnAndIsAccessProxy() {\n    return config.featureToggles.influxdbBackendMigration && this.access === 'proxy';\n  }\n\n  /**\n   * The unchanged pre 7.1 query implementation\n   * @deprecated\n   */\n  classicQuery(options: any): Observable<DataQueryResponse> {\n    let timeFilter = this.getTimeFilter(options);\n    const scopedVars = options.scopedVars;\n    const targets = cloneDeep(options.targets);\n    const queryTargets: any[] = [];\n\n    let i, y;\n\n    let allQueries = _map(targets, (target) => {\n      if (target.hide) {\n        return '';\n      }\n\n      queryTargets.push(target);\n\n      // backward compatibility\n      scopedVars.interval = scopedVars.__interval;\n\n      return new InfluxQueryModel(target, this.templateSrv, scopedVars).render(true);\n    }).reduce((acc, current) => {\n      if (current !== '') {\n        acc += ';' + current;\n      }\n      return acc;\n    });\n\n    if (allQueries === '') {\n      return of({ data: [] });\n    }\n\n    // add global adhoc filters to timeFilter\n    const adhocFilters = options.filters;\n    const adhocFiltersFromDashboard = options.targets.flatMap((target: InfluxQuery) => target.adhocFilters ?? []);\n    if (adhocFilters?.length || adhocFiltersFromDashboard?.length) {\n      const ahFilters = adhocFilters?.length ? adhocFilters : adhocFiltersFromDashboard;\n      const tmpQuery = new InfluxQueryModel({ refId: 'A' }, this.templateSrv, scopedVars);\n      timeFilter += ' AND ' + tmpQuery.renderAdhocFilters(ahFilters);\n    }\n    // replace grafana variables\n    scopedVars.timeFilter = { value: timeFilter };\n\n    // replace templated variables\n    allQueries = this.templateSrv.replace(allQueries, scopedVars);\n\n    return this._seriesQuery(allQueries, options).pipe(\n      map((data) => {\n        if (!data || !data.results) {\n          return { data: [] };\n        }\n\n        const seriesList = [];\n        for (i = 0; i < data.results.length; i++) {\n          const result = data.results[i];\n          if (!result || !result.series) {\n            continue;\n          }\n\n          const target = queryTargets[i];\n          let alias = target.alias;\n          if (alias) {\n            alias = this.templateSrv.replace(target.alias, options.scopedVars);\n          }\n\n          const meta: QueryResultMeta = {\n            executedQueryString: data.executedQueryString,\n          };\n\n          const influxSeries = new InfluxSeries({\n            refId: target.refId,\n            series: data.results[i].series,\n            alias: alias,\n            meta,\n          });\n\n          switch (target.resultFormat) {\n            case 'logs':\n              meta.preferredVisualisationType = 'logs';\n            case 'table': {\n              seriesList.push(influxSeries.getTable());\n              break;\n            }\n            default: {\n              const timeSeries = influxSeries.getTimeSeries();\n              for (y = 0; y < timeSeries.length; y++) {\n                seriesList.push(timeSeriesToDataFrame(timeSeries[y]));\n              }\n              break;\n            }\n          }\n        }\n\n        return { data: seriesList };\n      })\n    );\n  }\n\n  async annotationEvents(options: DataQueryRequest, annotation: InfluxQuery): Promise<AnnotationEvent[]> {\n    if (this.version === InfluxVersion.Flux) {\n      return Promise.reject({\n        message: 'Flux requires the standard annotation query',\n      });\n    }\n\n    // InfluxQL puts a query string on the annotation\n    if (!annotation.query) {\n      return Promise.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    if (this.isMigrationToggleOnAndIsAccessProxy()) {\n      // We want to send our query to the backend as a raw query\n      const target: InfluxQuery = {\n        refId: 'metricFindQuery',\n        datasource: this.getRef(),\n        query: this.templateSrv.replace(\n          annotation.query,\n          undefined,\n          (value: string | string[] = [], variable: QueryVariableModel) =>\n            this.interpolateQueryExpr(value, variable, annotation.query)\n        ),\n        rawQuery: true,\n      };\n\n      return lastValueFrom(\n        getBackendSrv()\n          .fetch<BackendDataSourceResponse>({\n            url: '/api/ds/query',\n            method: 'POST',\n            headers: this.getRequestHeaders(),\n            data: {\n              from: options.range.from.valueOf().toString(),\n              to: options.range.to.valueOf().toString(),\n              queries: [target],\n            },\n            requestId: annotation.name,\n          })\n          .pipe(\n            map(\n              async (res: FetchResponse<BackendDataSourceResponse>) =>\n                await this.responseParser.transformAnnotationResponse(annotation, res, target)\n            )\n          )\n      );\n    }\n\n    const timeFilter = this.getTimeFilter({ rangeRaw: options.range.raw, timezone: options.timezone });\n    let query = annotation.query.replace('$timeFilter', timeFilter);\n    query = this.templateSrv.replace(query, undefined, (value: string | string[] = [], variable: QueryVariableModel) =>\n      this.interpolateQueryExpr(value, variable, query)\n    );\n\n    return lastValueFrom(this._seriesQuery(query, options)).then((data) => {\n      if (!data || !data.results || !data.results[0]) {\n        throw { message: 'No results in response from InfluxDB' };\n      }\n      return new InfluxSeries({\n        series: data.results[0].series,\n        annotation: annotation,\n      }).getAnnotations();\n    });\n  }\n}\n\n// we detect the field type based on the value-array\nfunction getFieldType(values: unknown[]): FieldType {\n  // the values-array may contain a lot of nulls.\n  // we need the first not-null item\n  const firstNotNull = values.find((v) => v !== null);\n\n  if (firstNotNull === undefined) {\n    // we could not find any not-null values\n    return FieldType.number;\n  }\n\n  const valueType = typeof firstNotNull;\n\n  switch (valueType) {\n    case 'string':\n      return FieldType.string;\n    case 'boolean':\n      return FieldType.boolean;\n    case 'number':\n      return FieldType.number;\n    default:\n      // this should never happen, influxql values\n      // can only be numbers, strings and booleans.\n      throw new Error(`InfluxQL: invalid value type ${valueType}`);\n  }\n}\n\n// this conversion function is specialized to work with the timeseries\n// data returned by InfluxDatasource.getTimeSeries()\nfunction timeSeriesToDataFrame(timeSeries: TimeSeries): DataFrame {\n  const times: number[] = [];\n  const values: unknown[] = [];\n\n  // the data we process here is not correctly typed.\n  // the typescript types say every data-point is number|null,\n  // but in fact it can be string or boolean too.\n\n  const points = timeSeries.datapoints;\n  for (const point of points) {\n    values.push(point[0]);\n    times.push(point[1] as number);\n  }\n\n  const timeField = {\n    name: TIME_SERIES_TIME_FIELD_NAME,\n    type: FieldType.time,\n    config: {},\n    values: times,\n  };\n\n  const valueField = {\n    name: TIME_SERIES_VALUE_FIELD_NAME,\n    type: getFieldType(values),\n    config: {\n      displayNameFromDS: timeSeries.title,\n    },\n    values: values,\n    labels: timeSeries.tags,\n  };\n\n  const fields = [timeField, valueField];\n\n  return {\n    name: timeSeries.target,\n    refId: timeSeries.refId,\n    meta: timeSeries.meta,\n    fields,\n    length: values.length,\n  };\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport ConfigEditor from './components/editor/config/ConfigEditor';\nimport { QueryEditor } from './components/editor/query/QueryEditor';\nimport { InfluxStartPage } from './components/editor/query/influxql/InfluxStartPage';\nimport InfluxDatasource from './datasource';\n\nexport const plugin = new DataSourcePlugin(InfluxDatasource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor)\n  .setQueryEditorHelp(InfluxStartPage);\n"],"names":["BROWSER_MODE_DISABLED_MESSAGE","DEFAULT_POLICY","InfluxVersion","WIDTH_SHORT","InfluxFluxConfig","props","jsonData","secureJsonData","secureJsonFields","htmlPrefix","InlineFieldRow","InlineField","Input","SecretInput","httpModes","InfluxInfluxQLConfig","options","onOptionsChange","database","styles","getStyles","Alert","Field","InlineLabel","event","Select","httpMode","theme","InfluxSqlConfig","versionMap","versions","ConfigEditor","selected","copy","user","rest","isDirectAccess","FieldSet","DataSourceHttpSettings","config","val","index","categories","createPart","part","def","register","groupByTimeFunctions","aliasRenderer","innerExpr","fieldRenderer","param","escapedParam","replaceAggregationAddStrategy","selectParts","partModel","i","morePartsAvailable","addTransformationStrategy","addMathStrategy","partCount","addAliasStrategy","addFieldStrategy","query","parts","InfluxQueryModel","target","templateSrv","scopedVars","g","value","stringParts","typePart","arg","modelsIndex","partIndex","type","operator","fieldName","textValue","removeRegexWrapper","lowerValue","tag","interpolate","str","r","escapedKey","policy","measurement","variable","y","selectText","conditions","groupBySection","filters","buildRawQuery","queryCopy","normalizeQuery","addNewSelectPart","model","removeSelectPart","selectModel","changeSelectPart","listIndex","newParams","newSel","addNewGroupByPart","removeGroupByPart","changeGroupByPart","newGroupBy","regex","match","samples","UnthemedFluxQueryEditor","sugs","label","editor","helpTooltip","CodeEditor","Segment","FluxQueryEditor","mapFieldsToTypes","columns","fields","col","mapColumnTypeToIcon","unquoteIdentifier","quoteLiteral","toRawSql","sql","table","rawQuery","sc","c","p","formatTableName","wherePattern","whereString","groupBy","isLimit","parameter","limit","quoteIdentifierIfNecessary","isValidIdentifier","identifier","isValidName","RESERVED_WORDS","buildTableQuery","dataset","quoteIdentAsLiteral","showDatabases","buildColumnQuery","dbName","buildTableConstraint","getSqlCompletionProvider","getMeta","monaco","language","customStatementPlacementProvider","customSuggestionKinds","customStatementPlacement","customSuggestionKind","FROMKEYWORD","currentToken","previousKeyword","previousNonWhiteSpace","t","ctx","databaseName","getDatabaseName","mapToSuggestion","databaseToken","getDatabaseToken","tableName","getTableName","tableDefinition","token","getFromKeywordToken","nextIdentifier","FlightSQLDatasource","instanceSettings","args","tableNames","interpolatedTable","queryString","f","v","defaultDB","d","range","UnthemedSQLQueryEditor","influxDatasource","defaultQuery","onRunQuery","onChange","onRunSQLQuery","onSQLChange","FSQLEditor","QueryEditorModeSwitcher","isRaw","isModalOpen","setModalOpen","Button","ConfirmModal","RESULT_FORMATS","DEFAULT_RESULT_FORMAT","useShadowedState","outsideVal","currentVal","setCurrentVal","prevOutsideVal","usePrevious","RawInfluxQLEditor","currentQuery","setCurrentQuery","currentAlias","setCurrentAlias","aliasElementId","selectElementId","resultFormat","applyDelayedChangesAndRunQuery","Stack","TextArea","e","buildMetadataQuery","params","templateService","retentionPolicy","tags","withKey","withMeasurementFilter","keyIdentifier","whereConditions","memo","renderTagCondition","runExploreQuery","datasource","getAllPolicies","item","getAllMeasurements","getTagKeys","getTagValues","getFieldKeys","filterTags","allTagKeys","toSelectableValue","unwrap","getNewSelectPartOptions","key","children","x","getNewGroupByPartOptions","tagKeys","getPartParams","dynamicParamOptions","paramValues","defParam","makePartList","queryParts","qp","getTemplateVariableOptions","wrapper","withTemplateVariableOptions","optionsPromise","filter","templateVariableOptions","tvo","wrapRegex","wrapPure","paddingRightClass","className","FormatAsSection","format","inputId","selectClass","formatCreateLabel","SelReload","loadOptions","allowCustomValue","onClose","debouncedLoadOptions","SelSingleLoad","loadState","doLoad","useAsyncFn","Sel","filterByLoadOptions","Inp","initialValue","currentValue","setCurrentValue","defaultButtonClass","Seg","buttonClassName","isOpen","setOpen","FromSection","getPolicyOptions","getMeasurementOptions","handlePolicyLoadOptions","allPolicies","handleMeasurementLoadOptions","AccessoryButton","InputSection","isWide","placeholder","onBlur","OPTIONS","OrderByTimeSection","AddButton","onAdd","noRightMarginPaddingClass","noHorizMarginPaddingClass","getPartClass","Part","name","partClass","onParamChange","par","isLast","items","Fragment","PartListSection","getNewPartOptions","onAddNewPart","onRemovePart","pars","isRegex","text","getOperator","getCondition","isFirst","adjustOperatorIfNeeded","currentOperator","newTagValue","isCurrentOperatorRegex","knownOperators","knownConditions","operatorOptions","condititonOptions","loadConditionOptions","loadOperatorOptions","Tag","onRemove","getTagKeyOptions","getTagValueOptions","condition","getTagKeySegmentOptions","err","getTagValueSegmentOptions","op","TagsSection","onTagChange","newTag","newTags","onTagRemove","addNewTag","tagKey","minimalTag","newT","VisualInfluxQLEditor","uniqueId","formatAsId","orderByTimeId","fieldKeys","field","selectLists","dynamicSelectPartOptions","sel","getMemoizedTagKeys","groupByList","dynamicGroupByPartOptions","onAppliedChange","newQuery","handleFromSectionChange","m","handleTagsSectionChange","SegmentSection","keys","tz","slimit","alias","QueryEditor","CHEAT_SHEET_ITEMS","InfluxCheatSheet","InfluxStartPage","AnnotationEditor","eventQuery","setEventQuery","textColumn","setTextColumn","tagsColumn","setTagsColumn","timeEndColumn","setTimeEndColumn","titleColumn","updateValue","InfluxSeries","output","j","series","seriesName","columnName","datapoints","segments","g1","g2","group","segIndex","list","titleCol","timeCol","timeEndCol","tagsCol","textCol","column","data","TableModel","seriesIndex","firstCol","firstTableCol","values","reordered","migrateLegacyAnnotation","json","prepareAnnotation","ResponseParser","results","influxResults","normalizedQuery","isRetentionPolicyQuery","isValueFirst","res","serie","dfs","meta","getTableCols","dfsByLabels","df","labels","dfsByLabelValues","getTableRows","annotation","rsp","titleColIndex","timeColIndex","timeEndColIndex","textColIndex","tagsColIndexes","colContainsTag","colText","selectedParams","getSelectedParams","rawQuerySelectedFieldsInDataframe","time","metrics","allParams","select","selector","aliasIfExist","s","uniqueParams","incrementName","nameIncrement","colsInRawQuery","np","otherChecks","qc","refId","InfluxVariableEditor","getVariableQuery","q","InfluxVariableSupport","request","of","timeFilter","interpolated","from","map","InfluxDatasource","DataSourceWithBackend","url","settingsData","error","throwError","filteredRequest","streams","Observable","subscriber","events","ex","merge","variables","adhocFiltersToTags","af","asTag","queryText","queries","expandedQuery","selects","lastValueFrom","resp","valueMap","frame","method","currentUrl","req","result","errors","elem","catchError","until","date","roundUp","timezone","outPutDate","amount","unit","targets","queryTargets","allQueries","acc","current","adhocFilters","adhocFiltersFromDashboard","ahFilters","tmpQuery","seriesList","influxSeries","timeSeries","timeSeriesToDataFrame","getFieldType","firstNotNull","valueType","times","points","point","timeField","valueField"],"sourceRoot":""}