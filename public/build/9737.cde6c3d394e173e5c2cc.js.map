{"version":3,"file":"9737.cde6c3d394e173e5c2cc.js","mappings":"sMAWO,MAAMA,EAAmB,CAAC,CAAE,OAAAC,EAAQ,aAAAC,EAAc,uBAAAC,CAAuB,IAAa,CAC3F,MAAMC,EAAWH,EAAO,iBAAiBC,CAAY,EAC/CG,EAAaJ,EAAO,4BAA4BC,CAAY,EAElE,OAAKE,KAQH,OAACE,EAAA,IACC,uBAAAH,EACA,OAAAF,EACA,SAAU,CAAE,KAAMC,EAAc,QAASE,CAAS,EAClD,WAAAC,CAAA,CACF,KAXE,OAACE,EAAA,EAAK,CAAC,SAAS,QAAQ,MAAM,qBAAqB,wDAEnD,CAWN,ECeA,EAlC4B,CAAC,CAAE,MAAAC,CAAM,IAAa,CAChD,KAAM,CAAE,qBAAAC,CAAqB,KAAI,MAAgB,EAC3C,CAAE,KAAAC,EAAM,UAAAC,EAAW,MAAAC,CAAM,KAAIC,EAAA,GAAsBJ,CAAoB,EAEvEK,EAAON,GAAO,OAAO,KAC3B,OAAKM,EAIDH,GAAa,CAACD,EACT,aAGLE,KAEA,OAACL,EAAA,EAAK,CAAC,SAAS,QAAQ,MAAM,wCAC3B,gBAAOK,CAAK,EACf,EAICF,KAKH,OAACV,EAAA,CACC,uBAAwBS,EACxB,OAAQC,EACR,aAAc,mBAAmBI,CAAI,EACvC,EARO,QAhBA,OAACC,EAAA,EAAc,CAAC,OAAO,uBAAwB,EA0B1D,C","sources":["webpack://grafana/./public/app/features/alerting/unified/components/receivers/EditTemplateView.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/EditMessageTemplate.tsx"],"sourcesContent":["import { Alert } from '@grafana/ui';\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\n\nimport { TemplateForm } from './TemplateForm';\n\ninterface Props {\n  templateName: string;\n  config: AlertManagerCortexConfig;\n  alertManagerSourceName: string;\n}\n\nexport const EditTemplateView = ({ config, templateName, alertManagerSourceName }: Props) => {\n  const template = config.template_files?.[templateName];\n  const provenance = config.template_file_provenances?.[templateName];\n\n  if (!template) {\n    return (\n      <Alert severity=\"error\" title=\"Template not found\">\n        Sorry, this template does not seem to exist.\n      </Alert>\n    );\n  }\n  return (\n    <TemplateForm\n      alertManagerSourceName={alertManagerSourceName}\n      config={config}\n      existing={{ name: templateName, content: template }}\n      provenance={provenance}\n    />\n  );\n};\n","import { RouteChildrenProps } from 'react-router-dom';\n\nimport { Alert } from '@grafana/ui';\nimport { EntityNotFound } from 'app/core/components/PageNotFound/EntityNotFound';\n\nimport { useAlertmanagerConfig } from '../../hooks/useAlertmanagerConfig';\nimport { useAlertmanager } from '../../state/AlertmanagerContext';\nimport { EditTemplateView } from '../receivers/EditTemplateView';\n\ntype Props = RouteChildrenProps<{ name: string }>;\n\nconst EditMessageTemplate = ({ match }: Props) => {\n  const { selectedAlertmanager } = useAlertmanager();\n  const { data, isLoading, error } = useAlertmanagerConfig(selectedAlertmanager);\n\n  const name = match?.params.name;\n  if (!name) {\n    return <EntityNotFound entity=\"Notification template\" />;\n  }\n\n  if (isLoading && !data) {\n    return 'loading...';\n  }\n\n  if (error) {\n    return (\n      <Alert severity=\"error\" title=\"Failed to fetch notification template\">\n        {String(error)}\n      </Alert>\n    );\n  }\n\n  if (!data) {\n    return null;\n  }\n\n  return (\n    <EditTemplateView\n      alertManagerSourceName={selectedAlertmanager!}\n      config={data}\n      templateName={decodeURIComponent(name)}\n    />\n  );\n};\n\nexport default EditMessageTemplate;\n"],"names":["EditTemplateView","config","templateName","alertManagerSourceName","template","provenance","TemplateForm","Alert","match","selectedAlertmanager","data","isLoading","error","useAlertmanagerConfig","name","EntityNotFound"],"sourceRoot":""}