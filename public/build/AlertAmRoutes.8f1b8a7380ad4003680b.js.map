{"version":3,"file":"AlertAmRoutes.8f1b8a7380ad4003680b.js","mappings":"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","sources":["webpack://grafana/./public/app/core/hooks/useCleanup.ts","webpack://grafana/./public/app/features/alerting/unified/api/grafana.ts","webpack://grafana/./public/app/features/alerting/unified/api/receiversApi.ts","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaMuteTimingsExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/mute-timings/useExportMuteTimingsDrawer.tsx","webpack://grafana/./public/app/features/alerting/unified/components/mute-timings/MuteTimingActionsButtons.tsx","webpack://grafana/./public/app/features/alerting/unified/components/EmptyAreaWithCTA.tsx","webpack://grafana/./public/app/features/alerting/unified/components/mute-timings/MuteTimingsTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/Filters.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/grafanaAppReceivers/grafanaApp.ts","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/AlertGroupsSummary.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/EditDefaultPolicyForm.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useMuteTimingOptions.ts","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/EditNotificationPolicyForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/Modals.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaPoliciesExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/Policy.tsx","webpack://grafana/./public/app/features/alerting/unified/NotificationPolicies.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Authorize.tsx","webpack://grafana/./public/app/features/alerting/unified/components/CollapseToggle.tsx","webpack://grafana/./public/app/features/alerting/unified/components/ConditionalWrap.tsx","webpack://grafana/./public/app/features/alerting/unified/components/EmptyArea.tsx","webpack://grafana/./public/app/features/alerting/unified/components/GrafanaAlertmanagerDeliveryWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertDetails.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroupAlertsTable.tsx","webpack://grafana/./public/app/features/alerting/unified/styles/notifications.ts","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroupHeader.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroup.tsx","webpack://grafana/./public/app/features/alerting/unified/components/common/TextVariants.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/FileExportPreview.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaExportDrawer.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/providers.ts","webpack://grafana/./public/app/features/alerting/unified/openapi/timeIntervalsApi.gen.ts","webpack://grafana/./public/app/features/alerting/unified/api/timeIntervalsApi.ts","webpack://grafana/./public/app/features/alerting/unified/components/mute-timings/useMuteTimings.tsx","webpack://grafana/./public/app/features/alerting/unified/components/mute-timings/util.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/Matchers.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/PromDurationDocs.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/PromDurationInput.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/formStyles.ts","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/routeTimingsFields.ts","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/timingOptions.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/RuleInspector.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertmanagerConfig.ts","webpack://grafana/./public/app/features/alerting/unified/types/contact-points.ts","webpack://grafana/./public/app/features/alerting/unified/createRouteGroupsMatcherWorker.ts","webpack://grafana/./public/app/features/alerting/unified/useRouteGroupsMatcher.ts","webpack://grafana/./public/app/features/alerting/unified/utils/amroutes.ts","webpack://grafana/./public/app/features/alerting/unified/utils/k8s/constants.ts","webpack://grafana/./public/app/features/alerting/unified/utils/k8s/utils.ts","webpack://grafana/./public/app/features/alerting/unified/utils/mute-timings.ts","webpack://grafana/./public/app/features/alerting/unified/utils/notification-policies.ts","webpack://grafana/./public/app/features/alerting/unified/utils/routeTree.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\nimport { useDispatch } from 'app/types';\n\nimport { cleanUpAction, CleanUpAction } from '../actions/cleanUp';\n\nexport function useCleanup(cleanupAction: CleanUpAction) {\n  const dispatch = useDispatch();\n  //bit of a hack to unburden user from having to wrap stateSelcetor in a useCallback. Otherwise cleanup would happen on every render\n  const selectorRef = useRef(cleanupAction);\n  selectorRef.current = cleanupAction;\n  useEffect(() => {\n    return () => {\n      dispatch(cleanUpAction({ cleanupAction: selectorRef.current }));\n    };\n  }, [dispatch]);\n}\n","import { lastValueFrom } from 'rxjs';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { ContactPointsState, ReceiversStateDTO, ReceiverState } from 'app/types';\n\nimport { getDatasourceAPIUid } from '../utils/datasource';\n\ninterface IntegrationNameObject {\n  type: string;\n  index?: string;\n}\nexport const parseIntegrationName = (integrationName: string): IntegrationNameObject => {\n  const matches = integrationName.match(/^(\\w+)(\\[\\d+\\])?$/);\n  if (!matches) {\n    return { type: integrationName, index: undefined };\n  }\n\n  return {\n    type: matches[1],\n    index: matches[2],\n  };\n};\n\nexport const contactPointsStateDtoToModel = (receiversStateDto: ReceiversStateDTO[]): ContactPointsState => {\n  // init object to return\n  const contactPointsState: ContactPointsState = { receivers: {}, errorCount: 0 };\n  // for each receiver from response\n  receiversStateDto.forEach((cpState) => {\n    //init receiver state\n    contactPointsState.receivers[cpState.name] = { active: cpState.active, notifiers: {}, errorCount: 0 };\n    const receiverState = contactPointsState.receivers[cpState.name];\n    //update integrations in response\n    cpState.integrations.forEach((integrationStatusDTO) => {\n      //update errorcount\n      const hasError = Boolean(integrationStatusDTO?.lastNotifyAttemptError);\n      if (hasError) {\n        receiverState.errorCount += 1;\n      }\n      //add integration for this type\n      const integrationType = getIntegrationType(integrationStatusDTO.name);\n      if (integrationType) {\n        //if type still does not exist in IntegrationsTypeState we initialize it with an empty array\n        if (!receiverState.notifiers[integrationType]) {\n          receiverState.notifiers[integrationType] = [];\n        }\n        // add error status for this type\n        receiverState.notifiers[integrationType].push(integrationStatusDTO);\n      }\n    });\n  });\n  const errorsCount = Object.values(contactPointsState.receivers).reduce(\n    (prevCount: number, receiverState: ReceiverState) => prevCount + receiverState.errorCount,\n    0\n  );\n  return { ...contactPointsState, errorCount: errorsCount };\n};\n\nexport const getIntegrationType = (integrationName: string): string | undefined =>\n  parseIntegrationName(integrationName)?.type;\n\nexport async function fetchContactPointsState(alertManagerSourceName: string): Promise<ContactPointsState> {\n  try {\n    const response = await lastValueFrom(\n      getBackendSrv().fetch<ReceiversStateDTO[]>({\n        url: `/api/alertmanager/${getDatasourceAPIUid(alertManagerSourceName)}/config/api/v1/receivers`,\n        showErrorAlert: false,\n        showSuccessAlert: false,\n      })\n    );\n    return contactPointsStateDtoToModel(response.data);\n  } catch (error) {\n    return contactPointsStateDtoToModel([]);\n  }\n}\n","import { ContactPointsState } from 'app/types';\n\nimport { CONTACT_POINTS_STATE_INTERVAL_MS } from '../utils/constants';\n\nimport { alertingApi } from './alertingApi';\nimport { fetchContactPointsState } from './grafana';\n\nexport const receiversApi = alertingApi.injectEndpoints({\n  endpoints: (build) => ({\n    contactPointsState: build.query<ContactPointsState, { amSourceName: string }>({\n      queryFn: async ({ amSourceName }) => {\n        try {\n          const contactPointsState = await fetchContactPointsState(amSourceName);\n          return { data: contactPointsState };\n        } catch (error) {\n          return { error: error };\n        }\n      },\n    }),\n  }),\n});\n\nexport const useGetContactPointsState = (alertManagerSourceName: string) => {\n  const contactPointsStateEmpty: ContactPointsState = { receivers: {}, errorCount: 0 };\n  const { currentData: contactPointsState } = receiversApi.useContactPointsStateQuery(\n    { amSourceName: alertManagerSourceName ?? '' },\n    {\n      skip: !alertManagerSourceName,\n      pollingInterval: CONTACT_POINTS_STATE_INTERVAL_MS,\n    }\n  );\n  return contactPointsState ?? contactPointsStateEmpty;\n};\n","import { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { allGrafanaExportProviders, ExportFormats } from './providers';\ninterface MuteTimingsExporterPreviewProps {\n  exportFormat: ExportFormats;\n  onClose: () => void;\n}\n\nconst GrafanaMuteTimingsExporterPreview = ({ exportFormat, onClose }: MuteTimingsExporterPreviewProps) => {\n  const { currentData: muteTimingsDefinition = '', isFetching } = alertRuleApi.useExportMuteTimingsQuery({\n    format: exportFormat,\n  });\n  const downloadFileName = `mute-timings-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={muteTimingsDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n};\n\ninterface GrafanaMuteTimingExporterPreviewProps extends MuteTimingsExporterPreviewProps {\n  muteTimingName: string;\n}\nconst GrafanaMuteTimingExporterPreview = ({\n  exportFormat,\n  onClose,\n  muteTimingName,\n}: GrafanaMuteTimingExporterPreviewProps) => {\n  const { currentData: muteTimingsDefinition = '', isFetching } = alertRuleApi.useExportMuteTimingQuery({\n    format: exportFormat,\n    muteTiming: muteTimingName,\n  });\n  const downloadFileName = `mute-timing-${muteTimingName}-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={muteTimingsDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n};\ninterface GrafanaMuteTimingsExporterProps {\n  onClose: () => void;\n  muteTimingName?: string;\n}\n\nexport const GrafanaMuteTimingsExporter = ({ onClose, muteTimingName }: GrafanaMuteTimingsExporterProps) => {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n  return (\n    <GrafanaExportDrawer\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      {muteTimingName ? (\n        <GrafanaMuteTimingExporterPreview exportFormat={activeTab} onClose={onClose} muteTimingName={muteTimingName} />\n      ) : (\n        <GrafanaMuteTimingsExporterPreview exportFormat={activeTab} onClose={onClose} />\n      )}\n    </GrafanaExportDrawer>\n  );\n};\n","import { useCallback, useMemo, useState } from 'react';\nimport { useToggle } from 'react-use';\n\nimport { GrafanaMuteTimingsExporter } from '../export/GrafanaMuteTimingsExporter';\n\nexport const ALL_MUTE_TIMINGS = Symbol('all mute timings');\n\ntype ExportProps = [JSX.Element | null, (muteTiming: string | typeof ALL_MUTE_TIMINGS) => void];\n\nexport const useExportMuteTimingsDrawer = (): ExportProps => {\n  const [muteTimingName, setMuteTimingName] = useState<string | typeof ALL_MUTE_TIMINGS | null>(null);\n  const [isExportDrawerOpen, toggleShowExportDrawer] = useToggle(false);\n\n  const handleClose = useCallback(() => {\n    setMuteTimingName(null);\n    toggleShowExportDrawer(false);\n  }, [toggleShowExportDrawer]);\n\n  const handleOpen = (muteTimingName: string | typeof ALL_MUTE_TIMINGS) => {\n    setMuteTimingName(muteTimingName);\n    toggleShowExportDrawer(true);\n  };\n\n  const drawer = useMemo(() => {\n    if (!muteTimingName || !isExportDrawerOpen) {\n      return null;\n    }\n\n    if (muteTimingName === ALL_MUTE_TIMINGS) {\n      // use this drawer when we want to export all mute timings\n      return <GrafanaMuteTimingsExporter onClose={handleClose} />;\n    } else {\n      // use this one for exporting a single mute timing\n      return <GrafanaMuteTimingsExporter muteTimingName={muteTimingName} onClose={handleClose} />;\n    }\n  }, [isExportDrawerOpen, handleClose, muteTimingName]);\n\n  return [drawer, handleOpen];\n};\n","import { useState } from 'react';\n\nimport { Badge, ConfirmModal, LinkButton, Stack } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { useExportMuteTimingsDrawer } from 'app/features/alerting/unified/components/mute-timings/useExportMuteTimingsDrawer';\n\nimport { Authorize } from '../../components/Authorize';\nimport { AlertmanagerAction, useAlertmanagerAbility } from '../../hooks/useAbilities';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { makeAMLink } from '../../utils/misc';\nimport { isDisabled } from '../../utils/mute-timings';\n\nimport { MuteTiming, useDeleteMuteTiming } from './useMuteTimings';\n\ninterface MuteTimingActionsButtonsProps {\n  muteTiming: MuteTiming;\n  alertManagerSourceName: string;\n}\n\nexport const MuteTimingActionsButtons = ({ muteTiming, alertManagerSourceName }: MuteTimingActionsButtonsProps) => {\n  const deleteMuteTiming = useDeleteMuteTiming({ alertmanager: alertManagerSourceName! });\n  const [showDeleteDrawer, setShowDeleteDrawer] = useState(false);\n  const [ExportDrawer, showExportDrawer] = useExportMuteTimingsDrawer();\n  const [exportSupported, exportAllowed] = useAlertmanagerAbility(AlertmanagerAction.ExportMuteTimings);\n\n  const closeDeleteModal = () => setShowDeleteDrawer(false);\n\n  const isGrafanaDataSource = alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME;\n  const viewOrEditHref = makeAMLink(`/alerting/routes/mute-timing/edit`, alertManagerSourceName, {\n    muteName: muteTiming?.metadata?.name || muteTiming.name,\n  });\n\n  const viewOrEditButton = (\n    <LinkButton href={viewOrEditHref} variant=\"secondary\" size=\"sm\" icon={muteTiming.provisioned ? 'eye' : 'pen'}>\n      {muteTiming.provisioned ? (\n        <Trans i18nKey=\"alerting.common.view\">View</Trans>\n      ) : (\n        <Trans i18nKey=\"alerting.common.edit\">Edit</Trans>\n      )}\n    </LinkButton>\n  );\n\n  return (\n    <>\n      <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"flex-end\" wrap=\"wrap\">\n        {!isGrafanaDataSource && isDisabled(muteTiming) && <Badge text=\"Disabled\" color=\"orange\" />}\n        <Authorize actions={[AlertmanagerAction.UpdateMuteTiming]}>{viewOrEditButton}</Authorize>\n\n        {exportSupported && (\n          <LinkButton\n            icon=\"download-alt\"\n            variant=\"secondary\"\n            size=\"sm\"\n            data-testid=\"export\"\n            disabled={!exportAllowed}\n            onClick={() => showExportDrawer(muteTiming.name)}\n          >\n            <Trans i18nKey=\"alerting.common.export\">Export</Trans>\n          </LinkButton>\n        )}\n\n        {!muteTiming.provisioned && (\n          <Authorize actions={[AlertmanagerAction.DeleteMuteTiming]}>\n            <LinkButton icon=\"trash-alt\" variant=\"secondary\" size=\"sm\" onClick={() => setShowDeleteDrawer(true)}>\n              <Trans i18nKey=\"alerting.common.delete\">Delete</Trans>\n            </LinkButton>\n          </Authorize>\n        )}\n      </Stack>\n      <ConfirmModal\n        isOpen={showDeleteDrawer}\n        title=\"Delete mute timing\"\n        body={`Are you sure you would like to delete \"${muteTiming.name}\"?`}\n        confirmText={t('alerting.common.delete', 'Delete')}\n        onConfirm={async () => {\n          await deleteMuteTiming({\n            name: muteTiming?.metadata?.name || muteTiming.name,\n          });\n\n          closeDeleteModal();\n        }}\n        onDismiss={closeDeleteModal}\n      />\n      {ExportDrawer}\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport { ButtonHTMLAttributes } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, ButtonVariant, IconName, LinkButton, useStyles2 } from '@grafana/ui';\n\nimport { EmptyArea } from './EmptyArea';\n\nexport interface EmptyAreaWithCTAProps {\n  buttonLabel: string;\n  href?: string;\n  onButtonClick?: ButtonHTMLAttributes<HTMLButtonElement>['onClick'];\n  text: string;\n\n  buttonIcon?: IconName;\n  buttonSize?: 'xs' | 'sm' | 'md' | 'lg';\n  buttonVariant?: ButtonVariant;\n  showButton?: boolean;\n}\n\nexport const EmptyAreaWithCTA = ({\n  buttonIcon,\n  buttonLabel,\n  buttonSize = 'lg',\n  buttonVariant = 'primary',\n  onButtonClick,\n  text,\n  href,\n  showButton = true,\n}: EmptyAreaWithCTAProps) => {\n  const styles = useStyles2(getStyles);\n\n  const commonProps = {\n    className: styles.button,\n    icon: buttonIcon,\n    size: buttonSize,\n    variant: buttonVariant,\n  };\n\n  return (\n    <EmptyArea>\n      <>\n        <p className={styles.text}>{text}</p>\n        {showButton &&\n          (href ? (\n            <LinkButton href={href} type=\"button\" {...commonProps}>\n              {buttonLabel}\n            </LinkButton>\n          ) : (\n            <Button onClick={onButtonClick} type=\"button\" {...commonProps}>\n              {buttonLabel}\n            </Button>\n          ))}\n      </>\n    </EmptyArea>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      backgroundColor: theme.colors.background.secondary,\n      color: theme.colors.text.secondary,\n      padding: theme.spacing(4),\n      textAlign: 'center',\n    }),\n    text: css({\n      marginBottom: theme.spacing(2),\n    }),\n    button: css({\n      margin: theme.spacing(2, 0, 1),\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport { useMemo } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, LinkButton, LoadingPlaceholder, Stack, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { MuteTimingActionsButtons } from 'app/features/alerting/unified/components/mute-timings/MuteTimingActionsButtons';\nimport {\n  ALL_MUTE_TIMINGS,\n  useExportMuteTimingsDrawer,\n} from 'app/features/alerting/unified/components/mute-timings/useExportMuteTimingsDrawer';\nimport { PROVENANCE_ANNOTATION } from 'app/features/alerting/unified/utils/k8s/constants';\n\nimport { Authorize } from '../../components/Authorize';\nimport { AlertmanagerAction, useAlertmanagerAbilities, useAlertmanagerAbility } from '../../hooks/useAbilities';\nimport { makeAMLink } from '../../utils/misc';\nimport { DynamicTable, DynamicTableColumnProps } from '../DynamicTable';\nimport { EmptyAreaWithCTA } from '../EmptyAreaWithCTA';\nimport { ProvisioningBadge } from '../Provisioning';\nimport { Spacer } from '../Spacer';\n\nimport { MuteTiming, useMuteTimings } from './useMuteTimings';\nimport { renderTimeIntervals } from './util';\n\ninterface MuteTimingsTableProps {\n  alertManagerSourceName: string;\n  hideActions?: boolean;\n}\n\ntype TableItem = {\n  id: string;\n  data: MuteTiming;\n};\n\nexport const MuteTimingsTable = ({ alertManagerSourceName, hideActions }: MuteTimingsTableProps) => {\n  const styles = useStyles2(getStyles);\n  const [ExportAllDrawer, showExportAllDrawer] = useExportMuteTimingsDrawer();\n\n  const { data, isLoading, error } = useMuteTimings({ alertmanager: alertManagerSourceName });\n\n  const items = useMemo((): TableItem[] => {\n    const muteTimings = data || [];\n\n    return muteTimings.map((mute) => {\n      return {\n        id: mute.id,\n        data: mute,\n      };\n    });\n  }, [data]);\n\n  const [_, allowedToCreateMuteTiming] = useAlertmanagerAbility(AlertmanagerAction.CreateMuteTiming);\n\n  const [exportMuteTimingsSupported, exportMuteTimingsAllowed] = useAlertmanagerAbility(\n    AlertmanagerAction.ExportMuteTimings\n  );\n  const columns = useColumns(alertManagerSourceName, hideActions);\n\n  if (isLoading) {\n    return <LoadingPlaceholder text=\"Loading mute timings...\" />;\n  }\n\n  if (error) {\n    return (\n      <Alert severity=\"error\" title={t('alerting.mute_timings.error-loading.title', 'Error loading mute timings')}>\n        <Trans i18nKey=\"alerting.mute_timings.error-loading.description\">\n          Could not load mute timings. Please try again later.\n        </Trans>\n      </Alert>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <Stack direction=\"row\" alignItems=\"center\">\n        <span>\n          Enter specific time intervals when not to send notifications or freeze notifications for recurring periods of\n          time.\n        </span>\n        <Spacer />\n        {!hideActions && items.length > 0 && (\n          <Authorize actions={[AlertmanagerAction.CreateMuteTiming]}>\n            <LinkButton\n              className={styles.muteTimingsButtons}\n              icon=\"plus\"\n              variant=\"primary\"\n              href={makeAMLink('alerting/routes/mute-timing/new', alertManagerSourceName)}\n            >\n              Add mute timing\n            </LinkButton>\n          </Authorize>\n        )}\n        {exportMuteTimingsSupported && (\n          <>\n            <Button\n              icon=\"download-alt\"\n              className={styles.muteTimingsButtons}\n              variant=\"secondary\"\n              disabled={!exportMuteTimingsAllowed}\n              onClick={() => showExportAllDrawer(ALL_MUTE_TIMINGS)}\n            >\n              <Trans i18nKey=\"alerting.common.export-all\">Export all</Trans>\n            </Button>\n            {ExportAllDrawer}\n          </>\n        )}\n      </Stack>\n      {items.length > 0 ? (\n        <DynamicTable items={items} cols={columns} pagination={{ itemsPerPage: 25 }} />\n      ) : !hideActions ? (\n        <EmptyAreaWithCTA\n          text=\"You haven't created any mute timings yet\"\n          buttonLabel=\"Add mute timing\"\n          buttonIcon=\"plus\"\n          buttonSize=\"lg\"\n          href={makeAMLink('alerting/routes/mute-timing/new', alertManagerSourceName)}\n          showButton={allowedToCreateMuteTiming}\n        />\n      ) : (\n        <EmptyAreaWithCTA text=\"No mute timings configured\" buttonLabel={''} showButton={false} />\n      )}\n    </div>\n  );\n};\n\nfunction useColumns(alertManagerSourceName: string, hideActions = false) {\n  const [[_editSupported, allowedToEdit], [_deleteSupported, allowedToDelete]] = useAlertmanagerAbilities([\n    AlertmanagerAction.UpdateMuteTiming,\n    AlertmanagerAction.DeleteMuteTiming,\n  ]);\n  const showActions = !hideActions && (allowedToEdit || allowedToDelete);\n\n  return useMemo((): Array<DynamicTableColumnProps<MuteTiming>> => {\n    const columns: Array<DynamicTableColumnProps<MuteTiming>> = [\n      {\n        id: 'name',\n        label: 'Name',\n        renderCell: function renderName({ data }) {\n          return (\n            <div>\n              {data.name}{' '}\n              {data.provisioned && (\n                <ProvisioningBadge tooltip provenance={data.metadata?.annotations?.[PROVENANCE_ANNOTATION]} />\n              )}\n            </div>\n          );\n        },\n        size: 1,\n      },\n      {\n        id: 'timeRange',\n        label: 'Time range',\n        renderCell: ({ data }) => {\n          return renderTimeIntervals(data);\n        },\n        size: 5,\n      },\n    ];\n    if (showActions) {\n      columns.push({\n        id: 'actions',\n        label: 'Actions',\n        alignColumn: 'end',\n        renderCell: ({ data }) => (\n          <MuteTimingActionsButtons muteTiming={data} alertManagerSourceName={alertManagerSourceName} />\n        ),\n        size: 2,\n      });\n    }\n    return columns;\n  }, [showActions, alertManagerSourceName]);\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    display: 'flex',\n    flexFlow: 'column nowrap',\n  }),\n  muteTimingsButtons: css({\n    marginBottom: theme.spacing(2),\n  }),\n});\n","import { css } from '@emotion/css';\nimport { debounce, isEqual } from 'lodash';\nimport { useCallback, useEffect, useRef } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Button, Field, Icon, Input, Label, Select, Stack, Text, Tooltip, useStyles2 } from '@grafana/ui';\nimport { ObjectMatcher, Receiver, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { useURLSearchParams } from '../../hooks/useURLSearchParams';\nimport { matcherToObjectMatcher } from '../../utils/alertmanager';\nimport {\n  normalizeMatchers,\n  parsePromQLStyleMatcherLoose,\n  parsePromQLStyleMatcherLooseSafe,\n} from '../../utils/matchers';\n\ninterface NotificationPoliciesFilterProps {\n  receivers: Receiver[];\n  onChangeMatchers: (labels: ObjectMatcher[]) => void;\n  onChangeReceiver: (receiver: string | undefined) => void;\n  matchingCount: number;\n}\n\nconst NotificationPoliciesFilter = ({\n  receivers,\n  onChangeReceiver,\n  onChangeMatchers,\n  matchingCount,\n}: NotificationPoliciesFilterProps) => {\n  const [searchParams, setSearchParams] = useURLSearchParams();\n  const searchInputRef = useRef<HTMLInputElement | null>(null);\n  const { queryString, contactPoint } = getNotificationPoliciesFilters(searchParams);\n  const styles = useStyles2(getStyles);\n\n  const handleChangeLabels = useCallback(() => debounce(onChangeMatchers, 500), [onChangeMatchers]);\n\n  useEffect(() => {\n    onChangeReceiver(contactPoint);\n  }, [contactPoint, onChangeReceiver]);\n\n  useEffect(() => {\n    const matchers = parsePromQLStyleMatcherLooseSafe(queryString ?? '').map(matcherToObjectMatcher);\n    handleChangeLabels()(matchers);\n  }, [handleChangeLabels, queryString]);\n\n  const clearFilters = useCallback(() => {\n    if (searchInputRef.current) {\n      searchInputRef.current.value = '';\n    }\n    setSearchParams({ contactPoint: undefined, queryString: undefined });\n  }, [setSearchParams]);\n\n  const receiverOptions: Array<SelectableValue<string>> = receivers.map(toOption);\n  const selectedContactPoint = receiverOptions.find((option) => option.value === contactPoint) ?? null;\n\n  const hasFilters = queryString || contactPoint;\n\n  let inputValid = Boolean(queryString && queryString.length > 3);\n  try {\n    if (!queryString) {\n      inputValid = true;\n    } else {\n      parsePromQLStyleMatcherLoose(queryString);\n    }\n  } catch (err) {\n    inputValid = false;\n  }\n\n  return (\n    <Stack direction=\"row\" alignItems=\"flex-end\" gap={1}>\n      <Field\n        className={styles.noBottom}\n        label={\n          <Label>\n            <Stack gap={0.5}>\n              <span>Search by matchers</span>\n              <Tooltip\n                content={\n                  <div>\n                    Filter notification policies by using a comma separated list of matchers, e.g.:\n                    <pre>severity=critical, region=EMEA</pre>\n                  </div>\n                }\n              >\n                <Icon name=\"info-circle\" size=\"sm\" />\n              </Tooltip>\n            </Stack>\n          </Label>\n        }\n        invalid={!inputValid}\n        error={!inputValid ? 'Query must use valid matcher syntax' : null}\n      >\n        <Input\n          ref={searchInputRef}\n          data-testid=\"search-query-input\"\n          placeholder=\"Search\"\n          width={46}\n          prefix={<Icon name=\"search\" />}\n          onChange={(event) => {\n            setSearchParams({ queryString: event.currentTarget.value });\n          }}\n          defaultValue={queryString}\n        />\n      </Field>\n      <Field label=\"Search by contact point\" style={{ marginBottom: 0 }}>\n        <Select\n          id=\"receiver\"\n          aria-label=\"Search by contact point\"\n          value={selectedContactPoint}\n          options={receiverOptions}\n          onChange={(option) => {\n            setSearchParams({ contactPoint: option?.value });\n          }}\n          width={28}\n          isClearable\n        />\n      </Field>\n      {hasFilters && (\n        <Stack alignItems=\"center\">\n          <Button variant=\"secondary\" icon=\"times\" onClick={clearFilters}>\n            Clear filters\n          </Button>\n          <Text variant=\"bodySmall\" color=\"secondary\">\n            {matchingCount === 0 && 'No policies matching filters.'}\n            {matchingCount === 1 && `${matchingCount} policy matches the filters.`}\n            {matchingCount > 1 && `${matchingCount} policies match the filters.`}\n          </Text>\n        </Stack>\n      )}\n    </Stack>\n  );\n};\n\n/**\n * Find a list of route IDs that match given input filters\n */\ntype FilterPredicate = (route: RouteWithID) => boolean;\n\n/**\n * Find routes int the tree that match the given predicate function\n * @param routeTree the route tree to search\n * @param predicateFn the predicate function to match routes\n * @returns\n * - matches: list of routes that match the predicate\n * - matchingRouteIdsWithPath: map with routeids that are part of the path of a matching route\n *  key is the route id, value is an array of route ids that are part of its path\n */\nexport function findRoutesMatchingPredicate(\n  routeTree: RouteWithID,\n  predicateFn: FilterPredicate\n): Map<RouteWithID, RouteWithID[]> {\n  // map with routids that are part of the path of a matching route\n  // key is the route id, value is an array of route ids that are part of the path\n  const matchingRouteIdsWithPath = new Map<RouteWithID, RouteWithID[]>();\n\n  function findMatch(route: RouteWithID, path: RouteWithID[]) {\n    const newPath = [...path, route];\n\n    if (predicateFn(route)) {\n      // if the route matches the predicate, we need to add the path to the map of matching routes\n      const previousPath = matchingRouteIdsWithPath.get(route) ?? [];\n      // add the current route id to the map with its path\n      matchingRouteIdsWithPath.set(route, [...previousPath, ...newPath]);\n    }\n\n    // if the route has subroutes, call findMatch recursively\n    route.routes?.forEach((route) => findMatch(route, newPath));\n  }\n\n  findMatch(routeTree, []);\n\n  return matchingRouteIdsWithPath;\n}\n\nexport function findRoutesByMatchers(route: RouteWithID, labelMatchersFilter: ObjectMatcher[]): boolean {\n  const routeMatchers = normalizeMatchers(route);\n\n  return labelMatchersFilter.every((filter) => routeMatchers.some((matcher) => isEqual(filter, matcher)));\n}\n\nconst toOption = (receiver: Receiver) => ({\n  label: receiver.name,\n  value: receiver.name,\n});\n\nconst getNotificationPoliciesFilters = (searchParams: URLSearchParams) => ({\n  queryString: searchParams.get('queryString') ?? undefined,\n  contactPoint: searchParams.get('contactPoint') ?? undefined,\n});\n\nconst getStyles = () => ({\n  noBottom: css({\n    marginBottom: 0,\n  }),\n});\n\nexport { NotificationPoliciesFilter };\n","import { Receiver } from 'app/plugins/datasource/alertmanager/types';\n\nimport { onCallApi } from '../../../api/onCallApi';\nimport { usePluginBridge } from '../../../hooks/usePluginBridge';\nimport { SupportedPlugin } from '../../../types/pluginBridges';\n\nimport { isOnCallReceiver } from './onCall/onCall';\nimport { AmRouteReceiver } from './types';\n\nexport const useGetGrafanaReceiverTypeChecker = () => {\n  const { installed: isOnCallEnabled } = usePluginBridge(SupportedPlugin.OnCall);\n  const { data } = onCallApi.useGrafanaOnCallIntegrationsQuery(undefined, {\n    skip: !isOnCallEnabled,\n  });\n  const getGrafanaReceiverType = (receiver: Receiver): SupportedPlugin | undefined => {\n    //CHECK FOR ONCALL PLUGIN\n    const onCallIntegrations = data ?? [];\n    if (isOnCallEnabled && isOnCallReceiver(receiver, onCallIntegrations)) {\n      return SupportedPlugin.OnCall;\n    }\n    //WE WILL ADD IN HERE IF THERE ARE MORE TYPES TO CHECK\n    return undefined;\n  };\n\n  return getGrafanaReceiverType;\n};\n\nexport const useGetAmRouteReceiverWithGrafanaAppTypes = (receivers: Receiver[]) => {\n  const getGrafanaReceiverType = useGetGrafanaReceiverTypeChecker();\n  const receiverToSelectableContactPointValue = (receiver: Receiver): AmRouteReceiver => {\n    const amRouteReceiverValue: AmRouteReceiver = {\n      label: receiver.name,\n      value: receiver.name,\n      grafanaAppReceiverType: getGrafanaReceiverType(receiver),\n    };\n    return amRouteReceiverValue;\n  };\n\n  return receivers.map(receiverToSelectableContactPointValue);\n};\n","import pluralize from 'pluralize';\nimport { Fragment } from 'react';\nimport * as React from 'react';\n\nimport { Badge, Stack } from '@grafana/ui';\n\ninterface Props {\n  active?: number;\n  suppressed?: number;\n  unprocessed?: number;\n}\n\nexport const AlertGroupsSummary = ({ active = 0, suppressed = 0, unprocessed = 0 }: Props) => {\n  const statsComponents: React.ReactNode[] = [];\n  const total = active + suppressed + unprocessed;\n\n  if (active) {\n    statsComponents.push(<Badge color=\"red\" key=\"firing\" text={`${active} firing`} />);\n  }\n\n  if (suppressed) {\n    statsComponents.push(<Badge color=\"blue\" key=\"suppressed\" text={`${suppressed} suppressed`} />);\n  }\n\n  if (unprocessed) {\n    statsComponents.push(<Badge color=\"orange\" key=\"unprocessed\" text={`${unprocessed} unprocessed`} />);\n  }\n\n  // if we only have one category it's not really necessary to repeat the total\n  if (statsComponents.length > 1) {\n    statsComponents.unshift(\n      <Fragment key=\"total\">\n        {total} {pluralize('instance', total)}\n      </Fragment>\n    );\n  }\n\n  const hasStats = Boolean(statsComponents.length);\n\n  return hasStats ? <Stack gap={0.5}>{statsComponents}</Stack> : null;\n};\n","import { ReactNode, useState } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\n\nimport { Collapse, Field, Link, MultiSelect, Select, useStyles2 } from '@grafana/ui';\nimport { RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { FormAmRoute } from '../../types/amroutes';\nimport {\n  amRouteToFormAmRoute,\n  commonGroupByOptions,\n  mapMultiSelectValueToStrings,\n  mapSelectValueToString,\n  promDurationValidator,\n  repeatIntervalValidator,\n  stringsToSelectableValues,\n  stringToSelectableValue,\n} from '../../utils/amroutes';\nimport { makeAMLink } from '../../utils/misc';\nimport { AmRouteReceiver } from '../receivers/grafanaAppReceivers/types';\n\nimport { PromDurationInput } from './PromDurationInput';\nimport { getFormStyles } from './formStyles';\nimport { TIMING_OPTIONS_DEFAULTS } from './timingOptions';\n\nexport interface AmRootRouteFormProps {\n  alertManagerSourceName: string;\n  actionButtons: ReactNode;\n  onSubmit: (route: Partial<FormAmRoute>) => void;\n  receivers: AmRouteReceiver[];\n  route: RouteWithID;\n}\n\nexport const AmRootRouteForm = ({\n  actionButtons,\n  alertManagerSourceName,\n  onSubmit,\n  receivers,\n  route,\n}: AmRootRouteFormProps) => {\n  const styles = useStyles2(getFormStyles);\n  const [isTimingOptionsExpanded, setIsTimingOptionsExpanded] = useState(false);\n  const [groupByOptions, setGroupByOptions] = useState(stringsToSelectableValues(route.group_by));\n\n  const defaultValues = amRouteToFormAmRoute(route);\n  const {\n    handleSubmit,\n    register,\n    control,\n    formState: { errors },\n    setValue,\n    getValues,\n  } = useForm<FormAmRoute>({\n    defaultValues: {\n      ...defaultValues,\n      overrideTimings: true,\n      overrideGrouping: true,\n    },\n  });\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Field label=\"Default contact point\" invalid={!!errors.receiver} error={errors.receiver?.message}>\n        <>\n          <div className={styles.container} data-testid=\"am-receiver-select\">\n            <Controller\n              render={({ field: { onChange, ref, ...field } }) => (\n                <Select\n                  aria-label=\"Default contact point\"\n                  {...field}\n                  className={styles.input}\n                  onChange={(value) => onChange(mapSelectValueToString(value))}\n                  options={receivers}\n                />\n              )}\n              control={control}\n              name=\"receiver\"\n              rules={{ required: { value: true, message: 'Required.' } }}\n            />\n            <span>or</span>\n            <Link\n              className={styles.linkText}\n              href={makeAMLink('/alerting/notifications/receivers/new', alertManagerSourceName)}\n            >\n              Create a contact point\n            </Link>\n          </div>\n        </>\n      </Field>\n      <Field\n        label=\"Group by\"\n        description=\"Combine multiple alerts into a single notification by grouping them by the same label values.\"\n        data-testid=\"am-group-select\"\n      >\n        <Controller\n          render={({ field: { onChange, ref, ...field } }) => (\n            <MultiSelect\n              aria-label=\"Group by\"\n              {...field}\n              allowCustomValue\n              className={styles.input}\n              onCreateOption={(opt: string) => {\n                setGroupByOptions((opts) => [...opts, stringToSelectableValue(opt)]);\n                setValue('groupBy', [...(field.value || []), opt]);\n              }}\n              onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n              options={[...commonGroupByOptions, ...groupByOptions]}\n            />\n          )}\n          control={control}\n          name=\"groupBy\"\n        />\n      </Field>\n      <Collapse\n        collapsible\n        className={styles.collapse}\n        isOpen={isTimingOptionsExpanded}\n        label=\"Timing options\"\n        onToggle={setIsTimingOptionsExpanded}\n      >\n        <div className={styles.timingFormContainer}>\n          <Field\n            label=\"Group wait\"\n            description=\"The waiting time before sending the first notification for a new group of alerts. Default 30 seconds.\"\n            invalid={!!errors.groupWaitValue}\n            error={errors.groupWaitValue?.message}\n            data-testid=\"am-group-wait\"\n          >\n            <PromDurationInput\n              {...register('groupWaitValue', { validate: promDurationValidator })}\n              placeholder={TIMING_OPTIONS_DEFAULTS.group_wait}\n              className={styles.promDurationInput}\n              aria-label=\"Group wait\"\n            />\n          </Field>\n          <Field\n            label=\"Group interval\"\n            description=\"The wait time before sending a notification about changes in the alert group after the first notification has been sent. Default is 5 minutes.\"\n            invalid={!!errors.groupIntervalValue}\n            error={errors.groupIntervalValue?.message}\n            data-testid=\"am-group-interval\"\n          >\n            <PromDurationInput\n              {...register('groupIntervalValue', { validate: promDurationValidator })}\n              placeholder={TIMING_OPTIONS_DEFAULTS.group_interval}\n              className={styles.promDurationInput}\n              aria-label=\"Group interval\"\n            />\n          </Field>\n          <Field\n            label=\"Repeat interval\"\n            description=\"The wait time before resending a notification that has already been sent successfully. Default is 4 hours. Should be a multiple of Group interval.\"\n            invalid={!!errors.repeatIntervalValue}\n            error={errors.repeatIntervalValue?.message}\n            data-testid=\"am-repeat-interval\"\n          >\n            <PromDurationInput\n              {...register('repeatIntervalValue', {\n                validate: (value: string) => {\n                  const groupInterval = getValues('groupIntervalValue');\n                  return repeatIntervalValidator(value, groupInterval);\n                },\n              })}\n              placeholder={TIMING_OPTIONS_DEFAULTS.repeat_interval}\n              className={styles.promDurationInput}\n              aria-label=\"Repeat interval\"\n            />\n          </Field>\n        </div>\n      </Collapse>\n      <div className={styles.container}>{actionButtons}</div>\n    </form>\n  );\n};\n","import { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\n\nimport { mergeTimeIntervals } from '../components/mute-timings/util';\nimport { useAlertmanager } from '../state/AlertmanagerContext';\nimport { timeIntervalToString } from '../utils/alertmanager';\n\nimport { useAlertmanagerConfig } from './useAlertmanagerConfig';\n\nexport function useMuteTimingOptions(): Array<SelectableValue<string>> {\n  const { selectedAlertmanager } = useAlertmanager();\n  const { currentData } = useAlertmanagerConfig(selectedAlertmanager);\n  const config = currentData?.alertmanager_config;\n\n  return useMemo(() => {\n    const time_intervals = config ? mergeTimeIntervals(config) : [];\n    const muteTimingsOptions: Array<SelectableValue<string>> =\n      time_intervals?.map((value) => ({\n        value: value.name,\n        label: value.name,\n        description: value.time_intervals.map((interval) => timeIntervalToString(interval)).join(', AND '),\n      })) ?? [];\n\n    return muteTimingsOptions;\n  }, [config]);\n}\n","import { css } from '@emotion/css';\nimport { ReactNode, useState } from 'react';\nimport { useForm, Controller, useFieldArray } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport {\n  Badge,\n  Button,\n  Field,\n  FieldValidationMessage,\n  IconButton,\n  Input,\n  MultiSelect,\n  Select,\n  Stack,\n  Switch,\n  useStyles2,\n} from '@grafana/ui';\nimport { MatcherOperator, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { useMuteTimingOptions } from '../../hooks/useMuteTimingOptions';\nimport { FormAmRoute } from '../../types/amroutes';\nimport { SupportedPlugin } from '../../types/pluginBridges';\nimport { matcherFieldOptions } from '../../utils/alertmanager';\nimport {\n  amRouteToFormAmRoute,\n  commonGroupByOptions,\n  emptyArrayFieldMatcher,\n  mapMultiSelectValueToStrings,\n  mapSelectValueToString,\n  promDurationValidator,\n  repeatIntervalValidator,\n  stringToSelectableValue,\n  stringsToSelectableValues,\n} from '../../utils/amroutes';\nimport { AmRouteReceiver } from '../receivers/grafanaAppReceivers/types';\n\nimport { PromDurationInput } from './PromDurationInput';\nimport { getFormStyles } from './formStyles';\nimport { routeTimingsFields } from './routeTimingsFields';\n\nexport interface AmRoutesExpandedFormProps {\n  receivers: AmRouteReceiver[];\n  route?: RouteWithID;\n  onSubmit: (route: Partial<FormAmRoute>) => void;\n  actionButtons: ReactNode;\n  defaults?: Partial<FormAmRoute>;\n}\n\nexport const AmRoutesExpandedForm = ({\n  actionButtons,\n  receivers,\n  route,\n  onSubmit,\n  defaults,\n}: AmRoutesExpandedFormProps) => {\n  const styles = useStyles2(getStyles);\n  const formStyles = useStyles2(getFormStyles);\n  const [groupByOptions, setGroupByOptions] = useState(stringsToSelectableValues(route?.group_by));\n  const muteTimingOptions = useMuteTimingOptions();\n  const emptyMatcher = [{ name: '', operator: MatcherOperator.equal, value: '' }];\n\n  const receiversWithOnCallOnTop = receivers.sort(onCallFirst);\n\n  const formAmRoute = {\n    ...amRouteToFormAmRoute(route),\n    ...defaults,\n  };\n\n  const defaultValues: Omit<FormAmRoute, 'routes'> = {\n    ...formAmRoute,\n    // if we're adding a new route, show at least one empty matcher\n    object_matchers: route ? formAmRoute.object_matchers : emptyMatcher,\n  };\n\n  const {\n    handleSubmit,\n    control,\n    register,\n    formState: { errors },\n    setValue,\n    watch,\n    getValues,\n  } = useForm<FormAmRoute>({\n    defaultValues,\n  });\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: 'object_matchers',\n  });\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input type=\"hidden\" {...register('id')} />\n      <Stack direction=\"column\" alignItems=\"flex-start\">\n        <div>Matching labels</div>\n        {fields.length === 0 && (\n          <Badge\n            color=\"orange\"\n            className={styles.noMatchersWarning}\n            icon=\"exclamation-triangle\"\n            text=\"If no matchers are specified, this notification policy will handle all alert instances.\"\n          />\n        )}\n        {fields.length > 0 && (\n          <div className={styles.matchersContainer}>\n            {fields.map((field, index) => {\n              return (\n                <Stack direction=\"row\" key={field.id} alignItems=\"center\">\n                  <Field\n                    label=\"Label\"\n                    invalid={!!errors.object_matchers?.[index]?.name}\n                    error={errors.object_matchers?.[index]?.name?.message}\n                  >\n                    <Input\n                      {...register(`object_matchers.${index}.name`, { required: 'Field is required' })}\n                      defaultValue={field.name}\n                      placeholder=\"label\"\n                      autoFocus\n                    />\n                  </Field>\n                  <Field label={'Operator'}>\n                    <Controller\n                      render={({ field: { onChange, ref, ...field } }) => (\n                        <Select\n                          {...field}\n                          className={styles.matchersOperator}\n                          onChange={(value) => onChange(value?.value)}\n                          options={matcherFieldOptions}\n                          aria-label=\"Operator\"\n                        />\n                      )}\n                      defaultValue={field.operator}\n                      control={control}\n                      name={`object_matchers.${index}.operator`}\n                      rules={{ required: { value: true, message: 'Required.' } }}\n                    />\n                  </Field>\n                  <Field\n                    label=\"Value\"\n                    invalid={!!errors.object_matchers?.[index]?.value}\n                    error={errors.object_matchers?.[index]?.value?.message}\n                  >\n                    <Input\n                      {...register(`object_matchers.${index}.value`)}\n                      defaultValue={field.value}\n                      placeholder=\"value\"\n                    />\n                  </Field>\n                  <IconButton tooltip=\"Remove matcher\" name={'trash-alt'} onClick={() => remove(index)}>\n                    Remove\n                  </IconButton>\n                </Stack>\n              );\n            })}\n          </div>\n        )}\n        <Button\n          className={styles.addMatcherBtn}\n          icon=\"plus\"\n          onClick={() => append(emptyArrayFieldMatcher)}\n          variant=\"secondary\"\n          type=\"button\"\n        >\n          Add matcher\n        </Button>\n      </Stack>\n\n      <Field label=\"Contact point\">\n        <Controller\n          render={({ field: { onChange, ref, ...field } }) => (\n            <Select\n              aria-label=\"Contact point\"\n              {...field}\n              className={formStyles.input}\n              onChange={(value) => onChange(mapSelectValueToString(value))}\n              options={receiversWithOnCallOnTop}\n              isClearable\n            />\n          )}\n          control={control}\n          name=\"receiver\"\n        />\n      </Field>\n      <Field label=\"Continue matching subsequent sibling nodes\">\n        <Switch id=\"continue-toggle\" {...register('continue')} />\n      </Field>\n      <Field label=\"Override grouping\">\n        <Switch id=\"override-grouping-toggle\" {...register('overrideGrouping')} />\n      </Field>\n      {watch().overrideGrouping && (\n        <Field\n          label=\"Group by\"\n          description=\"Combine multiple alerts into a single notification by grouping them by the same label values. If empty, it is inherited from the parent policy.\"\n        >\n          <Controller\n            rules={{\n              validate: (value) => {\n                if (!value || value.length === 0) {\n                  return 'At least one group by option is required.';\n                }\n                return true;\n              },\n            }}\n            render={({ field: { onChange, ref, ...field }, fieldState: { error } }) => (\n              <>\n                <MultiSelect\n                  aria-label=\"Group by\"\n                  {...field}\n                  invalid={Boolean(error)}\n                  allowCustomValue\n                  className={formStyles.input}\n                  onCreateOption={(opt: string) => {\n                    setGroupByOptions((opts) => [...opts, stringToSelectableValue(opt)]);\n                    setValue('groupBy', [...(field.value || []), opt]);\n                  }}\n                  onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n                  options={[...commonGroupByOptions, ...groupByOptions]}\n                />\n                {error && <FieldValidationMessage>{error.message}</FieldValidationMessage>}\n              </>\n            )}\n            control={control}\n            name=\"groupBy\"\n          />\n        </Field>\n      )}\n      <Field label=\"Override general timings\">\n        <Switch id=\"override-timings-toggle\" {...register('overrideTimings')} />\n      </Field>\n      {watch().overrideTimings && (\n        <>\n          <Field\n            label={routeTimingsFields.groupWait.label}\n            description={routeTimingsFields.groupWait.description}\n            invalid={!!errors.groupWaitValue}\n            error={errors.groupWaitValue?.message}\n          >\n            <PromDurationInput\n              {...register('groupWaitValue', { validate: promDurationValidator })}\n              aria-label={routeTimingsFields.groupWait.ariaLabel}\n              className={formStyles.promDurationInput}\n            />\n          </Field>\n          <Field\n            label={routeTimingsFields.groupInterval.label}\n            description={routeTimingsFields.groupInterval.description}\n            invalid={!!errors.groupIntervalValue}\n            error={errors.groupIntervalValue?.message}\n          >\n            <PromDurationInput\n              {...register('groupIntervalValue', { validate: promDurationValidator })}\n              aria-label={routeTimingsFields.groupInterval.ariaLabel}\n              className={formStyles.promDurationInput}\n            />\n          </Field>\n          <Field\n            label={routeTimingsFields.repeatInterval.label}\n            description={routeTimingsFields.repeatInterval.description}\n            invalid={!!errors.repeatIntervalValue}\n            error={errors.repeatIntervalValue?.message}\n          >\n            <PromDurationInput\n              {...register('repeatIntervalValue', {\n                validate: (value = '') => {\n                  const groupInterval = getValues('groupIntervalValue');\n                  return repeatIntervalValidator(value, groupInterval);\n                },\n              })}\n              aria-label={routeTimingsFields.repeatInterval.ariaLabel}\n              className={formStyles.promDurationInput}\n            />\n          </Field>\n        </>\n      )}\n      <Field\n        label=\"Mute timings\"\n        data-testid=\"am-mute-timing-select\"\n        description=\"Add mute timing to policy\"\n        invalid={!!errors.muteTimeIntervals}\n      >\n        <Controller\n          render={({ field: { onChange, ref, ...field } }) => (\n            <MultiSelect\n              aria-label=\"Mute timings\"\n              {...field}\n              className={formStyles.input}\n              onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n              options={muteTimingOptions}\n            />\n          )}\n          control={control}\n          name=\"muteTimeIntervals\"\n        />\n      </Field>\n      {actionButtons}\n    </form>\n  );\n};\n\nfunction onCallFirst(receiver: AmRouteReceiver) {\n  if (receiver.grafanaAppReceiverType === SupportedPlugin.OnCall) {\n    return -1;\n  } else {\n    return 0;\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const commonSpacing = theme.spacing(3.5);\n\n  return {\n    addMatcherBtn: css({\n      marginBottom: commonSpacing,\n    }),\n    matchersContainer: css({\n      backgroundColor: theme.colors.background.secondary,\n      padding: `${theme.spacing(1.5)} ${theme.spacing(2)}`,\n      paddingBottom: 0,\n      width: 'fit-content',\n    }),\n    matchersOperator: css({\n      minWidth: '120px',\n    }),\n    noMatchersWarning: css({\n      padding: `${theme.spacing(1)} ${theme.spacing(2)}`,\n      marginBottom: theme.spacing(1),\n    }),\n  };\n};\n","import { groupBy } from 'lodash';\nimport { FC, useCallback, useMemo, useState } from 'react';\n\nimport { Button, Icon, Modal, ModalProps, Spinner, Stack } from '@grafana/ui';\nimport {\n  AlertmanagerGroup,\n  AlertState,\n  ObjectMatcher,\n  Receiver,\n  RouteWithID,\n} from 'app/plugins/datasource/alertmanager/types';\n\nimport { FormAmRoute } from '../../types/amroutes';\nimport { MatcherFormatter } from '../../utils/matchers';\nimport { InsertPosition } from '../../utils/routeTree';\nimport { AlertGroup } from '../alert-groups/AlertGroup';\nimport { useGetAmRouteReceiverWithGrafanaAppTypes } from '../receivers/grafanaAppReceivers/grafanaApp';\n\nimport { AlertGroupsSummary } from './AlertGroupsSummary';\nimport { AmRootRouteForm } from './EditDefaultPolicyForm';\nimport { AmRoutesExpandedForm } from './EditNotificationPolicyForm';\nimport { Matchers } from './Matchers';\n\ntype ModalHook<T = undefined> = [JSX.Element, (item: T) => void, () => void];\ntype AddModalHook<T = undefined> = [JSX.Element, (item: T, position: InsertPosition) => void, () => void];\ntype EditModalHook = [JSX.Element, (item: RouteWithID, isDefaultRoute?: boolean) => void, () => void];\n\nconst useAddPolicyModal = (\n  receivers: Receiver[] = [],\n  handleAdd: (route: Partial<FormAmRoute>, referenceRoute: RouteWithID, position: InsertPosition) => void,\n  loading: boolean\n): AddModalHook<RouteWithID> => {\n  const [showModal, setShowModal] = useState(false);\n  const [insertPosition, setInsertPosition] = useState<InsertPosition | undefined>(undefined);\n  const [referenceRoute, setReferenceRoute] = useState<RouteWithID>();\n  const AmRouteReceivers = useGetAmRouteReceiverWithGrafanaAppTypes(receivers);\n\n  const handleDismiss = useCallback(() => {\n    setReferenceRoute(undefined);\n    setInsertPosition(undefined);\n    setShowModal(false);\n  }, []);\n\n  const handleShow = useCallback((referenceRoute: RouteWithID, position: InsertPosition) => {\n    setReferenceRoute(referenceRoute);\n    setInsertPosition(position);\n    setShowModal(true);\n  }, []);\n\n  const modalElement = useMemo(\n    () =>\n      loading ? (\n        <UpdatingModal isOpen={showModal} />\n      ) : (\n        <Modal\n          isOpen={showModal}\n          onDismiss={handleDismiss}\n          closeOnBackdropClick={true}\n          closeOnEscape={true}\n          title=\"Add notification policy\"\n        >\n          <AmRoutesExpandedForm\n            receivers={AmRouteReceivers}\n            defaults={{\n              groupBy: referenceRoute?.group_by,\n            }}\n            onSubmit={(newRoute) => {\n              if (referenceRoute && insertPosition) {\n                handleAdd(newRoute, referenceRoute, insertPosition);\n              }\n            }}\n            actionButtons={\n              <Modal.ButtonRow>\n                <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss} fill=\"outline\">\n                  Cancel\n                </Button>\n                <Button type=\"submit\">Save policy</Button>\n              </Modal.ButtonRow>\n            }\n          />\n        </Modal>\n      ),\n    [AmRouteReceivers, handleAdd, handleDismiss, insertPosition, loading, referenceRoute, showModal]\n  );\n\n  return [modalElement, handleShow, handleDismiss];\n};\n\nconst useEditPolicyModal = (\n  alertManagerSourceName: string,\n  receivers: Receiver[],\n  handleSave: (route: Partial<FormAmRoute>) => void,\n  loading: boolean\n): EditModalHook => {\n  const [showModal, setShowModal] = useState(false);\n  const [isDefaultPolicy, setIsDefaultPolicy] = useState(false);\n  const [route, setRoute] = useState<RouteWithID>();\n  const AmRouteReceivers = useGetAmRouteReceiverWithGrafanaAppTypes(receivers);\n\n  const handleDismiss = useCallback(() => {\n    setRoute(undefined);\n    setShowModal(false);\n  }, []);\n\n  const handleShow = useCallback((route: RouteWithID, isDefaultPolicy?: boolean) => {\n    setIsDefaultPolicy(isDefaultPolicy ?? false);\n    setRoute(route);\n    setShowModal(true);\n  }, []);\n\n  const modalElement = useMemo(\n    () =>\n      loading ? (\n        <UpdatingModal isOpen={showModal} />\n      ) : (\n        <Modal\n          isOpen={showModal}\n          onDismiss={handleDismiss}\n          closeOnBackdropClick={true}\n          closeOnEscape={true}\n          title=\"Edit notification policy\"\n        >\n          {isDefaultPolicy && route && (\n            <AmRootRouteForm\n              // TODO *sigh* this alertmanagersourcename should come from context or something\n              // passing it down all the way here is a code smell\n              alertManagerSourceName={alertManagerSourceName}\n              onSubmit={handleSave}\n              receivers={AmRouteReceivers}\n              route={route}\n              actionButtons={\n                <Modal.ButtonRow>\n                  <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss} fill=\"outline\">\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\">Update default policy</Button>\n                </Modal.ButtonRow>\n              }\n            />\n          )}\n          {!isDefaultPolicy && (\n            <AmRoutesExpandedForm\n              receivers={AmRouteReceivers}\n              route={route}\n              onSubmit={handleSave}\n              actionButtons={\n                <Modal.ButtonRow>\n                  <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss} fill=\"outline\">\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\">Update policy</Button>\n                </Modal.ButtonRow>\n              }\n            />\n          )}\n        </Modal>\n      ),\n    [AmRouteReceivers, alertManagerSourceName, handleDismiss, handleSave, isDefaultPolicy, loading, route, showModal]\n  );\n\n  return [modalElement, handleShow, handleDismiss];\n};\n\nconst useDeletePolicyModal = (handleDelete: (route: RouteWithID) => void, loading: boolean): ModalHook<RouteWithID> => {\n  const [showModal, setShowModal] = useState(false);\n  const [route, setRoute] = useState<RouteWithID>();\n\n  const handleDismiss = useCallback(() => {\n    setRoute(undefined);\n    setShowModal(false);\n  }, [setRoute]);\n\n  const handleShow = useCallback((route: RouteWithID) => {\n    setRoute(route);\n    setShowModal(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    if (route) {\n      handleDelete(route);\n    }\n  }, [handleDelete, route]);\n\n  const modalElement = useMemo(\n    () =>\n      loading ? (\n        <UpdatingModal isOpen={showModal} />\n      ) : (\n        <Modal\n          isOpen={showModal}\n          onDismiss={handleDismiss}\n          closeOnBackdropClick={true}\n          closeOnEscape={true}\n          title=\"Delete notification policy\"\n        >\n          <p>Deleting this notification policy will permanently remove it.</p>\n          <p>Are you sure you want to delete this policy?</p>\n\n          <Modal.ButtonRow>\n            <Button type=\"button\" variant=\"destructive\" onClick={handleSubmit}>\n              Yes, delete policy\n            </Button>\n            <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss}>\n              Cancel\n            </Button>\n          </Modal.ButtonRow>\n        </Modal>\n      ),\n    [handleDismiss, handleSubmit, loading, showModal]\n  );\n\n  return [modalElement, handleShow, handleDismiss];\n};\n\nconst useAlertGroupsModal = (\n  alertManagerSourceName: string\n): [JSX.Element, (alertGroups: AlertmanagerGroup[], matchers?: ObjectMatcher[]) => void, () => void] => {\n  const [showModal, setShowModal] = useState(false);\n  const [alertGroups, setAlertGroups] = useState<AlertmanagerGroup[]>([]);\n  const [matchers, setMatchers] = useState<ObjectMatcher[]>([]);\n  const [formatter, setFormatter] = useState<MatcherFormatter>('default');\n\n  const handleDismiss = useCallback(() => {\n    setShowModal(false);\n    setAlertGroups([]);\n    setMatchers([]);\n  }, []);\n\n  const handleShow = useCallback(\n    (alertGroups: AlertmanagerGroup[], matchers?: ObjectMatcher[], formatter?: MatcherFormatter) => {\n      setAlertGroups(alertGroups);\n      if (matchers) {\n        setMatchers(matchers);\n      }\n      if (formatter) {\n        setFormatter(formatter);\n      }\n      setShowModal(true);\n    },\n    []\n  );\n\n  const instancesByState = useMemo(() => {\n    const instances = alertGroups.flatMap((group) => group.alerts);\n    return groupBy(instances, (instance) => instance.status.state);\n  }, [alertGroups]);\n\n  const modalElement = useMemo(\n    () => (\n      <Modal\n        isOpen={showModal}\n        onDismiss={handleDismiss}\n        closeOnBackdropClick={true}\n        closeOnEscape={true}\n        title={\n          <Stack direction=\"row\" alignItems=\"center\" gap={1} wrap={'wrap'}>\n            <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n              <Icon name=\"x\" /> Matchers\n            </Stack>\n            <Matchers matchers={matchers} formatter={formatter} />\n          </Stack>\n        }\n      >\n        <Stack direction=\"column\">\n          <AlertGroupsSummary\n            active={instancesByState[AlertState.Active]?.length}\n            suppressed={instancesByState[AlertState.Suppressed]?.length}\n            unprocessed={instancesByState[AlertState.Unprocessed]?.length}\n          />\n          <div>\n            {alertGroups.map((group, index) => (\n              <AlertGroup key={index} alertManagerSourceName={alertManagerSourceName} group={group} />\n            ))}\n          </div>\n        </Stack>\n        <Modal.ButtonRow>\n          <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss}>\n            Cancel\n          </Button>\n        </Modal.ButtonRow>\n      </Modal>\n    ),\n    [alertGroups, handleDismiss, instancesByState, matchers, formatter, showModal, alertManagerSourceName]\n  );\n\n  return [modalElement, handleShow, handleDismiss];\n};\n\nconst UpdatingModal: FC<Pick<ModalProps, 'isOpen'>> = ({ isOpen }) => (\n  <Modal\n    isOpen={isOpen}\n    onDismiss={() => {}}\n    closeOnBackdropClick={false}\n    closeOnEscape={false}\n    title={\n      <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n        Updating... <Spinner inline />\n      </Stack>\n    }\n  >\n    Please wait while we update your notification policies.\n  </Modal>\n);\n\nexport { useAddPolicyModal, useDeletePolicyModal, useEditPolicyModal, useAlertGroupsModal };\n","import { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { allGrafanaExportProviders, ExportFormats } from './providers';\ninterface GrafanaPoliciesPreviewProps {\n  exportFormat: ExportFormats;\n  onClose: () => void;\n}\n\nconst GrafanaPoliciesExporterPreview = ({ exportFormat, onClose }: GrafanaPoliciesPreviewProps) => {\n  const { currentData: policiesDefinition = '', isFetching } = alertRuleApi.useExportPoliciesQuery({\n    format: exportFormat,\n  });\n\n  const downloadFileName = `policies-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={policiesDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n};\n\ninterface GrafanaPoliciesExporterProps {\n  onClose: () => void;\n}\n\nexport const GrafanaPoliciesExporter = ({ onClose }: GrafanaPoliciesExporterProps) => {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaPoliciesExporterPreview exportFormat={activeTab} onClose={onClose} />\n    </GrafanaExportDrawer>\n  );\n};\n","import { css } from '@emotion/css';\nimport { defaults, groupBy, isArray, sumBy, uniqueId, upperFirst } from 'lodash';\nimport pluralize from 'pluralize';\nimport { FC, Fragment, ReactNode, useState } from 'react';\nimport * as React from 'react';\nimport { useToggle } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport {\n  Badge,\n  Button,\n  Dropdown,\n  Icon,\n  IconButton,\n  Menu,\n  Stack,\n  Text,\n  TextLink,\n  Tooltip,\n  getTagColorsFromName,\n  useStyles2,\n} from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\nimport ConditionalWrap from 'app/features/alerting/unified/components/ConditionalWrap';\nimport { PrimaryText } from 'app/features/alerting/unified/components/common/TextVariants';\nimport {\n  AlertmanagerGroup,\n  MatcherOperator,\n  ObjectMatcher,\n  Receiver,\n  RouteWithID,\n} from 'app/plugins/datasource/alertmanager/types';\nimport { ReceiversState } from 'app/types';\n\nimport { RoutesMatchingFilters } from '../../NotificationPolicies';\nimport { AlertmanagerAction, useAlertmanagerAbilities, useAlertmanagerAbility } from '../../hooks/useAbilities';\nimport { INTEGRATION_ICONS } from '../../types/contact-points';\nimport { getAmMatcherFormatter } from '../../utils/alertmanager';\nimport { MatcherFormatter, normalizeMatchers } from '../../utils/matchers';\nimport { createContactPointLink, createMuteTimingLink } from '../../utils/misc';\nimport { InheritableProperties, getInheritedProperties } from '../../utils/notification-policies';\nimport { InsertPosition } from '../../utils/routeTree';\nimport { Authorize } from '../Authorize';\nimport { HoverCard } from '../HoverCard';\nimport { Label } from '../Label';\nimport { MetaText } from '../MetaText';\nimport { ProvisioningBadge } from '../Provisioning';\nimport { Spacer } from '../Spacer';\nimport { GrafanaPoliciesExporter } from '../export/GrafanaPoliciesExporter';\n\nimport { Matchers } from './Matchers';\nimport { TIMING_OPTIONS_DEFAULTS, TimingOptions } from './timingOptions';\n\ninterface PolicyComponentProps {\n  receivers?: Receiver[];\n  alertGroups?: AlertmanagerGroup[];\n  contactPointsState?: ReceiversState;\n  readOnly?: boolean;\n  provisioned?: boolean;\n  inheritedProperties?: Partial<InheritableProperties>;\n  routesMatchingFilters?: RoutesMatchingFilters;\n\n  matchingInstancesPreview?: {\n    groupsMap?: Map<string, AlertmanagerGroup[]>;\n    enabled: boolean;\n  };\n\n  routeTree: RouteWithID;\n  currentRoute: RouteWithID;\n  alertManagerSourceName: string;\n  onEditPolicy: (route: RouteWithID, isDefault?: boolean, isAutogenerated?: boolean) => void;\n  onAddPolicy: (route: RouteWithID, position: InsertPosition) => void;\n  onDeletePolicy: (route: RouteWithID) => void;\n  onShowAlertInstances: (\n    alertGroups: AlertmanagerGroup[],\n    matchers?: ObjectMatcher[],\n    formatter?: MatcherFormatter\n  ) => void;\n  isAutoGenerated?: boolean;\n}\n\nconst Policy = (props: PolicyComponentProps) => {\n  const {\n    receivers = [],\n    contactPointsState,\n    readOnly = false,\n    provisioned = false,\n    alertGroups = [],\n    alertManagerSourceName,\n    currentRoute,\n    routeTree,\n    inheritedProperties,\n    routesMatchingFilters = {\n      filtersApplied: false,\n      matchedRoutesWithPath: new Map<RouteWithID, RouteWithID[]>(),\n    },\n    matchingInstancesPreview = { enabled: false },\n    onEditPolicy,\n    onAddPolicy,\n    onDeletePolicy,\n    onShowAlertInstances,\n    isAutoGenerated = false,\n  } = props;\n\n  const styles = useStyles2(getStyles);\n\n  const isDefaultPolicy = currentRoute === routeTree;\n\n  const contactPoint = currentRoute.receiver;\n  const continueMatching = currentRoute.continue ?? false;\n\n  const matchers = normalizeMatchers(currentRoute);\n  const hasMatchers = Boolean(matchers && matchers.length);\n\n  const { filtersApplied, matchedRoutesWithPath } = routesMatchingFilters;\n  const matchedRoutes = Array.from(matchedRoutesWithPath.keys());\n\n  // check if this route matches the filters\n  const hasFocus = filtersApplied && matchedRoutes.some((route) => route.id === currentRoute.id);\n\n  // check if this route belongs to a path that matches the filters\n  const routesPath = Array.from(matchedRoutesWithPath.values()).flat();\n  const belongsToMatchPath = routesPath.some((route: RouteWithID) => route.id === currentRoute.id);\n\n  // gather errors here\n  const errors: ReactNode[] = [];\n\n  // if the route has no matchers, is not the default policy (that one has none) and it does not continue\n  // then we should warn the user that it's a suspicious setup\n  const showMatchesAllLabelsWarning = !hasMatchers && !isDefaultPolicy && !continueMatching;\n\n  // if the receiver / contact point has any errors show it on the policy\n  const actualContactPoint = contactPoint ?? inheritedProperties?.receiver ?? '';\n  const contactPointErrors = contactPointsState ? getContactPointErrors(actualContactPoint, contactPointsState) : [];\n\n  const allChildPolicies = currentRoute.routes ?? [];\n\n  // filter child policies that match\n  const childPolicies = filtersApplied\n    ? // filter by the ones that belong to the path that matches the filters\n      allChildPolicies.filter((policy) => routesPath.some((route: RouteWithID) => route.id === policy.id))\n    : allChildPolicies;\n\n  const hasChildPolicies = childPolicies.length > 0;\n\n  const [showExportDrawer, toggleShowExportDrawer] = useToggle(false);\n  const matchingAlertGroups = matchingInstancesPreview?.groupsMap?.get(currentRoute.id);\n\n  // sum all alert instances for all groups we're handling\n  const numberOfAlertInstances = matchingAlertGroups\n    ? sumBy(matchingAlertGroups, (group) => group.alerts.length)\n    : undefined;\n\n  // simplified routing permissions\n  const [isSupportedToSeeAutogeneratedChunk, isAllowedToSeeAutogeneratedChunk] = useAlertmanagerAbility(\n    AlertmanagerAction.ViewAutogeneratedPolicyTree\n  );\n\n  // we collapse the auto-generated policies by default\n  const isAutogeneratedPolicyRoot = isAutoGeneratedRootAndSimplifiedEnabled(currentRoute);\n  const [showPolicyChildren, togglePolicyChildren] = useToggle(isAutogeneratedPolicyRoot ? false : true);\n\n  const groupBy = currentRoute.group_by;\n  const muteTimings = currentRoute.mute_time_intervals ?? [];\n\n  const timingOptions: TimingOptions = {\n    group_wait: currentRoute.group_wait,\n    group_interval: currentRoute.group_interval,\n    repeat_interval: currentRoute.repeat_interval,\n  };\n\n  contactPointErrors.forEach((error) => {\n    errors.push(error);\n  });\n\n  const POLICIES_PER_PAGE = 20;\n\n  const [visibleChildPolicies, setVisibleChildPolicies] = useState(POLICIES_PER_PAGE);\n\n  // build the menu actions for our policy\n  const dropdownMenuActions: JSX.Element[] = useCreateDropdownMenuActions(\n    isAutoGenerated,\n    isDefaultPolicy,\n    provisioned,\n    onEditPolicy,\n    currentRoute,\n    toggleShowExportDrawer,\n    onDeletePolicy\n  );\n\n  // check if this policy should be visible. If it's autogenerated and the user is not allowed to see autogenerated\n  // policies then we should not show it. Same if the user is not supported to see autogenerated policies.\n  const hideCurrentPolicy =\n    isAutoGenerated && (!isAllowedToSeeAutogeneratedChunk || !isSupportedToSeeAutogeneratedChunk);\n  const hideCurrentPolicyForFilters = filtersApplied && !belongsToMatchPath;\n\n  if (hideCurrentPolicy || hideCurrentPolicyForFilters) {\n    return null;\n  }\n\n  const isImmutablePolicy = isDefaultPolicy || isAutogeneratedPolicyRoot;\n  // TODO dead branch detection, warnings for all sort of configs that won't work or will never be activated\n\n  const childPoliciesBelongingToMatchPath = childPolicies.filter((child) =>\n    routesPath.some((route: RouteWithID) => route.id === child.id)\n  );\n\n  // child policies to render are the ones that belong to the path that matches the filters\n  const childPoliciesToRender = filtersApplied ? childPoliciesBelongingToMatchPath : childPolicies;\n  const pageOfChildren = childPoliciesToRender.slice(0, visibleChildPolicies);\n\n  const moreCount = childPoliciesToRender.length - pageOfChildren.length;\n  const showMore = moreCount > 0;\n\n  return (\n    <>\n      <Stack direction=\"column\" gap={1.5}>\n        <div\n          className={styles.policyWrapper(hasFocus)}\n          data-testid={isDefaultPolicy ? 'am-root-route-container' : 'am-route-container'}\n        >\n          {/* continueMatching and showMatchesAllLabelsWarning are mutually exclusive so the icons can't overlap */}\n          {continueMatching && <ContinueMatchingIndicator />}\n          {showMatchesAllLabelsWarning && <AllMatchesIndicator />}\n\n          <div className={styles.policyItemWrapper}>\n            <Stack direction=\"column\" gap={1}>\n              {/* Matchers and actions */}\n              <div>\n                <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n                  {hasChildPolicies ? (\n                    <IconButton\n                      name={showPolicyChildren ? 'angle-down' : 'angle-right'}\n                      onClick={togglePolicyChildren}\n                      aria-label={showPolicyChildren ? 'Collapse' : 'Expand'}\n                    />\n                  ) : null}\n                  {isImmutablePolicy ? (\n                    isAutogeneratedPolicyRoot ? (\n                      <AutogeneratedRootIndicator />\n                    ) : (\n                      <DefaultPolicyIndicator />\n                    )\n                  ) : hasMatchers ? (\n                    <Matchers matchers={matchers ?? []} formatter={getAmMatcherFormatter(alertManagerSourceName)} />\n                  ) : (\n                    <span className={styles.metadata}>No matchers</span>\n                  )}\n                  <Spacer />\n                  {/* TODO maybe we should move errors to the gutter instead? */}\n                  {errors.length > 0 && <Errors errors={errors} />}\n                  {provisioned && <ProvisioningBadge />}\n                  <Stack direction=\"row\" gap={0.5}>\n                    {!isAutoGenerated && !readOnly && (\n                      <Authorize actions={[AlertmanagerAction.CreateNotificationPolicy]}>\n                        <ConditionalWrap shouldWrap={provisioned} wrap={ProvisionedTooltip}>\n                          {isDefaultPolicy ? (\n                            <Button\n                              variant=\"secondary\"\n                              icon=\"plus\"\n                              size=\"sm\"\n                              disabled={provisioned}\n                              type=\"button\"\n                              onClick={() => onAddPolicy(currentRoute, 'child')}\n                            >\n                              New child policy\n                            </Button>\n                          ) : (\n                            <Dropdown\n                              overlay={\n                                <Menu>\n                                  <Menu.Item\n                                    label=\"New sibling above\"\n                                    icon=\"arrow-up\"\n                                    onClick={() => onAddPolicy(currentRoute, 'above')}\n                                  />\n                                  <Menu.Item\n                                    label=\"New sibling below\"\n                                    icon=\"arrow-down\"\n                                    onClick={() => onAddPolicy(currentRoute, 'below')}\n                                  />\n                                  <Menu.Divider />\n                                  <Menu.Item\n                                    label=\"New child policy\"\n                                    icon=\"plus\"\n                                    onClick={() => onAddPolicy(currentRoute, 'child')}\n                                  />\n                                </Menu>\n                              }\n                            >\n                              <Button\n                                size=\"sm\"\n                                variant=\"secondary\"\n                                disabled={provisioned}\n                                icon=\"angle-down\"\n                                type=\"button\"\n                              >\n                                Add new policy\n                              </Button>\n                            </Dropdown>\n                          )}\n                        </ConditionalWrap>\n                      </Authorize>\n                    )}\n                    {dropdownMenuActions.length > 0 && (\n                      <Dropdown overlay={<Menu>{dropdownMenuActions}</Menu>}>\n                        <Button\n                          icon=\"ellipsis-h\"\n                          variant=\"secondary\"\n                          size=\"sm\"\n                          type=\"button\"\n                          aria-label=\"more-actions\"\n                          data-testid=\"more-actions\"\n                        />\n                      </Dropdown>\n                    )}\n                  </Stack>\n                </Stack>\n              </div>\n\n              {/* Metadata row */}\n              <MetadataRow\n                matchingInstancesPreview={matchingInstancesPreview}\n                numberOfAlertInstances={numberOfAlertInstances}\n                contactPoint={contactPoint ?? undefined}\n                groupBy={groupBy}\n                muteTimings={muteTimings}\n                timingOptions={timingOptions}\n                inheritedProperties={inheritedProperties}\n                alertManagerSourceName={alertManagerSourceName}\n                receivers={receivers}\n                matchingAlertGroups={matchingAlertGroups}\n                matchers={matchers}\n                isDefaultPolicy={isDefaultPolicy}\n                onShowAlertInstances={onShowAlertInstances}\n              />\n            </Stack>\n          </div>\n        </div>\n        <div className={styles.childPolicies}>\n          {showPolicyChildren && (\n            <>\n              {pageOfChildren.map((child) => {\n                const childInheritedProperties = getInheritedProperties(currentRoute, child, inheritedProperties);\n                // This child is autogenerated if it's the autogenerated root or if it's a child of an autogenerated policy.\n                const isThisChildAutoGenerated = isAutoGeneratedRootAndSimplifiedEnabled(child) || isAutoGenerated;\n                /* pass the \"readOnly\" prop from the parent, because for any child policy , if its parent it's not editable,\n                then the child policy should not be editable either */\n                const isThisChildReadOnly = readOnly || provisioned || isAutoGenerated;\n\n                return (\n                  <Policy\n                    key={child.id}\n                    routeTree={routeTree}\n                    currentRoute={child}\n                    receivers={receivers}\n                    contactPointsState={contactPointsState}\n                    readOnly={isThisChildReadOnly}\n                    inheritedProperties={childInheritedProperties}\n                    onAddPolicy={onAddPolicy}\n                    onEditPolicy={onEditPolicy}\n                    onDeletePolicy={onDeletePolicy}\n                    onShowAlertInstances={onShowAlertInstances}\n                    alertManagerSourceName={alertManagerSourceName}\n                    alertGroups={alertGroups}\n                    routesMatchingFilters={routesMatchingFilters}\n                    matchingInstancesPreview={matchingInstancesPreview}\n                    isAutoGenerated={isThisChildAutoGenerated}\n                    provisioned={provisioned}\n                  />\n                );\n              })}\n              {showMore && (\n                <Button\n                  size=\"sm\"\n                  icon=\"angle-down\"\n                  variant=\"secondary\"\n                  className={styles.moreButtons}\n                  onClick={() => setVisibleChildPolicies(visibleChildPolicies + POLICIES_PER_PAGE)}\n                >\n                  {moreCount} additional {pluralize('policy', moreCount)}\n                </Button>\n              )}\n            </>\n          )}\n        </div>\n        {showExportDrawer && <GrafanaPoliciesExporter onClose={toggleShowExportDrawer} />}\n      </Stack>\n    </>\n  );\n};\n\ninterface MetadataRowProps {\n  matchingInstancesPreview: { groupsMap?: Map<string, AlertmanagerGroup[]>; enabled: boolean };\n  numberOfAlertInstances?: number;\n  contactPoint?: string;\n  groupBy?: string[];\n  muteTimings?: string[];\n  timingOptions?: TimingOptions;\n  inheritedProperties?: Partial<InheritableProperties>;\n  alertManagerSourceName: string;\n  receivers: Receiver[];\n  matchingAlertGroups?: AlertmanagerGroup[];\n  matchers?: ObjectMatcher[];\n  isDefaultPolicy: boolean;\n  onShowAlertInstances: (\n    alertGroups: AlertmanagerGroup[],\n    matchers?: ObjectMatcher[],\n    formatter?: MatcherFormatter\n  ) => void;\n}\n\nfunction MetadataRow({\n  numberOfAlertInstances,\n  isDefaultPolicy,\n  timingOptions,\n  groupBy,\n  muteTimings = [],\n  matchingInstancesPreview,\n  inheritedProperties,\n  matchingAlertGroups,\n  onShowAlertInstances,\n  matchers,\n  contactPoint,\n  alertManagerSourceName,\n  receivers,\n}: MetadataRowProps) {\n  const styles = useStyles2(getStyles);\n\n  const inheritedGrouping = inheritedProperties && inheritedProperties.group_by;\n  const hasInheritedProperties = inheritedProperties && Object.keys(inheritedProperties).length > 0;\n\n  const noGrouping = isArray(groupBy) && groupBy[0] === '...';\n  const customGrouping = !noGrouping && isArray(groupBy) && groupBy.length > 0;\n  const singleGroup = isDefaultPolicy && isArray(groupBy) && groupBy.length === 0;\n\n  const hasMuteTimings = Boolean(muteTimings.length);\n\n  return (\n    <div className={styles.metadataRow}>\n      <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n        {matchingInstancesPreview.enabled && (\n          <MetaText\n            icon=\"layers-alt\"\n            onClick={() => {\n              matchingAlertGroups &&\n                onShowAlertInstances(matchingAlertGroups, matchers, getAmMatcherFormatter(alertManagerSourceName));\n            }}\n            data-testid=\"matching-instances\"\n          >\n            <Text color=\"primary\">{numberOfAlertInstances ?? '-'}</Text>\n            <span>{pluralize('instance', numberOfAlertInstances)}</span>\n          </MetaText>\n        )}\n        {contactPoint && (\n          <MetaText icon=\"at\" data-testid=\"contact-point\">\n            <span>Delivered to</span>\n            <ContactPointsHoverDetails\n              alertManagerSourceName={alertManagerSourceName}\n              receivers={receivers}\n              contactPoint={contactPoint}\n            />\n          </MetaText>\n        )}\n        {!inheritedGrouping && (\n          <>\n            {customGrouping && (\n              <MetaText icon=\"layer-group\" data-testid=\"grouping\">\n                <span>Grouped by</span>\n                <Text color=\"primary\">{groupBy.join(', ')}</Text>\n              </MetaText>\n            )}\n            {singleGroup && (\n              <MetaText icon=\"layer-group\">\n                <span>Single group</span>\n              </MetaText>\n            )}\n            {noGrouping && (\n              <MetaText icon=\"layer-group\">\n                <span>Not grouping</span>\n              </MetaText>\n            )}\n          </>\n        )}\n        {hasMuteTimings && (\n          <MetaText icon=\"calendar-slash\" data-testid=\"mute-timings\">\n            <span>Muted when</span>\n            <MuteTimings timings={muteTimings} alertManagerSourceName={alertManagerSourceName} />\n          </MetaText>\n        )}\n        {timingOptions && (\n          // for the default policy we will also merge the default timings, that way a user can observe what the timing options would be\n          <TimingOptionsMeta\n            timingOptions={isDefaultPolicy ? defaults(timingOptions, TIMING_OPTIONS_DEFAULTS) : timingOptions}\n          />\n        )}\n        {hasInheritedProperties && (\n          <>\n            <MetaText icon=\"corner-down-right-alt\" data-testid=\"inherited-properties\">\n              <span>Inherited</span>\n              <InheritedProperties properties={inheritedProperties} />\n            </MetaText>\n          </>\n        )}\n      </Stack>\n    </div>\n  );\n}\n\nexport const useCreateDropdownMenuActions = (\n  isAutoGenerated: boolean,\n  isDefaultPolicy: boolean,\n  provisioned: boolean,\n  onEditPolicy: (route: RouteWithID, isDefault?: boolean, readOnly?: boolean) => void,\n  currentRoute: RouteWithID,\n  toggleShowExportDrawer: (nextValue?: any) => void,\n  onDeletePolicy: (route: RouteWithID) => void\n) => {\n  const [\n    [updatePoliciesSupported, updatePoliciesAllowed],\n    [deletePolicySupported, deletePolicyAllowed],\n    [exportPoliciesSupported, exportPoliciesAllowed],\n  ] = useAlertmanagerAbilities([\n    AlertmanagerAction.UpdateNotificationPolicyTree,\n    AlertmanagerAction.DeleteNotificationPolicy,\n    AlertmanagerAction.ExportNotificationPolicies,\n  ]);\n  const dropdownMenuActions = [];\n  const showExportAction = exportPoliciesAllowed && exportPoliciesSupported && isDefaultPolicy && !isAutoGenerated;\n  const showEditAction = updatePoliciesSupported && updatePoliciesAllowed;\n  const showDeleteAction = deletePolicySupported && deletePolicyAllowed && !isDefaultPolicy && !isAutoGenerated;\n\n  if (showEditAction) {\n    dropdownMenuActions.push(\n      <Fragment key=\"edit-policy\">\n        <ConditionalWrap shouldWrap={provisioned} wrap={ProvisionedTooltip}>\n          <Menu.Item\n            icon=\"edit\"\n            disabled={provisioned || isAutoGenerated}\n            label=\"Edit\"\n            onClick={() => onEditPolicy(currentRoute, isDefaultPolicy)}\n          />\n        </ConditionalWrap>\n      </Fragment>\n    );\n  }\n\n  if (showExportAction) {\n    dropdownMenuActions.push(\n      <Menu.Item key=\"export-policy\" icon=\"download-alt\" label=\"Export\" onClick={toggleShowExportDrawer} />\n    );\n  }\n\n  if (showDeleteAction) {\n    dropdownMenuActions.push(\n      <Fragment key=\"delete-policy\">\n        <Menu.Divider />\n        <ConditionalWrap shouldWrap={provisioned} wrap={ProvisionedTooltip}>\n          <Menu.Item\n            destructive\n            icon=\"trash-alt\"\n            disabled={provisioned || isAutoGenerated}\n            label=\"Delete\"\n            onClick={() => onDeletePolicy(currentRoute)}\n          />\n        </ConditionalWrap>\n      </Fragment>\n    );\n  }\n  return dropdownMenuActions;\n};\n\nexport const AUTOGENERATED_ROOT_LABEL_NAME = '__grafana_autogenerated__';\n\nexport function isAutoGeneratedRootAndSimplifiedEnabled(route: RouteWithID) {\n  const simplifiedRoutingToggleEnabled = config.featureToggles.alertingSimplifiedRouting ?? false;\n  if (!simplifiedRoutingToggleEnabled) {\n    return false;\n  }\n  if (!route.object_matchers) {\n    return false;\n  }\n  return (\n    route.object_matchers.some((objectMatcher) => {\n      return (\n        objectMatcher[0] === AUTOGENERATED_ROOT_LABEL_NAME &&\n        objectMatcher[1] === MatcherOperator.equal &&\n        objectMatcher[2] === 'true'\n      );\n    }) ?? false\n  );\n  // return simplifiedRoutingToggleEnabled && route.receiver === 'contact_point_5';\n}\n\nconst ProvisionedTooltip = (children: ReactNode) => (\n  <Tooltip content=\"Provisioned items cannot be edited in the UI\" placement=\"top\">\n    <span>{children}</span>\n  </Tooltip>\n);\n\nconst Errors: FC<{ errors: React.ReactNode[] }> = ({ errors }) => (\n  <HoverCard\n    arrow\n    placement=\"top\"\n    content={\n      <Stack direction=\"column\" gap={0.5}>\n        {errors.map((error) => (\n          <Fragment key={uniqueId()}>{error}</Fragment>\n        ))}\n      </Stack>\n    }\n  >\n    <span>\n      <Badge icon=\"exclamation-circle\" color=\"red\" text={pluralize('error', errors.length, true)} />\n    </span>\n  </HoverCard>\n);\n\nconst ContinueMatchingIndicator: FC = () => {\n  const styles = useStyles2(getStyles);\n  return (\n    <Tooltip placement=\"top\" content=\"This route will continue matching other policies\">\n      <div className={styles.gutterIcon} data-testid=\"continue-matching\">\n        <Icon name=\"arrow-down\" />\n      </div>\n    </Tooltip>\n  );\n};\n\nconst AllMatchesIndicator: FC = () => {\n  const styles = useStyles2(getStyles);\n  return (\n    <Tooltip placement=\"top\" content=\"This policy matches all labels\">\n      <div className={styles.gutterIcon} data-testid=\"matches-all\">\n        <Icon name=\"exclamation-triangle\" />\n      </div>\n    </Tooltip>\n  );\n};\n\nfunction DefaultPolicyIndicator() {\n  const styles = useStyles2(getStyles);\n  return (\n    <>\n      <Text element=\"h2\" variant=\"body\" weight=\"medium\">\n        Default policy\n      </Text>\n      <span className={styles.metadata}>\n        All alert instances will be handled by the default policy if no other matching policies are found.\n      </span>\n    </>\n  );\n}\n\nfunction AutogeneratedRootIndicator() {\n  return (\n    <Text element=\"h3\" variant=\"body\" weight=\"medium\">\n      Auto-generated policies\n    </Text>\n  );\n}\n\nconst InheritedProperties: FC<{ properties: InheritableProperties }> = ({ properties }) => (\n  <HoverCard\n    arrow\n    placement=\"top\"\n    content={\n      <Stack direction=\"row\" gap={0.5}>\n        {Object.entries(properties).map(([key, value]) => {\n          if (!value) {\n            return null;\n          }\n\n          return <Label key={key} label={routePropertyToLabel(key)} value={routePropertyToValue(key, value)} />;\n        })}\n      </Stack>\n    }\n  >\n    <div>\n      <Text color=\"primary\">{pluralize('property', Object.keys(properties).length, true)}</Text>\n    </div>\n  </HoverCard>\n);\n\nconst MuteTimings: FC<{ timings: string[]; alertManagerSourceName: string }> = ({\n  timings,\n  alertManagerSourceName,\n}) => {\n  /* TODO make a better mute timing overview, allow combining multiple in to one overview */\n  /*\n    <HoverCard\n      arrow\n      placement=\"top\"\n      header={<MetaText icon=\"calendar-slash\">Mute Timings</MetaText>}\n      content={\n        // TODO show a combined view of all mute timings here, combining the weekdays, years, months, etc\n        <Stack direction=\"row\" gap={0.5}>\n          <Label label=\"Weekdays\" value=\"Saturday and Sunday\" />\n        </Stack>\n      }\n    >\n      <div>\n        <Strong>{muteTimings.join(', ')}</Strong>\n      </div>\n    </HoverCard>\n  */\n  return (\n    <div>\n      {timings.map((timing) => (\n        <TextLink\n          key={timing}\n          href={createMuteTimingLink(timing, alertManagerSourceName)}\n          color=\"primary\"\n          variant=\"bodySmall\"\n          inline={false}\n        >\n          {timing}\n        </TextLink>\n      ))}\n    </div>\n  );\n};\n\ninterface TimingOptionsMetaProps {\n  timingOptions: TimingOptions;\n}\nexport const TimingOptionsMeta = ({ timingOptions }: TimingOptionsMetaProps) => {\n  const groupWait = timingOptions.group_wait;\n  const groupInterval = timingOptions.group_interval;\n  const repeatInterval = timingOptions.repeat_interval;\n\n  // we don't have any timing options to show – we're inheriting everything from the parent\n  // and those show up in a separate \"inherited properties\" component\n  if (!groupWait && !groupInterval && !repeatInterval) {\n    return null;\n  }\n\n  const metaOptions: ReactNode[] = [];\n\n  if (groupWait) {\n    metaOptions.push(\n      <Tooltip\n        placement=\"top\"\n        content={t(\n          'alerting.policies.metadata.timingOptions.groupWait.description',\n          'How long to initially wait to send a notification for a group of alert instances.'\n        )}\n      >\n        <span>\n          <Trans i18nKey=\"alerting.policies.metadata.timingOptions.groupWait.label\">\n            Wait <PrimaryText content={groupWait} /> to group instances\n          </Trans>\n        </span>\n      </Tooltip>\n    );\n  }\n\n  if (groupInterval) {\n    metaOptions.push(\n      <Tooltip\n        placement=\"top\"\n        content={t(\n          'alerting.policies.metadata.timingOptions.groupInterval.description',\n          'How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent.'\n        )}\n      >\n        <span>\n          <Trans i18nKey=\"alerting.policies.metadata.timingOptions.groupInterval.label\">\n            Wait <PrimaryText content={groupInterval} /> before sending updates\n          </Trans>\n        </span>\n      </Tooltip>\n    );\n  }\n\n  if (repeatInterval) {\n    metaOptions.push(\n      <Tooltip\n        placement=\"top\"\n        content={t(\n          'alerting.policies.metadata.timingOptions.repeatInterval.description',\n          'How often notifications are sent if the group of alerts has not changed since the last notification.'\n        )}\n      >\n        <span>\n          <Trans i18nKey=\"alerting.policies.metadata.timingOptions.repeatInterval.label\">\n            Repeated every <PrimaryText content={repeatInterval} />\n          </Trans>\n        </span>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <MetaText icon=\"hourglass\" data-testid=\"timing-options\">\n      {metaOptions.map((meta, index) => (\n        <span key={uniqueId()}>\n          {meta}\n          {index < metaOptions.length - 1 && ' · '}\n        </span>\n      ))}\n    </MetaText>\n  );\n};\n\ninterface ContactPointDetailsProps {\n  alertManagerSourceName: string;\n  contactPoint: string;\n  receivers: Receiver[];\n}\n\n// @TODO make this work for cloud AMs too\nconst ContactPointsHoverDetails: FC<ContactPointDetailsProps> = ({\n  alertManagerSourceName,\n  contactPoint,\n  receivers,\n}) => {\n  const details = receivers.find((receiver) => receiver.name === contactPoint);\n  if (!details) {\n    return (\n      <TextLink\n        href={createContactPointLink(contactPoint, alertManagerSourceName)}\n        color=\"primary\"\n        variant=\"bodySmall\"\n        inline={false}\n      >\n        {contactPoint}\n      </TextLink>\n    );\n  }\n\n  const integrations = details.grafana_managed_receiver_configs;\n  if (!integrations) {\n    return (\n      <TextLink\n        href={createContactPointLink(contactPoint, alertManagerSourceName)}\n        color=\"primary\"\n        variant=\"bodySmall\"\n        inline={false}\n      >\n        {contactPoint}\n      </TextLink>\n    );\n  }\n\n  const groupedIntegrations = groupBy(details.grafana_managed_receiver_configs, (config) => config.type);\n\n  return (\n    <HoverCard\n      arrow\n      placement=\"top\"\n      header={\n        <MetaText icon=\"at\">\n          <div>Contact Point</div>\n          <Text color=\"primary\">{contactPoint}</Text>\n        </MetaText>\n      }\n      key={uniqueId()}\n      content={\n        <Stack direction=\"row\" gap={0.5}>\n          {/* use \"label\" to indicate how many of that type we have in the contact point */}\n          {Object.entries(groupedIntegrations).map(([type, integrations]) => (\n            <Label\n              key={uniqueId()}\n              label={integrations.length > 1 ? integrations.length : undefined}\n              icon={INTEGRATION_ICONS[type]}\n              value={upperFirst(type)}\n            />\n          ))}\n        </Stack>\n      }\n    >\n      <TextLink\n        href={createContactPointLink(contactPoint, alertManagerSourceName)}\n        color=\"primary\"\n        variant=\"bodySmall\"\n        inline={false}\n      >\n        {contactPoint}\n      </TextLink>\n    </HoverCard>\n  );\n};\n\nfunction getContactPointErrors(contactPoint: string, contactPointsState: ReceiversState): JSX.Element[] {\n  const notifierStates = Object.entries(contactPointsState[contactPoint]?.notifiers ?? []);\n  const contactPointErrors = notifierStates.reduce((acc: JSX.Element[] = [], [_, notifierStatuses]) => {\n    const notifierErrors = notifierStatuses\n      .filter((status) => status.lastNotifyAttemptError)\n      .map((status) => (\n        <Label\n          icon=\"at\"\n          key={uniqueId()}\n          label={`Contact Point › ${status.name}`}\n          value={status.lastNotifyAttemptError}\n        />\n      ));\n\n    return acc.concat(notifierErrors);\n  }, []);\n\n  return contactPointErrors;\n}\n\nconst routePropertyToLabel = (key: keyof InheritableProperties | string): string => {\n  switch (key) {\n    case 'receiver':\n      return 'Contact Point';\n    case 'group_by':\n      return 'Group by';\n    case 'group_interval':\n      return 'Group interval';\n    case 'group_wait':\n      return 'Group wait';\n    case 'repeat_interval':\n      return 'Repeat interval';\n    default:\n      return key;\n  }\n};\n\nconst routePropertyToValue = (\n  key: keyof InheritableProperties | string,\n  value: string | string[]\n): NonNullable<ReactNode> => {\n  const isNotGrouping = key === 'group_by' && Array.isArray(value) && value[0] === '...';\n  const isSingleGroup = key === 'group_by' && Array.isArray(value) && value.length === 0;\n\n  if (isNotGrouping) {\n    return (\n      <Text variant=\"bodySmall\" color=\"secondary\">\n        Not grouping\n      </Text>\n    );\n  }\n\n  if (isSingleGroup) {\n    return (\n      <Text variant=\"bodySmall\" color=\"secondary\">\n        Single group\n      </Text>\n    );\n  }\n\n  return Array.isArray(value) ? value.join(', ') : value;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  matcher: (label: string) => {\n    const { color, borderColor } = getTagColorsFromName(label);\n\n    return {\n      wrapper: css({\n        color: '#fff',\n        background: color,\n        padding: `${theme.spacing(0.33)} ${theme.spacing(0.66)}`,\n        fontSize: theme.typography.bodySmall.fontSize,\n        border: `solid 1px ${borderColor}`,\n        borderRadius: theme.shape.radius.default,\n      }),\n    };\n  },\n  childPolicies: css({\n    marginLeft: theme.spacing(4),\n    position: 'relative',\n    '&:before': {\n      content: '\"\"',\n      position: 'absolute',\n      height: 'calc(100% - 10px)',\n      borderLeft: `solid 1px ${theme.colors.border.weak}`,\n      marginTop: 0,\n      marginLeft: '-20px',\n    },\n  }),\n  policyItemWrapper: css({\n    padding: theme.spacing(1.5),\n  }),\n  metadataRow: css({\n    borderBottomLeftRadius: theme.shape.borderRadius(2),\n    borderBottomRightRadius: theme.shape.borderRadius(2),\n  }),\n  policyWrapper: (hasFocus = false) =>\n    css({\n      flex: 1,\n      position: 'relative',\n      background: theme.colors.background.secondary,\n      borderRadius: theme.shape.radius.default,\n      border: `solid 1px ${theme.colors.border.weak}`,\n      ...(hasFocus && {\n        borderColor: theme.colors.primary.border,\n        background: theme.colors.primary.transparent,\n      }),\n    }),\n  metadata: css({\n    color: theme.colors.text.secondary,\n    fontSize: theme.typography.bodySmall.fontSize,\n    fontWeight: theme.typography.bodySmall.fontWeight,\n  }),\n  break: css({\n    width: '100%',\n    height: 0,\n    marginBottom: theme.spacing(2),\n  }),\n  gutterIcon: css({\n    position: 'absolute',\n    top: 0,\n    transform: 'translateY(50%)',\n    left: `-${theme.spacing(4)}`,\n    color: theme.colors.text.secondary,\n    background: theme.colors.background.primary,\n    width: '25px',\n    height: '25px',\n    textAlign: 'center',\n    border: `solid 1px ${theme.colors.border.weak}`,\n    borderRadius: theme.shape.radius.default,\n    padding: 0,\n  }),\n  moreButtons: css({\n    marginTop: theme.spacing(0.5),\n    marginBottom: theme.spacing(1.5),\n  }),\n});\n\nexport { Policy };\n","import { css } from '@emotion/css';\nimport { useEffect, useMemo, useState } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { GrafanaTheme2, UrlQueryMap } from '@grafana/data';\nimport { Alert, LoadingPlaceholder, Stack, Tab, TabContent, TabsBar, useStyles2, withErrorBoundary } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { useMuteTimings } from 'app/features/alerting/unified/components/mute-timings/useMuteTimings';\nimport { ObjectMatcher, Route, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { useCleanup } from '../../../core/hooks/useCleanup';\n\nimport { alertmanagerApi } from './api/alertmanagerApi';\nimport { useGetContactPointsState } from './api/receiversApi';\nimport { AlertmanagerPageWrapper } from './components/AlertingPageWrapper';\nimport { GrafanaAlertmanagerDeliveryWarning } from './components/GrafanaAlertmanagerDeliveryWarning';\nimport { MuteTimingsTable } from './components/mute-timings/MuteTimingsTable';\nimport {\n  NotificationPoliciesFilter,\n  findRoutesByMatchers,\n  findRoutesMatchingPredicate,\n} from './components/notification-policies/Filters';\nimport {\n  useAddPolicyModal,\n  useAlertGroupsModal,\n  useDeletePolicyModal,\n  useEditPolicyModal,\n} from './components/notification-policies/Modals';\nimport { Policy } from './components/notification-policies/Policy';\nimport { useAlertmanagerConfig } from './hooks/useAlertmanagerConfig';\nimport { useAlertmanager } from './state/AlertmanagerContext';\nimport { updateAlertManagerConfigAction } from './state/actions';\nimport { FormAmRoute } from './types/amroutes';\nimport { useRouteGroupsMatcher } from './useRouteGroupsMatcher';\nimport { addUniqueIdentifierToRoute } from './utils/amroutes';\nimport { computeInheritedTree } from './utils/notification-policies';\nimport { initialAsyncRequestState } from './utils/redux';\nimport {\n  InsertPosition,\n  addRouteToReferenceRoute,\n  cleanRouteIDs,\n  mergePartialAmRouteWithRouteTree,\n  omitRouteFromRouteTree,\n} from './utils/routeTree';\n\nenum ActiveTab {\n  NotificationPolicies = 'notification_policies',\n  MuteTimings = 'mute_timings',\n}\n\nconst AmRoutes = () => {\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n\n  const { useGetAlertmanagerAlertGroupsQuery } = alertmanagerApi;\n\n  const [queryParams, setQueryParams] = useQueryParams();\n  const { tab } = getActiveTabFromUrl(queryParams);\n\n  const [activeTab, setActiveTab] = useState<ActiveTab>(tab);\n  const [updatingTree, setUpdatingTree] = useState<boolean>(false);\n  const [contactPointFilter, setContactPointFilter] = useState<string | undefined>();\n  const [labelMatchersFilter, setLabelMatchersFilter] = useState<ObjectMatcher[]>([]);\n\n  const { selectedAlertmanager, hasConfigurationAPI, isGrafanaAlertmanager } = useAlertmanager();\n  const { getRouteGroupsMap } = useRouteGroupsMatcher();\n  const { data: muteTimings = [] } = useMuteTimings({ alertmanager: selectedAlertmanager ?? '' });\n\n  const contactPointsState = useGetContactPointsState(selectedAlertmanager ?? '');\n\n  const {\n    currentData: result,\n    isLoading: resultLoading,\n    error: resultError,\n  } = useAlertmanagerConfig(selectedAlertmanager, {\n    refetchOnFocus: true,\n    refetchOnReconnect: true,\n  });\n\n  const config = result?.alertmanager_config;\n\n  const { currentData: alertGroups, refetch: refetchAlertGroups } = useGetAlertmanagerAlertGroupsQuery(\n    { amSourceName: selectedAlertmanager ?? '' },\n    { skip: !selectedAlertmanager }\n  );\n\n  const receivers = config?.receivers ?? [];\n\n  const rootRoute = useMemo(() => {\n    if (config?.route) {\n      return addUniqueIdentifierToRoute(config.route);\n    }\n    return;\n  }, [config?.route]);\n\n  // useAsync could also work but it's hard to wait until it's done in the tests\n  // Combining with useEffect gives more predictable results because the condition is in useEffect\n  const [{ value: routeAlertGroupsMap, error: instancesPreviewError }, triggerGetRouteGroupsMap] = useAsyncFn(\n    getRouteGroupsMap,\n    [getRouteGroupsMap]\n  );\n\n  useEffect(() => {\n    if (rootRoute && alertGroups) {\n      triggerGetRouteGroupsMap(rootRoute, alertGroups, { unquoteMatchers: !isGrafanaAlertmanager });\n    }\n  }, [rootRoute, alertGroups, triggerGetRouteGroupsMap, isGrafanaAlertmanager]);\n\n  // these are computed from the contactPoint and labels matchers filter\n  const routesMatchingFilters = useMemo(() => {\n    if (!rootRoute) {\n      const emptyResult: RoutesMatchingFilters = {\n        filtersApplied: false,\n        matchedRoutesWithPath: new Map(),\n      };\n\n      return emptyResult;\n    }\n\n    return findRoutesMatchingFilters(rootRoute, { contactPointFilter, labelMatchersFilter });\n  }, [contactPointFilter, labelMatchersFilter, rootRoute]);\n\n  const isProvisioned = Boolean(config?.route?.provenance);\n\n  function handleSave(partialRoute: Partial<FormAmRoute>) {\n    if (!rootRoute) {\n      return;\n    }\n    const newRouteTree = mergePartialAmRouteWithRouteTree(selectedAlertmanager ?? '', partialRoute, rootRoute);\n    updateRouteTree(newRouteTree);\n  }\n\n  function handleDelete(route: RouteWithID) {\n    if (!rootRoute) {\n      return;\n    }\n    const newRouteTree = omitRouteFromRouteTree(route, rootRoute);\n    updateRouteTree(newRouteTree);\n  }\n\n  function handleAdd(partialRoute: Partial<FormAmRoute>, referenceRoute: RouteWithID, insertPosition: InsertPosition) {\n    if (!rootRoute) {\n      return;\n    }\n\n    const newRouteTree = addRouteToReferenceRoute(\n      selectedAlertmanager ?? '',\n      partialRoute,\n      referenceRoute,\n      rootRoute,\n      insertPosition\n    );\n    updateRouteTree(newRouteTree);\n  }\n\n  function updateRouteTree(routeTree: Route | RouteWithID) {\n    if (!result) {\n      return;\n    }\n\n    // make sure we omit all IDs from our routes\n    const newRouteTree = cleanRouteIDs(routeTree);\n\n    setUpdatingTree(true);\n\n    dispatch(\n      updateAlertManagerConfigAction({\n        newConfig: {\n          ...result,\n          alertmanager_config: {\n            ...result.alertmanager_config,\n            route: newRouteTree,\n          },\n        },\n        oldConfig: result,\n        alertManagerSourceName: selectedAlertmanager!,\n        successMessage: 'Updated notification policies',\n      })\n    )\n      .unwrap()\n      .then(() => {\n        if (selectedAlertmanager) {\n          refetchAlertGroups();\n        }\n        closeEditModal();\n        closeAddModal();\n        closeDeleteModal();\n      })\n      .finally(() => {\n        setUpdatingTree(false);\n      });\n  }\n\n  // edit, add, delete modals\n  const [addModal, openAddModal, closeAddModal] = useAddPolicyModal(receivers, handleAdd, updatingTree);\n  const [editModal, openEditModal, closeEditModal] = useEditPolicyModal(\n    selectedAlertmanager ?? '',\n    receivers,\n    handleSave,\n    updatingTree\n  );\n  const [deleteModal, openDeleteModal, closeDeleteModal] = useDeletePolicyModal(handleDelete, updatingTree);\n  const [alertInstancesModal, showAlertGroupsModal] = useAlertGroupsModal(selectedAlertmanager ?? '');\n\n  useCleanup((state) => (state.unifiedAlerting.saveAMConfig = initialAsyncRequestState));\n\n  if (!selectedAlertmanager) {\n    return null;\n  }\n\n  const numberOfMuteTimings = muteTimings.length;\n  const haveData = result && !resultError && !resultLoading;\n  const isFetching = !result && resultLoading;\n  const haveError = resultError && !resultLoading;\n\n  const muteTimingsTabActive = activeTab === ActiveTab.MuteTimings;\n  const policyTreeTabActive = activeTab === ActiveTab.NotificationPolicies;\n\n  return (\n    <>\n      <GrafanaAlertmanagerDeliveryWarning currentAlertmanager={selectedAlertmanager} />\n      <TabsBar>\n        <Tab\n          label={'Notification Policies'}\n          active={policyTreeTabActive}\n          onChangeTab={() => {\n            setActiveTab(ActiveTab.NotificationPolicies);\n            setQueryParams({ tab: ActiveTab.NotificationPolicies });\n          }}\n        />\n        <Tab\n          label={'Mute Timings'}\n          active={muteTimingsTabActive}\n          counter={numberOfMuteTimings}\n          onChangeTab={() => {\n            setActiveTab(ActiveTab.MuteTimings);\n            setQueryParams({ tab: ActiveTab.MuteTimings });\n          }}\n        />\n      </TabsBar>\n      <TabContent className={styles.tabContent}>\n        {isFetching && <LoadingPlaceholder text=\"Loading Alertmanager config...\" />}\n        {haveError && (\n          <Alert severity=\"error\" title=\"Error loading Alertmanager config\">\n            {resultError.message || 'Unknown error.'}\n          </Alert>\n        )}\n        {haveData && (\n          <>\n            {policyTreeTabActive && (\n              <>\n                <Stack direction=\"column\" gap={1}>\n                  {rootRoute && (\n                    <NotificationPoliciesFilter\n                      receivers={receivers}\n                      onChangeMatchers={setLabelMatchersFilter}\n                      onChangeReceiver={setContactPointFilter}\n                      matchingCount={routesMatchingFilters.matchedRoutesWithPath.size}\n                    />\n                  )}\n                  {rootRoute && (\n                    <Policy\n                      receivers={receivers}\n                      routeTree={rootRoute}\n                      currentRoute={rootRoute}\n                      alertGroups={alertGroups ?? []}\n                      contactPointsState={contactPointsState.receivers}\n                      readOnly={!hasConfigurationAPI}\n                      provisioned={isProvisioned}\n                      alertManagerSourceName={selectedAlertmanager}\n                      onAddPolicy={openAddModal}\n                      onEditPolicy={openEditModal}\n                      onDeletePolicy={openDeleteModal}\n                      onShowAlertInstances={showAlertGroupsModal}\n                      routesMatchingFilters={routesMatchingFilters}\n                      matchingInstancesPreview={{ groupsMap: routeAlertGroupsMap, enabled: !instancesPreviewError }}\n                      isAutoGenerated={false}\n                    />\n                  )}\n                </Stack>\n                {addModal}\n                {editModal}\n                {deleteModal}\n                {alertInstancesModal}\n              </>\n            )}\n            {muteTimingsTabActive && (\n              <MuteTimingsTable alertManagerSourceName={selectedAlertmanager} hideActions={!hasConfigurationAPI} />\n            )}\n          </>\n        )}\n      </TabContent>\n    </>\n  );\n};\n\ntype RouteFilters = {\n  contactPointFilter?: string;\n  labelMatchersFilter?: ObjectMatcher[];\n};\n\ntype FilterResult = Map<RouteWithID, RouteWithID[]>;\n\nexport interface RoutesMatchingFilters {\n  filtersApplied: boolean;\n  matchedRoutesWithPath: FilterResult;\n}\n\nexport const findRoutesMatchingFilters = (rootRoute: RouteWithID, filters: RouteFilters): RoutesMatchingFilters => {\n  const { contactPointFilter, labelMatchersFilter = [] } = filters;\n  const hasFilter = contactPointFilter || labelMatchersFilter.length > 0;\n  const havebothFilters = Boolean(contactPointFilter) && labelMatchersFilter.length > 0;\n\n  // if filters are empty we short-circuit this function\n  if (!hasFilter) {\n    return { filtersApplied: false, matchedRoutesWithPath: new Map() };\n  }\n\n  // we'll collect all of the routes matching the filters\n  // we track an array of matching routes, each item in the array is for 1 type of filter\n  //\n  // [contactPointMatches, labelMatcherMatches] -> [[{ a: [], b: [] }], [{ a: [], c: [] }]]\n  // later we'll use intersection to find results in all sets of filter matchers\n  const matchedRoutes: RouteWithID[][] = [];\n\n  // compute fully inherited tree so all policies have their inherited receiver\n  const fullRoute = computeInheritedTree(rootRoute);\n\n  // find all routes for our contact point filter\n  const matchingRoutesForContactPoint = contactPointFilter\n    ? findRoutesMatchingPredicate(fullRoute, (route) => route.receiver === contactPointFilter)\n    : new Map();\n\n  const routesMatchingContactPoint = Array.from(matchingRoutesForContactPoint.keys());\n  if (routesMatchingContactPoint) {\n    matchedRoutes.push(routesMatchingContactPoint);\n  }\n\n  // find all routes matching our label matchers\n  const matchingRoutesForLabelMatchers = labelMatchersFilter.length\n    ? findRoutesMatchingPredicate(fullRoute, (route) => findRoutesByMatchers(route, labelMatchersFilter))\n    : new Map();\n\n  const routesMatchingLabelFilters = Array.from(matchingRoutesForLabelMatchers.keys());\n  if (matchingRoutesForLabelMatchers.size > 0) {\n    matchedRoutes.push(routesMatchingLabelFilters);\n  }\n\n  // now that we have our maps for all filters, we just need to find the intersection of all maps by route if we have both filters\n  const routesForAllFilterResults = havebothFilters\n    ? findMapIntersection(matchingRoutesForLabelMatchers, matchingRoutesForContactPoint)\n    : new Map([...matchingRoutesForLabelMatchers, ...matchingRoutesForContactPoint]);\n\n  return {\n    filtersApplied: true,\n    matchedRoutesWithPath: routesForAllFilterResults,\n  };\n};\n\n// this function takes multiple maps and creates a new map with routes that exist in all maps\n//\n// map 1: { a: [], b: [] }\n// map 2: { a: [], c: [] }\n// return: { a: [] }\nfunction findMapIntersection(...matchingRoutes: FilterResult[]): FilterResult {\n  const result = new Map<RouteWithID, RouteWithID[]>();\n\n  // Iterate through the keys of the first map'\n  for (const key of matchingRoutes[0].keys()) {\n    // Check if the key exists in all other maps\n    if (matchingRoutes.every((map) => map.has(key))) {\n      // If yes, add the key to the result map\n      // @ts-ignore\n      result.set(key, matchingRoutes[0].get(key));\n    }\n  }\n\n  return result;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tabContent: css({\n    marginTop: theme.spacing(2),\n  }),\n});\n\ninterface QueryParamValues {\n  tab: ActiveTab;\n}\n\nfunction getActiveTabFromUrl(queryParams: UrlQueryMap): QueryParamValues {\n  let tab = ActiveTab.NotificationPolicies; // default tab\n\n  if (queryParams.tab === ActiveTab.NotificationPolicies) {\n    tab = ActiveTab.NotificationPolicies;\n  }\n\n  if (queryParams.tab === ActiveTab.MuteTimings) {\n    tab = ActiveTab.MuteTimings;\n  }\n\n  return {\n    tab,\n  };\n}\n\nconst NotificationPoliciesPage = () => (\n  <AlertmanagerPageWrapper navId=\"am-routes\" accessType=\"notification\">\n    <AmRoutes />\n  </AlertmanagerPageWrapper>\n);\n\nexport default withErrorBoundary(NotificationPoliciesPage, { style: 'page' });\n","import { chain, filter } from 'lodash';\nimport { PropsWithChildren } from 'react';\n\nimport {\n  Abilities,\n  Action,\n  AlertingAction,\n  AlertmanagerAction,\n  useAlertingAbilities,\n  useAllAlertmanagerAbilities,\n} from '../hooks/useAbilities';\n\ninterface AuthorizeProps extends PropsWithChildren {\n  actions: AlertmanagerAction[] | AlertingAction[];\n}\n\nexport const Authorize = ({ actions, children }: AuthorizeProps) => {\n  const alertmanagerActions = filter(actions, isAlertmanagerAction) as AlertmanagerAction[];\n  const alertSourceActions = filter(actions, isAlertingAction) as AlertingAction[];\n\n  if (alertmanagerActions.length) {\n    return <AuthorizeAlertmanager actions={alertmanagerActions}>{children}</AuthorizeAlertmanager>;\n  }\n\n  if (alertSourceActions.length) {\n    return <AuthorizeAlertsource actions={alertSourceActions}>{children}</AuthorizeAlertsource>;\n  }\n\n  return null;\n};\n\ninterface ActionsProps<T extends Action> extends PropsWithChildren {\n  actions: T[];\n}\n\nconst AuthorizeAlertmanager = ({ actions, children }: ActionsProps<AlertmanagerAction>) => {\n  const alertmanagerAbilties = useAllAlertmanagerAbilities();\n  const allowed = actionsAllowed(alertmanagerAbilties, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\nconst AuthorizeAlertsource = ({ actions, children }: ActionsProps<AlertingAction>) => {\n  const alertSourceAbilities = useAlertingAbilities();\n  const allowed = actionsAllowed(alertSourceAbilities, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\n// TODO add some authorize helper components for alert source and individual alert rules\n\n// check if some action is allowed from the abilities\nfunction actionsAllowed<T extends Action>(abilities: Abilities<T>, actions: T[]) {\n  return chain(abilities)\n    .pick(actions)\n    .values()\n    .value()\n    .some(([_supported, allowed]) => allowed === true);\n}\n\nfunction isAlertmanagerAction(action: AlertmanagerAction) {\n  return Object.values(AlertmanagerAction).includes(action);\n}\n\nfunction isAlertingAction(action: AlertingAction) {\n  return Object.values(AlertingAction).includes(action);\n}\n","import { HTMLAttributes } from 'react';\n\nimport { IconSize, Button } from '@grafana/ui';\n\ninterface Props extends HTMLAttributes<HTMLButtonElement> {\n  isCollapsed: boolean;\n  onToggle: (isCollapsed: boolean) => void;\n  // Todo: this should be made compulsory for a11y purposes\n  idControlled?: string;\n  size?: IconSize;\n  className?: string;\n  text?: string;\n}\n\nexport const CollapseToggle = ({\n  isCollapsed,\n  onToggle,\n  idControlled,\n  className,\n  text,\n  size = 'xl',\n  ...restOfProps\n}: Props) => {\n  return (\n    <Button\n      type=\"button\"\n      fill=\"text\"\n      variant=\"secondary\"\n      aria-expanded={!isCollapsed}\n      aria-controls={idControlled}\n      className={className}\n      icon={isCollapsed ? 'angle-right' : 'angle-down'}\n      onClick={() => onToggle(!isCollapsed)}\n      {...restOfProps}\n    >\n      {text}\n    </Button>\n  );\n};\n","import { cloneElement, forwardRef, Ref } from 'react';\n\ninterface ConditionalWrapProps {\n  shouldWrap: boolean;\n  children: JSX.Element;\n  wrap: (children: JSX.Element) => JSX.Element;\n}\n\nfunction ConditionalWrap({ children, shouldWrap, wrap }: ConditionalWrapProps, _ref: Ref<HTMLElement>) {\n  return shouldWrap ? cloneElement(wrap(children)) : children;\n}\n\nexport default forwardRef(ConditionalWrap);\n","import { css } from '@emotion/css';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nexport const EmptyArea = ({ children }: React.PropsWithChildren<{}>) => {\n  const styles = useStyles2(getStyles);\n\n  return <div className={styles.container}>{children}</div>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      backgroundColor: theme.colors.background.secondary,\n      color: theme.colors.text.secondary,\n      padding: theme.spacing(4),\n      textAlign: 'center',\n    }),\n  };\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport { Alert, useStyles2 } from '@grafana/ui/src';\n\nimport { AlertmanagerChoice } from '../../../../plugins/datasource/alertmanager/types';\nimport { alertmanagerApi } from '../api/alertmanagerApi';\nimport { AlertingAction, useAlertingAbility } from '../hooks/useAbilities';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\ninterface GrafanaAlertmanagerDeliveryWarningProps {\n  currentAlertmanager: string;\n}\n\nexport function GrafanaAlertmanagerDeliveryWarning({ currentAlertmanager }: GrafanaAlertmanagerDeliveryWarningProps) {\n  const styles = useStyles2(getStyles);\n  const externalAlertmanager = currentAlertmanager !== GRAFANA_RULES_SOURCE_NAME;\n\n  const [readConfigurationStatusSupported, readConfigurationStatusAllowed] = useAlertingAbility(\n    AlertingAction.ReadConfigurationStatus\n  );\n  const canReadConfigurationStatus = readConfigurationStatusSupported && readConfigurationStatusAllowed;\n\n  const { currentData: amChoiceStatus } = alertmanagerApi.endpoints.getGrafanaAlertingConfigurationStatus.useQuery(\n    undefined,\n    {\n      skip: externalAlertmanager || !canReadConfigurationStatus,\n    }\n  );\n\n  const interactsWithExternalAMs =\n    amChoiceStatus?.alertmanagersChoice &&\n    [AlertmanagerChoice.External, AlertmanagerChoice.All].includes(amChoiceStatus?.alertmanagersChoice);\n\n  if (!interactsWithExternalAMs || externalAlertmanager) {\n    return null;\n  }\n\n  const hasActiveExternalAMs = amChoiceStatus.numExternalAlertmanagers > 0;\n\n  if (amChoiceStatus.alertmanagersChoice === AlertmanagerChoice.External) {\n    return (\n      <Alert title=\"Grafana alerts are not delivered to Grafana Alertmanager\">\n        Grafana is configured to send alerts to external Alertmanagers only. Changing Grafana Alertmanager configuration\n        will not affect delivery of your alerts.\n        <div className={styles.adminHint}>\n          To change your Alertmanager setup, go to the Alerting Admin page. If you do not have access, contact your\n          Administrator.\n        </div>\n      </Alert>\n    );\n  }\n\n  if (amChoiceStatus.alertmanagersChoice === AlertmanagerChoice.All && hasActiveExternalAMs) {\n    return (\n      <Alert title=\"You have additional Alertmanagers to configure\" severity=\"warning\">\n        Ensure you make configuration changes in the correct Alertmanagers; both internal and external. Changing one\n        will not affect the others.\n        <div className={styles.adminHint}>\n          To change your Alertmanager setup, go to the Alerting Admin page. If you do not have access, contact your\n          Administrator.\n        </div>\n      </Alert>\n    );\n  }\n\n  return null;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  adminHint: css({\n    fontSize: theme.typography.bodySmall.fontSize,\n    fontWeight: theme.typography.bodySmall.fontWeight,\n  }),\n});\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { LinkButton, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AlertmanagerAlert, AlertState } from 'app/plugins/datasource/alertmanager/types';\nimport { AccessControlAction } from 'app/types';\n\nimport { AlertmanagerAction } from '../../hooks/useAbilities';\nimport { isGrafanaRulesSource } from '../../utils/datasource';\nimport { makeAMLink, makeLabelBasedSilenceLink } from '../../utils/misc';\nimport { AnnotationDetailsField } from '../AnnotationDetailsField';\nimport { Authorize } from '../Authorize';\n\ninterface AmNotificationsAlertDetailsProps {\n  alertManagerSourceName: string;\n  alert: AlertmanagerAlert;\n}\n\nexport const AlertDetails = ({ alert, alertManagerSourceName }: AmNotificationsAlertDetailsProps) => {\n  const styles = useStyles2(getStyles);\n\n  // For Grafana Managed alerts the Generator URL redirects to the alert rule edit page, so update permission is required\n  // For external alert manager the Generator URL redirects to an external service which we don't control\n  const isGrafanaSource = isGrafanaRulesSource(alertManagerSourceName);\n  const isSeeSourceButtonEnabled = isGrafanaSource\n    ? contextSrv.hasPermission(AccessControlAction.AlertingRuleRead)\n    : true;\n\n  return (\n    <>\n      <div className={styles.actionsRow}>\n        {alert.status.state === AlertState.Suppressed && (\n          <Authorize actions={[AlertmanagerAction.CreateSilence, AlertmanagerAction.UpdateSilence]}>\n            <LinkButton\n              href={`${makeAMLink(\n                '/alerting/silences',\n                alertManagerSourceName\n              )}&silenceIds=${alert.status.silencedBy.join(',')}`}\n              className={styles.button}\n              icon={'bell'}\n              size={'sm'}\n            >\n              Manage silences\n            </LinkButton>\n          </Authorize>\n        )}\n        {alert.status.state === AlertState.Active && (\n          <Authorize actions={[AlertmanagerAction.CreateSilence]}>\n            <LinkButton\n              href={makeLabelBasedSilenceLink(alertManagerSourceName, alert.labels)}\n              className={styles.button}\n              icon={'bell-slash'}\n              size={'sm'}\n            >\n              Silence\n            </LinkButton>\n          </Authorize>\n        )}\n        {isSeeSourceButtonEnabled && alert.generatorURL && (\n          <LinkButton className={styles.button} href={alert.generatorURL} icon={'chart-line'} size={'sm'}>\n            {isGrafanaSource ? 'See alert rule' : 'See source'}\n          </LinkButton>\n        )}\n      </div>\n      {Object.entries(alert.annotations).map(([annotationKey, annotationValue]) => (\n        <AnnotationDetailsField key={annotationKey} annotationKey={annotationKey} value={annotationValue} />\n      ))}\n      <div className={styles.receivers}>\n        Receivers:{' '}\n        {alert.receivers\n          .map(({ name }) => name)\n          .filter((name) => !!name)\n          .join(', ')}\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  button: css({\n    '& + &': {\n      marginLeft: theme.spacing(1),\n    },\n  }),\n  actionsRow: css({\n    padding: `${theme.spacing(2, 0)} !important`,\n    borderBottom: `1px solid ${theme.colors.border.medium}`,\n  }),\n  receivers: css({\n    padding: theme.spacing(1, 0),\n  }),\n});\n","import { css } from '@emotion/css';\nimport { useMemo } from 'react';\n\nimport { GrafanaTheme2, intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\n\nimport { AlertLabels } from '../AlertLabels';\nimport { DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { DynamicTableWithGuidelines } from '../DynamicTableWithGuidelines';\nimport { AmAlertStateTag } from '../silences/AmAlertStateTag';\n\nimport { AlertDetails } from './AlertDetails';\n\ninterface Props {\n  alerts: AlertmanagerAlert[];\n  alertManagerSourceName: string;\n}\n\ntype AlertGroupAlertsTableColumnProps = DynamicTableColumnProps<AlertmanagerAlert>;\ntype AlertGroupAlertsTableItemProps = DynamicTableItemProps<AlertmanagerAlert>;\n\nexport const AlertGroupAlertsTable = ({ alerts, alertManagerSourceName }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const columns = useMemo(\n    (): AlertGroupAlertsTableColumnProps[] => [\n      {\n        id: 'state',\n        label: 'Notification state',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: alert }) => (\n          <>\n            <AmAlertStateTag state={alert.status.state} />\n            <span className={styles.duration}>\n              for{' '}\n              {intervalToAbbreviatedDurationString({\n                start: new Date(alert.startsAt),\n                end: new Date(alert.endsAt),\n              })}\n            </span>\n          </>\n        ),\n        size: '220px',\n      },\n      {\n        id: 'labels',\n        label: 'Instance labels',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: { labels } }) => <AlertLabels labels={labels} size=\"sm\" />,\n        size: 1,\n      },\n    ],\n    [styles]\n  );\n\n  const items = useMemo(\n    (): AlertGroupAlertsTableItemProps[] =>\n      alerts.map((alert) => ({\n        id: alert.fingerprint,\n        data: alert,\n      })),\n    [alerts]\n  );\n\n  return (\n    <div className={styles.tableWrapper} data-testid=\"alert-group-table\">\n      <DynamicTableWithGuidelines\n        cols={columns}\n        items={items}\n        isExpandable={true}\n        renderExpandedContent={({ data: alert }) => (\n          <AlertDetails alert={alert} alertManagerSourceName={alertManagerSourceName} />\n        )}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tableWrapper: css({\n    marginTop: theme.spacing(3),\n    [theme.breakpoints.up('md')]: {\n      marginLeft: theme.spacing(4.5),\n    },\n  }),\n  duration: css({\n    marginLeft: theme.spacing(1),\n    fontSize: theme.typography.bodySmall.fontSize,\n  }),\n});\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nexport const getNotificationsTextColors = (theme: GrafanaTheme2) => ({\n  [AlertState.Active]: css({\n    color: theme.colors.error.text,\n  }),\n  [AlertState.Suppressed]: css({\n    color: theme.colors.primary.text,\n  }),\n  [AlertState.Unprocessed]: css({\n    color: theme.colors.secondary.text,\n  }),\n});\n","import pluralize from 'pluralize';\n\nimport { useStyles2 } from '@grafana/ui';\nimport { AlertmanagerGroup, AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { getNotificationsTextColors } from '../../styles/notifications';\n\ninterface Props {\n  group: AlertmanagerGroup;\n}\n\nexport const AlertGroupHeader = ({ group }: Props) => {\n  const textStyles = useStyles2(getNotificationsTextColors);\n  const total = group.alerts.length;\n  const countByStatus = group.alerts.reduce(\n    (statusObj, alert) => {\n      if (statusObj[alert.status.state]) {\n        statusObj[alert.status.state] += 1;\n      } else {\n        statusObj[alert.status.state] = 1;\n      }\n      return statusObj;\n    },\n    {} as Record<AlertState, number>\n  );\n\n  return (\n    <div>\n      {`${total} ${pluralize('alert', total)}: `}\n      {Object.entries(countByStatus).map(([state, count], index) => {\n        return (\n          <span\n            key={`${JSON.stringify(group.labels)}-notifications-${index}`}\n            className={textStyles[state as AlertState]}\n          >\n            {index > 0 && ', '}\n            {`${count} ${state}`}\n          </span>\n        );\n      })}\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, Stack, TextLink } from '@grafana/ui';\nimport { AlertmanagerGroup, AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { createContactPointLink } from '../../utils/misc';\nimport { AlertLabels } from '../AlertLabels';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { MetaText } from '../MetaText';\n\nimport { AlertGroupAlertsTable } from './AlertGroupAlertsTable';\nimport { AlertGroupHeader } from './AlertGroupHeader';\n\ninterface Props {\n  group: AlertmanagerGroup;\n  alertManagerSourceName: string;\n}\n\nexport const AlertGroup = ({ alertManagerSourceName, group }: Props) => {\n  const [isCollapsed, setIsCollapsed] = useState<boolean>(true);\n  const styles = useStyles2(getStyles);\n\n  // When group is grouped, receiver.name is 'NONE' as it can contain multiple receivers\n  const receiverInGroup = group.receiver.name !== 'NONE';\n  const contactPoint = group.receiver.name;\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.header}>\n        <div className={styles.group} data-testid=\"alert-group\">\n          <CollapseToggle\n            size=\"sm\"\n            isCollapsed={isCollapsed}\n            onToggle={() => setIsCollapsed(!isCollapsed)}\n            data-testid=\"alert-group-collapse-toggle\"\n          />\n          {Object.keys(group.labels).length ? (\n            <Stack direction=\"row\" alignItems=\"center\">\n              <AlertLabels labels={group.labels} size=\"sm\" />\n\n              {receiverInGroup && (\n                <MetaText icon=\"at\">\n                  Delivered to{' '}\n                  <TextLink\n                    href={createContactPointLink(contactPoint, alertManagerSourceName)}\n                    variant=\"bodySmall\"\n                    color=\"primary\"\n                    inline={false}\n                  >\n                    {group.receiver.name}\n                  </TextLink>\n                </MetaText>\n              )}\n            </Stack>\n          ) : (\n            <span>No grouping</span>\n          )}\n        </div>\n        <AlertGroupHeader group={group} />\n      </div>\n      {!isCollapsed && <AlertGroupAlertsTable alertManagerSourceName={alertManagerSourceName} alerts={group.alerts} />}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    '& + &': {\n      marginTop: theme.spacing(2),\n    },\n  }),\n  header: css({\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: `${theme.spacing(1)} ${theme.spacing(1)} ${theme.spacing(1)} 0`,\n    backgroundColor: theme.colors.background.secondary,\n    width: '100%',\n  }),\n  group: css({\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n  }),\n  summary: css({}),\n  [AlertState.Active]: css({\n    color: theme.colors.error.main,\n  }),\n  [AlertState.Suppressed]: css({\n    color: theme.colors.primary.main,\n  }),\n  [AlertState.Unprocessed]: css({\n    color: theme.colors.secondary.main,\n  }),\n});\n","// These are convenience components to deal with i18n shenanigans\n// (see https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#jsx)\n// These help when we need to interpolate variables inside translated strings,\n// where we need to style them differently\n\nimport { Text } from '@grafana/ui';\n\nexport const PrimaryText = ({ content }: { content: string }) => <Text color=\"primary\">{content}</Text>;\n","import { css } from '@emotion/css';\nimport saveAs from 'file-saver';\nimport { useCallback, useMemo } from 'react';\nimport * as React from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, ClipboardButton, CodeEditor, TextLink, useStyles2 } from '@grafana/ui';\n\nimport { allGrafanaExportProviders, ExportFormats, ExportProvider, ProvisioningType } from './providers';\n\ninterface FileExportPreviewProps {\n  format: ExportFormats;\n  textDefinition: string;\n\n  /*** Filename without extension ***/\n  downloadFileName: string;\n  onClose: () => void;\n}\n\nexport function FileExportPreview({ format, textDefinition, downloadFileName, onClose }: FileExportPreviewProps) {\n  const styles = useStyles2(fileExportPreviewStyles);\n  const provider = allGrafanaExportProviders[format];\n\n  const onDownload = useCallback(() => {\n    const blob = new Blob([textDefinition], {\n      type: `application/${format};charset=utf-8`,\n    });\n    saveAs(blob, `${downloadFileName}.${format}`);\n  }, [textDefinition, downloadFileName, format]);\n\n  const formattedTextDefinition = useMemo(() => {\n    return provider.formatter ? provider.formatter(textDefinition) : textDefinition;\n  }, [provider, textDefinition]);\n\n  return (\n    // TODO Handle empty content\n    <div className={styles.container}>\n      <FileExportInlineDocumentation exportProvider={provider} />\n      <div className={styles.content}>\n        <AutoSizer disableWidth>\n          {({ height }) => (\n            <CodeEditor\n              width=\"100%\"\n              height={height}\n              language={format}\n              value={formattedTextDefinition}\n              monacoOptions={{\n                minimap: {\n                  enabled: false,\n                },\n                scrollBeyondLastLine: false,\n                lineNumbers: 'on',\n                readOnly: true,\n              }}\n            />\n          )}\n        </AutoSizer>\n      </div>\n      <div className={styles.actions}>\n        <Button variant=\"secondary\" onClick={onClose}>\n          Cancel\n        </Button>\n        <ClipboardButton icon=\"copy\" getText={() => textDefinition}>\n          Copy code\n        </ClipboardButton>\n        <Button icon=\"download-alt\" onClick={onDownload}>\n          Download\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nconst fileExportPreviewStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100%',\n    gap: theme.spacing(2),\n  }),\n  content: css({\n    flex: '1 1 100%',\n  }),\n  actions: css({\n    flex: 0,\n    justifyContent: 'flex-end',\n    display: 'flex',\n    gap: theme.spacing(1),\n  }),\n});\n\nfunction FileExportInlineDocumentation({ exportProvider }: { exportProvider: ExportProvider<unknown> }) {\n  const { name, type } = exportProvider;\n\n  const exportInlineDoc: Record<ProvisioningType, { title: string; component: React.ReactNode }> = {\n    file: {\n      title: 'File-provisioning format',\n      component: (\n        <>\n          {name} format is only valid for File Provisioning.{' '}\n          <TextLink\n            href=\"https://grafana.com/docs/grafana/latest/alerting/set-up/provision-alerting-resources/file-provisioning/\"\n            external\n          >\n            Read more in the docs.\n          </TextLink>\n        </>\n      ),\n    },\n    api: {\n      title: 'API-provisioning format',\n      component: (\n        <>\n          {name} format is only valid for API Provisioning.{' '}\n          <TextLink\n            href=\"https://grafana.com/docs/grafana/latest/alerting/set-up/provision-alerting-resources/http-api-provisioning/\"\n            external\n          >\n            Read more in the docs.\n          </TextLink>\n        </>\n      ),\n    },\n    terraform: {\n      title: 'Terraform-provisioning format',\n      component: (\n        <>\n          {name} format is only valid for Terraform Provisioning.{' '}\n          <TextLink\n            href=\"https://grafana.com/docs/grafana/latest/alerting/set-up/provision-alerting-resources/terraform-provisioning/\"\n            external\n          >\n            Read more in the docs.\n          </TextLink>\n        </>\n      ),\n    },\n  };\n\n  const { title, component } = exportInlineDoc[type];\n\n  return (\n    <Alert title={title} severity=\"info\" bottomSpacing={0} topSpacing={0}>\n      {component}\n    </Alert>\n  );\n}\n","import * as React from 'react';\n\nimport { Drawer } from '@grafana/ui';\n\nimport { RuleInspectorTabs } from '../rule-editor/RuleInspector';\n\nimport { ExportFormats, ExportProvider } from './providers';\n\ninterface GrafanaExportDrawerProps {\n  activeTab: ExportFormats;\n  onTabChange: (tab: ExportFormats) => void;\n  children: React.ReactNode;\n  onClose: () => void;\n  formatProviders: Array<ExportProvider<ExportFormats>>;\n  title?: string;\n}\n\nexport function GrafanaExportDrawer({\n  activeTab,\n  onTabChange,\n  children,\n  onClose,\n  formatProviders,\n  title = 'Export',\n}: GrafanaExportDrawerProps) {\n  const grafanaRulesTabs = Object.values(formatProviders).map((provider) => ({\n    label: provider.name,\n    value: provider.exportFormat,\n  }));\n  return (\n    <Drawer\n      title={title}\n      subtitle=\"Select the format and download the file or copy the contents to clipboard\"\n      tabs={\n        <RuleInspectorTabs<ExportFormats> tabs={grafanaRulesTabs} setActiveTab={onTabChange} activeTab={activeTab} />\n      }\n      onClose={onClose}\n      size=\"md\"\n    >\n      {children}\n    </Drawer>\n  );\n}\n","export type ProvisioningType = 'file' | 'api' | 'terraform';\n\nexport interface ExportProvider<TFormat> {\n  name: string;\n  exportFormat: TFormat;\n  type: ProvisioningType;\n  formatter?: (raw: string) => string;\n}\n\nexport const JsonExportProvider: ExportProvider<'json'> = {\n  name: 'JSON',\n  exportFormat: 'json',\n  type: 'file',\n  formatter: (raw: string) => {\n    try {\n      return JSON.stringify(JSON.parse(raw), null, 4);\n    } catch (e) {\n      return raw;\n    }\n  },\n};\n\nexport const YamlExportProvider: ExportProvider<'yaml'> = {\n  name: 'YAML',\n  exportFormat: 'yaml',\n  type: 'file',\n};\n\nexport const HclExportProvider: ExportProvider<'hcl'> = {\n  name: 'Terraform (HCL)',\n  exportFormat: 'hcl',\n  type: 'terraform',\n};\n\nexport const allGrafanaExportProviders = {\n  [JsonExportProvider.exportFormat]: JsonExportProvider,\n  [YamlExportProvider.exportFormat]: YamlExportProvider,\n  [HclExportProvider.exportFormat]: HclExportProvider,\n} as const;\n\nexport const jsonAndYamlGrafanaExportProviders = [JsonExportProvider, YamlExportProvider];\n\nexport type ExportFormats = keyof typeof allGrafanaExportProviders;\n","import { alertingApi as api } from '../api/alertingApi';\nexport const addTagTypes = ['TimeInterval'] as const;\nconst injectedRtkApi = api\n  .enhanceEndpoints({\n    addTagTypes,\n  })\n  .injectEndpoints({\n    endpoints: (build) => ({\n      listNamespacedTimeInterval: build.query<ListNamespacedTimeIntervalApiResponse, ListNamespacedTimeIntervalApiArg>({\n        query: (queryArg) => ({\n          url: `/apis/notifications.alerting.grafana.app/v0alpha1/namespaces/${queryArg['namespace']}/timeintervals`,\n          params: {\n            pretty: queryArg.pretty,\n            allowWatchBookmarks: queryArg.allowWatchBookmarks,\n            continue: queryArg['continue'],\n            fieldSelector: queryArg.fieldSelector,\n            labelSelector: queryArg.labelSelector,\n            limit: queryArg.limit,\n            resourceVersion: queryArg.resourceVersion,\n            resourceVersionMatch: queryArg.resourceVersionMatch,\n            sendInitialEvents: queryArg.sendInitialEvents,\n            timeoutSeconds: queryArg.timeoutSeconds,\n            watch: queryArg.watch,\n          },\n        }),\n        providesTags: ['TimeInterval'],\n      }),\n      createNamespacedTimeInterval: build.mutation<\n        CreateNamespacedTimeIntervalApiResponse,\n        CreateNamespacedTimeIntervalApiArg\n      >({\n        query: (queryArg) => ({\n          url: `/apis/notifications.alerting.grafana.app/v0alpha1/namespaces/${queryArg['namespace']}/timeintervals`,\n          method: 'POST',\n          body: queryArg.comGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval,\n          params: {\n            pretty: queryArg.pretty,\n            dryRun: queryArg.dryRun,\n            fieldManager: queryArg.fieldManager,\n            fieldValidation: queryArg.fieldValidation,\n          },\n        }),\n        invalidatesTags: ['TimeInterval'],\n      }),\n      readNamespacedTimeInterval: build.query<ReadNamespacedTimeIntervalApiResponse, ReadNamespacedTimeIntervalApiArg>({\n        query: (queryArg) => ({\n          url: `/apis/notifications.alerting.grafana.app/v0alpha1/namespaces/${queryArg['namespace']}/timeintervals/${queryArg.name}`,\n          params: { pretty: queryArg.pretty },\n        }),\n        providesTags: ['TimeInterval'],\n      }),\n      replaceNamespacedTimeInterval: build.mutation<\n        ReplaceNamespacedTimeIntervalApiResponse,\n        ReplaceNamespacedTimeIntervalApiArg\n      >({\n        query: (queryArg) => ({\n          url: `/apis/notifications.alerting.grafana.app/v0alpha1/namespaces/${queryArg['namespace']}/timeintervals/${queryArg.name}`,\n          method: 'PUT',\n          body: queryArg.comGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval,\n          params: {\n            pretty: queryArg.pretty,\n            dryRun: queryArg.dryRun,\n            fieldManager: queryArg.fieldManager,\n            fieldValidation: queryArg.fieldValidation,\n          },\n        }),\n        invalidatesTags: ['TimeInterval'],\n      }),\n      deleteNamespacedTimeInterval: build.mutation<\n        DeleteNamespacedTimeIntervalApiResponse,\n        DeleteNamespacedTimeIntervalApiArg\n      >({\n        query: (queryArg) => ({\n          url: `/apis/notifications.alerting.grafana.app/v0alpha1/namespaces/${queryArg['namespace']}/timeintervals/${queryArg.name}`,\n          method: 'DELETE',\n          body: queryArg.ioK8SApimachineryPkgApisMetaV1DeleteOptions,\n          params: {\n            pretty: queryArg.pretty,\n            dryRun: queryArg.dryRun,\n            gracePeriodSeconds: queryArg.gracePeriodSeconds,\n            orphanDependents: queryArg.orphanDependents,\n            propagationPolicy: queryArg.propagationPolicy,\n          },\n        }),\n        invalidatesTags: ['TimeInterval'],\n      }),\n      patchNamespacedTimeInterval: build.mutation<\n        PatchNamespacedTimeIntervalApiResponse,\n        PatchNamespacedTimeIntervalApiArg\n      >({\n        query: (queryArg) => ({\n          url: `/apis/notifications.alerting.grafana.app/v0alpha1/namespaces/${queryArg['namespace']}/timeintervals/${queryArg.name}`,\n          method: 'PATCH',\n          body: queryArg.ioK8SApimachineryPkgApisMetaV1Patch,\n          params: {\n            pretty: queryArg.pretty,\n            dryRun: queryArg.dryRun,\n            fieldManager: queryArg.fieldManager,\n            fieldValidation: queryArg.fieldValidation,\n            force: queryArg.force,\n          },\n        }),\n        invalidatesTags: ['TimeInterval'],\n      }),\n    }),\n    overrideExisting: false,\n  });\nexport { injectedRtkApi as generatedTimeIntervalsApi };\nexport type ListNamespacedTimeIntervalApiResponse =\n  /** status 200 OK */ ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeIntervalList;\nexport type ListNamespacedTimeIntervalApiArg = {\n  /** object name and auth scope, such as for teams and projects */\n  namespace: string;\n  /** If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget). */\n  pretty?: string;\n  /** allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. */\n  allowWatchBookmarks?: boolean;\n  /** The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n    \n    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. */\n  continue?: string;\n  /** A selector to restrict the list of returned objects by their fields. Defaults to everything. */\n  fieldSelector?: string;\n  /** A selector to restrict the list of returned objects by their labels. Defaults to everything. */\n  labelSelector?: string;\n  /** limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n    \n    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. */\n  limit?: number;\n  /** resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n    \n    Defaults to unset */\n  resourceVersion?: string;\n  /** resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n    \n    Defaults to unset */\n  resourceVersionMatch?: string;\n  /** `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \"Bookmark\" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `\"k8s.io/initial-events-end\": \"true\"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.\n    \n    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan\n      is interpreted as \"data at least as new as the provided `resourceVersion`\"\n      and the bookmark event is send when the state is synced\n      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.\n      If `resourceVersion` is unset, this is interpreted as \"consistent read\" and the\n      bookmark event is send when the state is synced at least to the moment\n      when request started being processed.\n    - `resourceVersionMatch` set to any other value or unset\n      Invalid error is returned.\n    \n    Defaults to true if `resourceVersion=\"\"` or `resourceVersion=\"0\"` (for backward compatibility reasons) and to false otherwise. */\n  sendInitialEvents?: boolean;\n  /** Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. */\n  timeoutSeconds?: number;\n  /** Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. */\n  watch?: boolean;\n};\nexport type CreateNamespacedTimeIntervalApiResponse = /** status 200 OK */\n  | ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval\n  | /** status 201 Created */ ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval\n  | /** status 202 Accepted */ ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval;\nexport type CreateNamespacedTimeIntervalApiArg = {\n  /** object name and auth scope, such as for teams and projects */\n  namespace: string;\n  /** If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget). */\n  pretty?: string;\n  /** When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed */\n  dryRun?: string;\n  /** fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. */\n  fieldManager?: string;\n  /** fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered. */\n  fieldValidation?: string;\n  comGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval: ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval;\n};\nexport type ReadNamespacedTimeIntervalApiResponse =\n  /** status 200 OK */ ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval;\nexport type ReadNamespacedTimeIntervalApiArg = {\n  /** name of the TimeInterval */\n  name: string;\n  /** object name and auth scope, such as for teams and projects */\n  namespace: string;\n  /** If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget). */\n  pretty?: string;\n};\nexport type ReplaceNamespacedTimeIntervalApiResponse = /** status 200 OK */\n  | ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval\n  | /** status 201 Created */ ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval;\nexport type ReplaceNamespacedTimeIntervalApiArg = {\n  /** name of the TimeInterval */\n  name: string;\n  /** object name and auth scope, such as for teams and projects */\n  namespace: string;\n  /** If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget). */\n  pretty?: string;\n  /** When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed */\n  dryRun?: string;\n  /** fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. */\n  fieldManager?: string;\n  /** fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered. */\n  fieldValidation?: string;\n  comGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval: ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval;\n};\nexport type DeleteNamespacedTimeIntervalApiResponse = /** status 200 OK */\n  | IoK8SApimachineryPkgApisMetaV1Status\n  | /** status 202 Accepted */ IoK8SApimachineryPkgApisMetaV1Status;\nexport type DeleteNamespacedTimeIntervalApiArg = {\n  /** name of the TimeInterval */\n  name: string;\n  /** object name and auth scope, such as for teams and projects */\n  namespace: string;\n  /** If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget). */\n  pretty?: string;\n  /** When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed */\n  dryRun?: string;\n  /** The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. */\n  gracePeriodSeconds?: number;\n  /** Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both. */\n  orphanDependents?: boolean;\n  /** Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground. */\n  propagationPolicy?: string;\n  ioK8SApimachineryPkgApisMetaV1DeleteOptions: IoK8SApimachineryPkgApisMetaV1DeleteOptions;\n};\nexport type PatchNamespacedTimeIntervalApiResponse = /** status 200 OK */\n  | ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval\n  | /** status 201 Created */ ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval;\nexport type PatchNamespacedTimeIntervalApiArg = {\n  /** name of the TimeInterval */\n  name: string;\n  /** object name and auth scope, such as for teams and projects */\n  namespace: string;\n  /** If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget). */\n  pretty?: string;\n  /** When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed */\n  dryRun?: string;\n  /** fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch). */\n  fieldManager?: string;\n  /** fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered. */\n  fieldValidation?: string;\n  /** Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests. */\n  force?: boolean;\n  ioK8SApimachineryPkgApisMetaV1Patch: IoK8SApimachineryPkgApisMetaV1Patch;\n};\nexport type IoK8SApimachineryPkgApisMetaV1Time = string;\nexport type IoK8SApimachineryPkgApisMetaV1FieldsV1 = object;\nexport type IoK8SApimachineryPkgApisMetaV1ManagedFieldsEntry = {\n  /** APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted. */\n  apiVersion?: string;\n  /** FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\" */\n  fieldsType?: string;\n  /** FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type. */\n  fieldsV1?: IoK8SApimachineryPkgApisMetaV1FieldsV1;\n  /** Manager is an identifier of the workflow managing these fields. */\n  manager?: string;\n  /** Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'. */\n  operation?: string;\n  /** Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource. */\n  subresource?: string;\n  /** Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over. */\n  time?: IoK8SApimachineryPkgApisMetaV1Time;\n};\nexport type IoK8SApimachineryPkgApisMetaV1OwnerReference = {\n  /** API version of the referent. */\n  apiVersion: string;\n  /** If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned. */\n  blockOwnerDeletion?: boolean;\n  /** If true, this reference points to the managing controller. */\n  controller?: boolean;\n  /** Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */\n  kind: string;\n  /** Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names */\n  name: string;\n  /** UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids */\n  uid: string;\n};\nexport type IoK8SApimachineryPkgApisMetaV1ObjectMeta = {\n  /** Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations */\n  annotations?: {\n    [key: string]: string;\n  };\n  /** CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n    \n    Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata */\n  creationTimestamp?: IoK8SApimachineryPkgApisMetaV1Time;\n  /** Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only. */\n  deletionGracePeriodSeconds?: number;\n  /** DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n    \n    Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata */\n  deletionTimestamp?: IoK8SApimachineryPkgApisMetaV1Time;\n  /** Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list. */\n  finalizers?: string[];\n  /** GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n    \n    If this field is specified and the generated name exists, the server will return a 409.\n    \n    Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency */\n  generateName?: string;\n  /** A sequence number representing a specific generation of the desired state. Populated by the system. Read-only. */\n  generation?: number;\n  /** Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels */\n  labels?: {\n    [key: string]: string;\n  };\n  /** ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object. */\n  managedFields?: IoK8SApimachineryPkgApisMetaV1ManagedFieldsEntry[];\n  /** Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names */\n  name?: string;\n  /** Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n    \n    Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces */\n  namespace?: string;\n  /** List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller. */\n  ownerReferences?: IoK8SApimachineryPkgApisMetaV1OwnerReference[];\n  /** An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n    \n    Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency */\n  resourceVersion?: string;\n  /** Deprecated: selfLink is a legacy read-only field that is no longer populated by the system. */\n  selfLink?: string;\n  /** UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n    \n    Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids */\n  uid?: string;\n};\nexport type ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeRange = {\n  end_time: string;\n  start_time: string;\n};\nexport type ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1Interval = {\n  days_of_month?: string[];\n  location?: string;\n  months?: string[];\n  times?: ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeRange[];\n  weekdays?: string[];\n  years?: string[];\n};\nexport type ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeIntervalSpec = {\n  name: string;\n  time_intervals: ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1Interval[];\n};\nexport type ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval = {\n  /** APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources */\n  apiVersion?: string;\n  /** Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */\n  kind?: string;\n  metadata: IoK8SApimachineryPkgApisMetaV1ObjectMeta;\n  spec: ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeIntervalSpec;\n};\nexport type IoK8SApimachineryPkgApisMetaV1ListMeta = {\n  /** continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message. */\n  continue?: string;\n  /** remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact. */\n  remainingItemCount?: number;\n  /** String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency */\n  resourceVersion?: string;\n  /** Deprecated: selfLink is a legacy read-only field that is no longer populated by the system. */\n  selfLink?: string;\n};\nexport type ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeIntervalList = {\n  /** APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources */\n  apiVersion?: string;\n  items: ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval[];\n  /** Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */\n  kind?: string;\n  metadata: IoK8SApimachineryPkgApisMetaV1ListMeta;\n};\nexport type IoK8SApimachineryPkgApisMetaV1StatusCause = {\n  /** The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n    \n    Examples:\n      \"name\" - the field \"name\" on the current resource\n      \"items[0].name\" - the field \"name\" on the first array entry in \"items\" */\n  field?: string;\n  /** A human-readable description of the cause of the error.  This field may be presented as-is to a reader. */\n  message?: string;\n  /** A machine-readable description of the cause of the error. If this value is empty there is no information available. */\n  reason?: string;\n};\nexport type IoK8SApimachineryPkgApisMetaV1StatusDetails = {\n  /** The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes. */\n  causes?: IoK8SApimachineryPkgApisMetaV1StatusCause[];\n  /** The group attribute of the resource associated with the status StatusReason. */\n  group?: string;\n  /** The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */\n  kind?: string;\n  /** The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described). */\n  name?: string;\n  /** If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action. */\n  retryAfterSeconds?: number;\n  /** UID of the resource. (when there is a single resource which can be described). More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids */\n  uid?: string;\n};\nexport type IoK8SApimachineryPkgApisMetaV1Status = {\n  /** APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources */\n  apiVersion?: string;\n  /** Suggested HTTP return code for this status, 0 if not set. */\n  code?: number;\n  /** Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type. */\n  details?: IoK8SApimachineryPkgApisMetaV1StatusDetails;\n  /** Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */\n  kind?: string;\n  /** A human-readable description of the status of this operation. */\n  message?: string;\n  /** Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */\n  metadata?: IoK8SApimachineryPkgApisMetaV1ListMeta;\n  /** A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it. */\n  reason?: string;\n  /** Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status */\n  status?: string;\n};\nexport type IoK8SApimachineryPkgApisMetaV1Preconditions = {\n  /** Specifies the target ResourceVersion */\n  resourceVersion?: string;\n  /** Specifies the target UID. */\n  uid?: string;\n};\nexport type IoK8SApimachineryPkgApisMetaV1DeleteOptions = {\n  /** APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources */\n  apiVersion?: string;\n  /** When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed */\n  dryRun?: string[];\n  /** The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. */\n  gracePeriodSeconds?: number;\n  /** Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */\n  kind?: string;\n  /** Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both. */\n  orphanDependents?: boolean;\n  /** Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned. */\n  preconditions?: IoK8SApimachineryPkgApisMetaV1Preconditions;\n  /** Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground. */\n  propagationPolicy?: string;\n};\nexport type IoK8SApimachineryPkgApisMetaV1Patch = object;\n","// Overriding the response types when enhancing endpoints is currently fiddly.\n// A potential approach could be taken from the below:\n// https://github.com/reduxjs/redux-toolkit/issues/3901#issuecomment-1820995408\n// https://github.com/reduxjs/redux-toolkit/issues/3443#issue-1709588268\n//\n// At the time of writing there is an open PR changing the API of `enhanceEndpoints`,\n// which may help alleviate this when it lands:\n// https://github.com/reduxjs/redux-toolkit/pull/3485\n\nimport { generatedTimeIntervalsApi } from 'app/features/alerting/unified/openapi/timeIntervalsApi.gen';\n\nexport const timeIntervalsApi = generatedTimeIntervalsApi;\n","import { produce } from 'immer';\nimport { useEffect } from 'react';\n\nimport { alertmanagerApi } from 'app/features/alerting/unified/api/alertmanagerApi';\nimport { timeIntervalsApi } from 'app/features/alerting/unified/api/timeIntervalsApi';\nimport { mergeTimeIntervals } from 'app/features/alerting/unified/components/mute-timings/util';\nimport {\n  ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval,\n  ReadNamespacedTimeIntervalApiResponse,\n} from 'app/features/alerting/unified/openapi/timeIntervalsApi.gen';\nimport { deleteMuteTimingAction, updateAlertManagerConfigAction } from 'app/features/alerting/unified/state/actions';\nimport { BaseAlertmanagerArgs } from 'app/features/alerting/unified/types/hooks';\nimport { renameMuteTimings } from 'app/features/alerting/unified/utils/alertmanager';\nimport { GRAFANA_RULES_SOURCE_NAME } from 'app/features/alerting/unified/utils/datasource';\nimport { PROVENANCE_ANNOTATION, PROVENANCE_NONE } from 'app/features/alerting/unified/utils/k8s/constants';\nimport { getK8sNamespace, shouldUseK8sApi } from 'app/features/alerting/unified/utils/k8s/utils';\nimport { MuteTimeInterval } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nconst { useLazyGetAlertmanagerConfigurationQuery } = alertmanagerApi;\nconst {\n  useLazyListNamespacedTimeIntervalQuery,\n  useCreateNamespacedTimeIntervalMutation,\n  useLazyReadNamespacedTimeIntervalQuery,\n  useReplaceNamespacedTimeIntervalMutation,\n  useDeleteNamespacedTimeIntervalMutation,\n} = timeIntervalsApi;\n\n/**\n * Alertmanager mute time interval, with optional additional metadata\n * (returned in the case of K8S API implementation)\n * */\nexport type MuteTiming = MuteTimeInterval & {\n  id: string;\n  metadata?: ReadNamespacedTimeIntervalApiResponse['metadata'];\n};\n\n/** Alias for generated kuberenetes Alerting API Server type */\ntype TimeIntervalV0Alpha1 = ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval;\n\n/** Parse kubernetes API response into a Mute Timing */\nconst parseK8sTimeInterval: (item: TimeIntervalV0Alpha1) => MuteTiming = (item) => {\n  const { metadata, spec } = item;\n  return {\n    ...spec,\n    id: spec.name,\n    metadata,\n    provisioned: metadata.annotations?.[PROVENANCE_ANNOTATION] !== PROVENANCE_NONE,\n  };\n};\n\n/** Parse Alertmanager time interval response into a Mute Timing */\nconst parseAmTimeInterval: (interval: MuteTimeInterval, provenance: string) => MuteTiming = (interval, provenance) => {\n  return {\n    ...interval,\n    id: interval.name,\n    provisioned: Boolean(provenance && provenance !== PROVENANCE_NONE),\n  };\n};\n\nconst useAlertmanagerIntervals = () =>\n  useLazyGetAlertmanagerConfigurationQuery({\n    selectFromResult: ({ data, ...rest }) => {\n      if (!data) {\n        return { data, ...rest };\n      }\n      const { alertmanager_config } = data;\n      const muteTimingsProvenances = alertmanager_config.muteTimeProvenances ?? {};\n      const intervals = mergeTimeIntervals(alertmanager_config);\n      const timeIntervals = intervals.map((interval) =>\n        parseAmTimeInterval(interval, muteTimingsProvenances[interval.name])\n      );\n\n      return {\n        data: timeIntervals,\n        ...rest,\n      };\n    },\n  });\n\nconst useGrafanaAlertmanagerIntervals = () =>\n  useLazyListNamespacedTimeIntervalQuery({\n    selectFromResult: ({ data, ...rest }) => {\n      return {\n        data: data?.items.map((item) => parseK8sTimeInterval(item)),\n        ...rest,\n      };\n    },\n  });\n\n/**\n * Depending on alertmanager source, fetches mute timings.\n *\n * If the alertmanager source is Grafana, and `alertingApiServer` feature toggle is enabled,\n * fetches time intervals from k8s API.\n *\n * Otherwise, fetches and parses from the alertmanager config API\n */\nexport const useMuteTimings = ({ alertmanager }: BaseAlertmanagerArgs) => {\n  const useK8sApi = shouldUseK8sApi(alertmanager);\n\n  const [getGrafanaTimeIntervals, intervalsResponse] = useGrafanaAlertmanagerIntervals();\n  const [getAlertmanagerTimeIntervals, configApiResponse] = useAlertmanagerIntervals();\n\n  useEffect(() => {\n    if (useK8sApi) {\n      const namespace = getK8sNamespace();\n      getGrafanaTimeIntervals({ namespace });\n    } else {\n      getAlertmanagerTimeIntervals(alertmanager);\n    }\n  }, [alertmanager, getAlertmanagerTimeIntervals, getGrafanaTimeIntervals, useK8sApi]);\n  return useK8sApi ? intervalsResponse : configApiResponse;\n};\n\n/**\n * Create a new mute timing.\n *\n * If the alertmanager source is Grafana, and `alertingApiServer` feature toggle is enabled,\n * fetches time intervals from k8s API.\n *\n * Otherwise, creates the new timing in `time_intervals` via AM config API\n */\nexport const useCreateMuteTiming = ({ alertmanager }: BaseAlertmanagerArgs) => {\n  const useK8sApi = shouldUseK8sApi(alertmanager);\n\n  const dispatch = useDispatch();\n  const [createGrafanaTimeInterval] = useCreateNamespacedTimeIntervalMutation();\n  const [getAlertmanagerConfig] = useLazyGetAlertmanagerConfigurationQuery();\n\n  const isGrafanaAm = alertmanager === GRAFANA_RULES_SOURCE_NAME;\n\n  if (useK8sApi) {\n    const namespace = getK8sNamespace();\n    return ({ timeInterval }: { timeInterval: MuteTimeInterval }) =>\n      createGrafanaTimeInterval({\n        namespace,\n        comGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval: { metadata: {}, spec: timeInterval },\n      }).unwrap();\n  }\n\n  return async ({ timeInterval }: { timeInterval: MuteTimeInterval }) => {\n    const result = await getAlertmanagerConfig(alertmanager).unwrap();\n    const newConfig = produce(result, (draft) => {\n      const propertyToUpdate = isGrafanaAm ? 'mute_time_intervals' : 'time_intervals';\n      draft.alertmanager_config[propertyToUpdate] = draft.alertmanager_config[propertyToUpdate] ?? [];\n      draft.alertmanager_config[propertyToUpdate] = (draft.alertmanager_config[propertyToUpdate] ?? []).concat(\n        timeInterval\n      );\n    });\n\n    return dispatch(\n      updateAlertManagerConfigAction({\n        newConfig,\n        oldConfig: result,\n        alertManagerSourceName: alertmanager,\n        successMessage: 'Mute timing saved',\n      })\n    ).unwrap();\n  };\n};\n\n/**\n * Get an individual time interval, either from the k8s API,\n * or by finding it in the alertmanager config\n */\nexport const useGetMuteTiming = ({ alertmanager, name: nameToFind }: BaseAlertmanagerArgs & { name: string }) => {\n  const useK8sApi = shouldUseK8sApi(alertmanager);\n\n  const [getGrafanaTimeInterval, k8sResponse] = useLazyReadNamespacedTimeIntervalQuery({\n    selectFromResult: ({ data, ...rest }) => {\n      if (!data) {\n        return { data, ...rest };\n      }\n\n      return {\n        data: parseK8sTimeInterval(data),\n        ...rest,\n      };\n    },\n  });\n\n  const [getAlertmanagerTimeInterval, amConfigApiResponse] = useLazyGetAlertmanagerConfigurationQuery({\n    selectFromResult: ({ data, ...rest }) => {\n      if (!data) {\n        return { data, ...rest };\n      }\n      const alertmanager_config = data?.alertmanager_config ?? {};\n      const timeIntervals = mergeTimeIntervals(alertmanager_config);\n      const timing = timeIntervals.find(({ name }) => name === nameToFind);\n      if (timing) {\n        const muteTimingsProvenances = alertmanager_config?.muteTimeProvenances ?? {};\n\n        return {\n          data: parseAmTimeInterval(timing, muteTimingsProvenances[timing.name]),\n          ...rest,\n        };\n      }\n      return { ...rest, data: undefined, isError: true };\n    },\n  });\n\n  useEffect(() => {\n    if (useK8sApi) {\n      const namespace = getK8sNamespace();\n      getGrafanaTimeInterval({ namespace, name: nameToFind }, true);\n    } else {\n      getAlertmanagerTimeInterval(alertmanager, true);\n    }\n  }, [alertmanager, getAlertmanagerTimeInterval, getGrafanaTimeInterval, nameToFind, useK8sApi]);\n\n  return useK8sApi ? k8sResponse : amConfigApiResponse;\n};\n\n/**\n * Updates an existing mute timing.\n *\n * If the alertmanager source is Grafana, and `alertingApiServer` feature toggle is enabled,\n * uses the k8s API. At the time of writing, the name of the timing cannot be changed via this API\n *\n * Otherwise, updates the timing via AM config API, and also ensures any referenced routes are updated\n */\nexport const useUpdateMuteTiming = ({ alertmanager }: BaseAlertmanagerArgs) => {\n  const useK8sApi = shouldUseK8sApi(alertmanager);\n\n  const dispatch = useDispatch();\n  const [replaceGrafanaTimeInterval] = useReplaceNamespacedTimeIntervalMutation();\n  const [getAlertmanagerConfig] = useLazyGetAlertmanagerConfigurationQuery();\n\n  if (useK8sApi) {\n    return async ({ timeInterval, originalName }: { timeInterval: MuteTimeInterval; originalName: string }) => {\n      const namespace = getK8sNamespace();\n      return replaceGrafanaTimeInterval({\n        name: originalName,\n        namespace,\n        comGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1TimeInterval: {\n          spec: timeInterval,\n          metadata: { name: originalName },\n        },\n      }).unwrap();\n    };\n  }\n\n  return async ({ timeInterval, originalName }: { timeInterval: MuteTimeInterval; originalName: string }) => {\n    const nameHasChanged = timeInterval.name !== originalName;\n    const result = await getAlertmanagerConfig(alertmanager).unwrap();\n\n    const newConfig = produce(result, (draft) => {\n      const existingIntervalIndex = (draft.alertmanager_config?.time_intervals || [])?.findIndex(\n        ({ name }) => name === originalName\n      );\n      if (existingIntervalIndex !== -1) {\n        draft.alertmanager_config.time_intervals![existingIntervalIndex] = timeInterval;\n      }\n\n      const existingMuteIntervalIndex = (draft.alertmanager_config?.mute_time_intervals || [])?.findIndex(\n        ({ name }) => name === originalName\n      );\n      if (existingMuteIntervalIndex !== -1) {\n        draft.alertmanager_config.mute_time_intervals![existingMuteIntervalIndex] = timeInterval;\n      }\n\n      if (nameHasChanged && draft.alertmanager_config.route) {\n        draft.alertmanager_config.route = renameMuteTimings(\n          timeInterval.name,\n          originalName,\n          draft.alertmanager_config.route\n        );\n      }\n    });\n\n    return dispatch(\n      updateAlertManagerConfigAction({\n        newConfig,\n        oldConfig: result,\n        alertManagerSourceName: alertmanager,\n        successMessage: 'Mute timing saved',\n      })\n    ).unwrap();\n  };\n};\n\n/**\n * Delete a mute timing interval\n */\nexport const useDeleteMuteTiming = ({ alertmanager }: BaseAlertmanagerArgs) => {\n  const useK8sApi = shouldUseK8sApi(alertmanager);\n\n  const dispatch = useDispatch();\n  const [deleteGrafanaTimeInterval] = useDeleteNamespacedTimeIntervalMutation();\n\n  if (useK8sApi) {\n    return async ({ name }: { name: string }) => {\n      const namespace = getK8sNamespace();\n      return deleteGrafanaTimeInterval({\n        name,\n        namespace,\n        ioK8SApimachineryPkgApisMetaV1DeleteOptions: {},\n      }).unwrap();\n    };\n  }\n\n  return async ({ name }: { name: string }) => dispatch(deleteMuteTimingAction(alertmanager, name));\n};\n\nexport const useValidateMuteTiming = ({ alertmanager }: BaseAlertmanagerArgs) => {\n  const useK8sApi = shouldUseK8sApi(alertmanager);\n\n  const [getIntervals] = useAlertmanagerIntervals();\n\n  // If we're using the kubernetes API, then we let the API response handle the validation instead\n  // as we don't expect to be able to fetch the intervals via the AM config\n  if (useK8sApi) {\n    return () => undefined;\n  }\n\n  return async (value: string, skipValidation?: boolean) => {\n    if (skipValidation) {\n      return;\n    }\n    return getIntervals(alertmanager)\n      .unwrap()\n      .then((config) => {\n        const intervals = mergeTimeIntervals(config.alertmanager_config);\n        const duplicatedInterval = Boolean(intervals?.find((interval) => interval.name === value));\n        return duplicatedInterval ? `Mute timing already exists with name \"${value}\"` : undefined;\n      });\n  };\n};\n","import moment from 'moment';\nimport { Fragment } from 'react';\n\nimport { Stack } from '@grafana/ui';\nimport { AlertmanagerConfig, MuteTimeInterval } from 'app/plugins/datasource/alertmanager/types';\n\nimport {\n  getDaysOfMonthString,\n  getMonthsString,\n  getTimeString,\n  getWeekdayString,\n  getYearsString,\n} from '../../utils/alertmanager';\n\n// https://github.com/prometheus/alertmanager/blob/9de8ef36755298a68b6ab20244d4369d38bdea99/timeinterval/timeinterval.go#L443\nconst TIME_RANGE_REGEX = /^((([01][0-9])|(2[0-3])):[0-5][0-9])$|(^24:00$)/;\n\nexport const isvalidTimeFormat = (timeString: string): boolean => {\n  return timeString ? TIME_RANGE_REGEX.test(timeString) : true;\n};\n\n/**\n * Merges `mute_time_intervals` and `time_intervals` from alertmanager config to support both old and new config\n */\nexport const mergeTimeIntervals = (alertManagerConfig: AlertmanagerConfig) => {\n  return [...(alertManagerConfig.mute_time_intervals ?? []), ...(alertManagerConfig.time_intervals ?? [])];\n};\n\nexport const isValidStartAndEndTime = (startTime?: string, endTime?: string): boolean => {\n  // empty time range is perfactly valid for a mute timing\n  if (!startTime && !endTime) {\n    return true;\n  }\n\n  if ((!startTime && endTime) || (startTime && !endTime)) {\n    return false;\n  }\n\n  const timeUnit = 'HH:mm';\n  // @ts-ignore typescript types here incorrect, sigh\n  const startDate = moment().startOf('day').add(startTime, timeUnit);\n  // @ts-ignore typescript types here incorrect, sigh\n  const endDate = moment().startOf('day').add(endTime, timeUnit);\n\n  if (startTime && endTime && startDate.isBefore(endDate)) {\n    return true;\n  }\n\n  if (startTime && endTime && endDate.isAfter(startDate)) {\n    return true;\n  }\n\n  return false;\n};\n\nexport function renderTimeIntervals(muteTiming: MuteTimeInterval) {\n  const timeIntervals = muteTiming.time_intervals;\n\n  const intervals = timeIntervals.map((interval, index) => {\n    const { times, weekdays, days_of_month, months, years, location } = interval;\n    const timeString = getTimeString(times, location);\n    const weekdayString = getWeekdayString(weekdays);\n    const daysString = getDaysOfMonthString(days_of_month);\n    const monthsString = getMonthsString(months);\n    const yearsString = getYearsString(years);\n\n    return (\n      <Fragment key={JSON.stringify(interval) + index}>\n        <div>\n          {`${timeString} ${weekdayString}`}\n          <br />\n          {[daysString, monthsString, yearsString].join(' | ')}\n          <br />\n        </div>\n      </Fragment>\n    );\n  });\n\n  return (\n    <Stack direction=\"column\" gap={1}>\n      {intervals}\n    </Stack>\n  );\n}\n","import { css } from '@emotion/css';\nimport { take, takeRight, uniqueId } from 'lodash';\nimport { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { getTagColorsFromName, useStyles2, Stack } from '@grafana/ui';\nimport { ObjectMatcher } from 'app/plugins/datasource/alertmanager/types';\n\nimport { MatcherFormatter, matcherFormatter } from '../../utils/matchers';\nimport { HoverCard } from '../HoverCard';\n\ntype MatchersProps = { matchers: ObjectMatcher[]; formatter?: MatcherFormatter };\n\n// renders the first N number of matchers\nconst Matchers: FC<MatchersProps> = ({ matchers, formatter = 'default' }) => {\n  const styles = useStyles2(getStyles);\n\n  const NUM_MATCHERS = 5;\n\n  const firstFew = take(matchers, NUM_MATCHERS);\n  const rest = takeRight(matchers, matchers.length - NUM_MATCHERS);\n  const hasMoreMatchers = rest.length > 0;\n\n  return (\n    <span data-testid=\"label-matchers\">\n      <Stack direction=\"row\" gap={1} alignItems=\"center\" wrap={'wrap'}>\n        {firstFew.map((matcher) => (\n          <MatcherBadge key={uniqueId()} matcher={matcher} formatter={formatter} />\n        ))}\n        {/* TODO hover state to show all matchers we're not showing */}\n        {hasMoreMatchers && (\n          <HoverCard\n            arrow\n            placement=\"top\"\n            content={\n              <>\n                {rest.map((matcher) => (\n                  <MatcherBadge key={uniqueId()} matcher={matcher} />\n                ))}\n              </>\n            }\n          >\n            <span>\n              <div className={styles.metadata}>{`and ${rest.length} more`}</div>\n            </span>\n          </HoverCard>\n        )}\n      </Stack>\n    </span>\n  );\n};\n\ninterface MatcherBadgeProps {\n  matcher: ObjectMatcher;\n  formatter?: MatcherFormatter;\n}\n\nconst MatcherBadge: FC<MatcherBadgeProps> = ({ matcher, formatter = 'default' }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.matcher(matcher[0]).wrapper}>\n      <Stack direction=\"row\" gap={0} alignItems=\"baseline\">\n        {matcherFormatter[formatter](matcher)}\n      </Stack>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  matcher: (label: string) => {\n    const { color, borderColor } = getTagColorsFromName(label);\n\n    return {\n      wrapper: css({\n        color: '#fff',\n        background: color,\n        padding: `${theme.spacing(0.33)} ${theme.spacing(0.66)}`,\n        fontSize: theme.typography.bodySmall.fontSize,\n\n        border: `solid 1px ${borderColor}`,\n        borderRadius: theme.shape.borderRadius(2),\n\n        // Ensure we preserve whitespace, as otherwise it's not noticeable _at all_\n        // when rendering the matcher, and is only noticeable when editing\n        whiteSpace: 'pre',\n      }),\n    };\n  },\n  metadata: css({\n    color: theme.colors.text.secondary,\n\n    fontSize: theme.typography.bodySmall.fontSize,\n    fontWeight: theme.typography.bodySmall.fontWeight,\n  }),\n});\n\nexport { Matchers };\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { TimeOptions } from '../../types/time';\n\nexport function PromDurationDocs() {\n  const styles = useStyles2(getPromDurationStyles);\n  return (\n    <div>\n      Prometheus duration format consist of a number followed by a time unit.\n      <br />\n      Different units can be combined for more granularity.\n      <hr />\n      <div className={styles.list}>\n        <div className={styles.header}>\n          <div>Symbol</div>\n          <div>Time unit</div>\n          <div>Example</div>\n        </div>\n        <PromDurationDocsTimeUnit unit={TimeOptions.seconds} name=\"seconds\" example=\"20s\" />\n        <PromDurationDocsTimeUnit unit={TimeOptions.minutes} name=\"minutes\" example=\"10m\" />\n        <PromDurationDocsTimeUnit unit={TimeOptions.hours} name=\"hours\" example=\"4h\" />\n        <PromDurationDocsTimeUnit unit={TimeOptions.days} name=\"days\" example=\"3d\" />\n        <PromDurationDocsTimeUnit unit={TimeOptions.weeks} name=\"weeks\" example=\"2w\" />\n        <div className={styles.examples}>\n          <div>Multiple units combined</div>\n          <code>1m30s, 2h30m20s, 1w2d</code>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction PromDurationDocsTimeUnit({ unit, name, example }: { unit: TimeOptions; name: string; example: string }) {\n  const styles = useStyles2(getPromDurationStyles);\n\n  return (\n    <>\n      <div className={styles.unit}>{unit}</div>\n      <div>{name}</div>\n      <code>{example}</code>\n    </>\n  );\n}\n\nconst getPromDurationStyles = (theme: GrafanaTheme2) => ({\n  unit: css({\n    fontWeight: theme.typography.fontWeightBold,\n  }),\n  list: css({\n    display: 'grid',\n    gridTemplateColumns: 'max-content 1fr 2fr',\n    gap: theme.spacing(1, 3),\n  }),\n  header: css({\n    display: 'contents',\n    fontWeight: theme.typography.fontWeightBold,\n  }),\n  examples: css({\n    display: 'contents',\n    '& > div': {\n      gridColumn: '1 / span 2',\n    },\n  }),\n});\n","import { forwardRef } from 'react';\n\nimport { Icon, Input } from '@grafana/ui';\n\nimport { HoverCard } from '../HoverCard';\n\nimport { PromDurationDocs } from './PromDurationDocs';\n\nexport const PromDurationInput = forwardRef<HTMLInputElement, React.ComponentProps<typeof Input>>((props, ref) => {\n  return (\n    <Input\n      suffix={\n        <HoverCard content={<PromDurationDocs />} disabled={false}>\n          <Icon name=\"info-circle\" size=\"lg\" />\n        </HoverCard>\n      }\n      {...props}\n      ref={ref}\n    />\n  );\n});\n\nPromDurationInput.displayName = 'PromDurationInput';\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getFormStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      alignItems: 'center',\n      display: 'flex',\n      flexFlow: 'row nowrap',\n\n      '& > * + *': {\n        marginLeft: theme.spacing(1),\n      },\n    }),\n    input: css({\n      flex: 1,\n    }),\n    promDurationInput: css({\n      maxWidth: theme.spacing(32),\n    }),\n    timingFormContainer: css({\n      padding: theme.spacing(1),\n    }),\n    linkText: css({\n      textDecoration: 'underline',\n    }),\n    collapse: css({\n      border: 'none',\n      background: 'none',\n      color: theme.colors.text.primary,\n    }),\n  };\n};\n","export const routeTimingsFields = {\n  groupWait: {\n    label: 'Group wait',\n    description:\n      'The wait time before sending the first notification for a new group of alerts. If empty, it is inherited from the parent policy.',\n    ariaLabel: 'Group wait value',\n  },\n  groupInterval: {\n    label: 'Group interval',\n    description:\n      'The wait time before sending a notification about changes in the alert group after the first notification has been sent. If empty, it is inherited from the parent policy.',\n    ariaLabel: 'Group interval value',\n  },\n  repeatInterval: {\n    label: 'Repeat interval',\n    description: 'The wait time before resending a notification that has already been sent successfully.',\n    ariaLabel: 'Repeat interval value',\n  },\n};\n","export type TimingOptions = {\n  group_wait?: string;\n  group_interval?: string;\n  repeat_interval?: string;\n};\n\nexport const TIMING_OPTIONS_DEFAULTS: Required<TimingOptions> = {\n  group_wait: '30s',\n  group_interval: '5m',\n  repeat_interval: '4h',\n};\n","import { css } from '@emotion/css';\nimport { dump, load } from 'js-yaml';\nimport { useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, CodeEditor, Drawer, Icon, Tab, TabsBar, useStyles2, Tooltip } from '@grafana/ui';\n\nimport { RulerRuleDTO } from '../../../../../types/unified-alerting-dto';\nimport { RuleFormValues } from '../../types/rule-form';\nimport {\n  alertingRulerRuleToRuleForm,\n  formValuesToRulerRuleDTO,\n  recordingRulerRuleToRuleForm,\n} from '../../utils/rule-form';\nimport { isAlertingRulerRule, isRecordingRulerRule } from '../../utils/rules';\n\ninterface Props {\n  onClose: () => void;\n}\n\nconst cloudRulesTabs = [{ label: 'Yaml', value: 'yaml' }];\n\nexport const RuleInspector = ({ onClose }: Props) => {\n  const [activeTab, setActiveTab] = useState('yaml');\n  const { setValue } = useFormContext<RuleFormValues>();\n  const styles = useStyles2(drawerStyles);\n\n  const onApply = (formValues: RuleFormValues) => {\n    // Need to loop through all values and set them individually\n    // TODO this is not type-safe :(\n    for (const key in formValues) {\n      // @ts-ignore\n      setValue(key, formValues[key]);\n    }\n    onClose();\n  };\n\n  return (\n    <Drawer\n      title=\"Inspect Alert rule\"\n      subtitle={\n        <div className={styles.subtitle}>\n          <RuleInspectorTabs tabs={cloudRulesTabs} setActiveTab={setActiveTab} activeTab={activeTab} />\n        </div>\n      }\n      onClose={onClose}\n    >\n      {activeTab === 'yaml' && <InspectorYamlTab onSubmit={onApply} />}\n    </Drawer>\n  );\n};\n\ninterface RuleInspectorTabsProps<T = string> {\n  tabs: Array<{ label: string; value: T }>;\n  activeTab: T;\n  setActiveTab: (tab: T) => void;\n}\n\nexport function RuleInspectorTabs<T extends string>({ tabs, activeTab, setActiveTab }: RuleInspectorTabsProps<T>) {\n  return (\n    <TabsBar>\n      {tabs.map((tab, index) => {\n        return (\n          <Tab\n            key={`${tab.value}-${index}`}\n            label={tab.label}\n            value={tab.value}\n            onChangeTab={() => setActiveTab(tab.value)}\n            active={activeTab === tab.value}\n          />\n        );\n      })}\n    </TabsBar>\n  );\n}\n\ninterface YamlTabProps {\n  onSubmit: (newModel: RuleFormValues) => void;\n}\n\nconst InspectorYamlTab = ({ onSubmit }: YamlTabProps) => {\n  const styles = useStyles2(yamlTabStyle);\n  const { getValues } = useFormContext<RuleFormValues>();\n\n  const yamlValues = formValuesToRulerRuleDTO(getValues());\n  const [alertRuleAsYaml, setAlertRuleAsYaml] = useState(dump(yamlValues));\n\n  const onApply = () => {\n    const rulerRule = load(alertRuleAsYaml) as RulerRuleDTO;\n    const currentFormValues = getValues();\n\n    const yamlFormValues = rulerRuleToRuleFormValues(rulerRule);\n    onSubmit({ ...currentFormValues, ...yamlFormValues });\n  };\n\n  return (\n    <>\n      <div className={styles.applyButton}>\n        <Button type=\"button\" onClick={onApply}>\n          Apply\n        </Button>\n        <Tooltip content={<YamlContentInfo />} theme=\"info\" placement=\"left-start\" interactive={true}>\n          <Icon name=\"exclamation-triangle\" size=\"xl\" />\n        </Tooltip>\n      </div>\n\n      <div className={styles.content}>\n        <AutoSizer disableWidth>\n          {({ height }) => (\n            <CodeEditor\n              width=\"100%\"\n              height={height}\n              language=\"yaml\"\n              value={alertRuleAsYaml}\n              onBlur={setAlertRuleAsYaml}\n              monacoOptions={{\n                minimap: {\n                  enabled: false,\n                },\n              }}\n            />\n          )}\n        </AutoSizer>\n      </div>\n    </>\n  );\n};\n\nfunction YamlContentInfo() {\n  return (\n    <div>\n      The YAML content in the editor only contains alert rule configuration <br />\n      To configure Prometheus, you need to provide the rest of the{' '}\n      <a\n        href=\"https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        configuration file content.\n      </a>\n    </div>\n  );\n}\n\nfunction rulerRuleToRuleFormValues(rulerRule: RulerRuleDTO): Partial<RuleFormValues> {\n  if (isAlertingRulerRule(rulerRule)) {\n    return alertingRulerRuleToRuleForm(rulerRule);\n  } else if (isRecordingRulerRule(rulerRule)) {\n    return recordingRulerRuleToRuleForm(rulerRule);\n  }\n\n  return {};\n}\n\nexport const yamlTabStyle = (theme: GrafanaTheme2) => ({\n  content: css({\n    flexGrow: 1,\n    height: '100%',\n    paddingBottom: '16px',\n    marginBottom: theme.spacing(2),\n  }),\n  applyButton: css({\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    flexGrow: 0,\n    marginBottom: theme.spacing(2),\n  }),\n});\n\nexport const drawerStyles = () => ({\n  subtitle: css({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  }),\n});\n","import { SerializedError } from '@reduxjs/toolkit';\n\nimport { alertmanagerApi } from '../api/alertmanagerApi';\n\ntype Options = {\n  refetchOnFocus: boolean;\n  refetchOnReconnect: boolean;\n};\n\n// TODO refactor this so we can just call \"alertmanagerApi.endpoints.getAlertmanagerConfiguration\" everywhere\n// and remove this hook since it adds little value\nexport function useAlertmanagerConfig(amSourceName?: string, options?: Options) {\n  const fetchConfig = alertmanagerApi.endpoints.getAlertmanagerConfiguration.useQuery(amSourceName ?? '', {\n    // we'll disable cache by default to prevent overwriting other changes made since last fetch\n    refetchOnMountOrArgChange: true,\n    ...options,\n    skip: !amSourceName,\n  });\n\n  return {\n    ...fetchConfig,\n    // TODO refactor to get rid of this type assertion\n    error: fetchConfig.error as SerializedError,\n  };\n}\n","import { IconName } from '@grafana/ui';\n\nexport const INTEGRATION_ICONS: Record<string, IconName> = {\n  discord: 'discord',\n  email: 'envelope',\n  googlechat: 'google-hangouts-alt',\n  hipchat: 'hipchat',\n  line: 'line',\n  pagerduty: 'pagerduty',\n  slack: 'slack',\n  teams: 'microsoft',\n  telegram: 'telegram-alt',\n  webhook: 'link',\n  sns: 'amazon',\n};\n","import { CorsWorker as Worker } from 'app/core/utils/CorsWorker';\n\n// CorsWorker is needed as a workaround for CORS issue caused\n// by static assets served from an url different from origin\nexport const createWorker = () => new Worker(new URL('./routeGroupsMatcher.worker.ts', import.meta.url));\n","import * as comlink from 'comlink';\nimport { useCallback, useEffect } from 'react';\n\nimport { AlertmanagerGroup, RouteWithID } from '../../../plugins/datasource/alertmanager/types';\nimport { Labels } from '../../../types/unified-alerting-dto';\n\nimport { logError, logInfo } from './Analytics';\nimport { createWorker } from './createRouteGroupsMatcherWorker';\nimport type { MatchOptions, RouteGroupsMatcher } from './routeGroupsMatcher';\n\nlet routeMatcher: comlink.Remote<RouteGroupsMatcher> | undefined;\n\n// Load worker loads the worker if it's not loaded yet\n// and returns a function to dispose of the worker\n// We do it to enable feature toggling. If the feature is disabled we don't wont to load the worker code at all\n// An alternative way would be to move all this code to the hook below, but it will create and terminate the worker much more often\nfunction loadWorker() {\n  let worker: Worker | undefined;\n\n  if (routeMatcher === undefined) {\n    try {\n      worker = createWorker();\n      routeMatcher = comlink.wrap<RouteGroupsMatcher>(worker);\n    } catch (e: unknown) {\n      if (e instanceof Error) {\n        logError(e);\n      }\n    }\n  }\n\n  const disposeWorker = () => {\n    if (worker && routeMatcher) {\n      routeMatcher[comlink.releaseProxy]();\n      worker.terminate();\n\n      routeMatcher = undefined;\n      worker = undefined;\n    }\n  };\n\n  return { disposeWorker };\n}\n\nfunction validateWorker(matcher: typeof routeMatcher): asserts matcher is comlink.Remote<RouteGroupsMatcher> {\n  if (!routeMatcher) {\n    throw new Error('Route Matcher has not been initialized');\n  }\n}\n\nexport function useRouteGroupsMatcher() {\n  useEffect(() => {\n    const { disposeWorker } = loadWorker();\n    return disposeWorker;\n  }, []);\n\n  const getRouteGroupsMap = useCallback(\n    async (rootRoute: RouteWithID, alertGroups: AlertmanagerGroup[], options?: MatchOptions) => {\n      validateWorker(routeMatcher);\n\n      const startTime = performance.now();\n\n      const result = await routeMatcher.getRouteGroupsMap(rootRoute, alertGroups, options);\n\n      const timeSpent = performance.now() - startTime;\n\n      logInfo(`Route Groups Matched in  ${timeSpent} ms`, {\n        matchingTime: timeSpent.toString(),\n        alertGroupsCount: alertGroups.length.toString(),\n        // Counting all nested routes might be too time-consuming, so we only count the first level\n        topLevelRoutesCount: rootRoute.routes?.length.toString() ?? '0',\n      });\n\n      return result;\n    },\n    []\n  );\n\n  const matchInstancesToRoute = useCallback(\n    async (rootRoute: RouteWithID, instancesToMatch: Labels[], options?: MatchOptions) => {\n      validateWorker(routeMatcher);\n\n      const startTime = performance.now();\n\n      const result = await routeMatcher.matchInstancesToRoute(rootRoute, instancesToMatch, options);\n\n      const timeSpent = performance.now() - startTime;\n\n      logInfo(`Instances Matched in  ${timeSpent} ms`, {\n        matchingTime: timeSpent.toString(),\n        instancesToMatchCount: instancesToMatch.length.toString(),\n        // Counting all nested routes might be too time-consuming, so we only count the first level\n        topLevelRoutesCount: rootRoute.routes?.length.toString() ?? '0',\n      });\n\n      return result;\n    },\n    []\n  );\n\n  return { getRouteGroupsMap, matchInstancesToRoute };\n}\n","import { uniqueId } from 'lodash';\n\nimport { SelectableValue } from '@grafana/data';\nimport { MatcherOperator, ObjectMatcher, Route, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { FormAmRoute } from '../types/amroutes';\nimport { MatcherFieldValue } from '../types/silence-form';\n\nimport { matcherToMatcherField } from './alertmanager';\nimport { GRAFANA_RULES_SOURCE_NAME } from './datasource';\nimport { encodeMatcher, normalizeMatchers, parseMatcherToArray, unquoteWithUnescape } from './matchers';\nimport { findExistingRoute } from './routeTree';\nimport { isValidPrometheusDuration, safeParsePrometheusDuration } from './time';\n\nconst matchersToArrayFieldMatchers = (\n  matchers: Record<string, string> | undefined,\n  isRegex: boolean\n): MatcherFieldValue[] =>\n  Object.entries(matchers ?? {}).reduce<MatcherFieldValue[]>(\n    (acc, [name, value]) => [\n      ...acc,\n      {\n        name,\n        value,\n        operator: isRegex ? MatcherOperator.regex : MatcherOperator.equal,\n      },\n    ],\n    []\n  );\n\nconst selectableValueToString = (selectableValue: SelectableValue<string>): string => selectableValue.value!;\n\nconst selectableValuesToStrings = (arr: Array<SelectableValue<string>> | undefined): string[] =>\n  (arr ?? []).map(selectableValueToString);\n\nexport const emptyArrayFieldMatcher: MatcherFieldValue = {\n  name: '',\n  value: '',\n  operator: MatcherOperator.equal,\n};\n\n// Default route group_by labels for newly created routes.\nexport const defaultGroupBy = ['grafana_folder', 'alertname'];\n\n// Common route group_by options for multiselect drop-down\nexport const commonGroupByOptions = [\n  { label: 'grafana_folder', value: 'grafana_folder', isFixed: true },\n  { label: 'alertname', value: 'alertname', isFixed: true },\n  { label: 'Disable (...)', value: '...' },\n];\n\nexport const emptyRoute: FormAmRoute = {\n  id: '',\n  overrideGrouping: false,\n  groupBy: defaultGroupBy,\n  object_matchers: [],\n  routes: [],\n  continue: false,\n  receiver: '',\n  overrideTimings: false,\n  groupWaitValue: '',\n  groupIntervalValue: '',\n  repeatIntervalValue: '',\n  muteTimeIntervals: [],\n};\n\n// add unique identifiers to each route in the route tree, that way we can figure out what route we've edited / deleted\nexport function addUniqueIdentifierToRoute(route: Route): RouteWithID {\n  return {\n    id: uniqueId('route-'),\n    ...route,\n    routes: (route.routes ?? []).map(addUniqueIdentifierToRoute),\n  };\n}\n\n//returns route, and a record mapping id to existing route\nexport const amRouteToFormAmRoute = (route: RouteWithID | Route | undefined): FormAmRoute => {\n  if (!route) {\n    return emptyRoute;\n  }\n\n  const id = 'id' in route ? route.id : uniqueId('route-');\n\n  if (Object.keys(route).length === 0) {\n    const formAmRoute = { ...emptyRoute, id };\n    return formAmRoute;\n  }\n\n  const formRoutes: FormAmRoute[] = [];\n  route.routes?.forEach((subRoute) => {\n    const subFormRoute = amRouteToFormAmRoute(subRoute);\n    formRoutes.push(subFormRoute);\n  });\n\n  const objectMatchers =\n    route.object_matchers?.map((matcher) => ({ name: matcher[0], operator: matcher[1], value: matcher[2] })) ?? [];\n\n  const matchers =\n    route.matchers\n      ?.flatMap((matcher) => {\n        // parse the matcher to an array of matchers, PromQL-style matchers can contain more than one matcher (in a matcher, yes it's confusing)\n        return parseMatcherToArray(matcher).flatMap(matcherToMatcherField);\n      })\n      .map(({ name, operator, value }) => ({\n        name: unquoteWithUnescape(name),\n        operator,\n        value: unquoteWithUnescape(value),\n      })) ?? [];\n\n  return {\n    id,\n    // Frontend migration to use object_matchers instead of matchers, match, and match_re\n    object_matchers: [\n      ...matchers,\n      ...objectMatchers,\n      ...matchersToArrayFieldMatchers(route.match, false),\n      ...matchersToArrayFieldMatchers(route.match_re, true),\n    ],\n    continue: route.continue ?? false,\n    receiver: route.receiver ?? '',\n    overrideGrouping: Array.isArray(route.group_by) && route.group_by.length > 0,\n    groupBy: route.group_by ?? undefined,\n    overrideTimings: [route.group_wait, route.group_interval, route.repeat_interval].some(Boolean),\n    groupWaitValue: route.group_wait ?? '',\n    groupIntervalValue: route.group_interval ?? '',\n    repeatIntervalValue: route.repeat_interval ?? '',\n    routes: formRoutes,\n    muteTimeIntervals: route.mute_time_intervals ?? [],\n  };\n};\n\n// convert a FormAmRoute to a Route\nexport const formAmRouteToAmRoute = (\n  alertManagerSourceName: string,\n  formAmRoute: Partial<FormAmRoute>,\n  routeTree: RouteWithID\n): Route => {\n  const existing = findExistingRoute(formAmRoute.id ?? '', routeTree);\n\n  const {\n    overrideGrouping,\n    groupBy,\n    overrideTimings,\n    groupWaitValue,\n    groupIntervalValue,\n    repeatIntervalValue,\n    receiver,\n  } = formAmRoute;\n\n  // \"undefined\" means \"inherit from the parent policy\", currently supported by group_by, group_wait, group_interval, and repeat_interval\n  const INHERIT_FROM_PARENT = undefined;\n\n  const group_by = overrideGrouping ? groupBy : INHERIT_FROM_PARENT;\n\n  const overrideGroupWait = overrideTimings && groupWaitValue;\n  const group_wait = overrideGroupWait ? groupWaitValue : INHERIT_FROM_PARENT;\n\n  const overrideGroupInterval = overrideTimings && groupIntervalValue;\n  const group_interval = overrideGroupInterval ? groupIntervalValue : INHERIT_FROM_PARENT;\n\n  const overrideRepeatInterval = overrideTimings && repeatIntervalValue;\n  const repeat_interval = overrideRepeatInterval ? repeatIntervalValue : INHERIT_FROM_PARENT;\n\n  // Empty matcher values are valid. Such matchers require specified label to not exists\n  const object_matchers: ObjectMatcher[] | undefined = formAmRoute.object_matchers\n    ?.filter((route) => route.name && route.operator && route.value !== null && route.value !== undefined)\n    .map(({ name, operator, value }) => [name, operator, value]);\n\n  const routes = formAmRoute.routes?.map((subRoute) =>\n    formAmRouteToAmRoute(alertManagerSourceName, subRoute, routeTree)\n  );\n\n  const amRoute: Route = {\n    ...(existing ?? {}),\n    continue: formAmRoute.continue,\n    group_by: group_by,\n    object_matchers: object_matchers,\n    match: undefined, // DEPRECATED: Use matchers\n    match_re: undefined, // DEPRECATED: Use matchers\n    group_wait,\n    group_interval,\n    repeat_interval,\n    routes: routes,\n    mute_time_intervals: formAmRoute.muteTimeIntervals,\n    receiver: receiver,\n  };\n\n  // non-Grafana managed rules should use \"matchers\", Grafana-managed rules should use \"object_matchers\"\n  // Grafana maintains a fork of AM to support all utf-8 characters in the \"object_matchers\" property values but this\n  // does not exist in upstream AlertManager\n  if (alertManagerSourceName !== GRAFANA_RULES_SOURCE_NAME) {\n    // to support UTF-8 characters we must wrap label keys and values with double quotes if they contain reserved characters.\n    amRoute.matchers = formAmRoute.object_matchers?.map(encodeMatcher);\n    amRoute.object_matchers = undefined;\n  } else {\n    amRoute.object_matchers = normalizeMatchers(amRoute);\n    amRoute.matchers = undefined;\n  }\n\n  if (formAmRoute.receiver) {\n    amRoute.receiver = formAmRoute.receiver;\n  }\n\n  return amRoute;\n};\n\nexport const stringToSelectableValue = (str: string): SelectableValue<string> => ({\n  label: str,\n  value: str,\n});\n\nexport const stringsToSelectableValues = (arr: string[] | undefined): Array<SelectableValue<string>> =>\n  (arr ?? []).map(stringToSelectableValue);\n\nexport const mapSelectValueToString = (selectableValue: SelectableValue<string>): string | null => {\n  // this allows us to deal with cleared values\n  if (selectableValue === null) {\n    return null;\n  }\n\n  if (!selectableValue) {\n    return '';\n  }\n\n  return selectableValueToString(selectableValue) ?? '';\n};\n\nexport const mapMultiSelectValueToStrings = (\n  selectableValues: Array<SelectableValue<string>> | undefined\n): string[] => {\n  if (!selectableValues) {\n    return [];\n  }\n\n  return selectableValuesToStrings(selectableValues);\n};\n\nexport function promDurationValidator(duration?: string) {\n  if (!duration || duration.length === 0) {\n    return true;\n  }\n\n  return isValidPrometheusDuration(duration) || 'Invalid duration format. Must be {number}{time_unit}';\n}\n\n// function to convert ObjectMatchers to a array of strings\nexport const objectMatchersToString = (matchers: ObjectMatcher[]): string[] => {\n  return matchers.map((matcher) => {\n    const [name, operator, value] = matcher;\n    return `${name}${operator}${value}`;\n  });\n};\n\nexport const repeatIntervalValidator = (repeatInterval: string, groupInterval = '') => {\n  if (repeatInterval.length === 0) {\n    return true;\n  }\n\n  const validRepeatInterval = promDurationValidator(repeatInterval);\n  const validGroupInterval = promDurationValidator(groupInterval);\n\n  if (validRepeatInterval !== true) {\n    return validRepeatInterval;\n  }\n\n  if (validGroupInterval !== true) {\n    return validGroupInterval;\n  }\n\n  const repeatDuration = safeParsePrometheusDuration(repeatInterval);\n  const groupDuration = safeParsePrometheusDuration(groupInterval);\n\n  const isRepeatLowerThanGroupDuration = groupDuration !== 0 && repeatDuration < groupDuration;\n\n  return isRepeatLowerThanGroupDuration ? 'Repeat interval should be higher or equal to Group interval' : true;\n};\n","/** Name of the custom annotation label used in k8s APIs for us to discern if a given entity was provisioned */\nexport const PROVENANCE_ANNOTATION = 'grafana.com/provenance';\n\n/** Value of {@link PROVENANCE_ANNOTATION} given for entities that were not provisioned */\nexport const PROVENANCE_NONE = 'none';\n","import { config } from '@grafana/runtime';\nimport { GRAFANA_RULES_SOURCE_NAME } from 'app/features/alerting/unified/utils/datasource';\n\n/**\n * Get the correct namespace to use when using the K8S API.\n */\nexport const getK8sNamespace = () => config.namespace;\n\n/**\n * Should we call the kubernetes-style API for managing alertmanager entities?\n *\n * Requires the alertmanager referenced being the Grafana AM,\n * and the `alertingApiServer` feature toggle being enabled\n */\nexport const shouldUseK8sApi = (alertmanager?: string) => {\n  const featureToggleEnabled = config.featureToggles.alertingApiServer;\n  return featureToggleEnabled && alertmanager === GRAFANA_RULES_SOURCE_NAME;\n};\n","import { isUndefined, omitBy } from 'lodash';\n\nimport { MuteTimeInterval, TimeInterval, TimeRange } from 'app/plugins/datasource/alertmanager/types';\n\nimport { MuteTimingFields, MuteTimingIntervalFields } from '../types/mute-timing-form';\n\nexport const DAYS_OF_THE_WEEK = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];\n\nexport const MONTHS = [\n  'january',\n  'february',\n  'march',\n  'april',\n  'may',\n  'june',\n  'july',\n  'august',\n  'september',\n  'october',\n  'november',\n  'december',\n];\n\nexport const defaultTimeInterval: MuteTimingIntervalFields = {\n  times: [{ start_time: '', end_time: '' }],\n  weekdays: '',\n  days_of_month: '',\n  months: '',\n  years: '',\n  location: '',\n  disable: false,\n};\n\nexport const validateArrayField = (\n  value: string | undefined,\n  validateValue: (input: string) => boolean,\n  invalidText: string\n) => {\n  if (value) {\n    return (\n      value\n        .split(',')\n        .map((x) => x.trim())\n        .every((entry) => entry.split(':').every(validateValue)) || invalidText\n    );\n  } else {\n    return true;\n  }\n};\n\nconst convertStringToArray = (str?: string) => {\n  return str ? str.split(',').map((s) => s.trim()) : undefined;\n};\n\nexport const createMuteTiming = (fields: MuteTimingFields): MuteTimeInterval => {\n  const timeIntervals: TimeInterval[] = fields.time_intervals.map(\n    ({ times, weekdays, days_of_month, months, years, location, disable }) => {\n      const interval = {\n        times: convertTimesToDto(times, disable),\n        weekdays: convertStringToArray(weekdays)?.map((v) => v.toLowerCase()),\n        days_of_month: convertStringToArray(days_of_month),\n        months: convertStringToArray(months),\n        years: convertStringToArray(years),\n        location: location ? location : undefined,\n      };\n\n      return omitBy(interval, isUndefined);\n    }\n  );\n\n  return {\n    name: fields.name,\n    time_intervals: timeIntervals,\n  };\n};\n\n/*\n * Convert times from form to dto, if disable is true, then return an empty array as times\n If the times array is empty and disable is false, then return undefined\n * @param muteTimeInterval\n * @returns MuteTimingFields\n *\n */\nfunction convertTimesToDto(times: TimeRange[] | undefined, disable: boolean) {\n  if (disable) {\n    return [];\n  }\n  const timesToReturn = times?.filter(({ start_time, end_time }) => !!start_time && !!end_time);\n  return timesToReturn?.length ? timesToReturn : undefined;\n}\n\n/*\n * Get disable field from dto, if any of the lists is an empty array, then the disable field is true\n * @param muteTimeInterval\n * @returns MuteTimingFields\n *\n */\n\nexport function isTimeIntervalDisabled(intervals: TimeInterval): boolean {\n  if (\n    intervals.times?.length === 0 ||\n    intervals.weekdays?.length === 0 ||\n    intervals.days_of_month?.length === 0 ||\n    intervals.months?.length === 0 ||\n    intervals.years?.length === 0\n  ) {\n    return true;\n  }\n  return false;\n}\n\n/*\n   Return true if all the time intervals are disabled\n  * @param muteTimeInterval\n  * @returns MuteTimingFields\n  * */\nexport function isDisabled(muteTiming: MuteTimeInterval) {\n  return muteTiming.time_intervals.every((timeInterval) => isTimeIntervalDisabled(timeInterval));\n}\n","import { isArray, pick, reduce } from 'lodash';\n\nimport {\n  AlertmanagerGroup,\n  MatcherOperator,\n  ObjectMatcher,\n  Route,\n  RouteWithID,\n} from 'app/plugins/datasource/alertmanager/types';\nimport { Labels } from 'app/types/unified-alerting-dto';\n\nimport { Label, normalizeMatchers, unquoteWithUnescape } from './matchers';\n\n// If a policy has no matchers it still can be a match, hence matchers can be empty and match can be true\n// So we cannot use null as an indicator of no match\ninterface LabelMatchResult {\n  match: boolean;\n  matcher: ObjectMatcher | null;\n}\n\nexport const INHERITABLE_KEYS = ['receiver', 'group_by', 'group_wait', 'group_interval', 'repeat_interval'] as const;\nexport type InheritableKeys = typeof INHERITABLE_KEYS;\nexport type InheritableProperties = Pick<Route, InheritableKeys[number]>;\n\ntype LabelsMatch = Map<Label, LabelMatchResult>;\n\ninterface MatchingResult {\n  matches: boolean;\n  labelsMatch: LabelsMatch;\n}\n\n// returns a match results for given set of matchers (from a policy for instance) and a set of labels\nexport function matchLabels(matchers: ObjectMatcher[], labels: Label[]): MatchingResult {\n  const matches = matchLabelsSet(matchers, labels);\n\n  // create initial map of label => match result\n  const labelsMatch: LabelsMatch = new Map(labels.map((label) => [label, { match: false, matcher: null }]));\n\n  // for each matcher, check which label it matched for\n  matchers.forEach((matcher) => {\n    const matchingLabel = labels.find((label) => isLabelMatch(matcher, label));\n\n    // record that matcher for the label\n    if (matchingLabel) {\n      labelsMatch.set(matchingLabel, {\n        match: true,\n        matcher,\n      });\n    }\n  });\n\n  return { matches, labelsMatch };\n}\n\n// Compare set of matchers to set of label\nexport function matchLabelsSet(matchers: ObjectMatcher[], labels: Label[]): boolean {\n  for (const matcher of matchers) {\n    if (!isLabelMatchInSet(matcher, labels)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport interface AlertInstanceMatch {\n  instance: Labels;\n  labelsMatch: LabelsMatch;\n}\n\nexport interface RouteMatchResult<T extends Route> {\n  route: T;\n  labelsMatch: LabelsMatch;\n}\n\n// Match does a depth-first left-to-right search through the route tree\n// and returns the matching routing nodes.\n\n// If the current node is not a match, return nothing\n// Normalization should have happened earlier in the code\nfunction findMatchingRoutes<T extends Route>(route: T, labels: Label[]): Array<RouteMatchResult<T>> {\n  let childMatches: Array<RouteMatchResult<T>> = [];\n\n  // If the current node is not a match, return nothing\n  const matchResult = matchLabels(route.object_matchers ?? [], labels);\n  if (!matchResult.matches) {\n    return [];\n  }\n\n  // If the current node matches, recurse through child nodes\n  if (route.routes) {\n    for (const child of route.routes) {\n      const matchingChildren = findMatchingRoutes(child, labels);\n      // TODO how do I solve this typescript thingy? It looks correct to me /shrug\n      // @ts-ignore\n      childMatches = childMatches.concat(matchingChildren);\n      // we have matching children and we don't want to continue, so break here\n      if (matchingChildren.length && !child.continue) {\n        break;\n      }\n    }\n  }\n\n  // If no child nodes were matches, the current node itself is a match.\n  if (childMatches.length === 0) {\n    childMatches.push({ route, labelsMatch: matchResult.labelsMatch });\n  }\n\n  return childMatches;\n}\n\n// This is a performance improvement to normalize matchers only once and use the normalized version later on\nexport function normalizeRoute(rootRoute: RouteWithID): RouteWithID {\n  function normalizeRoute(route: RouteWithID) {\n    route.object_matchers = normalizeMatchers(route);\n    delete route.matchers;\n    delete route.match;\n    delete route.match_re;\n    route.routes?.forEach(normalizeRoute);\n  }\n\n  const normalizedRootRoute = structuredClone(rootRoute);\n  normalizeRoute(normalizedRootRoute);\n\n  return normalizedRootRoute;\n}\n\nexport function unquoteRouteMatchers(route: RouteWithID): RouteWithID {\n  function unquoteRoute(route: RouteWithID) {\n    route.object_matchers = route.object_matchers?.map(([name, operator, value]) => {\n      return [unquoteWithUnescape(name), operator, unquoteWithUnescape(value)];\n    });\n    route.routes?.forEach(unquoteRoute);\n  }\n\n  const unwrappedRootRoute = structuredClone(route);\n  unquoteRoute(unwrappedRootRoute);\n\n  return unwrappedRootRoute;\n}\n\n/**\n * find all of the groups that have instances that match the route, thay way we can find all instances\n * (and their grouping) for the given route\n */\nfunction findMatchingAlertGroups(\n  routeTree: Route,\n  route: Route,\n  alertGroups: AlertmanagerGroup[]\n): AlertmanagerGroup[] {\n  const matchingGroups: AlertmanagerGroup[] = [];\n\n  return alertGroups.reduce((acc, group) => {\n    // find matching alerts in the current group\n    const matchingAlerts = group.alerts.filter((alert) => {\n      const labels = Object.entries(alert.labels);\n      return findMatchingRoutes(routeTree, labels).some((matchingRoute) => matchingRoute.route === route);\n    });\n\n    // if the groups has any alerts left after matching, add it to the results\n    if (matchingAlerts.length) {\n      acc.push({\n        ...group,\n        alerts: matchingAlerts,\n      });\n    }\n\n    return acc;\n  }, matchingGroups);\n}\n\n// inherited properties are config properties that exist on the parent route (or its inherited properties) but not on the child route\nfunction getInheritedProperties(\n  parentRoute: Route,\n  childRoute: Route,\n  propertiesParentInherited?: InheritableProperties\n): InheritableProperties {\n  const propsFromParent: InheritableProperties = pick(parentRoute, INHERITABLE_KEYS);\n  const inheritableProperties: InheritableProperties = {\n    ...propsFromParent,\n    ...propertiesParentInherited,\n  };\n\n  const inherited = reduce(\n    inheritableProperties,\n    (inheritedProperties: InheritableProperties, parentValue, property) => {\n      const parentHasValue = parentValue != null;\n\n      const inheritableValues = [undefined, '', null];\n      // @ts-ignore\n      const childIsInheriting = inheritableValues.some((value) => childRoute[property] === value);\n      const inheritFromValue = childIsInheriting && parentHasValue;\n\n      const inheritEmptyGroupByFromParent =\n        property === 'group_by' &&\n        parentHasValue &&\n        isArray(childRoute[property]) &&\n        childRoute[property]?.length === 0;\n\n      const inheritFromParent = inheritFromValue || inheritEmptyGroupByFromParent;\n\n      if (inheritFromParent) {\n        // @ts-ignore\n        inheritedProperties[property] = parentValue;\n      }\n\n      return inheritedProperties;\n    },\n    {}\n  );\n\n  return inherited;\n}\n\n/**\n * This function will compute the full tree with inherited properties – this is mostly used for search and filtering\n */\nexport function computeInheritedTree<T extends Route>(parent: T): T {\n  return {\n    ...parent,\n    routes: parent.routes?.map((child) => {\n      const inheritedProperties = getInheritedProperties(parent, child);\n\n      return computeInheritedTree({\n        ...child,\n        ...inheritedProperties,\n      });\n    }),\n  };\n}\n\ntype OperatorPredicate = (labelValue: string, matcherValue: string) => boolean;\nconst OperatorFunctions: Record<MatcherOperator, OperatorPredicate> = {\n  [MatcherOperator.equal]: (lv, mv) => lv === mv,\n  [MatcherOperator.notEqual]: (lv, mv) => lv !== mv,\n  // At the time of writing, Alertmanager compiles to another (anchored) Regular Expression,\n  // so we should also anchor our UI matches for consistency with this behaviour\n  // https://github.com/prometheus/alertmanager/blob/fd37ce9c95898ca68be1ab4d4529517174b73c33/pkg/labels/matcher.go#L69\n  [MatcherOperator.regex]: (lv, mv) => {\n    const re = new RegExp(`^(?:${mv})$`);\n    return re.test(lv);\n  },\n  [MatcherOperator.notRegex]: (lv, mv) => {\n    const re = new RegExp(`^(?:${mv})$`);\n    return !re.test(lv);\n  },\n};\n\nfunction isLabelMatchInSet(matcher: ObjectMatcher, labels: Label[]): boolean {\n  const [matcherKey, operator, matcherValue] = matcher;\n\n  let labelValue = ''; // matchers that have no labels are treated as empty string label values\n  const labelForMatcher = Object.fromEntries(labels)[matcherKey];\n  if (labelForMatcher) {\n    labelValue = labelForMatcher;\n  }\n\n  const matchFunction = OperatorFunctions[operator];\n  if (!matchFunction) {\n    throw new Error(`no such operator: ${operator}`);\n  }\n\n  return matchFunction(labelValue, matcherValue);\n}\n\n// ⚠️ DO NOT USE THIS FUNCTION FOR ROUTE SELECTION ALGORITHM\n// for route selection algorithm, always compare a single matcher to the entire label set\n// see \"matchLabelsSet\"\nfunction isLabelMatch(matcher: ObjectMatcher, label: Label): boolean {\n  const [labelKey, labelValue] = label;\n  const [matcherKey, operator, matcherValue] = matcher;\n\n  if (labelKey !== matcherKey) {\n    return false;\n  }\n\n  const matchFunction = OperatorFunctions[operator];\n  if (!matchFunction) {\n    throw new Error(`no such operator: ${operator}`);\n  }\n\n  return matchFunction(labelValue, matcherValue);\n}\n\nexport { findMatchingAlertGroups, findMatchingRoutes, getInheritedProperties, isLabelMatchInSet };\n","/**\n * Various helper functions to modify (immutably) the route tree, aka \"notification policies\"\n */\n\nimport { produce } from 'immer';\nimport { omit } from 'lodash';\n\nimport { insertAfterImmutably, insertBeforeImmutably } from '@grafana/data/src/utils/arrayUtils';\nimport { Route, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { FormAmRoute } from '../types/amroutes';\n\nimport { formAmRouteToAmRoute } from './amroutes';\n\n// add a form submission to the route tree\nexport const mergePartialAmRouteWithRouteTree = (\n  alertManagerSourceName: string,\n  partialFormRoute: Partial<FormAmRoute>,\n  routeTree: RouteWithID\n): Route => {\n  const existing = findExistingRoute(partialFormRoute.id ?? '', routeTree);\n  if (!existing) {\n    throw new Error(`No such route with ID '${partialFormRoute.id}'`);\n  }\n\n  function findAndReplace(currentRoute: RouteWithID): Route {\n    let updatedRoute: Route = currentRoute;\n\n    if (currentRoute.id === partialFormRoute.id) {\n      const newRoute = formAmRouteToAmRoute(alertManagerSourceName, partialFormRoute, routeTree);\n      updatedRoute = {\n        ...currentRoute,\n        ...newRoute,\n      };\n    }\n\n    return {\n      ...updatedRoute,\n      routes: currentRoute.routes?.map(findAndReplace),\n    };\n  }\n\n  return findAndReplace(routeTree);\n};\n\n// remove a route from the policy tree, returns a new tree\n// make sure to omit the \"id\" because Prometheus / Loki / Mimir will reject the payload\nexport const omitRouteFromRouteTree = (findRoute: RouteWithID, routeTree: RouteWithID): RouteWithID => {\n  if (findRoute.id === routeTree.id) {\n    throw new Error('You cant remove the root policy');\n  }\n\n  function findAndOmit(currentRoute: RouteWithID): RouteWithID {\n    return {\n      ...currentRoute,\n      routes: currentRoute.routes?.reduce((acc: RouteWithID[] = [], route) => {\n        if (route.id === findRoute.id) {\n          return acc;\n        }\n\n        acc.push(findAndOmit(route));\n        return acc;\n      }, []),\n    };\n  }\n\n  return findAndOmit(routeTree);\n};\n\nexport type InsertPosition = 'above' | 'below' | 'child';\n\n// add a new route to a parent route\nexport const addRouteToReferenceRoute = (\n  alertManagerSourceName: string,\n  partialFormRoute: Partial<FormAmRoute>,\n  referenceRoute: RouteWithID,\n  routeTree: RouteWithID,\n  position: InsertPosition\n): RouteWithID => {\n  const newRoute = formAmRouteToAmRoute(alertManagerSourceName, partialFormRoute, routeTree);\n\n  return produce(routeTree, (draftTree) => {\n    const [routeInTree, parentRoute, positionInParent] = findRouteInTree(draftTree, referenceRoute);\n\n    if (routeInTree === undefined || parentRoute === undefined || positionInParent === undefined) {\n      throw new Error(`could not find reference route \"${referenceRoute.id}\" in tree`);\n    }\n\n    // if user wants to insert new child policy, append to the bottom of children\n    if (position === 'child') {\n      if (routeInTree.routes) {\n        routeInTree.routes.push(newRoute);\n      } else {\n        routeInTree.routes = [newRoute];\n      }\n    }\n\n    // insert new policy before / above the referenceRoute\n    if (position === 'above') {\n      parentRoute.routes = insertBeforeImmutably(parentRoute.routes ?? [], newRoute, positionInParent);\n    }\n\n    // insert new policy after / below the referenceRoute\n    if (position === 'below') {\n      parentRoute.routes = insertAfterImmutably(parentRoute.routes ?? [], newRoute, positionInParent);\n    }\n  });\n};\n\ntype RouteMatch = Route | undefined;\n\nexport function findRouteInTree(\n  routeTree: RouteWithID,\n  referenceRoute: RouteWithID\n): [matchingRoute: RouteMatch, parentRoute: RouteMatch, positionInParent: number | undefined] {\n  let matchingRoute: RouteMatch;\n  let matchingRouteParent: RouteMatch;\n  let matchingRoutePositionInParent: number | undefined;\n\n  // recurse through the tree to find the matching route, its parent and the position of the route in the parent\n  function findRouteInTree(currentRoute: RouteWithID, index: number, parentRoute: RouteWithID) {\n    if (matchingRoute) {\n      return;\n    }\n\n    if (currentRoute.id === referenceRoute.id) {\n      matchingRoute = currentRoute;\n      matchingRouteParent = parentRoute;\n      matchingRoutePositionInParent = index;\n    }\n\n    if (currentRoute.routes) {\n      currentRoute.routes.forEach((route, index) => findRouteInTree(route, index, currentRoute));\n    }\n  }\n\n  findRouteInTree(routeTree, 0, routeTree);\n\n  return [matchingRoute, matchingRouteParent, matchingRoutePositionInParent];\n}\n\nexport function cleanRouteIDs(route: Route | RouteWithID): Route {\n  return omit(\n    {\n      ...route,\n      routes: route.routes?.map((route) => cleanRouteIDs(route)),\n    },\n    'id'\n  );\n}\n\nexport function findExistingRoute(id: string, routeTree: RouteWithID): RouteWithID | undefined {\n  return routeTree.id === id ? routeTree : routeTree.routes?.find((route) => findExistingRoute(id, route));\n}\n"],"names":["useCleanup","cleanupAction","dispatch","selectorRef","parseIntegrationName","integrationName","matches","contactPointsStateDtoToModel","receiversStateDto","contactPointsState","cpState","receiverState","integrationStatusDTO","integrationType","getIntegrationType","errorsCount","prevCount","fetchContactPointsState","alertManagerSourceName","response","lastValueFrom","receiversApi","alertingApi","build","amSourceName","error","useGetContactPointsState","contactPointsStateEmpty","GrafanaMuteTimingsExporterPreview","exportFormat","onClose","muteTimingsDefinition","isFetching","alertRuleApi","downloadFileName","LoadingPlaceholder","FileExportPreview","GrafanaMuteTimingExporterPreview","muteTimingName","GrafanaMuteTimingsExporter","activeTab","setActiveTab","GrafanaExportDrawer","ALL_MUTE_TIMINGS","useExportMuteTimingsDrawer","setMuteTimingName","isExportDrawerOpen","toggleShowExportDrawer","useToggle","handleClose","handleOpen","MuteTimingActionsButtons","muteTiming","deleteMuteTiming","showDeleteDrawer","setShowDeleteDrawer","ExportDrawer","showExportDrawer","exportSupported","exportAllowed","closeDeleteModal","isGrafanaDataSource","viewOrEditHref","viewOrEditButton","Stack","Badge","Authorize","ConfirmModal","EmptyAreaWithCTA","buttonIcon","buttonLabel","buttonSize","buttonVariant","onButtonClick","text","href","showButton","styles","getStyles","commonProps","EmptyArea","Button","theme","MuteTimingsTable","hideActions","ExportAllDrawer","showExportAllDrawer","data","isLoading","useMuteTimings","items","mute","_","allowedToCreateMuteTiming","exportMuteTimingsSupported","exportMuteTimingsAllowed","columns","useColumns","Alert","Spacer","DynamicTable","_editSupported","allowedToEdit","_deleteSupported","allowedToDelete","showActions","Provisioning","NotificationPoliciesFilter","receivers","onChangeReceiver","onChangeMatchers","matchingCount","searchParams","setSearchParams","useURLSearchParams","searchInputRef","queryString","contactPoint","getNotificationPoliciesFilters","handleChangeLabels","matchers","clearFilters","receiverOptions","toOption","selectedContactPoint","option","hasFilters","inputValid","Field","Label","Tooltip","Icon","Input","event","Select","Text","findRoutesMatchingPredicate","routeTree","predicateFn","matchingRouteIdsWithPath","findMatch","route","path","newPath","previousPath","findRoutesByMatchers","labelMatchersFilter","routeMatchers","filter","matcher","receiver","useGetGrafanaReceiverTypeChecker","isOnCallEnabled","usePluginBridge","onCallApi","onCallIntegrations","useGetAmRouteReceiverWithGrafanaAppTypes","getGrafanaReceiverType","receiverToSelectableContactPointValue","AlertGroupsSummary","active","suppressed","unprocessed","statsComponents","total","AmRootRouteForm","actionButtons","onSubmit","isTimingOptionsExpanded","setIsTimingOptionsExpanded","groupByOptions","setGroupByOptions","defaultValues","handleSubmit","register","control","errors","setValue","getValues","onChange","ref","field","value","Link","opt","opts","Collapse","PromDurationInput","groupInterval","useMuteTimingOptions","selectedAlertmanager","currentData","useAlertmanagerConfig","config","interval","AmRoutesExpandedForm","defaults","formStyles","muteTimingOptions","emptyMatcher","receiversWithOnCallOnTop","onCallFirst","formAmRoute","watch","fields","append","remove","index","IconButton","Switch","FieldValidationMessage","routeTimingsFields","commonSpacing","useAddPolicyModal","handleAdd","loading","showModal","setShowModal","insertPosition","setInsertPosition","referenceRoute","setReferenceRoute","AmRouteReceivers","handleDismiss","handleShow","position","UpdatingModal","Modal","newRoute","useEditPolicyModal","handleSave","isDefaultPolicy","setIsDefaultPolicy","setRoute","useDeletePolicyModal","handleDelete","useAlertGroupsModal","alertGroups","setAlertGroups","setMatchers","formatter","setFormatter","instancesByState","instances","group","instance","Matchers","AlertGroup","isOpen","Spinner","GrafanaPoliciesExporterPreview","policiesDefinition","GrafanaPoliciesExporter","Policy","props","readOnly","provisioned","currentRoute","inheritedProperties","routesMatchingFilters","matchingInstancesPreview","onEditPolicy","onAddPolicy","onDeletePolicy","onShowAlertInstances","isAutoGenerated","continueMatching","hasMatchers","filtersApplied","matchedRoutesWithPath","matchedRoutes","hasFocus","routesPath","belongsToMatchPath","showMatchesAllLabelsWarning","actualContactPoint","contactPointErrors","getContactPointErrors","allChildPolicies","childPolicies","policy","hasChildPolicies","matchingAlertGroups","numberOfAlertInstances","isSupportedToSeeAutogeneratedChunk","isAllowedToSeeAutogeneratedChunk","isAutogeneratedPolicyRoot","isAutoGeneratedRootAndSimplifiedEnabled","showPolicyChildren","togglePolicyChildren","groupBy","muteTimings","timingOptions","POLICIES_PER_PAGE","visibleChildPolicies","setVisibleChildPolicies","dropdownMenuActions","useCreateDropdownMenuActions","isImmutablePolicy","childPoliciesBelongingToMatchPath","child","childPoliciesToRender","pageOfChildren","moreCount","showMore","ContinueMatchingIndicator","AllMatchesIndicator","AutogeneratedRootIndicator","DefaultPolicyIndicator","Errors","ConditionalWrap","ProvisionedTooltip","Dropdown","Menu","MetadataRow","childInheritedProperties","isThisChildAutoGenerated","isThisChildReadOnly","inheritedGrouping","hasInheritedProperties","noGrouping","customGrouping","singleGroup","hasMuteTimings","MetaText","ContactPointsHoverDetails","MuteTimings","TimingOptionsMeta","InheritedProperties","updatePoliciesSupported","updatePoliciesAllowed","deletePolicySupported","deletePolicyAllowed","exportPoliciesSupported","exportPoliciesAllowed","showExportAction","showEditAction","showDeleteAction","Fragment","AUTOGENERATED_ROOT_LABEL_NAME","objectMatcher","children","HoverCard","properties","key","routePropertyToLabel","routePropertyToValue","timings","timing","TextLink","groupWait","repeatInterval","metaOptions","meta","details","groupedIntegrations","type","integrations","acc","notifierStatuses","notifierErrors","status","isNotGrouping","isSingleGroup","label","color","borderColor","ActiveTab","AmRoutes","useGetAlertmanagerAlertGroupsQuery","alertmanagerApi","queryParams","setQueryParams","useQueryParams","tab","getActiveTabFromUrl","updatingTree","setUpdatingTree","contactPointFilter","setContactPointFilter","setLabelMatchersFilter","hasConfigurationAPI","isGrafanaAlertmanager","getRouteGroupsMap","useRouteGroupsMatcher","result","resultLoading","resultError","refetchAlertGroups","rootRoute","routeAlertGroupsMap","instancesPreviewError","triggerGetRouteGroupsMap","useAsyncFn","findRoutesMatchingFilters","isProvisioned","partialRoute","newRouteTree","updateRouteTree","closeEditModal","closeAddModal","addModal","openAddModal","editModal","openEditModal","deleteModal","openDeleteModal","alertInstancesModal","showAlertGroupsModal","state","numberOfMuteTimings","haveData","haveError","muteTimingsTabActive","policyTreeTabActive","GrafanaAlertmanagerDeliveryWarning","TabsBar","Tab","TabContent","filters","hasFilter","havebothFilters","fullRoute","matchingRoutesForContactPoint","routesMatchingContactPoint","matchingRoutesForLabelMatchers","routesMatchingLabelFilters","findMapIntersection","matchingRoutes","map","NotificationPoliciesPage","actions","alertmanagerActions","isAlertmanagerAction","alertSourceActions","isAlertingAction","AuthorizeAlertmanager","AuthorizeAlertsource","alertmanagerAbilties","actionsAllowed","alertSourceAbilities","abilities","_supported","allowed","action","CollapseToggle","isCollapsed","onToggle","idControlled","className","size","restOfProps","shouldWrap","wrap","_ref","currentAlertmanager","externalAlertmanager","readConfigurationStatusSupported","readConfigurationStatusAllowed","canReadConfigurationStatus","amChoiceStatus","hasActiveExternalAMs","AlertDetails","alert","isGrafanaSource","isSeeSourceButtonEnabled","annotationKey","annotationValue","AnnotationDetailsField","name","AlertGroupAlertsTable","alerts","AmAlertStateTag","labels","AlertLabels","DynamicTableWithGuidelines","getNotificationsTextColors","AlertGroupHeader","textStyles","countByStatus","statusObj","count","setIsCollapsed","receiverInGroup","PrimaryText","content","format","textDefinition","fileExportPreviewStyles","provider","onDownload","blob","formattedTextDefinition","FileExportInlineDocumentation","height","exportProvider","exportInlineDoc","title","component","onTabChange","formatProviders","grafanaRulesTabs","JsonExportProvider","raw","YamlExportProvider","HclExportProvider","allGrafanaExportProviders","jsonAndYamlGrafanaExportProviders","addTagTypes","timeIntervalsApi","queryArg","useLazyGetAlertmanagerConfigurationQuery","useLazyListNamespacedTimeIntervalQuery","useCreateNamespacedTimeIntervalMutation","useLazyReadNamespacedTimeIntervalQuery","useReplaceNamespacedTimeIntervalMutation","useDeleteNamespacedTimeIntervalMutation","parseK8sTimeInterval","item","metadata","spec","parseAmTimeInterval","provenance","useAlertmanagerIntervals","rest","alertmanager_config","muteTimingsProvenances","useGrafanaAlertmanagerIntervals","alertmanager","useK8sApi","getGrafanaTimeIntervals","intervalsResponse","getAlertmanagerTimeIntervals","configApiResponse","namespace","useCreateMuteTiming","createGrafanaTimeInterval","getAlertmanagerConfig","isGrafanaAm","timeInterval","newConfig","draft","propertyToUpdate","useGetMuteTiming","nameToFind","getGrafanaTimeInterval","k8sResponse","getAlertmanagerTimeInterval","amConfigApiResponse","useUpdateMuteTiming","replaceGrafanaTimeInterval","originalName","nameHasChanged","existingIntervalIndex","existingMuteIntervalIndex","useDeleteMuteTiming","deleteGrafanaTimeInterval","useValidateMuteTiming","getIntervals","skipValidation","TIME_RANGE_REGEX","isvalidTimeFormat","timeString","mergeTimeIntervals","alertManagerConfig","isValidStartAndEndTime","startTime","endTime","timeUnit","startDate","endDate","renderTimeIntervals","intervals","times","weekdays","days_of_month","months","years","location","weekdayString","daysString","monthsString","yearsString","NUM_MATCHERS","firstFew","hasMoreMatchers","MatcherBadge","PromDurationDocs","getPromDurationStyles","PromDurationDocsTimeUnit","unit","example","getFormStyles","TIMING_OPTIONS_DEFAULTS","cloudRulesTabs","RuleInspector","drawerStyles","onApply","formValues","RuleInspectorTabs","InspectorYamlTab","tabs","yamlTabStyle","yamlValues","alertRuleAsYaml","setAlertRuleAsYaml","rulerRule","currentFormValues","yamlFormValues","rulerRuleToRuleFormValues","YamlContentInfo","options","fetchConfig","INTEGRATION_ICONS","createWorker","routeMatcher","loadWorker","worker","comlink","e","validateWorker","disposeWorker","timeSpent","matchInstancesToRoute","instancesToMatch","matchersToArrayFieldMatchers","isRegex","selectableValueToString","selectableValue","selectableValuesToStrings","arr","emptyArrayFieldMatcher","defaultGroupBy","commonGroupByOptions","emptyRoute","addUniqueIdentifierToRoute","amRouteToFormAmRoute","id","formRoutes","subRoute","subFormRoute","objectMatchers","operator","formAmRouteToAmRoute","existing","overrideGrouping","overrideTimings","groupWaitValue","groupIntervalValue","repeatIntervalValue","INHERIT_FROM_PARENT","group_by","group_wait","group_interval","repeat_interval","object_matchers","routes","amRoute","stringToSelectableValue","str","stringsToSelectableValues","mapSelectValueToString","mapMultiSelectValueToStrings","selectableValues","promDurationValidator","duration","objectMatchersToString","repeatIntervalValidator","validRepeatInterval","validGroupInterval","repeatDuration","groupDuration","PROVENANCE_ANNOTATION","PROVENANCE_NONE","getK8sNamespace","shouldUseK8sApi","DAYS_OF_THE_WEEK","MONTHS","defaultTimeInterval","validateArrayField","validateValue","invalidText","x","entry","convertStringToArray","s","createMuteTiming","timeIntervals","disable","convertTimesToDto","v","timesToReturn","start_time","end_time","isTimeIntervalDisabled","isDisabled","INHERITABLE_KEYS","matchLabels","matchLabelsSet","labelsMatch","matchingLabel","isLabelMatch","isLabelMatchInSet","findMatchingRoutes","childMatches","matchResult","matchingChildren","normalizeRoute","normalizedRootRoute","unquoteRouteMatchers","unquoteRoute","unwrappedRootRoute","findMatchingAlertGroups","matchingGroups","matchingAlerts","matchingRoute","getInheritedProperties","parentRoute","childRoute","propertiesParentInherited","inheritableProperties","parentValue","property","parentHasValue","inheritFromValue","inheritEmptyGroupByFromParent","computeInheritedTree","parent","OperatorFunctions","lv","mv","matcherKey","matcherValue","labelValue","labelForMatcher","matchFunction","labelKey","mergePartialAmRouteWithRouteTree","partialFormRoute","findExistingRoute","findAndReplace","updatedRoute","omitRouteFromRouteTree","findRoute","findAndOmit","addRouteToReferenceRoute","draftTree","routeInTree","positionInParent","findRouteInTree","matchingRouteParent","matchingRoutePositionInParent","cleanRouteIDs"],"sourceRoot":""}