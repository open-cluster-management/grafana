{"version":3,"file":"DashboardPageProxy.d9fc643dd5dff7342bb4.js","mappings":"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","sources":["webpack://grafana/./public/app/features/dashboard-scene/saving/DashboardPrompt.tsx","webpack://grafana/./public/app/features/dashboard-scene/pages/DashboardScenePage.tsx","webpack://grafana/./public/app/core/navigation/kiosk.ts","webpack://grafana/./public/app/features/plugins/angularDeprecation/AngularDeprecationNotice.tsx","webpack://grafana/./public/app/features/plugins/angularDeprecation/AngularMigrationNotice.tsx","webpack://grafana/./public/app/features/storage/StorageFolderPage.tsx","webpack://grafana/./public/app/features/dashboard/components/AddWidgetModal/AddWidgetModal.tsx","webpack://grafana/./public/app/features/library-panels/components/SaveLibraryPanelModal/SaveLibraryPanelModal.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/state/actions.ts","webpack://grafana/./public/app/features/dashboard/components/SaveDashboard/UnsavedChangesModal.tsx","webpack://grafana/./public/app/features/dashboard/components/DashboardPrompt/DashboardPrompt.tsx","webpack://grafana/./public/app/features/dashboard/components/HelpWizard/SupportSnapshotService.ts","webpack://grafana/./public/app/features/dashboard/components/HelpWizard/HelpWizard.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/usePanelLatestData.ts","webpack://grafana/./public/app/features/inspector/InspectMetadataTab.tsx","webpack://grafana/./public/app/features/dashboard/components/Inspector/InspectContent.tsx","webpack://grafana/./public/app/features/dashboard/components/Inspector/PanelInspector.tsx","webpack://grafana/./public/app/features/variables/pickers/PickerRenderer.tsx","webpack://grafana/./public/app/features/dashboard/components/SubMenu/SubMenuItems.tsx","webpack://grafana/./public/app/features/dashboard/state/selectors.ts","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/VisualizationButton.tsx","webpack://grafana/./public/app/features/library-panels/components/ChangeLibraryPanelModal/ChangeLibraryPanelModal.tsx","webpack://grafana/./public/app/features/library-panels/components/PanelLibraryOptionsGroup/PanelLibraryOptionsGroup.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/VisualizationSelectPane.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/OptionsPane.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/PanelHeaderCorner.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/PanelEditorTableView.tsx","webpack://grafana/./public/app/features/alerting/unified/PanelAlertTab.tsx","webpack://grafana/./public/app/features/alerting/unified/components/panel-alerts-tab/NewRuleFromPanelButton.tsx","webpack://grafana/./public/app/features/alerting/unified/PanelAlertTabContent.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/PanelEditorQueries.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/PanelEditorTabs.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/state/selectors.ts","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/PanelEditor.tsx","webpack://grafana/./public/app/features/dashboard/components/SubMenu/AnnotationPicker.tsx","webpack://grafana/./public/app/features/dashboard/components/SubMenu/Annotations.tsx","webpack://grafana/./public/app/features/dashboard/components/SubMenu/DashboardLinks.tsx","webpack://grafana/./public/app/features/dashboard/components/SubMenu/SubMenu.tsx","webpack://grafana/./public/app/features/dashboard/containers/DashboardPage.tsx","webpack://grafana/./public/app/features/dashboard/containers/DashboardPageProxy.tsx","webpack://grafana/./public/app/features/storage/storage.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport * as H from 'history';\nimport { memo, useContext, useEffect, useMemo } from 'react';\nimport { Prompt } from 'react-router';\n\nimport { locationService } from '@grafana/runtime';\nimport { Dashboard } from '@grafana/schema/dist/esm/index.gen';\nimport { ModalsContext, Modal, Button, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\n\nimport { DashboardScene } from '../scene/DashboardScene';\n\ninterface DashboardPromptProps {\n  dashboard: DashboardScene;\n}\n\nexport const DashboardPrompt = memo(({ dashboard }: DashboardPromptProps) => {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const originalPath = useMemo(() => locationService.getLocation().pathname, [dashboard]);\n  const { showModal, hideModal } = useContext(ModalsContext);\n\n  useEffect(() => {\n    const handleUnload = (event: BeforeUnloadEvent) => {\n      if (ignoreChanges(dashboard, dashboard.getInitialSaveModel())) {\n        return;\n      }\n\n      if (dashboard.state.isDirty) {\n        event.preventDefault();\n        // No browser actually displays this message anymore.\n        // But Chrome requires it to be defined else the popup won't show.\n        event.returnValue = '';\n      }\n    };\n\n    window.addEventListener('beforeunload', handleUnload);\n    return () => window.removeEventListener('beforeunload', handleUnload);\n  }, [dashboard]);\n\n  const onHistoryBlock = (location: H.Location) => {\n    // const panelInEdit = dashboard.state.editPanel;\n    // const search = new URLSearchParams(location.search);\n\n    // TODO: Are we leaving panel edit & library panel?\n\n    // if (panelInEdit && panelInEdit.libraryPanel && panelInEdit.hasChanged && !search.has('editPanel')) {\n    //   showModal(SaveLibraryPanelModal, {\n    //     isUnsavedPrompt: true,\n    //     panel: dashboard.panelInEdit as PanelModelWithLibraryPanel,\n    //     folderUid: dashboard.meta.folderUid ?? '',\n    //     onConfirm: () => {\n    //       hideModal();\n    //       moveToBlockedLocationAfterReactStateUpdate(location);\n    //     },\n    //     onDiscard: () => {\n    //       dispatch(discardPanelChanges());\n    //       moveToBlockedLocationAfterReactStateUpdate(location);\n    //       hideModal();\n    //     },\n    //     onDismiss: hideModal,\n    //   });\n    //   return false;\n    // }\n\n    // Are we still on the same dashboard?\n    if (originalPath === location.pathname) {\n      return true;\n    }\n\n    if (ignoreChanges(dashboard, dashboard.getInitialSaveModel())) {\n      return true;\n    }\n\n    if (!dashboard.state.isDirty) {\n      return true;\n    }\n\n    showModal(UnsavedChangesModal, {\n      dashboard,\n      onSaveDashboardClick: () => {\n        hideModal();\n        dashboard.openSaveDrawer({\n          onSaveSuccess: () => {\n            moveToBlockedLocationAfterReactStateUpdate(location);\n          },\n        });\n      },\n\n      onDiscard: () => {\n        dashboard.exitEditMode({ skipConfirm: true });\n        hideModal();\n        moveToBlockedLocationAfterReactStateUpdate(location);\n      },\n      onDismiss: hideModal,\n    });\n\n    return false;\n  };\n\n  return <Prompt when={true} message={onHistoryBlock} />;\n});\n\nDashboardPrompt.displayName = 'DashboardPrompt';\n\nfunction moveToBlockedLocationAfterReactStateUpdate(location?: H.Location | null) {\n  if (location) {\n    setTimeout(() => locationService.push(location), 10);\n  }\n}\n\ninterface UnsavedChangesModalProps {\n  onDiscard: () => void;\n  onDismiss: () => void;\n  onSaveDashboardClick?: () => void;\n}\n\nexport const UnsavedChangesModal = ({ onDiscard, onDismiss, onSaveDashboardClick }: UnsavedChangesModalProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Modal\n      isOpen={true}\n      title=\"Unsaved changes\"\n      onDismiss={onDismiss}\n      icon=\"exclamation-triangle\"\n      className={styles.modal}\n    >\n      <h5>Do you want to save your changes?</h5>\n      <Modal.ButtonRow>\n        <Button variant=\"secondary\" onClick={onDismiss} fill=\"outline\">\n          Cancel\n        </Button>\n        <Button variant=\"destructive\" onClick={onDiscard}>\n          Discard\n        </Button>\n        <Button onClick={onSaveDashboardClick}>Save dashboard</Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n\nconst getStyles = () => ({\n  modal: css({\n    width: '500px',\n  }),\n});\n\n/**\n * For some dashboards and users changes should be ignored *\n */\nexport function ignoreChanges(current: DashboardScene | null, original?: Dashboard) {\n  if (!original) {\n    return true;\n  }\n\n  // Ignore changes if original is unsaved\n  if (original.version === 0) {\n    return true;\n  }\n\n  // Ignore changes if the user has been signed out\n  if (!contextSrv.isSignedIn) {\n    return true;\n  }\n\n  if (!current) {\n    return true;\n  }\n\n  const { canSave, fromScript, fromFile } = current.state.meta;\n  if (!contextSrv.isEditor && !canSave) {\n    return true;\n  }\n\n  return !canSave || fromScript || fromFile;\n}\n","// Libraries\nimport { useEffect, useMemo } from 'react';\n\nimport { PageLayoutType } from '@grafana/data';\nimport { UrlSyncContextProvider } from '@grafana/scenes';\nimport { Alert, Box } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport store from 'app/core/store';\nimport { DashboardPageRouteParams, DashboardPageRouteSearchParams } from 'app/features/dashboard/containers/types';\nimport { DASHBOARD_FROM_LS_KEY } from 'app/features/dashboard/state/initDashboard';\nimport { DashboardDTO, DashboardRoutes } from 'app/types';\n\nimport { DashboardPrompt } from '../saving/DashboardPrompt';\n\nimport { getDashboardScenePageStateManager } from './DashboardScenePageStateManager';\n\nexport interface Props extends GrafanaRouteComponentProps<DashboardPageRouteParams, DashboardPageRouteSearchParams> {}\n\nexport function DashboardScenePage({ match, route, queryParams, history }: Props) {\n  const stateManager = getDashboardScenePageStateManager();\n\n  const { dashboard, isLoading, loadError } = stateManager.useState();\n\n  // After scene migration is complete and we get rid of old dashboard we should refactor dashboardWatcher so this route reload is not need\n  const routeReloadCounter = (history.location.state as any)?.routeReloadCounter;\n\n  // Check if the user is coming from Explore, it's indicated byt the dashboard existence in local storage\n  const comingFromExplore = useMemo(() => {\n    return Boolean(store.getObject<DashboardDTO>(DASHBOARD_FROM_LS_KEY));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [match.params.uid, match.params.slug, match.params.type]);\n\n  useEffect(() => {\n    if (route.routeName === DashboardRoutes.Normal && match.params.type === 'snapshot') {\n      stateManager.loadSnapshot(match.params.slug!);\n    } else {\n      stateManager.loadDashboard({\n        uid: match.params.uid ?? '',\n        route: route.routeName as DashboardRoutes,\n        urlFolderUid: queryParams.folderUid,\n        keepDashboardFromExploreInLocalStorage: false,\n      });\n    }\n\n    return () => {\n      stateManager.clearState();\n    };\n  }, [\n    stateManager,\n    match.params.uid,\n    route.routeName,\n    queryParams.folderUid,\n    routeReloadCounter,\n    match.params.slug,\n    match.params.type,\n  ]);\n\n  // Effect that handles explore->dashboards workflow\n  useEffect(() => {\n    // When coming from explore and adding to an existing dashboard, we should enter edit mode\n    if (dashboard && comingFromExplore) {\n      if (route.routeName !== DashboardRoutes.New) {\n        dashboard.onEnterEditMode(comingFromExplore);\n      }\n    }\n  }, [dashboard, comingFromExplore, route.routeName]);\n\n  if (!dashboard) {\n    return (\n      <Page navId=\"dashboards/browse\" layout={PageLayoutType.Canvas} data-testid={'dashboard-scene-page'}>\n        <Box paddingY={4} display=\"flex\" direction=\"column\" alignItems=\"center\">\n          {isLoading && <PageLoader />}\n          {loadError && (\n            <Alert title=\"Dashboard failed to load\" severity=\"error\" data-testid=\"dashboard-not-found\">\n              {loadError}\n            </Alert>\n          )}\n        </Box>\n      </Page>\n    );\n  }\n\n  // Do not render anything when transitioning from one dashboard to another\n  if (\n    match.params.type !== 'snapshot' &&\n    dashboard.state.uid &&\n    dashboard.state.uid !== match.params.uid &&\n    route.routeName !== DashboardRoutes.Home\n  ) {\n    return null;\n  }\n\n  return (\n    <UrlSyncContextProvider scene={dashboard}>\n      <dashboard.Component model={dashboard} key={dashboard.state.key} />\n      <DashboardPrompt dashboard={dashboard} />\n    </UrlSyncContextProvider>\n  );\n}\n\nexport default DashboardScenePage;\n","import { UrlQueryMap } from '@grafana/data';\n\nimport { KioskMode } from '../../types';\n\n// TODO Remove after topnav feature toggle is permanent and old NavBar is removed\nexport function getKioskMode(queryParams: UrlQueryMap): KioskMode | null {\n  switch (queryParams.kiosk) {\n    case 'tv':\n      return KioskMode.TV;\n    //  legacy support\n    case '1':\n    case true:\n      return KioskMode.Full;\n    default:\n      return null;\n  }\n}\n","import { reportInteraction } from '@grafana/runtime';\nimport { Alert, Button } from '@grafana/ui';\nimport { LocalStorageValueProvider } from 'app/core/components/LocalStorageValueProvider';\n\nconst LOCAL_STORAGE_KEY_PREFIX = 'grafana.angularDeprecation.dashboardNoticeAndMigration.isDismissed';\n\nfunction localStorageKey(dashboardUid: string): string {\n  return LOCAL_STORAGE_KEY_PREFIX + '.' + dashboardUid;\n}\n\nexport interface Props {\n  dashboardUid: string;\n  showAutoMigrateLink?: boolean;\n}\n\nfunction tryMigration() {\n  const autoMigrateParam = '__feature.autoMigrateOldPanels';\n  const url = new URL(window.location.toString());\n  if (!url.searchParams.has(autoMigrateParam)) {\n    url.searchParams.append(autoMigrateParam, 'true');\n  }\n  window.open(url.toString(), '_self');\n}\n\nexport function AngularDeprecationNotice({ dashboardUid, showAutoMigrateLink }: Props) {\n  return (\n    <LocalStorageValueProvider<boolean> storageKey={localStorageKey(dashboardUid)} defaultValue={false}>\n      {(isDismissed, onDismiss) => {\n        if (isDismissed) {\n          return null;\n        }\n        return (\n          <div>\n            <Alert\n              severity=\"warning\"\n              title=\"This dashboard depends on Angular, which is deprecated and will stop working in future releases of Grafana.\"\n              onRemove={() => {\n                reportInteraction('angular_deprecation_notice_dismissed');\n                onDismiss(true);\n              }}\n            >\n              <div className=\"markdown-html\">\n                <a\n                  href=\"https://grafana.com/docs/grafana/latest/developers/angular_deprecation/\"\n                  className=\"external-link\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  Read our deprecation notice and migration advice.\n                </a>\n                <br />\n\n                {showAutoMigrateLink && (\n                  <Button fill=\"outline\" size=\"sm\" onClick={tryMigration} style={{ marginTop: 10 }}>\n                    Try migration\n                  </Button>\n                )}\n              </div>\n            </Alert>\n          </div>\n        );\n      }}\n    </LocalStorageValueProvider>\n  );\n}\n","import { css } from '@emotion/css';\nimport { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, useStyles2 } from '@grafana/ui';\n\nimport { migrationFeatureFlags } from './utils';\n\ninterface Props {\n  dashboardUid: string;\n}\n\nconst revertAutoMigrateUrlFlag = () => {\n  const url = new URL(window.location.toString());\n  const urlParams = new URLSearchParams(url.search);\n\n  urlParams.forEach((value, key) => {\n    if (key.startsWith('__feature.')) {\n      const featureName = key.substring(10);\n      if (migrationFeatureFlags.has(featureName)) {\n        urlParams.delete(key);\n      }\n    }\n  });\n\n  window.location.href = new URL(url.origin + url.pathname + '?' + urlParams.toString()).toString();\n};\n\nconst reportIssue = () => {\n  window.open(\n    'https://github.com/grafana/grafana/issues/new?assignees=&labels=&projects=&template=0-bug-report.yaml&title=Product+Area%3A+Short+description+of+bug'\n  );\n};\n\nexport function AngularMigrationNotice({ dashboardUid }: Props) {\n  const styles = useStyles2(getStyles);\n\n  const [showAlert, setShowAlert] = useState(true);\n\n  if (showAlert) {\n    return (\n      <Alert\n        severity=\"info\"\n        title=\"This dashboard was migrated from Angular. Please make sure everything is behaving as expected and save and refresh this dashboard to persist the migration.\"\n        onRemove={() => setShowAlert(false)}\n      >\n        <div className=\"markdown-html\">\n          <Button fill=\"outline\" size=\"sm\" className={styles.linkButton} onClick={reportIssue}>\n            Report issue\n          </Button>\n          <Button fill=\"outline\" size=\"sm\" className={styles.linkButton} onClick={revertAutoMigrateUrlFlag}>\n            Revert migration\n          </Button>\n        </div>\n      </Alert>\n    );\n  }\n\n  return null;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  linkButton: css({\n    marginRight: 10,\n  }),\n});\n","import { useAsync } from 'react-use';\n\nimport { DataFrame, NavModel, NavModelItem } from '@grafana/data';\nimport { Card, Icon, Spinner } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nimport { getGrafanaStorage } from './storage';\n\nexport interface Props extends GrafanaRouteComponentProps<{ slug: string }> {}\n\nexport function StorageFolderPage(props: Props) {\n  const slug = props.match.params.slug ?? '';\n  const listing = useAsync((): Promise<DataFrame | undefined> => {\n    return getGrafanaStorage().list('content/' + slug);\n  }, [slug]);\n\n  const childRoot = slug.length > 0 ? `g/${slug}/` : 'g/';\n  const pageNav = getPageNavFromSlug(slug);\n\n  const renderListing = () => {\n    if (listing.value) {\n      const names = listing.value.fields[0].values;\n      return names.map((item: string) => {\n        let name = item;\n        const isFolder = name.indexOf('.') < 0;\n        const isDash = !isFolder && name.endsWith('.json');\n        const url = `${childRoot}${name}`;\n\n        return (\n          <Card key={name} href={isFolder || isDash ? url : undefined}>\n            <Card.Heading>{name}</Card.Heading>\n            <Card.Figure>\n              <Icon name={isFolder ? 'folder' : isDash ? 'gf-grid' : 'file-alt'} size=\"sm\" />\n            </Card.Figure>\n          </Card>\n        );\n      });\n    }\n    if (listing.loading) {\n      return <Spinner />;\n    }\n    return <div>?</div>;\n  };\n\n  const navModel = getRootContentNavModel();\n\n  return (\n    <Page navModel={navModel} pageNav={pageNav}>\n      {renderListing()}\n    </Page>\n  );\n}\n\nexport function getPageNavFromSlug(slug: string) {\n  const parts = slug.split('/');\n  let pageNavs: NavModelItem[] = [];\n  let url = 'g';\n  let lastPageNav: NavModelItem | undefined;\n\n  for (let i = 0; i < parts.length; i++) {\n    url += `/${parts[i]}`;\n    pageNavs.push({ text: parts[i], url, parentItem: lastPageNav });\n    lastPageNav = pageNavs[pageNavs.length - 1];\n  }\n\n  return lastPageNav;\n}\n\nexport function getRootContentNavModel(): NavModel {\n  return { main: { text: 'C:' }, node: { text: 'Content', url: '/g' } };\n}\n\nexport default StorageFolderPage;\n","import { css } from '@emotion/css';\nimport { useMemo, useState } from 'react';\n\nimport { GrafanaTheme2, PanelPluginMeta } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { CustomScrollbar, Icon, Input, Modal, useStyles2 } from '@grafana/ui';\nimport { onCreateNewWidgetPanel } from 'app/features/dashboard/utils/dashboard';\nimport { VizTypePickerPlugin } from 'app/features/panel/components/VizTypePicker/VizTypePickerPlugin';\nimport { filterPluginList, getWidgetPluginMeta } from 'app/features/panel/state/util';\nimport { useSelector } from 'app/types';\n\nexport const AddWidgetModal = () => {\n  const styles = useStyles2(getStyles);\n  const [searchQuery, setSearchQuery] = useState('');\n  const dashboard = useSelector((state) => state.dashboard.getModel());\n\n  const widgetsList: PanelPluginMeta[] = useMemo(() => {\n    return getWidgetPluginMeta();\n  }, []);\n\n  const filteredWidgetsTypes = useMemo((): PanelPluginMeta[] => {\n    return filterPluginList(widgetsList, searchQuery);\n  }, [widgetsList, searchQuery]);\n\n  const onDismiss = () => {\n    locationService.partial({ addWidget: null });\n  };\n\n  return (\n    <Modal\n      title=\"Select widget type\"\n      closeOnEscape\n      closeOnBackdropClick\n      isOpen\n      className={styles.modal}\n      onClickBackdrop={onDismiss}\n      onDismiss={onDismiss}\n    >\n      <Input\n        type=\"search\"\n        autoFocus\n        className={styles.searchInput}\n        value={searchQuery}\n        prefix={<Icon name=\"search\" />}\n        placeholder=\"Search widget\"\n        onChange={(e) => {\n          setSearchQuery(e.currentTarget.value);\n        }}\n      />\n      <CustomScrollbar>\n        <div className={styles.grid}>\n          {filteredWidgetsTypes.map((plugin, index) => (\n            <VizTypePickerPlugin\n              disabled={false}\n              key={plugin.id}\n              isCurrent={false}\n              plugin={plugin}\n              onClick={(e) => {\n                const id = onCreateNewWidgetPanel(dashboard!, plugin.id);\n                locationService.partial({ editPanel: id, addWidget: null });\n              }}\n            />\n          ))}\n        </div>\n      </CustomScrollbar>\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  modal: css({\n    width: '65%',\n    maxWidth: '960px',\n    [theme.breakpoints.down('md')]: {\n      width: '100%',\n    },\n  }),\n  searchInput: css({\n    marginBottom: theme.spacing(2),\n  }),\n  grid: css({\n    display: 'grid',\n    gridGap: theme.spacing(1),\n  }),\n});\n","import { useCallback, useState } from 'react';\nimport { useAsync, useDebounce } from 'react-use';\n\nimport { Button, Icon, Input, Modal, useStyles2 } from '@grafana/ui';\n\nimport { getConnectedDashboards } from '../../state/api';\nimport { getModalStyles } from '../../styles';\nimport { PanelModelWithLibraryPanel } from '../../types';\nimport { usePanelSave } from '../../utils/usePanelSave';\n\ninterface Props {\n  panel: PanelModelWithLibraryPanel;\n  folderUid: string;\n  isUnsavedPrompt?: boolean;\n  onConfirm: () => void;\n  onDismiss: () => void;\n  onDiscard: () => void;\n}\n\nexport const SaveLibraryPanelModal = ({\n  panel,\n  folderUid,\n  isUnsavedPrompt,\n  onDismiss,\n  onConfirm,\n  onDiscard,\n}: Props) => {\n  const [searchString, setSearchString] = useState('');\n  const dashState = useAsync(async () => {\n    const searchHits = await getConnectedDashboards(panel.libraryPanel.uid);\n    if (searchHits.length > 0) {\n      return searchHits.map((dash) => dash.title);\n    }\n\n    return [];\n  }, [panel.libraryPanel.uid]);\n\n  const [filteredDashboards, setFilteredDashboards] = useState<string[]>([]);\n  useDebounce(\n    () => {\n      if (!dashState.value) {\n        return setFilteredDashboards([]);\n      }\n\n      return setFilteredDashboards(\n        dashState.value.filter((dashName) => dashName.toLowerCase().includes(searchString.toLowerCase()))\n      );\n    },\n    300,\n    [dashState.value, searchString]\n  );\n\n  const { saveLibraryPanel } = usePanelSave();\n  const styles = useStyles2(getModalStyles);\n  const discardAndClose = useCallback(() => {\n    onDiscard();\n  }, [onDiscard]);\n\n  const title = isUnsavedPrompt ? 'Unsaved library panel changes' : 'Save library panel';\n\n  return (\n    <Modal title={title} icon=\"save\" onDismiss={onDismiss} isOpen={true}>\n      <div>\n        <p className={styles.textInfo}>\n          {'This update will affect '}\n          <strong>\n            {panel.libraryPanel.meta?.connectedDashboards}{' '}\n            {panel.libraryPanel.meta?.connectedDashboards === 1 ? 'dashboard' : 'dashboards'}.\n          </strong>\n          The following dashboards using the panel will be affected:\n        </p>\n        <Input\n          className={styles.dashboardSearch}\n          prefix={<Icon name=\"search\" />}\n          placeholder=\"Search affected dashboards\"\n          value={searchString}\n          onChange={(e) => setSearchString(e.currentTarget.value)}\n        />\n        {dashState.loading ? (\n          <p>Loading connected dashboards...</p>\n        ) : (\n          <table className={styles.myTable}>\n            <thead>\n              <tr>\n                <th>Dashboard name</th>\n              </tr>\n            </thead>\n            <tbody>\n              {filteredDashboards.map((dashName, i) => (\n                <tr key={`dashrow-${i}`}>\n                  <td>{dashName}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n        <Modal.ButtonRow>\n          <Button variant=\"secondary\" onClick={onDismiss} fill=\"outline\">\n            Cancel\n          </Button>\n          {isUnsavedPrompt && (\n            <Button variant=\"destructive\" onClick={discardAndClose}>\n              Discard\n            </Button>\n          )}\n          <Button\n            onClick={() => {\n              saveLibraryPanel(panel, folderUid).then(() => {\n                onConfirm();\n              });\n            }}\n          >\n            Update all\n          </Button>\n        </Modal.ButtonRow>\n      </div>\n    </Modal>\n  );\n};\n","import { pick } from 'lodash';\n\nimport store from 'app/core/store';\nimport { removePanel } from 'app/features/dashboard/utils/panel';\nimport { cleanUpPanelState } from 'app/features/panel/state/actions';\nimport { panelModelAndPluginReady } from 'app/features/panel/state/reducers';\nimport { ThunkResult } from 'app/types';\n\nimport { DashboardModel, PanelModel } from '../../../state';\n\nimport {\n  closeEditor,\n  PANEL_EDITOR_UI_STATE_STORAGE_KEY,\n  PanelEditorUIState,\n  setDiscardChanges,\n  setPanelEditorUIState,\n  updateEditorInitState,\n} from './reducers';\n\nexport function initPanelEditor(sourcePanel: PanelModel, dashboard: DashboardModel): ThunkResult<void> {\n  return async (dispatch) => {\n    const panel = dashboard.initEditPanel(sourcePanel);\n\n    dispatch(\n      updateEditorInitState({\n        panel,\n        sourcePanel,\n      })\n    );\n  };\n}\n\nexport function discardPanelChanges(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const { getPanel } = getStore().panelEditor;\n    getPanel().configRev = 0;\n    dispatch(setDiscardChanges(true));\n  };\n}\n\nexport function updateDuplicateLibraryPanels(\n  modifiedPanel: PanelModel,\n  dashboard: DashboardModel | null\n): ThunkResult<void> {\n  return (dispatch) => {\n    if (modifiedPanel.libraryPanel?.uid === undefined || !dashboard) {\n      return;\n    }\n\n    const modifiedSaveModel = modifiedPanel.getSaveModel();\n    for (const panel of dashboard.panels) {\n      if (skipPanelUpdate(modifiedPanel, panel)) {\n        continue;\n      }\n\n      panel.restoreModel({\n        ...modifiedSaveModel,\n        ...pick(panel, 'gridPos', 'id'),\n      });\n\n      // Loaded plugin is not included in the persisted properties\n      // So is not handled by restoreModel\n      const pluginChanged = panel.plugin?.meta.id !== modifiedPanel.plugin?.meta.id;\n      panel.plugin = modifiedPanel.plugin;\n      panel.configRev++;\n\n      if (pluginChanged) {\n        panel.generateNewKey();\n\n        dispatch(panelModelAndPluginReady({ key: panel.key, plugin: panel.plugin! }));\n      }\n\n      // Resend last query result on source panel query runner\n      // But do this after the panel edit editor exit process has completed\n      setTimeout(() => {\n        panel.getQueryRunner().useLastResultFrom(modifiedPanel.getQueryRunner());\n      }, 20);\n    }\n\n    if (modifiedPanel.repeat) {\n      // We skip any repeated library panels so we need to update them by calling processRepeats\n      // But do this after the panel edit editor exit process has completed\n      setTimeout(() => dashboard.processRepeats(), 20);\n    }\n  };\n}\n\nexport function skipPanelUpdate(modifiedPanel: PanelModel, panelToUpdate: PanelModel): boolean {\n  // don't update library panels that aren't of the same type\n  if (panelToUpdate.libraryPanel?.uid !== modifiedPanel.libraryPanel!.uid) {\n    return true;\n  }\n\n  // don't update the modifiedPanel twice\n  if (panelToUpdate.id && panelToUpdate.id === modifiedPanel.id) {\n    return true;\n  }\n\n  // don't update library panels that are repeated\n  if (panelToUpdate.repeatPanelId) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function exitPanelEditor(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const dashboard = getStore().dashboard.getModel();\n    const { getPanel, getSourcePanel, shouldDiscardChanges } = getStore().panelEditor;\n    const panel = getPanel();\n\n    if (dashboard) {\n      dashboard.exitPanelEditor();\n    }\n\n    const sourcePanel = getSourcePanel();\n    if (hasPanelChangedInPanelEdit(panel) && !shouldDiscardChanges) {\n      const modifiedSaveModel = panel.getSaveModel();\n      const panelTypeChanged = sourcePanel.type !== panel.type;\n\n      dispatch(updateDuplicateLibraryPanels(panel, dashboard));\n\n      sourcePanel.restoreModel(modifiedSaveModel);\n      sourcePanel.configRev++; // force check the configs\n\n      if (panelTypeChanged) {\n        // Loaded plugin is not included in the persisted properties so is not handled by restoreModel\n        sourcePanel.plugin = panel.plugin;\n        sourcePanel.generateNewKey();\n\n        await dispatch(panelModelAndPluginReady({ key: sourcePanel.key, plugin: panel.plugin! }));\n      }\n\n      // Resend last query result on source panel query runner\n      // But do this after the panel edit editor exit process has completed\n      setTimeout(() => {\n        sourcePanel.getQueryRunner().useLastResultFrom(panel.getQueryRunner());\n        sourcePanel.render();\n\n        // If all changes where saved then reset configRev after applying changes\n        if (panel.hasSavedPanelEditChange && !panel.hasChanged) {\n          sourcePanel.configRev = 0;\n        }\n      }, 20);\n    }\n\n    // A new panel is only new until the first time we exit the panel editor\n    if (sourcePanel.isNew) {\n      if (!shouldDiscardChanges) {\n        delete sourcePanel.isNew;\n      } else {\n        dashboard && removePanel(dashboard, sourcePanel, true);\n      }\n    }\n\n    dispatch(cleanUpPanelState(panel.key));\n    dispatch(closeEditor());\n  };\n}\n\nfunction hasPanelChangedInPanelEdit(panel: PanelModel) {\n  return panel.hasChanged || panel.hasSavedPanelEditChange || panel.isAngularPlugin();\n}\n\nexport function updatePanelEditorUIState(uiState: Partial<PanelEditorUIState>): ThunkResult<void> {\n  return (dispatch, getStore) => {\n    const nextState = { ...getStore().panelEditor.ui, ...uiState };\n    dispatch(setPanelEditorUIState(nextState));\n    try {\n      store.setObject(PANEL_EDITOR_UI_STATE_STORAGE_KEY, nextState);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n}\n","import { css } from '@emotion/css';\n\nimport { Button, Modal } from '@grafana/ui';\n\nimport { DashboardModel } from '../../state';\n\nimport { SaveDashboardButton } from './SaveDashboardButton';\n\ninterface UnsavedChangesModalProps {\n  dashboard: DashboardModel;\n  onDiscard: () => void;\n  onDismiss: () => void;\n  onSaveSuccess?: () => void;\n}\n\nexport const UnsavedChangesModal = ({ dashboard, onSaveSuccess, onDiscard, onDismiss }: UnsavedChangesModalProps) => {\n  return (\n    <Modal\n      isOpen={true}\n      title=\"Unsaved changes\"\n      onDismiss={onDismiss}\n      icon=\"exclamation-triangle\"\n      className={css({\n        width: '500px',\n      })}\n    >\n      <h5>Do you want to save your changes?</h5>\n      <Modal.ButtonRow>\n        <Button variant=\"secondary\" onClick={onDismiss} fill=\"outline\">\n          Cancel\n        </Button>\n        <Button variant=\"destructive\" onClick={onDiscard}>\n          Discard\n        </Button>\n        <SaveDashboardButton dashboard={dashboard} onSaveSuccess={onSaveSuccess} />\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n","import * as H from 'history';\nimport { find } from 'lodash';\nimport { memo, useContext, useEffect, useState } from 'react';\nimport { Prompt } from 'react-router-dom';\n\nimport { locationService } from '@grafana/runtime';\nimport { Dashboard } from '@grafana/schema';\nimport { ModalsContext } from '@grafana/ui';\nimport { appEvents } from 'app/core/app_events';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { SaveLibraryPanelModal } from 'app/features/library-panels/components/SaveLibraryPanelModal/SaveLibraryPanelModal';\nimport { PanelModelWithLibraryPanel } from 'app/features/library-panels/types';\nimport { useDispatch } from 'app/types';\nimport { DashboardSavedEvent } from 'app/types/events';\n\nimport { DashboardModel } from '../../state/DashboardModel';\nimport { discardPanelChanges, exitPanelEditor } from '../PanelEditor/state/actions';\nimport { UnsavedChangesModal } from '../SaveDashboard/UnsavedChangesModal';\n\nexport interface Props {\n  dashboard: DashboardModel;\n}\n\ninterface State {\n  original: object | null;\n  originalPath?: string;\n}\n\nexport const DashboardPrompt = memo(({ dashboard }: Props) => {\n  const [state, setState] = useState<State>({ original: null });\n  const dispatch = useDispatch();\n  const { original, originalPath } = state;\n  const { showModal, hideModal } = useContext(ModalsContext);\n\n  useEffect(() => {\n    // This timeout delay is to wait for panels to load and migrate scheme before capturing the original state\n    // This is to minimize unsaved changes warnings due to automatic schema migrations\n    const timeoutId = setTimeout(() => {\n      const originalPath = locationService.getLocation().pathname;\n      const original = dashboard.getSaveModelCloneOld();\n      setState({ originalPath, original });\n    }, 1000);\n\n    const savedEventUnsub = appEvents.subscribe(DashboardSavedEvent, () => {\n      const original = dashboard.getSaveModelCloneOld();\n      setState({ originalPath, original });\n    });\n\n    return () => {\n      clearTimeout(timeoutId);\n      savedEventUnsub.unsubscribe();\n    };\n  }, [dashboard, originalPath]);\n\n  useEffect(() => {\n    const handleUnload = (event: BeforeUnloadEvent) => {\n      if (ignoreChanges(dashboard, original)) {\n        return;\n      }\n      if (hasChanges(dashboard, original)) {\n        event.preventDefault();\n        // No browser actually displays this message anymore.\n        // But Chrome requires it to be defined else the popup won't show.\n        event.returnValue = '';\n      }\n    };\n    window.addEventListener('beforeunload', handleUnload);\n    return () => window.removeEventListener('beforeunload', handleUnload);\n  }, [dashboard, original]);\n\n  const onHistoryBlock = (location: H.Location) => {\n    const panelInEdit = dashboard.panelInEdit;\n    const search = new URLSearchParams(location.search);\n\n    // Are we leaving panel edit & library panel?\n    if (panelInEdit && panelInEdit.libraryPanel && panelInEdit.hasChanged && !search.has('editPanel')) {\n      showModal(SaveLibraryPanelModal, {\n        isUnsavedPrompt: true,\n        panel: dashboard.panelInEdit as PanelModelWithLibraryPanel,\n        folderUid: dashboard.meta.folderUid ?? '',\n        onConfirm: () => {\n          hideModal();\n          moveToBlockedLocationAfterReactStateUpdate(location);\n        },\n        onDiscard: () => {\n          dispatch(discardPanelChanges());\n          moveToBlockedLocationAfterReactStateUpdate(location);\n          hideModal();\n        },\n        onDismiss: hideModal,\n      });\n      return false;\n    }\n\n    // Are we still on the same dashboard?\n    if (originalPath === location.pathname || !original) {\n      // This is here due to timing reasons we want the exit panel editor state changes to happen before router update\n      if (panelInEdit && !search.has('editPanel')) {\n        dispatch(exitPanelEditor());\n      }\n\n      return true;\n    }\n\n    if (ignoreChanges(dashboard, original)) {\n      return true;\n    }\n\n    if (!hasChanges(dashboard, original)) {\n      return true;\n    }\n\n    showModal(UnsavedChangesModal, {\n      dashboard: dashboard,\n      onSaveSuccess: () => {\n        hideModal();\n        moveToBlockedLocationAfterReactStateUpdate(location);\n      },\n      onDiscard: () => {\n        setState({ ...state, original: null });\n        hideModal();\n        moveToBlockedLocationAfterReactStateUpdate(location);\n      },\n      onDismiss: hideModal,\n    });\n\n    return false;\n  };\n\n  return <Prompt when={true} message={onHistoryBlock} />;\n});\n\nDashboardPrompt.displayName = 'DashboardPrompt';\n\nfunction moveToBlockedLocationAfterReactStateUpdate(location?: H.Location | null) {\n  if (location) {\n    setTimeout(() => locationService.push(location), 10);\n  }\n}\n\n/**\n * For some dashboards and users changes should be ignored *\n */\nexport function ignoreChanges(current: DashboardModel | null, original: object | null) {\n  if (!original) {\n    return true;\n  }\n\n  // Ignore changes if original is unsaved\n  if ((original as DashboardModel).version === 0) {\n    return true;\n  }\n\n  // Ignore changes if the user has been signed out\n  if (!contextSrv.isSignedIn) {\n    return true;\n  }\n\n  if (!current) {\n    return true;\n  }\n\n  const { canSave, fromScript, fromFile } = current.meta;\n  if (!contextSrv.isEditor && !canSave) {\n    return true;\n  }\n\n  return !canSave || fromScript || fromFile;\n}\n\n/**\n * Remove stuff that should not count in diff\n */\nfunction cleanDashboardFromIgnoredChanges(dashData: Dashboard) {\n  // need to new up the domain model class to get access to expand / collapse row logic\n  const model = new DashboardModel(dashData);\n\n  // Expand all rows before making comparison. This is required because row expand / collapse\n  // change order of panel array and panel positions.\n  model.expandRows();\n\n  const dash = model.getSaveModelClone();\n\n  // ignore time and refresh\n  delete dash.time;\n  delete dash.refresh;\n  dash.schemaVersion = 0;\n  delete dash.timezone;\n\n  dash.panels = [];\n\n  // ignore template variable values\n  if (dash.templating?.list) {\n    for (const variable of dash.templating.list) {\n      delete variable.current;\n      delete variable.options;\n      // @ts-expect-error\n      delete variable.filters;\n    }\n  }\n\n  return dash;\n}\n\n// TODO: Adapt original to be Dashboard type instead\nexport function hasChanges(current: DashboardModel, original: unknown) {\n  if (current.hasUnsavedChanges()) {\n    return true;\n  }\n\n  // TODO: Make getSaveModelClone return Dashboard type instead\n  const currentClean = cleanDashboardFromIgnoredChanges(current.getSaveModelCloneOld() as unknown as Dashboard);\n  const originalClean = cleanDashboardFromIgnoredChanges(original as Dashboard);\n\n  const currentTimepicker = find((currentClean as any).nav, { type: 'timepicker' });\n  const originalTimepicker = find((originalClean as any).nav, { type: 'timepicker' });\n\n  if (currentTimepicker && originalTimepicker) {\n    currentTimepicker.now = originalTimepicker.now;\n  }\n\n  const currentJson = JSON.stringify(currentClean, null);\n  const originalJson = JSON.stringify(originalClean, null);\n\n  return currentJson !== originalJson;\n}\n","import saveAs from 'file-saver';\n\nimport { dateTimeFormat, formattedValueToString, getValueFormat, SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { SceneObject } from '@grafana/scenes';\nimport { StateManagerBase } from 'app/core/services/StateManagerBase';\nimport { Randomize } from 'app/features/dashboard-scene/inspect/HelpWizard/randomizer';\nimport { createDashboardSceneFromDashboardModel } from 'app/features/dashboard-scene/serialization/transformSaveModelToScene';\n\nimport { getTimeSrv } from '../../services/TimeSrv';\nimport { DashboardModel, PanelModel } from '../../state';\nimport { setDashboardToFetchFromLocalStorage } from '../../state/initDashboard';\n\nimport { getDebugDashboard, getGithubMarkdown } from './utils';\n\ninterface SupportSnapshotState {\n  currentTab: SnapshotTab;\n  showMessage: ShowMessage;\n  options: Array<SelectableValue<ShowMessage>>;\n  snapshotText: string;\n  markdownText: string;\n  snapshotSize?: string;\n  randomize: Randomize;\n  loading?: boolean;\n  error?: {\n    title: string;\n    message: string;\n  };\n  panel: PanelModel;\n  panelTitle: string;\n\n  // eslint-disable-next-line\n  snapshot?: any;\n  snapshotUpdate: number;\n  scene?: SceneObject;\n}\n\nexport enum SnapshotTab {\n  Support,\n  Data,\n}\n\nexport enum ShowMessage {\n  PanelSnapshot,\n  GithubComment,\n}\n\nexport class SupportSnapshotService extends StateManagerBase<SupportSnapshotState> {\n  constructor(panel: PanelModel) {\n    super({\n      panel,\n      panelTitle: panel.replaceVariables(panel.title, undefined, 'text') || 'Panel',\n      currentTab: SnapshotTab.Support,\n      showMessage: ShowMessage.GithubComment,\n      snapshotText: '',\n      markdownText: '',\n      randomize: {},\n      snapshotUpdate: 0,\n      options: [\n        {\n          label: 'GitHub comment',\n          description: 'Copy and paste this message into a GitHub issue or comment',\n          value: ShowMessage.GithubComment,\n        },\n        {\n          label: 'Panel support snapshot',\n          description: 'Dashboard JSON used to help troubleshoot visualization issues',\n          value: ShowMessage.PanelSnapshot,\n        },\n      ],\n    });\n  }\n\n  async buildDebugDashboard() {\n    const { panel, randomize, snapshotUpdate } = this.state;\n    const snapshot = await getDebugDashboard(panel, randomize, getTimeSrv().timeRange());\n    const snapshotText = JSON.stringify(snapshot, null, 2);\n    const markdownText = getGithubMarkdown(panel, snapshotText);\n    const snapshotSize = formattedValueToString(getValueFormat('bytes')(snapshotText?.length ?? 0));\n\n    let scene: SceneObject | undefined = undefined;\n\n    if (!panel.isAngularPlugin()) {\n      try {\n        const oldModel = new DashboardModel(snapshot, { isEmbedded: true });\n        const dash = createDashboardSceneFromDashboardModel(oldModel, snapshot);\n        scene = dash.state.body; // skip the wrappers\n      } catch (ex) {\n        console.log('Error creating scene:', ex);\n      }\n    }\n\n    this.setState({ snapshot, snapshotText, markdownText, snapshotSize, snapshotUpdate: snapshotUpdate + 1, scene });\n  }\n\n  onCurrentTabChange = (value: SnapshotTab) => {\n    this.setState({ currentTab: value });\n  };\n\n  onShowMessageChange = (value: SelectableValue<ShowMessage>) => {\n    this.setState({ showMessage: value.value! });\n  };\n\n  onGetMarkdownForClipboard = () => {\n    const { markdownText } = this.state;\n    const maxLen = Math.pow(1024, 2) * 1.5; // 1.5MB\n\n    if (markdownText.length > maxLen) {\n      this.setState({\n        error: {\n          title: 'Copy to clipboard failed',\n          message: 'Snapshot is too large, consider download and attaching a file instead',\n        },\n      });\n\n      return '';\n    }\n\n    return markdownText;\n  };\n\n  onDownloadDashboard = () => {\n    const { snapshotText, panelTitle } = this.state;\n    const blob = new Blob([snapshotText], {\n      type: 'text/plain',\n    });\n    const fileName = `debug-${panelTitle}-${dateTimeFormat(new Date())}.json.txt`;\n    saveAs(blob, fileName);\n  };\n\n  onSetSnapshotText = (snapshotText: string) => {\n    this.setState({ snapshotText });\n  };\n\n  onToggleRandomize = (k: keyof Randomize) => {\n    const { randomize } = this.state;\n    this.setState({ randomize: { ...randomize, [k]: !randomize[k] } });\n  };\n\n  onPreviewDashboard = () => {\n    const { snapshot } = this.state;\n    if (snapshot) {\n      setDashboardToFetchFromLocalStorage({ meta: {}, dashboard: snapshot });\n      global.open(config.appUrl + 'dashboard/new', '_blank');\n    }\n  };\n}\n","import { css } from '@emotion/css';\nimport { useMemo, useEffect } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { PanelPlugin, GrafanaTheme2, FeatureState } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport {\n  Drawer,\n  Tab,\n  TabsBar,\n  CodeEditor,\n  useStyles2,\n  Field,\n  HorizontalGroup,\n  InlineSwitch,\n  Button,\n  Spinner,\n  Alert,\n  FeatureBadge,\n  Select,\n  ClipboardButton,\n  Icon,\n  Stack,\n} from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { PanelModel } from 'app/features/dashboard/state';\nimport { AccessControlAction } from 'app/types';\n\nimport { ShowMessage, SnapshotTab, SupportSnapshotService } from './SupportSnapshotService';\n\ninterface Props {\n  panel: PanelModel;\n  plugin?: PanelPlugin | null;\n  onClose: () => void;\n}\n\nexport function HelpWizard({ panel, plugin, onClose }: Props) {\n  const styles = useStyles2(getStyles);\n  const service = useMemo(() => new SupportSnapshotService(panel), [panel]);\n\n  const {\n    currentTab,\n    loading,\n    error,\n    options,\n    showMessage,\n    snapshotSize,\n    markdownText,\n    snapshotText,\n    randomize,\n    panelTitle,\n    scene,\n  } = service.useState();\n\n  useEffect(() => {\n    service.buildDebugDashboard();\n  }, [service, plugin, randomize]);\n\n  if (!plugin) {\n    return null;\n  }\n\n  const tabs = [\n    { label: 'Snapshot', value: SnapshotTab.Support },\n    { label: 'Data', value: SnapshotTab.Data },\n  ];\n\n  const hasSupportBundleAccess =\n    config.supportBundlesEnabled && contextSrv.hasPermission(AccessControlAction.ActionSupportBundlesCreate);\n\n  return (\n    <Drawer\n      title={`Get help with this panel`}\n      size=\"lg\"\n      onClose={onClose}\n      subtitle={\n        <Stack direction=\"column\" gap={1}>\n          <Stack direction=\"row\" gap={1}>\n            <FeatureBadge featureState={FeatureState.beta} />\n            <a\n              href=\"https://grafana.com/docs/grafana/latest/troubleshooting/\"\n              target=\"blank\"\n              className=\"external-link\"\n              rel=\"noopener noreferrer\"\n            >\n              Troubleshooting docs <Icon name=\"external-link-alt\" />\n            </a>\n          </Stack>\n          <span className=\"muted\">\n            To request troubleshooting help, send a snapshot of this panel to Grafana Labs Technical Support. The\n            snapshot contains query response data and panel settings.\n          </span>\n          {hasSupportBundleAccess && (\n            <span className=\"muted\">\n              You can also retrieve a support bundle containing information concerning your Grafana instance and\n              configured datasources in the <a href=\"/support-bundles\">support bundles section</a>.\n            </span>\n          )}\n        </Stack>\n      }\n      tabs={\n        <TabsBar>\n          {tabs.map((t, index) => (\n            <Tab\n              key={`${t.value}-${index}`}\n              label={t.label}\n              active={t.value === currentTab}\n              onChangeTab={() => service.onCurrentTabChange(t.value!)}\n            />\n          ))}\n        </TabsBar>\n      }\n    >\n      {loading && <Spinner />}\n      {error && <Alert title={error.title}>{error.message}</Alert>}\n\n      {currentTab === SnapshotTab.Data && (\n        <div className={styles.code}>\n          <div className={styles.opts}>\n            <Field label=\"Template\" className={styles.field}>\n              <Select options={options} value={showMessage} onChange={service.onShowMessageChange} />\n            </Field>\n\n            {showMessage === ShowMessage.GithubComment ? (\n              <ClipboardButton icon=\"copy\" getText={service.onGetMarkdownForClipboard}>\n                Copy to clipboard\n              </ClipboardButton>\n            ) : (\n              <Button icon=\"download-alt\" onClick={service.onDownloadDashboard}>\n                Download ({snapshotSize})\n              </Button>\n            )}\n          </div>\n          <AutoSizer disableWidth>\n            {({ height }) => (\n              <CodeEditor\n                width=\"100%\"\n                height={height}\n                language={showMessage === ShowMessage.GithubComment ? 'markdown' : 'json'}\n                showLineNumbers={true}\n                showMiniMap={true}\n                value={showMessage === ShowMessage.GithubComment ? markdownText : snapshotText}\n                readOnly={false}\n                onBlur={service.onSetSnapshotText}\n              />\n            )}\n          </AutoSizer>\n        </div>\n      )}\n      {currentTab === SnapshotTab.Support && (\n        <>\n          <Field\n            label=\"Randomize data\"\n            description=\"Modify the original data to hide sensitve information.  Note the lengths will stay the same, and duplicate values will be equal.\"\n          >\n            <HorizontalGroup>\n              <InlineSwitch\n                label=\"Labels\"\n                id=\"randomize-labels\"\n                showLabel={true}\n                value={Boolean(randomize.labels)}\n                onChange={() => service.onToggleRandomize('labels')}\n              />\n              <InlineSwitch\n                label=\"Field names\"\n                id=\"randomize-field-names\"\n                showLabel={true}\n                value={Boolean(randomize.names)}\n                onChange={() => service.onToggleRandomize('names')}\n              />\n              <InlineSwitch\n                label=\"String values\"\n                id=\"randomize-string-values\"\n                showLabel={true}\n                value={Boolean(randomize.values)}\n                onChange={() => service.onToggleRandomize('values')}\n              />\n            </HorizontalGroup>\n          </Field>\n\n          <Field label=\"Support snapshot\" description={`Panel: ${panelTitle}`}>\n            <Stack>\n              <Button icon=\"download-alt\" onClick={service.onDownloadDashboard}>\n                Dashboard ({snapshotSize})\n              </Button>\n              <ClipboardButton\n                icon=\"github\"\n                getText={service.onGetMarkdownForClipboard}\n                title=\"Copy a complete GitHub comment to the clipboard\"\n              >\n                Copy to clipboard\n              </ClipboardButton>\n              <Button\n                onClick={service.onPreviewDashboard}\n                variant=\"secondary\"\n                title=\"Open support snapshot dashboard in a new tab\"\n              >\n                Preview\n              </Button>\n            </Stack>\n          </Field>\n\n          <AutoSizer disableWidth>\n            {({ height }) => (\n              <div style={{ height, overflow: 'auto' }}>{scene && <scene.Component model={scene} />}</div>\n            )}\n          </AutoSizer>\n        </>\n      )}\n    </Drawer>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  code: css({\n    flexGrow: 1,\n    height: '100%',\n    overflow: 'scroll',\n  }),\n  field: css({\n    width: '100%',\n  }),\n  opts: css({\n    display: 'flex',\n    width: '100%',\n    flexGrow: 0,\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    button: {\n      marginLeft: '8px',\n    },\n  }),\n});\n","import { useEffect, useRef, useState } from 'react';\nimport { Unsubscribable } from 'rxjs';\n\nimport { LoadingState, PanelData } from '@grafana/data';\n\nimport { GetDataOptions } from '../../../query/state/PanelQueryRunner';\nimport { PanelModel } from '../../state';\n\ninterface UsePanelLatestData {\n  data?: PanelData;\n  hasError: boolean;\n  isLoading: boolean;\n  hasSeries: boolean;\n}\n\n/**\n * Subscribes and returns latest panel data from PanelQueryRunner\n */\nexport const usePanelLatestData = (\n  panel: PanelModel,\n  options: GetDataOptions,\n  checkSchema?: boolean\n): UsePanelLatestData => {\n  const querySubscription = useRef<Unsubscribable>();\n  const [latestData, setLatestData] = useState<PanelData>();\n\n  useEffect(() => {\n    let lastRev = -1;\n    let lastUpdate = 0;\n\n    querySubscription.current = panel\n      .getQueryRunner()\n      // We apply field config later\n      .getData({ withTransforms: options.withTransforms, withFieldConfig: false })\n      .subscribe({\n        next: (data) => {\n          if (checkSchema) {\n            if (lastRev === data.structureRev) {\n              const now = Date.now();\n              const elapsed = now - lastUpdate;\n              if (elapsed < 10000) {\n                return; // avoid updates if the schema has not changed for 10s\n              }\n              lastUpdate = now;\n            }\n            lastRev = data.structureRev ?? -1;\n          }\n          setLatestData(data);\n        },\n      });\n\n    return () => {\n      if (querySubscription.current) {\n        querySubscription.current.unsubscribe();\n      }\n    };\n    /**\n     * Adding separate options to dependencies array to avoid additional hook for comparing previous options with current.\n     * Otherwise, passing different references to the same object might cause troubles.\n     */\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [panel, options.withTransforms]);\n\n  return {\n    data: latestData,\n    isLoading: latestData?.state === LoadingState.Loading,\n    hasSeries: latestData ? !!latestData.series : false,\n    hasError: Boolean(\n      latestData && (latestData.error || latestData?.errors?.length || latestData.state === LoadingState.Error)\n    ),\n  };\n};\n","import { DataSourceApi, PanelData } from '@grafana/data';\nimport { Trans } from 'app/core/internationalization';\n\ninterface InspectMetadataTabProps {\n  data: PanelData;\n  metadataDatasource?: DataSourceApi;\n}\nexport const InspectMetadataTab = ({ data, metadataDatasource }: InspectMetadataTabProps) => {\n  if (!metadataDatasource || !metadataDatasource.components?.MetadataInspector) {\n    return <Trans i18nKey=\"dashboard.inspect-meta.no-inspector\">No Metadata Inspector</Trans>;\n  }\n  return <metadataDatasource.components.MetadataInspector datasource={metadataDatasource} data={data.series} />;\n};\n","import { isEmpty } from 'lodash';\nimport { useState } from 'react';\n\nimport {\n  CoreApp,\n  DataSourceApi,\n  formattedValueToString,\n  getValueFormat,\n  PanelData,\n  PanelPlugin,\n  LoadingState,\n  DataQueryError,\n} from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { Drawer, Tab, TabsBar } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\nimport { InspectDataTab } from 'app/features/inspector/InspectDataTab';\nimport { InspectErrorTab } from 'app/features/inspector/InspectErrorTab';\nimport { InspectJSONTab } from 'app/features/inspector/InspectJSONTab';\nimport { InspectMetadataTab } from 'app/features/inspector/InspectMetadataTab';\nimport { InspectStatsTab } from 'app/features/inspector/InspectStatsTab';\nimport { QueryInspector } from 'app/features/inspector/QueryInspector';\nimport { InspectTab } from 'app/features/inspector/types';\n\nimport { GetDataOptions } from '../../../query/state/PanelQueryRunner';\nimport { DashboardModel, PanelModel } from '../../state';\n\ninterface Props {\n  dashboard: DashboardModel;\n  panel: PanelModel;\n  plugin?: PanelPlugin | null;\n  defaultTab?: InspectTab;\n  tabs: Array<{ label: string; value: InspectTab }>;\n  // The last raw response\n  data?: PanelData;\n  isDataLoading: boolean;\n  dataOptions: GetDataOptions;\n  // If the datasource supports custom metadata\n  metadataDatasource?: DataSourceApi;\n  onDataOptionsChange: (options: GetDataOptions) => void;\n  onClose: () => void;\n}\n\nexport const InspectContent = ({\n  panel,\n  plugin,\n  dashboard,\n  tabs,\n  data,\n  isDataLoading,\n  dataOptions,\n  metadataDatasource,\n  defaultTab,\n  onDataOptionsChange,\n  onClose,\n}: Props) => {\n  const [currentTab, setCurrentTab] = useState(defaultTab ?? InspectTab.Data);\n\n  if (!plugin) {\n    return null;\n  }\n\n  let errors = getErrors(data);\n\n  // Validate that the active tab is actually valid and allowed\n  let activeTab = currentTab;\n  if (!tabs.find((item) => item.value === currentTab)) {\n    activeTab = InspectTab.JSON;\n  }\n\n  const panelTitle = getTemplateSrv().replace(panel.title, panel.scopedVars, 'text') || 'Panel';\n  const title = t('dashboard.inspect.title', 'Inspect: {{panelTitle}}', { panelTitle });\n\n  return (\n    <Drawer\n      title={title}\n      subtitle={data && formatStats(data)}\n      onClose={onClose}\n      tabs={\n        <TabsBar>\n          {tabs.map((tab, index) => {\n            return (\n              <Tab\n                key={`${tab.value}-${index}`}\n                label={tab.label}\n                active={tab.value === activeTab}\n                onChangeTab={() => setCurrentTab(tab.value || InspectTab.Data)}\n              />\n            );\n          })}\n        </TabsBar>\n      }\n    >\n      {activeTab === InspectTab.Data && (\n        <InspectDataTab\n          dataName={panel.getDisplayTitle()}\n          panelPluginId={panel.type}\n          fieldConfig={panel.fieldConfig}\n          hasTransformations={Boolean(panel.transformations?.length)}\n          data={data && data.series}\n          isLoading={isDataLoading}\n          options={dataOptions}\n          onOptionsChange={onDataOptionsChange}\n          timeZone={dashboard.timezone}\n          app={CoreApp.Dashboard}\n        />\n      )}\n      {data && activeTab === InspectTab.Meta && (\n        <InspectMetadataTab data={data} metadataDatasource={metadataDatasource} />\n      )}\n\n      {activeTab === InspectTab.JSON && (\n        <InspectJSONTab panel={panel} dashboard={dashboard} data={data} onClose={onClose} />\n      )}\n      {activeTab === InspectTab.Error && <InspectErrorTab errors={errors} />}\n      {data && activeTab === InspectTab.Stats && <InspectStatsTab data={data} timeZone={dashboard.getTimezone()} />}\n      {data && activeTab === InspectTab.Query && <QueryInspector data={data} onRefreshQuery={() => panel.refresh()} />}\n    </Drawer>\n  );\n};\n\n// This will combine\nfunction getErrors(data: PanelData | undefined): DataQueryError[] {\n  let errors = data?.errors ?? [];\n  if (data?.error && !errors.includes(data.error)) {\n    errors = [data.error, ...errors];\n  }\n  if (!errors.length && data?.state === LoadingState.Error) {\n    return [\n      {\n        message: 'Error loading data',\n      },\n    ];\n  }\n  return errors;\n}\n\nfunction formatStats(data: PanelData) {\n  const { request } = data;\n\n  if (!request || isEmpty(request)) {\n    return '';\n  }\n\n  const queryCount = request.targets.length;\n  const requestTime = request.endTime ? request.endTime - request.startTime : 0;\n  const formatted = formattedValueToString(getValueFormat('ms')(requestTime));\n\n  return (\n    <Trans i18nKey=\"dashboard.inspect.subtitle\">\n      {{ queryCount }} queries with total query time of {{ formatted }}\n    </Trans>\n  );\n}\n","import { useState } from 'react';\nimport { connect, MapStateToProps } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\n\nimport { PanelPlugin } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\nimport { InspectTab } from 'app/features/inspector/types';\nimport { getPanelStateForModel } from 'app/features/panel/state/selectors';\nimport { StoreState } from 'app/types';\n\nimport { GetDataOptions } from '../../../query/state/PanelQueryRunner';\nimport { HelpWizard } from '../HelpWizard/HelpWizard';\nimport { usePanelLatestData } from '../PanelEditor/usePanelLatestData';\n\nimport { InspectContent } from './InspectContent';\nimport { useDatasourceMetadata, useInspectTabs } from './hooks';\n\ninterface OwnProps {\n  dashboard: DashboardModel;\n  panel: PanelModel;\n}\n\nexport interface ConnectedProps {\n  plugin?: PanelPlugin | null;\n}\n\nexport type Props = OwnProps & ConnectedProps;\n\nconst PanelInspectorUnconnected = ({ panel, dashboard, plugin }: Props) => {\n  const location = useLocation();\n  const defaultTab = new URLSearchParams(location.search).get('inspectTab') as InspectTab;\n  const [dataOptions, setDataOptions] = useState<GetDataOptions>({\n    withTransforms: defaultTab === InspectTab.Error,\n    withFieldConfig: true,\n  });\n\n  const { data, isLoading, hasError } = usePanelLatestData(panel, dataOptions, false);\n  const metaDs = useDatasourceMetadata(data);\n  const tabs = useInspectTabs(panel, dashboard, plugin, hasError, metaDs);\n\n  const onClose = () => {\n    locationService.partial({\n      inspect: null,\n      inspectTab: null,\n    });\n  };\n\n  if (!plugin) {\n    return null;\n  }\n\n  if (defaultTab === InspectTab.Help) {\n    return <HelpWizard panel={panel} plugin={plugin} onClose={onClose} />;\n  }\n\n  return (\n    <InspectContent\n      dashboard={dashboard}\n      panel={panel}\n      plugin={plugin}\n      defaultTab={defaultTab}\n      tabs={tabs}\n      data={data}\n      isDataLoading={isLoading}\n      dataOptions={dataOptions}\n      onDataOptionsChange={setDataOptions}\n      metadataDatasource={metaDs}\n      onClose={onClose}\n    />\n  );\n};\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state, props) => {\n  const panelState = getPanelStateForModel(state, props.panel);\n  if (!panelState) {\n    return { plugin: null };\n  }\n\n  return {\n    plugin: panelState.plugin,\n  };\n};\n\nexport const PanelInspector = connect(mapStateToProps)(PanelInspectorUnconnected);\n","import { PropsWithChildren, ReactElement, useMemo } from 'react';\n\nimport { TypedVariableModel, VariableHide } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Stack, Tooltip } from '@grafana/ui';\n\nimport { variableAdapters } from '../adapters';\nimport { VARIABLE_PREFIX } from '../constants';\n\ninterface Props {\n  variable: TypedVariableModel;\n  readOnly?: boolean;\n}\n\nexport const PickerRenderer = (props: Props) => {\n  const PickerToRender = useMemo(() => variableAdapters.get(props.variable.type).picker, [props.variable]);\n\n  if (!props.variable) {\n    return <div>Couldn&apos;t load variable</div>;\n  }\n\n  return (\n    <Stack gap={0}>\n      <PickerLabel variable={props.variable} />\n      {props.variable.hide !== VariableHide.hideVariable && PickerToRender && (\n        <PickerToRender variable={props.variable} readOnly={props.readOnly ?? false} />\n      )}\n    </Stack>\n  );\n};\n\nfunction PickerLabel({ variable }: PropsWithChildren<Props>): ReactElement | null {\n  const labelOrName = useMemo(() => variable.label || variable.name, [variable]);\n\n  if (variable.hide !== VariableHide.dontHide) {\n    return null;\n  }\n\n  const elementId = VARIABLE_PREFIX + variable.id;\n  if (variable.description) {\n    return (\n      <Tooltip content={variable.description} placement={'bottom'}>\n        <label\n          className=\"gf-form-label gf-form-label--variable\"\n          data-testid={selectors.pages.Dashboard.SubMenu.submenuItemLabels(labelOrName)}\n          htmlFor={elementId}\n        >\n          {labelOrName}\n        </label>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <label\n      className=\"gf-form-label gf-form-label--variable\"\n      data-testid={selectors.pages.Dashboard.SubMenu.submenuItemLabels(labelOrName)}\n      htmlFor={elementId}\n    >\n      {labelOrName}\n    </label>\n  );\n}\n","import { css } from '@emotion/css';\nimport { useEffect, useState } from 'react';\n\nimport { GrafanaTheme2, TypedVariableModel, VariableHide } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { PickerRenderer } from '../../../variables/pickers/PickerRenderer';\n\ninterface Props {\n  variables: TypedVariableModel[];\n  readOnly?: boolean;\n}\n\nexport const SubMenuItems = ({ variables, readOnly }: Props) => {\n  const [visibleVariables, setVisibleVariables] = useState<TypedVariableModel[]>([]);\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    setVisibleVariables(variables.filter((state) => state.hide !== VariableHide.hideVariable));\n  }, [variables]);\n\n  if (visibleVariables.length === 0) {\n    return null;\n  }\n\n  return (\n    <>\n      {visibleVariables.map((variable) => (\n        <div\n          key={variable.id}\n          className={styles.submenuItem}\n          data-testid={selectors.pages.Dashboard.SubMenu.submenuItem}\n        >\n          <PickerRenderer variable={variable} readOnly={readOnly} />\n        </div>\n      ))}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  submenuItem: css({\n    display: 'inline-block',\n\n    '.fa-caret-down': {\n      fontSize: '75%',\n      paddingLeft: theme.spacing(1),\n    },\n\n    '.gf-form': {\n      marginBottom: 0,\n    },\n  }),\n});\n","import { PanelPlugin } from '@grafana/data';\nimport { StoreState } from 'app/types';\n\nimport { getPanelPluginNotFound } from '../../panel/components/PanelPluginError';\n\nexport const getPanelPluginWithFallback =\n  (panelType: string) =>\n  (state: StoreState): PanelPlugin => {\n    const plugin = state.plugins.panels[panelType];\n    return plugin || getPanelPluginNotFound(`Panel plugin not found (${panelType})`, true);\n  };\n","import { css } from '@emotion/css';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { ToolbarButton, ButtonGroup } from '@grafana/ui';\nimport { useDispatch, useSelector } from 'app/types';\n\nimport { PanelModel } from '../../state';\nimport { getPanelPluginWithFallback } from '../../state/selectors';\n\nimport { updatePanelEditorUIState } from './state/actions';\nimport { toggleVizPicker } from './state/reducers';\n\ntype Props = {\n  panel: PanelModel;\n};\n\nexport const VisualizationButton = ({ panel }: Props) => {\n  const dispatch = useDispatch();\n  const plugin = useSelector(getPanelPluginWithFallback(panel.type));\n  const isPanelOptionsVisible = useSelector((state) => state.panelEditor.ui.isPanelOptionsVisible);\n  const isVizPickerOpen = useSelector((state) => state.panelEditor.isVizPickerOpen);\n\n  const onToggleOpen = () => {\n    dispatch(toggleVizPicker(!isVizPickerOpen));\n  };\n\n  const onToggleOptionsPane = () => {\n    dispatch(updatePanelEditorUIState({ isPanelOptionsVisible: !isPanelOptionsVisible }));\n  };\n\n  if (!plugin) {\n    return null;\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <ButtonGroup>\n        <ToolbarButton\n          className={styles.vizButton}\n          tooltip=\"Click to change visualization\"\n          imgSrc={plugin.meta.info.logos.small}\n          isOpen={isVizPickerOpen}\n          onClick={onToggleOpen}\n          data-testid={selectors.components.PanelEditor.toggleVizPicker}\n          aria-label=\"Change Visualization\"\n          variant=\"canvas\"\n          fullWidth\n        >\n          {plugin.meta.name}\n        </ToolbarButton>\n        <ToolbarButton\n          tooltip={isPanelOptionsVisible ? 'Close options pane' : 'Show options pane'}\n          icon={isPanelOptionsVisible ? 'angle-right' : 'angle-left'}\n          onClick={onToggleOptionsPane}\n          variant=\"canvas\"\n          data-testid={selectors.components.PanelEditor.toggleVizOptions}\n          aria-label={isPanelOptionsVisible ? 'Close options pane' : 'Show options pane'}\n        />\n      </ButtonGroup>\n    </div>\n  );\n};\n\nVisualizationButton.displayName = 'VisualizationTab';\n\nconst styles = {\n  wrapper: css({\n    display: 'flex',\n    flexDirection: 'column',\n  }),\n  vizButton: css({\n    textAlign: 'left',\n  }),\n};\n","import { ConfirmModal } from '@grafana/ui';\n\nimport { PanelModel } from '../../../dashboard/state';\nimport { isPanelModelLibraryPanel } from '../../guard';\n\nexport interface ChangeLibraryPanelModalProps {\n  panel: PanelModel;\n  onConfirm: () => void;\n  onDismiss: () => void;\n}\n\nexport const ChangeLibraryPanelModal = ({ onConfirm, onDismiss, panel }: ChangeLibraryPanelModalProps): JSX.Element => {\n  const isLibraryPanel = isPanelModelLibraryPanel(panel);\n  const title = `${isLibraryPanel ? 'Changing' : 'Replace with'} library panel`;\n  const body = `${\n    isLibraryPanel ? 'Changing' : 'Replacing with a'\n  } library panel will remove any changes since last save.`;\n  return (\n    <ConfirmModal\n      onConfirm={onConfirm}\n      onDismiss={onDismiss}\n      confirmText={isLibraryPanel ? 'Change' : 'Replace'}\n      title={title}\n      body={body}\n      dismissText=\"Cancel\"\n      isOpen={true}\n    />\n  );\n};\n","import { css } from '@emotion/css';\nimport { useCallback, useState } from 'react';\n\nimport { PanelPluginMeta } from '@grafana/data';\nimport { Button, VerticalGroup } from '@grafana/ui';\nimport { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { PanelModel } from 'app/features/dashboard/state';\nimport { changeToLibraryPanel } from 'app/features/panel/state/actions';\nimport { useDispatch } from 'app/types';\n\nimport { PanelTypeFilter } from '../../../../core/components/PanelTypeFilter/PanelTypeFilter';\nimport { LibraryElementDTO } from '../../types';\nimport { AddLibraryPanelModal } from '../AddLibraryPanelModal/AddLibraryPanelModal';\nimport { ChangeLibraryPanelModal } from '../ChangeLibraryPanelModal/ChangeLibraryPanelModal';\nimport { LibraryPanelsView } from '../LibraryPanelsView/LibraryPanelsView';\n\ninterface Props {\n  panel: PanelModel;\n  searchQuery: string;\n  isWidget?: boolean;\n}\n\nexport const PanelLibraryOptionsGroup = ({ panel, searchQuery, isWidget = false }: Props) => {\n  const [showingAddPanelModal, setShowingAddPanelModal] = useState(false);\n  const [changeToPanel, setChangeToPanel] = useState<LibraryElementDTO | undefined>(undefined);\n  const [panelFilter, setPanelFilter] = useState<string[]>([]);\n  const onPanelFilterChange = useCallback(\n    (plugins: PanelPluginMeta[]) => {\n      setPanelFilter(plugins.map((p) => p.id));\n    },\n    [setPanelFilter]\n  );\n  const dashboard = getDashboardSrv().getCurrent();\n  const dispatch = useDispatch();\n\n  const useLibraryPanel = async () => {\n    if (!changeToPanel) {\n      return;\n    }\n\n    setChangeToPanel(undefined);\n    dispatch(changeToLibraryPanel(panel, changeToPanel));\n  };\n\n  const onAddToPanelLibrary = () => setShowingAddPanelModal(true);\n  const onDismissChangeToPanel = () => setChangeToPanel(undefined);\n  return (\n    <VerticalGroup spacing=\"md\">\n      {!panel.libraryPanel && (\n        <VerticalGroup align=\"center\">\n          <Button icon=\"plus\" onClick={onAddToPanelLibrary} variant=\"secondary\" fullWidth>\n            Create new library panel\n          </Button>\n        </VerticalGroup>\n      )}\n\n      <PanelTypeFilter onChange={onPanelFilterChange} isWidget={isWidget} />\n\n      <div className={styles.libraryPanelsView}>\n        <LibraryPanelsView\n          currentPanelId={panel.libraryPanel?.uid}\n          searchString={searchQuery}\n          panelFilter={panelFilter}\n          onClickCard={setChangeToPanel}\n          showSecondaryActions\n          isWidget={isWidget}\n        />\n      </div>\n\n      {showingAddPanelModal && (\n        <AddLibraryPanelModal\n          panel={panel}\n          onDismiss={() => setShowingAddPanelModal(false)}\n          initialFolderUid={dashboard?.meta.folderUid}\n          isOpen={showingAddPanelModal}\n        />\n      )}\n\n      {changeToPanel && (\n        <ChangeLibraryPanelModal panel={panel} onDismiss={onDismissChangeToPanel} onConfirm={useLibraryPanel} />\n      )}\n    </VerticalGroup>\n  );\n};\n\nconst styles = {\n  libraryPanelsView: css`\n    width: 100%;\n  `,\n};\n","import { css } from '@emotion/css';\nimport { useCallback, useRef, useState } from 'react';\nimport { useLocalStorage } from 'react-use';\n\nimport { GrafanaTheme2, PanelData, SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config } from '@grafana/runtime';\nimport { Button, CustomScrollbar, FilterInput, RadioButtonGroup, useStyles2 } from '@grafana/ui';\nimport { Field } from '@grafana/ui/src/components/Forms/Field';\nimport { LS_VISUALIZATION_SELECT_TAB_KEY, LS_WIDGET_SELECT_TAB_KEY } from 'app/core/constants';\nimport { PanelLibraryOptionsGroup } from 'app/features/library-panels/components/PanelLibraryOptionsGroup/PanelLibraryOptionsGroup';\nimport { VisualizationSuggestions } from 'app/features/panel/components/VizTypePicker/VisualizationSuggestions';\nimport { VizTypeChangeDetails } from 'app/features/panel/components/VizTypePicker/types';\nimport { useDispatch, useSelector } from 'app/types';\n\nimport { VizTypePicker } from '../../../panel/components/VizTypePicker/VizTypePicker';\nimport { changePanelPlugin } from '../../../panel/state/actions';\nimport { PanelModel } from '../../state/PanelModel';\nimport { getPanelPluginWithFallback } from '../../state/selectors';\n\nimport { toggleVizPicker } from './state/reducers';\nimport { VisualizationSelectPaneTab } from './types';\n\ninterface Props {\n  panel: PanelModel;\n  data?: PanelData;\n}\n\nexport const VisualizationSelectPane = ({ panel, data }: Props) => {\n  const plugin = useSelector(getPanelPluginWithFallback(panel.type));\n  const [searchQuery, setSearchQuery] = useState('');\n\n  // Add support to show widgets in the visualization picker\n  const isWidget = !!plugin.meta.skipDataQuery;\n  const isWidgetEnabled = Boolean(isWidget && config.featureToggles.vizAndWidgetSplit);\n\n  const tabKey = isWidgetEnabled ? LS_WIDGET_SELECT_TAB_KEY : LS_VISUALIZATION_SELECT_TAB_KEY;\n  const defaultTab = isWidgetEnabled ? VisualizationSelectPaneTab.Widgets : VisualizationSelectPaneTab.Visualizations;\n\n  const [listMode, setListMode] = useLocalStorage(tabKey, defaultTab);\n\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n  const searchRef = useRef<HTMLInputElement | null>(null);\n\n  const onVizChange = useCallback(\n    (pluginChange: VizTypeChangeDetails) => {\n      dispatch(changePanelPlugin({ panel: panel, ...pluginChange }));\n\n      // close viz picker unless a mod key is pressed while clicking\n      if (!pluginChange.withModKey) {\n        dispatch(toggleVizPicker(false));\n      }\n    },\n    [dispatch, panel]\n  );\n\n  const onCloseVizPicker = () => {\n    dispatch(toggleVizPicker(false));\n  };\n\n  if (!plugin) {\n    return null;\n  }\n\n  const radioOptions: Array<SelectableValue<VisualizationSelectPaneTab>> = [\n    { label: 'Visualizations', value: VisualizationSelectPaneTab.Visualizations },\n    { label: 'Suggestions', value: VisualizationSelectPaneTab.Suggestions },\n    {\n      label: 'Library panels',\n      value: VisualizationSelectPaneTab.LibraryPanels,\n      description: 'Reusable panels you can share between multiple dashboards.',\n    },\n  ];\n\n  const radioOptionsWidgetFlow: Array<SelectableValue<VisualizationSelectPaneTab>> = [\n    { label: 'Widgets', value: VisualizationSelectPaneTab.Widgets },\n    {\n      label: 'Library panels',\n      value: VisualizationSelectPaneTab.LibraryPanels,\n      description: 'Reusable panels you can share between multiple dashboards.',\n    },\n  ];\n\n  return (\n    <div className={styles.openWrapper}>\n      <div className={styles.formBox}>\n        <div className={styles.searchRow}>\n          <FilterInput\n            value={searchQuery}\n            onChange={setSearchQuery}\n            ref={searchRef}\n            autoFocus={true}\n            placeholder=\"Search for...\"\n          />\n          <Button\n            title=\"Close\"\n            variant=\"secondary\"\n            icon=\"angle-up\"\n            className={styles.closeButton}\n            aria-label={selectors.components.PanelEditor.toggleVizPicker}\n            onClick={onCloseVizPicker}\n          />\n        </div>\n        <Field className={styles.customFieldMargin}>\n          <RadioButtonGroup\n            options={isWidgetEnabled ? radioOptionsWidgetFlow : radioOptions}\n            value={listMode}\n            onChange={setListMode}\n            fullWidth\n          />\n        </Field>\n      </div>\n      <div className={styles.scrollWrapper}>\n        <CustomScrollbar autoHeightMin=\"100%\">\n          <div className={styles.scrollContent}>\n            {listMode === VisualizationSelectPaneTab.Visualizations && (\n              <VizTypePicker pluginId={plugin.meta.id} onChange={onVizChange} searchQuery={searchQuery} />\n            )}\n            {listMode === VisualizationSelectPaneTab.Widgets && (\n              <VizTypePicker pluginId={plugin.meta.id} onChange={onVizChange} searchQuery={searchQuery} isWidget />\n            )}\n\n            {listMode === VisualizationSelectPaneTab.Suggestions && (\n              <VisualizationSuggestions onChange={onVizChange} searchQuery={searchQuery} panel={panel} data={data} />\n            )}\n            {listMode === VisualizationSelectPaneTab.LibraryPanels && (\n              <PanelLibraryOptionsGroup\n                searchQuery={searchQuery}\n                panel={panel}\n                key=\"Panel Library\"\n                isWidget={isWidget}\n              />\n            )}\n          </div>\n        </CustomScrollbar>\n      </div>\n    </div>\n  );\n};\n\nVisualizationSelectPane.displayName = 'VisualizationSelectPane';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    icon: css({\n      color: theme.v1.palette.gray33,\n    }),\n    wrapper: css({\n      display: 'flex',\n      flexDirection: 'column',\n      flex: '1 1 0',\n      height: '100%',\n    }),\n    vizButton: css({\n      textAlign: 'left',\n    }),\n    scrollWrapper: css({\n      flexGrow: 1,\n      minHeight: 0,\n    }),\n    scrollContent: css({\n      padding: theme.spacing(1),\n    }),\n    openWrapper: css({\n      display: 'flex',\n      flexDirection: 'column',\n      flex: '1 1 100%',\n      height: '100%',\n      background: theme.colors.background.primary,\n      border: `1px solid ${theme.colors.border.weak}`,\n    }),\n    searchRow: css({\n      display: 'flex',\n      marginBottom: theme.spacing(1),\n    }),\n    closeButton: css({\n      marginLeft: theme.spacing(1),\n    }),\n    customFieldMargin: css({\n      marginBottom: theme.spacing(1),\n    }),\n    formBox: css({\n      padding: theme.spacing(1),\n      paddingBottom: 0,\n    }),\n  };\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { useStyles2 } from '@grafana/ui';\nimport { useSelector } from 'app/types';\n\nimport { OptionsPaneOptions } from './OptionsPaneOptions';\nimport { VisualizationButton } from './VisualizationButton';\nimport { VisualizationSelectPane } from './VisualizationSelectPane';\nimport { OptionPaneRenderProps } from './types';\nimport { usePanelLatestData } from './usePanelLatestData';\n\nexport const OptionsPane = ({\n  plugin,\n  panel,\n  onFieldConfigsChange,\n  onPanelOptionsChanged,\n  onPanelConfigChange,\n  dashboard,\n  instanceState,\n}: OptionPaneRenderProps) => {\n  const styles = useStyles2(getStyles);\n  const isVizPickerOpen = useSelector((state) => state.panelEditor.isVizPickerOpen);\n  const { data } = usePanelLatestData(panel, { withTransforms: true, withFieldConfig: false }, true);\n\n  return (\n    <div className={styles.wrapper} data-testid={selectors.components.PanelEditor.OptionsPane.content}>\n      {!isVizPickerOpen && (\n        <>\n          <div className={styles.vizButtonWrapper}>\n            <VisualizationButton panel={panel} />\n          </div>\n          <div className={styles.optionsWrapper}>\n            <OptionsPaneOptions\n              panel={panel}\n              dashboard={dashboard}\n              plugin={plugin}\n              instanceState={instanceState}\n              data={data}\n              onFieldConfigsChange={onFieldConfigsChange}\n              onPanelOptionsChanged={onPanelOptionsChanged}\n              onPanelConfigChange={onPanelConfigChange}\n            />\n          </div>\n        </>\n      )}\n      {isVizPickerOpen && <VisualizationSelectPane panel={panel} data={data} />}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css({\n      height: '100%',\n      width: '100%',\n      display: 'flex',\n      flex: '1 1 0',\n      flexDirection: 'column',\n      padding: 0,\n    }),\n    optionsWrapper: css({\n      flexGrow: 1,\n      minHeight: 0,\n    }),\n    vizButtonWrapper: css({\n      padding: `0 ${theme.spacing(2, 2)} 0`,\n    }),\n    legacyOptions: css({\n      label: 'legacy-options',\n      '.panel-options-grid': {\n        display: 'flex',\n        flexDirection: 'column',\n      },\n      '.panel-options-group': {\n        marginBottom: 0,\n      },\n      '.panel-options-group__body': {\n        padding: `${theme.spacing(2)} 0`,\n      },\n      '.section': {\n        display: 'block',\n        margin: `${theme.spacing(2)} 0`,\n        '&:first-child': {\n          marginTop: 0,\n        },\n      },\n    }),\n  };\n};\n","import { css, cx } from '@emotion/css';\nimport { Component } from 'react';\n\nimport { renderMarkdown, LinkModelSupplier, ScopedVars, IconName } from '@grafana/data';\nimport { GrafanaTheme2 } from '@grafana/data/';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { locationService, getTemplateSrv } from '@grafana/runtime';\nimport { Tooltip, PopoverContent, Icon, Themeable2, withTheme2 } from '@grafana/ui';\nimport { useStyles2 } from '@grafana/ui/';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { InspectTab } from 'app/features/inspector/types';\n\nenum InfoMode {\n  Error = 'Error',\n  Info = 'Info',\n  Links = 'Links',\n}\n\nexport interface Props extends Themeable2 {\n  panel: PanelModel;\n  title?: string;\n  description?: string;\n  scopedVars?: ScopedVars;\n  links?: LinkModelSupplier<PanelModel>;\n  error?: string;\n}\n\nexport class PanelHeaderCorner extends Component<Props> {\n  timeSrv: TimeSrv = getTimeSrv();\n\n  getInfoMode = () => {\n    const { panel, error } = this.props;\n    if (error) {\n      return InfoMode.Error;\n    }\n    if (!!panel.description) {\n      return InfoMode.Info;\n    }\n    if (panel.links && panel.links.length) {\n      return InfoMode.Links;\n    }\n\n    return undefined;\n  };\n\n  getInfoContent = (): JSX.Element => {\n    const { panel, theme } = this.props;\n    const markdown = panel.description || '';\n    const interpolatedMarkdown = getTemplateSrv().replace(markdown, panel.scopedVars);\n    const markedInterpolatedMarkdown = renderMarkdown(interpolatedMarkdown);\n    const links = this.props.links && this.props.links.getLinks(panel.replaceVariables);\n    const styles = getContentStyles(theme);\n\n    return (\n      <div className={styles.content}>\n        <div dangerouslySetInnerHTML={{ __html: markedInterpolatedMarkdown }} />\n\n        {links && links.length > 0 && (\n          <ul className={styles.cornerLinks}>\n            {links.map((link, idx) => {\n              return (\n                <li key={idx}>\n                  <a href={link.href} target={link.target}>\n                    {link.title}\n                  </a>\n                </li>\n              );\n            })}\n          </ul>\n        )}\n      </div>\n    );\n  };\n\n  /**\n   * Open the Panel Inspector when we click on an error\n   */\n  onClickError = () => {\n    locationService.partial({\n      inspect: this.props.panel.id,\n      inspectTab: InspectTab.Error,\n    });\n  };\n\n  render() {\n    const { error } = this.props;\n    const infoMode: InfoMode | undefined = this.getInfoMode();\n\n    if (!infoMode) {\n      return null;\n    }\n\n    if (infoMode === InfoMode.Error && error) {\n      return <PanelInfoCorner infoMode={infoMode} content={error} onClick={this.onClickError} />;\n    }\n\n    if (infoMode === InfoMode.Info || infoMode === InfoMode.Links) {\n      return <PanelInfoCorner infoMode={infoMode} content={this.getInfoContent} />;\n    }\n\n    return null;\n  }\n}\n\nexport default withTheme2(PanelHeaderCorner);\n\ninterface PanelInfoCornerProps {\n  infoMode: InfoMode;\n  content: PopoverContent;\n  onClick?: () => void;\n}\n\nfunction PanelInfoCorner({ infoMode, content, onClick }: PanelInfoCornerProps) {\n  const theme = infoMode === InfoMode.Error ? 'error' : 'info';\n  const ariaLabel = selectors.components.Panels.Panel.headerCornerInfo(infoMode.toLowerCase());\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Tooltip content={content} placement=\"top-start\" theme={theme} interactive>\n      <button type=\"button\" className={styles.infoCorner} onClick={onClick} aria-label={ariaLabel}>\n        <Icon\n          name={iconMap[infoMode]}\n          size={infoMode === InfoMode.Links ? 'sm' : 'lg'}\n          className={cx(styles.icon, { [styles.iconLinks]: infoMode === InfoMode.Links })}\n        />\n        <span className={cx(styles.inner, { [styles.error]: infoMode === InfoMode.Error })} />\n      </button>\n    </Tooltip>\n  );\n}\n\nconst iconMap: Record<InfoMode, IconName> = {\n  [InfoMode.Error]: 'exclamation',\n  [InfoMode.Info]: 'info',\n  [InfoMode.Links]: 'external-link-alt',\n};\n\nconst getContentStyles = (theme: GrafanaTheme2) => ({\n  content: css({\n    overflow: 'auto',\n\n    code: {\n      whiteSpace: 'normal',\n      wordWrap: 'break-word',\n    },\n\n    'pre > code': {\n      display: 'block',\n    },\n  }),\n  cornerLinks: css({\n    listStyle: 'none',\n    paddingLeft: 0,\n  }),\n});\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    icon: css({\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      zIndex: 2,\n      fill: theme.colors.text.maxContrast,\n    }),\n    iconLinks: css({\n      left: theme.spacing(0.5),\n      top: theme.spacing(0.25),\n    }),\n    inner: css({\n      width: 0,\n      height: 0,\n      position: 'absolute',\n      left: 0,\n      bottom: 0,\n      borderBottom: `${theme.spacing(4)} solid transparent`,\n      borderLeft: `${theme.spacing(4)} solid ${theme.colors.background.secondary}`,\n    }),\n    error: css({\n      borderLeftColor: theme.colors.error.main,\n    }),\n    infoCorner: css({\n      background: 'none',\n      border: 'none',\n      color: theme.colors.text.secondary,\n      cursor: 'pointer',\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      width: theme.spacing(4),\n      height: theme.spacing(4),\n      zIndex: 3,\n    }),\n  };\n};\n","import { useEffect, useState } from 'react';\n\nimport { RefreshEvent } from '@grafana/runtime';\nimport { PanelChrome } from '@grafana/ui';\nimport { applyPanelTimeOverrides } from 'app/features/dashboard/utils/panel';\nimport { PanelRenderer } from 'app/features/panel/components/PanelRenderer';\nimport { Options } from 'app/plugins/panel/table/panelcfg.gen';\n\nimport { getTimeSrv } from '../../services/TimeSrv';\nimport { DashboardModel, PanelModel } from '../../state';\n\nimport PanelHeaderCorner from './PanelHeaderCorner';\nimport { usePanelLatestData } from './usePanelLatestData';\n\nexport interface Props {\n  width: number;\n  height: number;\n  panel: PanelModel;\n  dashboard: DashboardModel;\n}\n\nexport function PanelEditorTableView({ width, height, panel, dashboard }: Props) {\n  const { data } = usePanelLatestData(panel, { withTransforms: true, withFieldConfig: false }, false);\n  const [options, setOptions] = useState<Options>({\n    frameIndex: 0,\n    showHeader: true,\n    showTypeIcons: true,\n  });\n\n  // Subscribe to panel event\n  useEffect(() => {\n    const timeSrv = getTimeSrv();\n\n    const sub = panel.events.subscribe(RefreshEvent, () => {\n      const timeData = applyPanelTimeOverrides(panel, timeSrv.timeRange());\n      panel.runAllPanelQueries({\n        dashboardUID: dashboard.uid,\n        dashboardTimezone: dashboard.getTimezone(),\n        timeData,\n        width,\n      });\n    });\n    return () => {\n      sub.unsubscribe();\n    };\n  }, [panel, dashboard, width]);\n\n  if (!data) {\n    return null;\n  }\n\n  const errorMessage = data?.errors\n    ? data.errors.length > 1\n      ? 'Multiple errors found. Click for more details'\n      : data.errors[0].message\n    : data?.error?.message;\n  return (\n    <PanelChrome width={width} height={height} padding=\"none\">\n      {(innerWidth, innerHeight) => (\n        <>\n          <PanelHeaderCorner panel={panel} error={errorMessage} />\n          <PanelRenderer\n            title=\"Raw data\"\n            pluginId=\"table\"\n            width={innerWidth}\n            height={innerHeight}\n            data={data}\n            options={options}\n            onOptionsChange={setOptions}\n          />\n        </>\n      )}\n    </PanelChrome>\n  );\n}\n","import { Tab, TabProps } from '@grafana/ui';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\n\nimport { usePanelCombinedRules } from './hooks/usePanelCombinedRules';\n\ninterface Props extends Omit<TabProps, 'counter' | 'ref'> {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n}\n\n// it will load rule count from backend\nexport const PanelAlertTab = ({ panel, dashboard, ...otherProps }: Props) => {\n  const { rules, loading } = usePanelCombinedRules({ panelId: panel.id, dashboardUID: dashboard.uid });\n  return <Tab {...otherProps} counter={loading ? null : rules.length} />;\n};\n","import { useLocation } from 'react-router-dom';\nimport { useAsync } from 'react-use';\n\nimport { urlUtil } from '@grafana/data';\nimport { Alert, Button, LinkButton } from '@grafana/ui';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\nimport { useSelector } from 'app/types';\n\nimport { logInfo, LogMessages } from '../../Analytics';\nimport { panelToRuleFormValues } from '../../utils/rule-form';\n\ninterface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  className?: string;\n}\n\nexport const NewRuleFromPanelButton = ({ dashboard, panel, className }: Props) => {\n  const templating = useSelector((state) => {\n    return state.templating;\n  });\n\n  const location = useLocation();\n\n  const { loading, value: formValues } = useAsync(\n    () => panelToRuleFormValues(panel, dashboard),\n    // Templating variables are required to update formValues on each variable's change. It's used implicitly by the templating engine\n    [panel, dashboard, templating]\n  );\n\n  if (loading) {\n    return <Button disabled={true}>New alert rule</Button>;\n  }\n\n  if (!formValues) {\n    return (\n      <Alert severity=\"info\" title=\"No alerting capable query found\">\n        Cannot create alerts from this panel because no query to an alerting capable datasource is found.\n      </Alert>\n    );\n  }\n\n  const ruleFormUrl = urlUtil.renderUrl('alerting/new', {\n    defaults: JSON.stringify(formValues),\n    returnTo: location.pathname + location.search,\n  });\n\n  return (\n    <LinkButton\n      icon=\"bell\"\n      onClick={() => logInfo(LogMessages.alertRuleFromPanel)}\n      href={ruleFormUrl}\n      className={className}\n      data-testid=\"create-alert-rule-button\"\n    >\n      New alert rule\n    </LinkButton>\n  );\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Alert, CustomScrollbar, LoadingPlaceholder, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\n\nimport { NewRuleFromPanelButton } from './components/panel-alerts-tab/NewRuleFromPanelButton';\nimport { RulesTable } from './components/rules/RulesTable';\nimport { usePanelCombinedRules } from './hooks/usePanelCombinedRules';\nimport { getRulesPermissions } from './utils/access-control';\nimport { stringifyErrorLike } from './utils/misc';\n\ninterface Props {\n  dashboard: DashboardModel;\n  panel: PanelModel;\n}\n\nexport const PanelAlertTabContent = ({ dashboard, panel }: Props) => {\n  const styles = useStyles2(getStyles);\n  const { errors, loading, rules } = usePanelCombinedRules({\n    dashboardUID: dashboard.uid,\n    panelId: panel.id,\n    poll: true,\n  });\n  const permissions = getRulesPermissions('grafana');\n  const canCreateRules = contextSrv.hasPermission(permissions.create);\n\n  const alert = errors.length ? (\n    <Alert title=\"Errors loading rules\" severity=\"error\">\n      {errors.map((error, index) => (\n        <div key={index}>Failed to load Grafana rules state: {stringifyErrorLike(error)}</div>\n      ))}\n    </Alert>\n  ) : null;\n\n  if (loading && !rules.length) {\n    return (\n      <div className={styles.innerWrapper}>\n        {alert}\n        <LoadingPlaceholder text=\"Loading rules...\" />\n      </div>\n    );\n  }\n\n  if (rules.length) {\n    return (\n      <CustomScrollbar autoHeightMin=\"100%\">\n        <div className={styles.innerWrapper}>\n          {alert}\n          <RulesTable rules={rules} />\n          {!!dashboard.meta.canSave && canCreateRules && (\n            <NewRuleFromPanelButton className={styles.newButton} panel={panel} dashboard={dashboard} />\n          )}\n        </div>\n      </CustomScrollbar>\n    );\n  }\n\n  return (\n    <div data-testid={selectors.components.PanelAlertTabContent.content} className={styles.noRulesWrapper}>\n      {alert}\n      {!!dashboard.uid && (\n        <>\n          <p>There are no alert rules linked to this panel.</p>\n          {!!dashboard.meta.canSave && canCreateRules && <NewRuleFromPanelButton panel={panel} dashboard={dashboard} />}\n        </>\n      )}\n      {!dashboard.uid && !!dashboard.meta.canSave && (\n        <Alert severity=\"info\" title=\"Dashboard not saved\">\n          Dashboard must be saved before alerts can be added.\n        </Alert>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  newButton: css({\n    marginTop: theme.spacing(3),\n  }),\n  innerWrapper: css({\n    padding: theme.spacing(2),\n  }),\n  noRulesWrapper: css({\n    margin: theme.spacing(2),\n    backgroundColor: theme.colors.background.secondary,\n    padding: theme.spacing(3),\n  }),\n});\n","import { PureComponent } from 'react';\n\nimport { DataQuery, getDataSourceRef } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { storeLastUsedDataSourceInLocalStorage } from 'app/features/datasources/components/picker/utils';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { QueryGroup } from 'app/features/query/components/QueryGroup';\nimport { QueryGroupDataSource, QueryGroupOptions } from 'app/types';\n\nimport { getDashboardSrv } from '../../services/DashboardSrv';\nimport { PanelModel } from '../../state';\nimport { getLastUsedDatasourceFromStorage } from '../../utils/dashboard';\n\ninterface Props {\n  /** Current panel */\n  panel: PanelModel;\n  /** Added here to make component re-render when queries change from outside */\n  queries: DataQuery[];\n}\n\nexport class PanelEditorQueries extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  // store last used datasource in local storage\n  updateLastUsedDatasource = (datasource: QueryGroupDataSource) => {\n    storeLastUsedDataSourceInLocalStorage(datasource);\n  };\n\n  buildQueryOptions(panel: PanelModel): QueryGroupOptions {\n    const dataSource: QueryGroupDataSource = panel.datasource ?? {\n      default: true,\n    };\n    const datasourceSettings = getDatasourceSrv().getInstanceSettings(dataSource);\n\n    // store last datasource used in local storage\n    this.updateLastUsedDatasource(dataSource);\n    return {\n      cacheTimeout: datasourceSettings?.meta.queryOptions?.cacheTimeout ? panel.cacheTimeout : undefined,\n      dataSource: {\n        default: datasourceSettings?.isDefault,\n        ...(datasourceSettings ? getDataSourceRef(datasourceSettings) : { type: undefined, uid: undefined }),\n      },\n      queryCachingTTL: datasourceSettings?.cachingConfig?.enabled ? panel.queryCachingTTL : undefined,\n      queries: panel.targets,\n      maxDataPoints: panel.maxDataPoints,\n      minInterval: panel.interval,\n      timeRange: {\n        from: panel.timeFrom,\n        shift: panel.timeShift,\n        hide: panel.hideTimeOverride,\n      },\n    };\n  }\n\n  async componentDidMount() {\n    const { panel } = this.props;\n\n    // If the panel model has no datasource property load the default data source property and update the persisted model\n    // Because this part of the panel model is not in redux yet we do a forceUpdate.\n    if (!panel.datasource) {\n      let ds;\n      // check if we have last used datasource from local storage\n      // get dashboard uid\n      const dashboardUid = getDashboardSrv().getCurrent()?.uid ?? '';\n      const lastUsedDatasource = getLastUsedDatasourceFromStorage(dashboardUid!);\n      // do we have a last used datasource for this dashboard\n      if (lastUsedDatasource?.datasourceUid !== null) {\n        // get datasource from uid\n        ds = getDatasourceSrv().getInstanceSettings(lastUsedDatasource?.datasourceUid);\n      }\n      // else load default datasource\n      if (!ds) {\n        ds = getDatasourceSrv().getInstanceSettings(null);\n      }\n      panel.datasource = getDataSourceRef(ds!);\n      this.forceUpdate();\n    }\n  }\n\n  onRunQueries = () => {\n    this.props.panel.refresh();\n  };\n\n  onOpenQueryInspector = () => {\n    locationService.partial({\n      inspect: this.props.panel.id,\n      inspectTab: 'query',\n    });\n  };\n\n  onOptionsChange = (options: QueryGroupOptions) => {\n    const { panel } = this.props;\n\n    panel.updateQueries(options);\n\n    if (options.dataSource.uid !== panel.datasource?.uid) {\n      // trigger queries when changing data source\n      setTimeout(this.onRunQueries, 10);\n    }\n\n    this.forceUpdate();\n  };\n\n  render() {\n    const { panel } = this.props;\n\n    // If no panel data soruce set, wait with render. Will be set to default in componentDidMount\n    if (!panel.datasource) {\n      return null;\n    }\n\n    const options = this.buildQueryOptions(panel);\n\n    return (\n      <QueryGroup\n        options={options}\n        queryRunner={panel.getQueryRunner()}\n        onRunQueries={this.onRunQueries}\n        onOpenQueryInspector={this.onOpenQueryInspector}\n        onOptionsChange={this.onOptionsChange}\n      />\n    );\n  }\n}\n","import { css } from '@emotion/css';\nimport { memo, useCallback, useEffect } from 'react';\nimport { Subscription } from 'rxjs';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { Tab, TabContent, TabsBar, toIconName, useForceUpdate, useStyles2 } from '@grafana/ui';\nimport { PanelAlertTab } from 'app/features/alerting/unified/PanelAlertTab';\nimport { PanelAlertTabContent } from 'app/features/alerting/unified/PanelAlertTabContent';\nimport { PanelQueriesChangedEvent, PanelTransformationsChangedEvent } from 'app/types/events';\n\nimport { DashboardModel, PanelModel } from '../../state';\nimport { TransformationsEditor } from '../TransformationsEditor/TransformationsEditor';\n\nimport { PanelEditorQueries } from './PanelEditorQueries';\nimport { PanelEditorTab, PanelEditorTabId } from './types';\n\ninterface PanelEditorTabsProps {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  tabs: PanelEditorTab[];\n  onChangeTab: (tab: PanelEditorTab) => void;\n}\n\nexport const PanelEditorTabs = memo(({ panel, dashboard, tabs, onChangeTab }: PanelEditorTabsProps) => {\n  const forceUpdate = useForceUpdate();\n  const styles = useStyles2(getStyles);\n\n  const instrumentedOnChangeTab = useCallback(\n    (tab: PanelEditorTab) => {\n      let eventName = 'panel_editor_tabs_changed';\n      if (config.featureToggles.transformationsRedesign) {\n        eventName = 'transformations_redesign_' + eventName;\n      }\n\n      if (!tab.active) {\n        reportInteraction(eventName, { tab_id: tab.id });\n      }\n\n      onChangeTab(tab);\n    },\n    [onChangeTab]\n  );\n\n  useEffect(() => {\n    const eventSubs = new Subscription();\n    eventSubs.add(panel.events.subscribe(PanelQueriesChangedEvent, forceUpdate));\n    eventSubs.add(panel.events.subscribe(PanelTransformationsChangedEvent, forceUpdate));\n    return () => eventSubs.unsubscribe();\n  }, [panel, dashboard, forceUpdate]);\n\n  const activeTab = tabs.find((item) => item.active)!;\n\n  if (tabs.length === 0) {\n    return null;\n  }\n\n  const alertingEnabled = config.unifiedAlertingEnabled;\n\n  return (\n    <div className={styles.wrapper}>\n      <TabsBar className={styles.tabBar} hideBorder>\n        {tabs.map((tab) => {\n          if (tab.id === PanelEditorTabId.Alert && alertingEnabled) {\n            return (\n              <PanelAlertTab\n                key={tab.id}\n                label={tab.text}\n                active={tab.active}\n                onChangeTab={() => onChangeTab(tab)}\n                icon={toIconName(tab.icon)}\n                panel={panel}\n                dashboard={dashboard}\n              />\n            );\n          }\n          return (\n            <Tab\n              key={tab.id}\n              label={tab.text}\n              active={tab.active}\n              onChangeTab={() => instrumentedOnChangeTab(tab)}\n              icon={toIconName(tab.icon)}\n              counter={getCounter(panel, tab)}\n            />\n          );\n        })}\n      </TabsBar>\n      <TabContent className={styles.tabContent}>\n        {activeTab.id === PanelEditorTabId.Query && <PanelEditorQueries panel={panel} queries={panel.targets} />}\n        {activeTab.id === PanelEditorTabId.Alert && <PanelAlertTabContent panel={panel} dashboard={dashboard} />}\n        {activeTab.id === PanelEditorTabId.Transform && <TransformationsEditor panel={panel} />}\n      </TabContent>\n    </div>\n  );\n});\n\nPanelEditorTabs.displayName = 'PanelEditorTabs';\n\nfunction getCounter(panel: PanelModel, tab: PanelEditorTab) {\n  switch (tab.id) {\n    case PanelEditorTabId.Query:\n      return panel.targets.length;\n    case PanelEditorTabId.Alert:\n      return panel.alert ? 1 : 0;\n    case PanelEditorTabId.Transform:\n      const transformations = panel.getTransformations() ?? [];\n      return transformations.length;\n  }\n\n  return null;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css({\n      display: 'flex',\n      flexDirection: 'column',\n      height: '100%',\n    }),\n    tabBar: css({\n      paddingLeft: theme.spacing(2),\n    }),\n    tabContent: css({\n      padding: 0,\n      display: 'flex',\n      flexDirection: 'column',\n      flex: 1,\n      minHeight: 0,\n      background: theme.colors.background.primary,\n      border: `1px solid ${theme.components.panel.borderColor}`,\n      borderLeft: 'none',\n      borderBottom: 'none',\n      borderTopRightRadius: theme.shape.borderRadius(1.5),\n    }),\n  };\n};\n","import memoizeOne from 'memoize-one';\n\nimport { PanelPlugin } from '@grafana/data';\nimport { getConfig } from 'app/core/config';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { getRulesPermissions } from 'app/features/alerting/unified/utils/access-control';\nimport { GRAFANA_RULES_SOURCE_NAME } from 'app/features/alerting/unified/utils/datasource';\n\nimport { PanelEditorTab, PanelEditorTabId } from '../types';\n\nexport const getPanelEditorTabs = memoizeOne((tab?: string, plugin?: PanelPlugin) => {\n  const tabs: PanelEditorTab[] = [];\n\n  if (!plugin) {\n    return tabs;\n  }\n\n  let defaultTab = PanelEditorTabId.Visualize;\n\n  if (plugin.meta.skipDataQuery) {\n    return [];\n  }\n\n  if (!plugin.meta.skipDataQuery) {\n    defaultTab = PanelEditorTabId.Query;\n\n    tabs.push({\n      id: PanelEditorTabId.Query,\n      text: 'Query',\n      icon: 'database',\n      active: false,\n    });\n\n    tabs.push({\n      id: PanelEditorTabId.Transform,\n      text: 'Transform data',\n      icon: 'process',\n      active: false,\n    });\n  }\n\n  if (shouldShowAlertingTab(plugin)) {\n    tabs.push({\n      id: PanelEditorTabId.Alert,\n      text: 'Alert',\n      icon: 'bell',\n      active: false,\n    });\n  }\n\n  const activeTab = tabs.find((item) => item.id === (tab || defaultTab)) ?? tabs[0];\n  activeTab.active = true;\n\n  return tabs;\n});\n\nexport function shouldShowAlertingTab(plugin: PanelPlugin) {\n  const { unifiedAlertingEnabled = false } = getConfig();\n  const hasRuleReadPermissions = contextSrv.hasPermission(getRulesPermissions(GRAFANA_RULES_SOURCE_NAME).read);\n  const isAlertingAvailable = unifiedAlertingEnabled && hasRuleReadPermissions;\n  if (!isAlertingAvailable) {\n    return false;\n  }\n\n  const isGraph = plugin.meta.id === 'graph';\n  const isTimeseries = plugin.meta.id === 'timeseries';\n\n  return isGraph || isTimeseries;\n}\n","import { css } from '@emotion/css';\nimport { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { Subscription } from 'rxjs';\n\nimport { FieldConfigSource, GrafanaTheme2, NavModel, NavModelItem, PageLayoutType } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { locationService } from '@grafana/runtime';\nimport {\n  Button,\n  HorizontalGroup,\n  InlineSwitch,\n  ModalsController,\n  RadioButtonGroup,\n  stylesFactory,\n  Themeable2,\n  ToolbarButton,\n  ToolbarButtonRow,\n  withTheme2,\n  Stack,\n} from '@grafana/ui';\nimport { AppChromeUpdate } from 'app/core/components/AppChrome/AppChromeUpdate';\nimport { Page } from 'app/core/components/Page/Page';\nimport { SplitPaneWrapper } from 'app/core/components/SplitPaneWrapper/SplitPaneWrapper';\nimport { appEvents } from 'app/core/core';\nimport { SubMenuItems } from 'app/features/dashboard/components/SubMenu/SubMenuItems';\nimport { SaveLibraryPanelModal } from 'app/features/library-panels/components/SaveLibraryPanelModal/SaveLibraryPanelModal';\nimport { PanelModelWithLibraryPanel } from 'app/features/library-panels/types';\nimport { getPanelStateForModel } from 'app/features/panel/state/selectors';\nimport { updateTimeZoneForSession } from 'app/features/profile/state/reducers';\nimport { StoreState } from 'app/types';\nimport { PanelOptionsChangedEvent, ShowModalReactEvent } from 'app/types/events';\n\nimport { notifyApp } from '../../../../core/actions';\nimport { UnlinkModal } from '../../../dashboard-scene/scene/UnlinkModal';\nimport { isPanelModelLibraryPanel } from '../../../library-panels/guard';\nimport { getVariablesByKey } from '../../../variables/state/selectors';\nimport { DashboardPanel } from '../../dashgrid/DashboardPanel';\nimport { DashboardModel, PanelModel } from '../../state';\nimport { DashNavTimeControls } from '../DashNav/DashNavTimeControls';\nimport { SaveDashboardDrawer } from '../SaveDashboard/SaveDashboardDrawer';\n\nimport { OptionsPane } from './OptionsPane';\nimport { PanelEditorTableView } from './PanelEditorTableView';\nimport { PanelEditorTabs } from './PanelEditorTabs';\nimport { VisualizationButton } from './VisualizationButton';\nimport { discardPanelChanges, initPanelEditor, updatePanelEditorUIState } from './state/actions';\nimport { PanelEditorUIState, toggleTableView } from './state/reducers';\nimport { getPanelEditorTabs } from './state/selectors';\nimport { DisplayMode, displayModes, PanelEditorTab } from './types';\nimport { calculatePanelSize } from './utils';\n\ninterface OwnProps {\n  dashboard: DashboardModel;\n  sourcePanel: PanelModel;\n  sectionNav: NavModel;\n  pageNav: NavModelItem;\n  className?: string;\n  tab?: string;\n}\n\nconst mapStateToProps = (state: StoreState, ownProps: OwnProps) => {\n  const panel = state.panelEditor.getPanel();\n  const panelState = getPanelStateForModel(state, panel);\n\n  return {\n    panel,\n    plugin: panelState?.plugin,\n    instanceState: panelState?.instanceState,\n    initDone: state.panelEditor.initDone,\n    uiState: state.panelEditor.ui,\n    tableViewEnabled: state.panelEditor.tableViewEnabled,\n    variables: getVariablesByKey(ownProps.dashboard.uid, state),\n  };\n};\n\nconst mapDispatchToProps = {\n  initPanelEditor,\n  discardPanelChanges,\n  updatePanelEditorUIState,\n  updateTimeZoneForSession,\n  toggleTableView,\n  notifyApp,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype Props = OwnProps & ConnectedProps<typeof connector> & Themeable2;\n\ninterface State {\n  showSaveLibraryPanelModal?: boolean;\n}\n\nexport class PanelEditorUnconnected extends PureComponent<Props> {\n  private eventSubs?: Subscription;\n\n  state: State = {\n    showSaveLibraryPanelModal: false,\n  };\n\n  componentDidMount() {\n    this.props.initPanelEditor(this.props.sourcePanel, this.props.dashboard);\n  }\n\n  componentDidUpdate() {\n    const { panel, initDone } = this.props;\n\n    if (initDone && !this.eventSubs) {\n      this.eventSubs = new Subscription();\n      this.eventSubs.add(panel.events.subscribe(PanelOptionsChangedEvent, this.triggerForceUpdate));\n    }\n  }\n\n  componentWillUnmount() {\n    // redux action exitPanelEditor is called on location change from DashboardPrompt\n    this.eventSubs?.unsubscribe();\n  }\n\n  triggerForceUpdate = () => {\n    this.forceUpdate();\n  };\n\n  onBack = () => {\n    locationService.partial({\n      editPanel: null,\n      tab: null,\n      showCategory: null,\n    });\n  };\n\n  onDiscard = () => {\n    this.props.discardPanelChanges();\n    this.onBack();\n  };\n\n  onSaveDashboard = () => {\n    appEvents.publish(\n      new ShowModalReactEvent({\n        component: SaveDashboardDrawer,\n        props: { dashboard: this.props.dashboard },\n      })\n    );\n  };\n\n  onSaveLibraryPanel = async () => {\n    if (!isPanelModelLibraryPanel(this.props.panel)) {\n      // New library panel, no need to display modal\n      return;\n    }\n\n    this.setState({ showSaveLibraryPanelModal: true });\n  };\n\n  onChangeTab = (tab: PanelEditorTab) => {\n    locationService.partial({\n      tab: tab.id,\n    });\n  };\n\n  onFieldConfigChange = (config: FieldConfigSource) => {\n    // we do not need to trigger force update here as the function call below\n    // fires PanelOptionsChangedEvent which we subscribe to above\n    this.props.panel.updateFieldConfig({\n      ...config,\n    });\n  };\n\n  onPanelOptionsChanged = (options: PanelModel['options']) => {\n    // we do not need to trigger force update here as the function call below\n    // fires PanelOptionsChangedEvent which we subscribe to above\n    this.props.panel.updateOptions(options);\n  };\n\n  onPanelConfigChanged = (configKey: keyof PanelModel, value: unknown) => {\n    this.props.panel.setProperty(configKey, value);\n    this.props.panel.render();\n    this.forceUpdate();\n  };\n\n  onDisplayModeChange = (mode?: DisplayMode) => {\n    const { updatePanelEditorUIState } = this.props;\n    if (this.props.tableViewEnabled) {\n      this.props.toggleTableView();\n    }\n    updatePanelEditorUIState({\n      mode: mode,\n    });\n  };\n\n  onToggleTableView = () => {\n    this.props.toggleTableView();\n  };\n\n  renderPanel(styles: EditorStyles, isOnlyPanel: boolean) {\n    const { dashboard, panel, uiState, tableViewEnabled, theme } = this.props;\n\n    return (\n      <div className={styles.mainPaneWrapper} key=\"panel\">\n        {this.renderPanelToolbar(styles)}\n        <div className={styles.panelWrapper}>\n          <AutoSizer>\n            {({ width, height }) => {\n              if (width < 3 || height < 3) {\n                return null;\n              }\n\n              // If no tabs limit height so panel does not extend to edge\n              if (isOnlyPanel) {\n                height -= theme.spacing.gridSize * 2;\n              }\n\n              if (tableViewEnabled) {\n                return <PanelEditorTableView width={width} height={height} panel={panel} dashboard={dashboard} />;\n              }\n\n              const panelSize = calculatePanelSize(uiState.mode, width, height, panel);\n\n              return (\n                <div className={styles.centeringContainer} style={{ width, height }}>\n                  <div style={panelSize} data-panelid={panel.id}>\n                    <DashboardPanel\n                      key={panel.key}\n                      stateKey={panel.key}\n                      dashboard={dashboard}\n                      panel={panel}\n                      isEditing={true}\n                      isViewing={false}\n                      lazy={false}\n                      width={panelSize.width}\n                      height={panelSize.height}\n                    />\n                  </div>\n                </div>\n              );\n            }}\n          </AutoSizer>\n        </div>\n      </div>\n    );\n  }\n\n  renderPanelAndEditor(uiState: PanelEditorUIState, styles: EditorStyles) {\n    const { panel, dashboard, plugin, tab } = this.props;\n    const tabs = getPanelEditorTabs(tab, plugin);\n    const isOnlyPanel = tabs.length === 0;\n    const panelPane = this.renderPanel(styles, isOnlyPanel);\n\n    if (tabs.length === 0) {\n      return <div className={styles.onlyPanel}>{panelPane}</div>;\n    }\n\n    return (\n      <SplitPaneWrapper\n        splitOrientation=\"horizontal\"\n        maxSize={-200}\n        paneSize={uiState.topPaneSize}\n        primary=\"first\"\n        secondaryPaneStyle={{ minHeight: 0 }}\n        onDragFinished={(size) => {\n          if (size) {\n            updatePanelEditorUIState({ topPaneSize: size / window.innerHeight });\n          }\n        }}\n      >\n        {panelPane}\n        <div\n          className={styles.tabsWrapper}\n          data-testid={selectors.components.PanelEditor.DataPane.content}\n          key=\"panel-editor-tabs\"\n        >\n          <PanelEditorTabs\n            key={panel.key}\n            panel={panel}\n            dashboard={dashboard}\n            tabs={tabs}\n            onChangeTab={this.onChangeTab}\n          />\n        </div>\n      </SplitPaneWrapper>\n    );\n  }\n\n  renderTemplateVariables(styles: EditorStyles) {\n    const { variables } = this.props;\n\n    if (!variables.length) {\n      return null;\n    }\n\n    return (\n      <div className={styles.variablesWrapper}>\n        <SubMenuItems variables={variables} />\n      </div>\n    );\n  }\n\n  renderPanelToolbar(styles: EditorStyles) {\n    const { dashboard, uiState, variables, updateTimeZoneForSession, panel, tableViewEnabled } = this.props;\n\n    return (\n      <div className={styles.panelToolbar}>\n        <HorizontalGroup justify={variables.length > 0 ? 'space-between' : 'flex-end'} align=\"flex-start\">\n          {this.renderTemplateVariables(styles)}\n          <Stack gap={1}>\n            <InlineSwitch\n              label=\"Table view\"\n              showLabel={true}\n              id=\"table-view\"\n              value={tableViewEnabled}\n              onClick={this.onToggleTableView}\n              data-testid={selectors.components.PanelEditor.toggleTableView}\n            />\n            <RadioButtonGroup value={uiState.mode} options={displayModes} onChange={this.onDisplayModeChange} />\n            <DashNavTimeControls dashboard={dashboard} onChangeTimeZone={updateTimeZoneForSession} isOnCanvas={true} />\n            {!uiState.isPanelOptionsVisible && <VisualizationButton panel={panel} />}\n          </Stack>\n        </HorizontalGroup>\n      </div>\n    );\n  }\n\n  renderEditorActions() {\n    const size = 'sm';\n    let editorActions = [\n      <Button\n        onClick={this.onDiscard}\n        title=\"Undo all changes\"\n        key=\"discard\"\n        size={size}\n        variant=\"destructive\"\n        fill=\"outline\"\n      >\n        Discard\n      </Button>,\n      this.props.dashboard.meta.canSave &&\n        (this.props.panel.libraryPanel ? (\n          <Button\n            onClick={this.onSaveLibraryPanel}\n            variant=\"primary\"\n            size={size}\n            title=\"Apply changes and save library panel\"\n            key=\"save-panel\"\n          >\n            Save library panel\n          </Button>\n        ) : (\n          <Button\n            onClick={this.onSaveDashboard}\n            title=\"Apply changes and save dashboard\"\n            key=\"save\"\n            size={size}\n            variant=\"secondary\"\n          >\n            Save\n          </Button>\n        )),\n      <Button\n        onClick={this.onBack}\n        variant=\"primary\"\n        title=\"Apply changes and go back to dashboard\"\n        data-testid={selectors.components.PanelEditor.applyButton}\n        key=\"apply\"\n        size={size}\n      >\n        Apply\n      </Button>,\n    ];\n\n    if (this.props.panel.libraryPanel) {\n      editorActions.splice(\n        1,\n        0,\n        <ModalsController key=\"unlink-controller\">\n          {({ showModal, hideModal }) => {\n            return (\n              <ToolbarButton\n                onClick={() => {\n                  showModal(UnlinkModal, {\n                    onConfirm: () => {\n                      this.props.panel.unlinkLibraryPanel();\n                      this.forceUpdate();\n                    },\n                    onDismiss: hideModal,\n                    isOpen: true,\n                  });\n                }}\n                title=\"Disconnects this panel from the library panel so that you can edit it regularly.\"\n                key=\"unlink\"\n              >\n                Unlink\n              </ToolbarButton>\n            );\n          }}\n        </ModalsController>\n      );\n\n      // Remove \"Apply\" button\n      editorActions.pop();\n    }\n\n    return editorActions;\n  }\n\n  renderOptionsPane() {\n    const { plugin, dashboard, panel, instanceState } = this.props;\n\n    if (!plugin) {\n      return <div />;\n    }\n\n    return (\n      <OptionsPane\n        plugin={plugin}\n        dashboard={dashboard}\n        panel={panel}\n        instanceState={instanceState}\n        onFieldConfigsChange={this.onFieldConfigChange}\n        onPanelOptionsChanged={this.onPanelOptionsChanged}\n        onPanelConfigChange={this.onPanelConfigChanged}\n      />\n    );\n  }\n\n  onGoBackToDashboard = () => {\n    locationService.partial({ editPanel: null, tab: null, showCategory: null });\n  };\n\n  onConfirmAndDismissLibarayPanelModel = () => {\n    this.setState({ showSaveLibraryPanelModal: false });\n  };\n\n  render() {\n    const { initDone, uiState, theme, sectionNav, pageNav, className, updatePanelEditorUIState } = this.props;\n    const styles = getStyles(theme, this.props);\n\n    if (!initDone) {\n      return null;\n    }\n\n    return (\n      <Page\n        navModel={sectionNav}\n        pageNav={pageNav}\n        data-testid={selectors.components.PanelEditor.General.content}\n        layout={PageLayoutType.Custom}\n        className={className}\n      >\n        <AppChromeUpdate\n          actions={<ToolbarButtonRow alignment=\"right\">{this.renderEditorActions()}</ToolbarButtonRow>}\n        />\n        <div className={styles.wrapper}>\n          <div className={styles.verticalSplitPanesWrapper}>\n            {!uiState.isPanelOptionsVisible ? (\n              this.renderPanelAndEditor(uiState, styles)\n            ) : (\n              <SplitPaneWrapper\n                splitOrientation=\"vertical\"\n                maxSize={-300}\n                paneSize={uiState.rightPaneSize}\n                primary=\"second\"\n                onDragFinished={(size) => {\n                  if (size) {\n                    updatePanelEditorUIState({ rightPaneSize: size / window.innerWidth });\n                  }\n                }}\n              >\n                {this.renderPanelAndEditor(uiState, styles)}\n                {this.renderOptionsPane()}\n              </SplitPaneWrapper>\n            )}\n          </div>\n          {this.state.showSaveLibraryPanelModal && (\n            <SaveLibraryPanelModal\n              panel={this.props.panel as PanelModelWithLibraryPanel}\n              folderUid={this.props.dashboard.meta.folderUid ?? ''}\n              onConfirm={this.onConfirmAndDismissLibarayPanelModel}\n              onDiscard={this.onDiscard}\n              onDismiss={this.onConfirmAndDismissLibarayPanelModel}\n            />\n          )}\n        </div>\n      </Page>\n    );\n  }\n}\n\nexport const PanelEditor = withTheme2(connector(PanelEditorUnconnected));\n\n/*\n * Styles\n */\nexport const getStyles = stylesFactory((theme: GrafanaTheme2, props: Props) => {\n  const { uiState } = props;\n  const paneSpacing = theme.spacing(2);\n\n  return {\n    wrapper: css({\n      width: '100%',\n      flexGrow: 1,\n      minHeight: 0,\n      display: 'flex',\n      paddingTop: theme.spacing(2),\n    }),\n    verticalSplitPanesWrapper: css({\n      display: 'flex',\n      flexDirection: 'column',\n      height: '100%',\n      width: '100%',\n      position: 'relative',\n    }),\n    mainPaneWrapper: css({\n      display: 'flex',\n      flexDirection: 'column',\n      height: '100%',\n      width: '100%',\n      paddingRight: `${uiState.isPanelOptionsVisible ? 0 : paneSpacing}`,\n    }),\n    variablesWrapper: css({\n      label: 'variablesWrapper',\n      display: 'flex',\n      flexGrow: 1,\n      flexWrap: 'wrap',\n      gap: theme.spacing(1, 2),\n    }),\n    panelWrapper: css({\n      flex: '1 1 0',\n      minHeight: 0,\n      width: '100%',\n      paddingLeft: paneSpacing,\n    }),\n    tabsWrapper: css({\n      height: '100%',\n      width: '100%',\n    }),\n    panelToolbar: css({\n      display: 'flex',\n      padding: `0 0 ${paneSpacing} ${paneSpacing}`,\n      justifyContent: 'space-between',\n      flexWrap: 'wrap',\n    }),\n    angularWarning: css({\n      display: 'flex',\n      height: theme.spacing(4),\n      alignItems: 'center',\n    }),\n    toolbarLeft: css({\n      paddingLeft: theme.spacing(1),\n    }),\n    centeringContainer: css({\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      position: 'relative',\n      flexDirection: 'column',\n    }),\n    onlyPanel: css({\n      height: '100%',\n      position: 'absolute',\n      overflow: 'hidden',\n      width: '100%',\n    }),\n  };\n});\n\ntype EditorStyles = ReturnType<typeof getStyles>;\n","import { css } from '@emotion/css';\nimport { useEffect, useState } from 'react';\n\nimport { AnnotationQuery, EventBus, GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { InlineField, InlineFieldRow, InlineSwitch, useStyles2 } from '@grafana/ui';\nimport { LoadingIndicator } from '@grafana/ui/src/components/PanelChrome/LoadingIndicator';\n\nimport { AnnotationQueryFinished, AnnotationQueryStarted } from '../../../../types/events';\nimport { getDashboardQueryRunner } from '../../../query/state/DashboardQueryRunner/DashboardQueryRunner';\n\nexport interface AnnotationPickerProps {\n  events: EventBus;\n  annotation: AnnotationQuery;\n  onEnabledChanged: (annotation: AnnotationQuery) => void;\n}\n\nexport const AnnotationPicker = ({ annotation, events, onEnabledChanged }: AnnotationPickerProps): JSX.Element => {\n  const [loading, setLoading] = useState(false);\n  const styles = useStyles2(getStyles);\n  const onCancel = () => getDashboardQueryRunner().cancel(annotation);\n\n  useEffect(() => {\n    const started = events.getStream(AnnotationQueryStarted).subscribe({\n      next: (event) => {\n        if (event.payload === annotation) {\n          setLoading(true);\n        }\n      },\n    });\n    const stopped = events.getStream(AnnotationQueryFinished).subscribe({\n      next: (event) => {\n        if (event.payload === annotation) {\n          setLoading(false);\n        }\n      },\n    });\n\n    return () => {\n      started.unsubscribe();\n      stopped.unsubscribe();\n    };\n  });\n\n  return (\n    <div key={annotation.name} className={styles.annotation}>\n      <InlineFieldRow>\n        <InlineField\n          label={annotation.name}\n          disabled={loading}\n          data-testid={selectors.pages.Dashboard.SubMenu.Annotations.annotationLabel(annotation.name)}\n        >\n          <InlineSwitch\n            label={annotation.name}\n            value={annotation.enable}\n            onChange={() => onEnabledChanged(annotation)}\n            disabled={loading}\n            data-testid={selectors.pages.Dashboard.SubMenu.Annotations.annotationToggle(annotation.name)}\n          />\n        </InlineField>\n        <div className={styles.indicator}>\n          <LoadingIndicator loading={loading} onCancel={onCancel} />\n        </div>\n      </InlineFieldRow>\n    </div>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    annotation: css({\n      display: 'inline-block',\n      marginRight: theme.spacing(1),\n      '.fa-caret-down': {\n        fontSize: '75%',\n        paddingLeft: theme.spacing(1),\n      },\n      '.gf-form-inline .gf-form': {\n        marginBottom: 0,\n      },\n    }),\n    indicator: css({\n      alignSelf: 'center',\n      padding: `0 ${theme.spacing(0.5)}`,\n    }),\n  };\n}\n","import { useEffect, useState } from 'react';\n\nimport { AnnotationQuery, DataQuery, EventBus } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport { AnnotationPicker } from './AnnotationPicker';\n\ninterface Props {\n  events: EventBus;\n  annotations: AnnotationQuery[];\n  onAnnotationChanged: (annotation: AnnotationQuery<DataQuery>) => void;\n}\n\nexport const Annotations = ({ annotations, onAnnotationChanged, events }: Props) => {\n  const [visibleAnnotations, setVisibleAnnotations] = useState<AnnotationQuery[]>([]);\n  useEffect(() => {\n    setVisibleAnnotations(annotations.filter((annotation) => annotation.hide !== true));\n  }, [annotations]);\n\n  if (visibleAnnotations.length === 0) {\n    return null;\n  }\n\n  return (\n    <div data-testid={selectors.pages.Dashboard.SubMenu.Annotations.annotationsWrapper}>\n      {visibleAnnotations.map((annotation) => (\n        <AnnotationPicker\n          events={events}\n          annotation={annotation}\n          onEnabledChanged={onAnnotationChanged}\n          key={annotation.name}\n        />\n      ))}\n    </div>\n  );\n};\n","import { useEffectOnce } from 'react-use';\n\nimport { sanitizeUrl } from '@grafana/data/src/text/sanitize';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { TimeRangeUpdatedEvent } from '@grafana/runtime';\nimport { DashboardLink } from '@grafana/schema';\nimport { Tooltip, useForceUpdate } from '@grafana/ui';\nimport { LINK_ICON_MAP } from 'app/features/dashboard-scene/settings/links/utils';\n\nimport { getLinkSrv } from '../../../panel/panellinks/link_srv';\nimport { DashboardModel } from '../../state';\n\nimport { DashboardLinkButton, DashboardLinksDashboard } from './DashboardLinksDashboard';\n\nexport interface Props {\n  dashboard: DashboardModel;\n  links: DashboardLink[];\n}\n\nexport const DashboardLinks = ({ dashboard, links }: Props) => {\n  const forceUpdate = useForceUpdate();\n\n  useEffectOnce(() => {\n    const sub = dashboard.events.subscribe(TimeRangeUpdatedEvent, forceUpdate);\n    return () => sub.unsubscribe();\n  });\n\n  if (!links.length) {\n    return null;\n  }\n\n  return (\n    <>\n      {links.map((link: DashboardLink, index: number) => {\n        const linkInfo = getLinkSrv().getAnchorInfo(link);\n        const key = `${link.title}-$${index}`;\n\n        if (link.type === 'dashboards') {\n          return <DashboardLinksDashboard key={key} link={link} linkInfo={linkInfo} dashboardUID={dashboard.uid} />;\n        }\n\n        const icon = LINK_ICON_MAP[link.icon];\n\n        const linkElement = (\n          <DashboardLinkButton\n            href={sanitizeUrl(linkInfo.href)}\n            target={link.targetBlank ? '_blank' : undefined}\n            rel=\"noreferrer\"\n            data-testid={selectors.components.DashboardLinks.link}\n            icon={icon}\n          >\n            {linkInfo.title}\n          </DashboardLinkButton>\n        );\n\n        return (\n          <div key={key} data-testid={selectors.components.DashboardLinks.container}>\n            {link.tooltip ? <Tooltip content={linkInfo.tooltip}>{linkElement}</Tooltip> : linkElement}\n          </div>\n        );\n      })}\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport { PureComponent } from 'react';\nimport * as React from 'react';\nimport { connect, MapStateToProps } from 'react-redux';\n\nimport { AnnotationQuery, DataQuery, TypedVariableModel, GrafanaTheme2 } from '@grafana/data';\nimport { DashboardLink } from '@grafana/schema';\nimport { stylesFactory, Themeable2, withTheme2 } from '@grafana/ui';\n\nimport { StoreState } from '../../../../types';\nimport { getSubMenuVariables, getVariablesState } from '../../../variables/state/selectors';\nimport { DashboardModel } from '../../state';\n\nimport { Annotations } from './Annotations';\nimport { DashboardLinks } from './DashboardLinks';\nimport { SubMenuItems } from './SubMenuItems';\n\ninterface OwnProps extends Themeable2 {\n  dashboard: DashboardModel;\n  links: DashboardLink[];\n  annotations: AnnotationQuery[];\n}\n\ninterface ConnectedProps {\n  variables: TypedVariableModel[];\n}\n\ninterface DispatchProps {}\n\ntype Props = OwnProps & ConnectedProps & DispatchProps;\n\nclass SubMenuUnConnected extends PureComponent<Props> {\n  onAnnotationStateChanged = (updatedAnnotation: AnnotationQuery<DataQuery>) => {\n    // we're mutating dashboard state directly here until annotations are in Redux.\n    for (let index = 0; index < this.props.dashboard.annotations.list.length; index++) {\n      const annotation = this.props.dashboard.annotations.list[index];\n      if (annotation.name === updatedAnnotation.name) {\n        annotation.enable = !annotation.enable;\n        break;\n      }\n    }\n    this.props.dashboard.startRefresh();\n    this.forceUpdate();\n  };\n\n  disableSubmitOnEnter = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n  };\n\n  render() {\n    const { dashboard, variables, links, annotations, theme } = this.props;\n\n    const styles = getStyles(theme);\n\n    const readOnlyVariables = dashboard.meta.isSnapshot ?? false;\n\n    return (\n      <div className={styles.submenu}>\n        <form aria-label=\"Template variables\" className={styles.formStyles} onSubmit={this.disableSubmitOnEnter}>\n          <SubMenuItems variables={variables} readOnly={readOnlyVariables} />\n        </form>\n        <Annotations\n          annotations={annotations}\n          onAnnotationChanged={this.onAnnotationStateChanged}\n          events={dashboard.events}\n        />\n        <div className={styles.spacer} />\n        {dashboard && <DashboardLinks dashboard={dashboard} links={links} />}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state, ownProps) => {\n  const { uid } = ownProps.dashboard;\n  const templatingState = getVariablesState(uid, state);\n  return {\n    variables: getSubMenuVariables(uid, templatingState.variables),\n  };\n};\n\nconst getStyles = stylesFactory((theme: GrafanaTheme2) => {\n  return {\n    formStyles: css({\n      display: 'contents',\n      flexWrap: 'wrap',\n    }),\n    submenu: css({\n      display: 'flex',\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n      alignContent: 'flex-start',\n      alignItems: 'flex-start',\n      gap: `${theme.spacing(1)} ${theme.spacing(2)}`,\n      padding: `0 0 ${theme.spacing(1)} 0`,\n    }),\n    spacer: css({\n      flexGrow: 1,\n    }),\n  };\n});\n\nexport const SubMenu = withTheme2(connect(mapStateToProps)(SubMenuUnConnected));\n\nSubMenu.displayName = 'SubMenu';\n","import { cx } from '@emotion/css';\nimport { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { NavModel, NavModelItem, TimeRange, PageLayoutType, locationUtil } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config, locationService } from '@grafana/runtime';\nimport { Themeable2, withTheme2 } from '@grafana/ui';\nimport { notifyApp } from 'app/core/actions';\nimport { Page } from 'app/core/components/Page/Page';\nimport { EntityNotFound } from 'app/core/components/PageNotFound/EntityNotFound';\nimport { GrafanaContext, GrafanaContextType } from 'app/core/context/GrafanaContext';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { getKioskMode } from 'app/core/navigation/kiosk';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { ID_PREFIX } from 'app/core/reducers/navBarTree';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { PanelModel } from 'app/features/dashboard/state';\nimport { dashboardWatcher } from 'app/features/live/dashboard/dashboardWatcher';\nimport { AngularDeprecationNotice } from 'app/features/plugins/angularDeprecation/AngularDeprecationNotice';\nimport { AngularMigrationNotice } from 'app/features/plugins/angularDeprecation/AngularMigrationNotice';\nimport { getPageNavFromSlug, getRootContentNavModel } from 'app/features/storage/StorageFolderPage';\nimport { DashboardRoutes, KioskMode, StoreState } from 'app/types';\nimport { PanelEditEnteredEvent, PanelEditExitedEvent } from 'app/types/events';\n\nimport { cancelVariables, templateVarsChangedInUrl } from '../../variables/state/actions';\nimport { findTemplateVarChanges } from '../../variables/utils';\nimport { AddWidgetModal } from '../components/AddWidgetModal/AddWidgetModal';\nimport { DashNav } from '../components/DashNav';\nimport { DashboardFailed } from '../components/DashboardLoading/DashboardFailed';\nimport { DashboardLoading } from '../components/DashboardLoading/DashboardLoading';\nimport { DashboardPrompt } from '../components/DashboardPrompt/DashboardPrompt';\nimport { DashboardSettings } from '../components/DashboardSettings';\nimport { PanelInspector } from '../components/Inspector/PanelInspector';\nimport { PanelEditor } from '../components/PanelEditor/PanelEditor';\nimport { ShareModal } from '../components/ShareModal';\nimport { SubMenu } from '../components/SubMenu/SubMenu';\nimport { DashboardGrid } from '../dashgrid/DashboardGrid';\nimport { liveTimer } from '../dashgrid/liveTimer';\nimport { getTimeSrv } from '../services/TimeSrv';\nimport { explicitlyControlledMigrationPanels, autoMigrateAngular } from '../state/PanelModel';\nimport { cleanUpDashboardAndVariables } from '../state/actions';\nimport { initDashboard } from '../state/initDashboard';\n\nimport { DashboardPageRouteParams, DashboardPageRouteSearchParams } from './types';\n\nexport const mapStateToProps = (state: StoreState) => ({\n  initPhase: state.dashboard.initPhase,\n  initError: state.dashboard.initError,\n  dashboard: state.dashboard.getModel(),\n  navIndex: state.navIndex,\n});\n\nconst mapDispatchToProps = {\n  initDashboard,\n  cleanUpDashboardAndVariables,\n  notifyApp,\n  cancelVariables,\n  templateVarsChangedInUrl,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = Themeable2 &\n  GrafanaRouteComponentProps<DashboardPageRouteParams, DashboardPageRouteSearchParams> &\n  ConnectedProps<typeof connector>;\n\nexport interface State {\n  editPanel: PanelModel | null;\n  viewPanel: PanelModel | null;\n  editView: string | null;\n  updateScrollTop?: number;\n  rememberScrollTop?: number;\n  showLoadingState: boolean;\n  panelNotFound: boolean;\n  editPanelAccessDenied: boolean;\n  scrollElement?: HTMLDivElement;\n  pageNav?: NavModelItem;\n  sectionNav?: NavModel;\n}\n\nexport class UnthemedDashboardPage extends PureComponent<Props, State> {\n  declare context: GrafanaContextType;\n  static contextType = GrafanaContext;\n\n  private forceRouteReloadCounter = 0;\n  state: State = this.getCleanState();\n\n  getCleanState(): State {\n    return {\n      editView: null,\n      editPanel: null,\n      viewPanel: null,\n      showLoadingState: false,\n      panelNotFound: false,\n      editPanelAccessDenied: false,\n    };\n  }\n\n  componentDidMount() {\n    this.initDashboard();\n    this.forceRouteReloadCounter = (this.props.history.location.state as any)?.routeReloadCounter || 0;\n  }\n\n  componentWillUnmount() {\n    this.closeDashboard();\n  }\n\n  closeDashboard() {\n    this.props.cleanUpDashboardAndVariables();\n    this.setState(this.getCleanState());\n  }\n\n  initDashboard() {\n    const { dashboard, match, queryParams } = this.props;\n\n    if (dashboard) {\n      this.closeDashboard();\n    }\n\n    this.props.initDashboard({\n      urlSlug: match.params.slug,\n      urlUid: match.params.uid,\n      urlType: match.params.type,\n      urlFolderUid: queryParams.folderUid,\n      panelType: queryParams.panelType,\n      routeName: this.props.route.routeName,\n      fixUrl: true,\n      accessToken: match.params.accessToken,\n      keybindingSrv: this.context.keybindings,\n    });\n\n    // small delay to start live updates\n    setTimeout(this.updateLiveTimer, 250);\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    const { dashboard, match, templateVarsChangedInUrl } = this.props;\n    const routeReloadCounter = (this.props.history.location.state as any)?.routeReloadCounter;\n\n    if (!dashboard) {\n      return;\n    }\n\n    if (\n      prevProps.match.params.uid !== match.params.uid ||\n      (routeReloadCounter !== undefined && this.forceRouteReloadCounter !== routeReloadCounter)\n    ) {\n      this.initDashboard();\n      this.forceRouteReloadCounter = routeReloadCounter;\n      return;\n    }\n\n    if (prevProps.location.search !== this.props.location.search) {\n      const prevUrlParams = prevProps.queryParams;\n      const urlParams = this.props.queryParams;\n\n      if (urlParams?.from !== prevUrlParams?.from || urlParams?.to !== prevUrlParams?.to) {\n        getTimeSrv().updateTimeRangeFromUrl();\n        this.updateLiveTimer();\n      }\n\n      if (!prevUrlParams?.refresh && urlParams?.refresh) {\n        getTimeSrv().setAutoRefresh(urlParams.refresh);\n      }\n\n      const templateVarChanges = findTemplateVarChanges(this.props.queryParams, prevProps.queryParams);\n\n      if (templateVarChanges) {\n        templateVarsChangedInUrl(dashboard.uid, templateVarChanges);\n      }\n    }\n\n    // entering edit mode\n    if (this.state.editPanel && !prevState.editPanel) {\n      dashboardWatcher.setEditingState(true);\n\n      // Some panels need to be notified when entering edit mode\n      this.props.dashboard?.events.publish(new PanelEditEnteredEvent(this.state.editPanel.id));\n    }\n\n    // leaving edit mode\n    if (!this.state.editPanel && prevState.editPanel) {\n      dashboardWatcher.setEditingState(false);\n\n      // Some panels need kicked when leaving edit mode\n      this.props.dashboard?.events.publish(new PanelEditExitedEvent(prevState.editPanel.id));\n    }\n\n    if (this.state.editPanelAccessDenied) {\n      this.props.notifyApp(createErrorNotification('Permission to edit panel denied'));\n      locationService.partial({ editPanel: null });\n    }\n\n    if (this.state.panelNotFound) {\n      this.props.notifyApp(createErrorNotification(`Panel not found`));\n      locationService.partial({ editPanel: null, viewPanel: null });\n    }\n\n    if (config.featureToggles.bodyScrolling) {\n      // Update window scroll position\n      if (this.state.updateScrollTop !== undefined && this.state.updateScrollTop !== prevState.updateScrollTop) {\n        window.scrollTo(0, this.state.updateScrollTop);\n      }\n    }\n  }\n\n  updateLiveTimer = () => {\n    let tr: TimeRange | undefined = undefined;\n    if (this.props.dashboard?.liveNow) {\n      tr = getTimeSrv().timeRange();\n    }\n    liveTimer.setLiveTimeRange(tr);\n  };\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    const { dashboard, queryParams } = props;\n\n    const urlEditPanelId = queryParams.editPanel;\n    const urlViewPanelId = queryParams.viewPanel;\n    const urlEditView = queryParams.editview;\n\n    if (!dashboard) {\n      return state;\n    }\n\n    const updatedState = { ...state };\n\n    if (config.featureToggles.bodyScrolling) {\n      // Entering settings view\n      if (!state.editView && urlEditView) {\n        updatedState.editView = urlEditView;\n        updatedState.rememberScrollTop = window.scrollY;\n        updatedState.updateScrollTop = 0;\n      }\n\n      // Leaving settings view\n      else if (state.editView && !urlEditView) {\n        updatedState.updateScrollTop = state.rememberScrollTop;\n        updatedState.editView = null;\n      }\n    }\n\n    // Entering edit mode\n    if (!state.editPanel && urlEditPanelId) {\n      const panel = dashboard.getPanelByUrlId(urlEditPanelId);\n      if (panel) {\n        if (dashboard.canEditPanel(panel)) {\n          updatedState.editPanel = panel;\n          updatedState.rememberScrollTop = config.featureToggles.bodyScrolling\n            ? window.scrollY\n            : state.scrollElement?.scrollTop;\n          if (config.featureToggles.bodyScrolling) {\n            updatedState.updateScrollTop = 0;\n          }\n        } else {\n          updatedState.editPanelAccessDenied = true;\n        }\n      } else {\n        updatedState.panelNotFound = true;\n      }\n    }\n    // Leaving edit mode\n    else if (state.editPanel && !urlEditPanelId) {\n      updatedState.editPanel = null;\n      updatedState.updateScrollTop = state.rememberScrollTop;\n    }\n\n    // Entering view mode\n    if (!state.viewPanel && urlViewPanelId) {\n      const panel = dashboard.getPanelByUrlId(urlViewPanelId);\n      if (panel) {\n        // This mutable state feels wrong to have in getDerivedStateFromProps\n        // Should move this state out of dashboard in the future\n        dashboard.initViewPanel(panel);\n        updatedState.viewPanel = panel;\n        updatedState.rememberScrollTop = config.featureToggles.bodyScrolling\n          ? window.scrollY\n          : state.scrollElement?.scrollTop;\n        updatedState.updateScrollTop = 0;\n      } else {\n        updatedState.panelNotFound = true;\n      }\n    }\n    // Leaving view mode\n    else if (state.viewPanel && !urlViewPanelId) {\n      // This mutable state feels wrong to have in getDerivedStateFromProps\n      // Should move this state out of dashboard in the future\n      dashboard.exitViewPanel(state.viewPanel);\n      updatedState.viewPanel = null;\n      updatedState.updateScrollTop = state.rememberScrollTop;\n    }\n\n    // if we removed url edit state, clear any panel not found state\n    if (state.panelNotFound || (state.editPanelAccessDenied && !urlEditPanelId)) {\n      updatedState.panelNotFound = false;\n      updatedState.editPanelAccessDenied = false;\n    }\n\n    return updateStatePageNavFromProps(props, updatedState);\n  }\n\n  setScrollRef = (scrollElement: HTMLDivElement): void => {\n    this.setState({ scrollElement });\n  };\n\n  getInspectPanel() {\n    const { dashboard, queryParams } = this.props;\n\n    const inspectPanelId = queryParams.inspect;\n\n    if (!dashboard || !inspectPanelId) {\n      return null;\n    }\n\n    const inspectPanel = dashboard.getPanelById(parseInt(inspectPanelId, 10));\n\n    // cannot inspect panels plugin is not already loaded\n    if (!inspectPanel) {\n      return null;\n    }\n\n    return inspectPanel;\n  }\n\n  onCloseShareModal = () => {\n    locationService.partial({ shareView: null });\n  };\n\n  render() {\n    const { dashboard, initError, queryParams } = this.props;\n    const { editPanel, viewPanel, updateScrollTop, pageNav, sectionNav } = this.state;\n    const kioskMode = getKioskMode(this.props.queryParams);\n\n    if (!dashboard || !pageNav || !sectionNav) {\n      return <DashboardLoading initPhase={this.props.initPhase} />;\n    }\n\n    const inspectPanel = this.getInspectPanel();\n    const showSubMenu = !editPanel && !kioskMode && !this.props.queryParams.editview && dashboard.isSubMenuVisible();\n\n    const showToolbar = kioskMode !== KioskMode.Full && !queryParams.editview;\n\n    const pageClassName = cx({\n      'panel-in-fullscreen': Boolean(viewPanel),\n      'page-hidden': Boolean(queryParams.editview || editPanel),\n    });\n\n    if (dashboard.meta.dashboardNotFound) {\n      return (\n        <Page navId=\"dashboards/browse\" layout={PageLayoutType.Canvas} pageNav={{ text: 'Not found' }}>\n          <EntityNotFound entity=\"Dashboard\" />\n        </Page>\n      );\n    }\n\n    const migrationFeatureFlags = new Set([\n      'autoMigrateOldPanels',\n      'autoMigrateGraphPanel',\n      'autoMigrateTablePanel',\n      'autoMigratePiechartPanel',\n      'autoMigrateWorldmapPanel',\n      'autoMigrateStatPanel',\n      'disableAngular',\n    ]);\n\n    const isAutoMigrationFlagSet = () => {\n      const urlParams = new URLSearchParams(window.location.search);\n      let isFeatureFlagSet = false;\n\n      urlParams.forEach((value, key) => {\n        if (key.startsWith('__feature.')) {\n          const featureName = key.substring(10);\n          const toggleState = value === 'true' || value === '';\n          const featureToggles = config.featureToggles as Record<string, boolean>;\n\n          if (featureToggles[featureName]) {\n            return;\n          }\n\n          if (migrationFeatureFlags.has(featureName) && toggleState) {\n            isFeatureFlagSet = true;\n            return;\n          }\n        }\n      });\n\n      return isFeatureFlagSet;\n    };\n\n    const dashboardWasAngular = dashboard.panels.some(\n      (panel) => panel.autoMigrateFrom && autoMigrateAngular[panel.autoMigrateFrom] != null\n    );\n\n    const showDashboardMigrationNotice =\n      config.featureToggles.angularDeprecationUI &&\n      dashboardWasAngular &&\n      isAutoMigrationFlagSet() &&\n      dashboard.uid !== null;\n\n    return (\n      <>\n        <Page\n          navModel={sectionNav}\n          pageNav={pageNav}\n          layout={PageLayoutType.Canvas}\n          className={pageClassName}\n          scrollRef={this.setScrollRef}\n          scrollTop={updateScrollTop}\n        >\n          {showToolbar && (\n            <header data-testid={selectors.pages.Dashboard.DashNav.navV2}>\n              <DashNav\n                dashboard={dashboard}\n                title={dashboard.title}\n                folderTitle={dashboard.meta.folderTitle}\n                isFullscreen={!!viewPanel}\n                kioskMode={kioskMode}\n                hideTimePicker={dashboard.timepicker.hidden}\n              />\n            </header>\n          )}\n          <DashboardPrompt dashboard={dashboard} />\n          {initError && <DashboardFailed />}\n          {showSubMenu && (\n            <section aria-label={selectors.pages.Dashboard.SubMenu.submenu}>\n              <SubMenu dashboard={dashboard} annotations={dashboard.annotations.list} links={dashboard.links} />\n            </section>\n          )}\n          {config.featureToggles.angularDeprecationUI && dashboard.hasAngularPlugins() && dashboard.uid !== null && (\n            <AngularDeprecationNotice\n              dashboardUid={dashboard.uid}\n              showAutoMigrateLink={dashboard.panels.some((panel) =>\n                explicitlyControlledMigrationPanels.includes(panel.type)\n              )}\n            />\n          )}\n          {showDashboardMigrationNotice && <AngularMigrationNotice dashboardUid={dashboard.uid} />}\n          <DashboardGrid\n            dashboard={dashboard}\n            isEditable={!!dashboard.meta.canEdit}\n            viewPanel={viewPanel}\n            editPanel={editPanel}\n          />\n\n          {inspectPanel && <PanelInspector dashboard={dashboard} panel={inspectPanel} />}\n          {queryParams.shareView && <ShareModal dashboard={dashboard} onDismiss={this.onCloseShareModal} />}\n        </Page>\n        {editPanel && (\n          <PanelEditor\n            dashboard={dashboard}\n            sourcePanel={editPanel}\n            tab={this.props.queryParams.tab}\n            sectionNav={sectionNav}\n            pageNav={pageNav}\n          />\n        )}\n        {queryParams.editview && (\n          <DashboardSettings\n            dashboard={dashboard}\n            editview={queryParams.editview}\n            pageNav={pageNav}\n            sectionNav={sectionNav}\n          />\n        )}\n        {queryParams.addWidget && config.featureToggles.vizAndWidgetSplit && <AddWidgetModal />}\n      </>\n    );\n  }\n}\n\nfunction updateStatePageNavFromProps(props: Props, state: State): State {\n  const { dashboard, navIndex } = props;\n\n  if (!dashboard) {\n    return state;\n  }\n\n  let pageNav = state.pageNav;\n  let sectionNav = state.sectionNav;\n\n  if (!pageNav || dashboard.title !== pageNav.text || dashboard.meta.folderUrl !== pageNav.parentItem?.url) {\n    pageNav = {\n      text: dashboard.title,\n      url: locationUtil.getUrlForPartial(props.history.location, {\n        editview: null,\n        editPanel: null,\n        viewPanel: null,\n      }),\n    };\n  }\n\n  if (props.route.routeName === DashboardRoutes.Path) {\n    sectionNav = getRootContentNavModel();\n    const pageNav = getPageNavFromSlug(props.match.params.slug!);\n    if (pageNav?.parentItem) {\n      pageNav.parentItem = pageNav.parentItem;\n    }\n  } else {\n    sectionNav = getNavModel(\n      props.navIndex,\n      ID_PREFIX + dashboard.uid,\n      getNavModel(props.navIndex, 'dashboards/browse')\n    );\n  }\n\n  const { folderUid } = dashboard.meta;\n  if (folderUid && pageNav && sectionNav.main.id !== 'starred') {\n    const folderNavModel = getNavModel(navIndex, `folder-dashboards-${folderUid}`).main;\n    // If the folder hasn't loaded (maybe user doesn't have permission on it?) then\n    // don't show the \"page not found\" breadcrumb\n    if (folderNavModel.id !== 'not-found') {\n      pageNav = {\n        ...pageNav,\n        parentItem: folderNavModel,\n      };\n    }\n  }\n\n  if (state.editPanel || state.viewPanel) {\n    pageNav = {\n      ...pageNav,\n      text: `${state.editPanel ? 'Edit' : 'View'} panel`,\n      parentItem: pageNav,\n      url: undefined,\n    };\n  }\n\n  if (state.pageNav === pageNav && state.sectionNav === sectionNav) {\n    return state;\n  }\n\n  return {\n    ...state,\n    pageNav,\n    sectionNav,\n  };\n}\n\nexport const DashboardPage = withTheme2(UnthemedDashboardPage);\nDashboardPage.displayName = 'DashboardPage';\nexport default connector(DashboardPage);\n","import { useAsync } from 'react-use';\n\nimport { config } from '@grafana/runtime';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport DashboardScenePage from 'app/features/dashboard-scene/pages/DashboardScenePage';\nimport { getDashboardScenePageStateManager } from 'app/features/dashboard-scene/pages/DashboardScenePageStateManager';\nimport { DashboardRoutes } from 'app/types';\n\nimport DashboardPage from './DashboardPage';\nimport { DashboardPageRouteParams, DashboardPageRouteSearchParams } from './types';\n\nexport type DashboardPageProxyProps = GrafanaRouteComponentProps<\n  DashboardPageRouteParams,\n  DashboardPageRouteSearchParams\n>;\n\n// This proxy component is used for Dashboard -> Scenes migration.\n// It will render DashboardScenePage if the user is only allowed to view the dashboard.\nfunction DashboardPageProxy(props: DashboardPageProxyProps) {\n  const forceScenes = props.queryParams.scenes === true;\n  const forceOld = props.queryParams.scenes === false;\n\n  if (forceScenes || (config.featureToggles.dashboardScene && !forceOld)) {\n    return <DashboardScenePage {...props} />;\n  }\n\n  const stateManager = getDashboardScenePageStateManager();\n  const isScenesSupportedRoute = Boolean(\n    props.route.routeName === DashboardRoutes.Home ||\n      (props.route.routeName === DashboardRoutes.Normal && props.match.params.uid)\n  );\n\n  // We pre-fetch dashboard to render dashboard page component depending on dashboard permissions.\n  // To avoid querying single dashboard multiple times, stateManager.fetchDashboard uses a simple, short-lived cache.\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const dashboard = useAsync(async () => {\n    if (props.match.params.type === 'snapshot') {\n      return null;\n    }\n\n    return stateManager.fetchDashboard({\n      route: props.route.routeName as DashboardRoutes,\n      uid: props.match.params.uid ?? '',\n      keepDashboardFromExploreInLocalStorage: true,\n    });\n  }, [props.match.params.uid, props.route.routeName]);\n\n  if (!config.featureToggles.dashboardSceneForViewers) {\n    return <DashboardPage {...props} />;\n  }\n\n  if (dashboard.loading) {\n    return null;\n  }\n\n  if (dashboard?.value?.dashboard?.uid !== props.match.params.uid && dashboard.value?.meta?.isNew !== true) {\n    return null;\n  }\n\n  if (\n    dashboard.value &&\n    !(dashboard.value.meta?.canEdit || dashboard.value.meta?.canMakeEditable) &&\n    isScenesSupportedRoute\n  ) {\n    return <DashboardScenePage {...props} />;\n  } else {\n    return <DashboardPage {...props} />;\n  }\n}\n\nexport default DashboardPageProxy;\n","import { DataFrame, dataFrameFromJSON, DataFrameJSON, getDisplayProcessor } from '@grafana/data';\nimport { config, getBackendSrv } from '@grafana/runtime';\nimport { backendSrv } from 'app/core/services/backend_srv';\n\nimport { UploadResponse, StorageInfo, ItemOptions, WriteValueRequest, WriteValueResponse } from './types';\n\n// Likely should be built into the search interface!\nexport interface GrafanaStorage {\n  get: <T = any>(path: string) => Promise<T>;\n  list: (path: string) => Promise<DataFrame | undefined>;\n  upload: (folder: string, file: File, overwriteExistingFile: boolean) => Promise<UploadResponse>;\n  createFolder: (path: string) => Promise<{ error?: string }>;\n  delete: (path: { isFolder: boolean; path: string }) => Promise<{ error?: string }>;\n\n  /** Admin only */\n  getConfig: () => Promise<StorageInfo[]>;\n\n  /** Called before save */\n  getOptions: (path: string) => Promise<ItemOptions>;\n\n  /** Saves dashboards */\n  write: (path: string, options: WriteValueRequest) => Promise<WriteValueResponse>;\n}\n\nclass SimpleStorage implements GrafanaStorage {\n  constructor() {}\n\n  async get<T = any>(path: string): Promise<T> {\n    const storagePath = `api/storage/read/${path}`.replace('//', '/');\n    return getBackendSrv().get<T>(storagePath);\n  }\n\n  async list(path: string): Promise<DataFrame | undefined> {\n    let url = 'api/storage/list/';\n    if (path) {\n      url += path + '/';\n    }\n    const rsp = await getBackendSrv().get<DataFrameJSON>(url);\n    if (rsp?.data) {\n      const f = dataFrameFromJSON(rsp);\n      for (const field of f.fields) {\n        field.display = getDisplayProcessor({ field, theme: config.theme2 });\n      }\n      return f;\n    }\n    return undefined;\n  }\n\n  async createFolder(path: string): Promise<{ error?: string }> {\n    const res = await getBackendSrv().post<{ success: boolean; message: string }>(\n      '/api/storage/createFolder',\n      JSON.stringify({ path })\n    );\n\n    if (!res.success) {\n      return {\n        error: res.message ?? 'unknown error',\n      };\n    }\n\n    return {};\n  }\n\n  async deleteFolder(req: { path: string; force: boolean }): Promise<{ error?: string }> {\n    const res = await getBackendSrv().post<{ success: boolean; message: string }>(\n      `/api/storage/deleteFolder`,\n      JSON.stringify(req)\n    );\n\n    if (!res.success) {\n      return {\n        error: res.message ?? 'unknown error',\n      };\n    }\n\n    return {};\n  }\n\n  async deleteFile(req: { path: string }): Promise<{ error?: string }> {\n    const res = await getBackendSrv().post<{ success: boolean; message: string }>(`/api/storage/delete/${req.path}`);\n\n    if (!res.success) {\n      return {\n        error: res.message ?? 'unknown error',\n      };\n    }\n\n    return {};\n  }\n\n  async delete(req: { isFolder: boolean; path: string }): Promise<{ error?: string }> {\n    return req.isFolder ? this.deleteFolder({ path: req.path, force: true }) : this.deleteFile({ path: req.path });\n  }\n\n  async upload(folder: string, file: File, overwriteExistingFile: boolean): Promise<UploadResponse> {\n    const formData = new FormData();\n    formData.append('folder', folder);\n    formData.append('file', file);\n    formData.append('overwriteExistingFile', String(overwriteExistingFile));\n    const res = await fetch('/api/storage/upload', {\n      method: 'POST',\n      body: formData,\n    });\n\n    let body = await res.json();\n    if (!body) {\n      body = {};\n    }\n    body.status = res.status;\n    body.statusText = res.statusText;\n    if (res.status !== 200 && !body.err) {\n      body.err = true;\n    }\n    return body;\n  }\n\n  async write(path: string, options: WriteValueRequest): Promise<WriteValueResponse> {\n    return backendSrv.post<WriteValueResponse>(`/api/storage/write/${path}`, options);\n  }\n\n  async getConfig() {\n    return getBackendSrv().get<StorageInfo[]>('/api/storage/config');\n  }\n\n  async getOptions(path: string) {\n    return getBackendSrv().get<ItemOptions>(`/api/storage/options/${path}`);\n  }\n}\n\nexport function filenameAlreadyExists(folderName: string, fileNames: string[]) {\n  const lowerCase = folderName.toLowerCase();\n  const trimmedLowerCase = lowerCase.trim();\n  const existingTrimmedLowerCaseNames = fileNames.map((f) => f.trim().toLowerCase());\n\n  return existingTrimmedLowerCaseNames.includes(trimmedLowerCase);\n}\n\nlet storage: GrafanaStorage | undefined;\n\nexport function getGrafanaStorage() {\n  if (!storage) {\n    storage = new SimpleStorage();\n  }\n  return storage;\n}\n"],"names":["DashboardPrompt","dashboard","originalPath","showModal","hideModal","ModalsContext","handleUnload","event","ignoreChanges","onHistoryBlock","location","UnsavedChangesModal","moveToBlockedLocationAfterReactStateUpdate","onDiscard","onDismiss","onSaveDashboardClick","styles","getStyles","Modal","Button","current","original","canSave","fromScript","fromFile","DashboardScenePage","match","route","queryParams","history","stateManager","isLoading","loadError","routeReloadCounter","comingFromExplore","store","Box","PageLoader","Alert","getKioskMode","LOCAL_STORAGE_KEY_PREFIX","localStorageKey","dashboardUid","tryMigration","autoMigrateParam","url","AngularDeprecationNotice","showAutoMigrateLink","LocalStorageValueProvider","isDismissed","revertAutoMigrateUrlFlag","urlParams","value","key","featureName","reportIssue","AngularMigrationNotice","showAlert","setShowAlert","theme","StorageFolderPage","props","slug","listing","childRoot","pageNav","getPageNavFromSlug","renderListing","item","name","isFolder","isDash","navModel","getRootContentNavModel","parts","pageNavs","lastPageNav","AddWidgetModal","searchQuery","setSearchQuery","state","widgetsList","filteredWidgetsTypes","Input","e","CustomScrollbar","plugin","index","VizTypePickerPlugin","id","SaveLibraryPanelModal","panel","folderUid","isUnsavedPrompt","onConfirm","searchString","setSearchString","dashState","searchHits","dash","filteredDashboards","setFilteredDashboards","useDebounce","dashName","saveLibraryPanel","usePanelSave","discardAndClose","title","i","initPanelEditor","sourcePanel","dispatch","discardPanelChanges","getStore","getPanel","updateDuplicateLibraryPanels","modifiedPanel","modifiedSaveModel","skipPanelUpdate","pluginChanged","panelToUpdate","exitPanelEditor","getSourcePanel","shouldDiscardChanges","hasPanelChangedInPanelEdit","panelTypeChanged","updatePanelEditorUIState","uiState","nextState","error","onSaveSuccess","SaveDashboardButton","setState","timeoutId","savedEventUnsub","hasChanges","panelInEdit","search","cleanDashboardFromIgnoredChanges","dashData","model","DashboardModel","variable","currentClean","originalClean","currentTimepicker","originalTimepicker","currentJson","originalJson","SnapshotTab","ShowMessage","SupportSnapshotService","StateManagerBase","markdownText","maxLen","snapshotText","panelTitle","blob","fileName","k","randomize","snapshot","config","snapshotUpdate","snapshotSize","scene","oldModel","ex","HelpWizard","onClose","service","currentTab","loading","options","showMessage","tabs","hasSupportBundleAccess","Drawer","Stack","FeatureBadge","TabsBar","t","Tab","Field","Select","ClipboardButton","height","CodeEditor","usePanelLatestData","checkSchema","querySubscription","latestData","setLatestData","lastRev","lastUpdate","data","now","InspectMetadataTab","metadataDatasource","InspectContent","isDataLoading","dataOptions","defaultTab","onDataOptionsChange","setCurrentTab","errors","getErrors","activeTab","formatStats","tab","InspectDataTab","InspectJSONTab","InspectErrorTab","InspectStatsTab","QueryInspector","request","queryCount","requestTime","formatted","PanelInspectorUnconnected","setDataOptions","hasError","metaDs","mapStateToProps","panelState","PanelInspector","PickerRenderer","PickerToRender","PickerLabel","labelOrName","elementId","Tooltip","selectors","SubMenuItems","variables","readOnly","visibleVariables","setVisibleVariables","getPanelPluginWithFallback","panelType","VisualizationButton","isPanelOptionsVisible","isVizPickerOpen","onToggleOpen","onToggleOptionsPane","ButtonGroup","ToolbarButton","ChangeLibraryPanelModal","isLibraryPanel","body","ConfirmModal","PanelLibraryOptionsGroup","isWidget","showingAddPanelModal","setShowingAddPanelModal","changeToPanel","setChangeToPanel","panelFilter","setPanelFilter","onPanelFilterChange","plugins","p","useLibraryPanel","onAddToPanelLibrary","onDismissChangeToPanel","PanelTypeFilter","LibraryPanelsView","AddLibraryPanelModal","VisualizationSelectPane","isWidgetEnabled","tabKey","listMode","setListMode","useLocalStorage","searchRef","onVizChange","pluginChange","onCloseVizPicker","radioOptions","radioOptionsWidgetFlow","FilterInput","RadioButtonGroup","VizTypePicker","VisualizationSuggestions","OptionsPane","onFieldConfigsChange","onPanelOptionsChanged","onPanelConfigChange","instanceState","OptionsPaneOptions","InfoMode","PanelHeaderCorner","markdown","interpolatedMarkdown","markedInterpolatedMarkdown","links","getContentStyles","link","idx","infoMode","PanelInfoCorner","content","onClick","ariaLabel","iconMap","PanelEditorTableView","width","setOptions","timeSrv","sub","timeData","errorMessage","PanelChrome","innerWidth","innerHeight","PanelRenderer","PanelAlertTab","otherProps","rules","usePanelCombinedRules","NewRuleFromPanelButton","className","templating","formValues","ruleFormUrl","PanelAlertTabContent","permissions","canCreateRules","alert","LoadingPlaceholder","RulesTable","PanelEditorQueries","datasource","dataSource","datasourceSettings","ds","lastUsedDatasource","QueryGroup","PanelEditorTabs","onChangeTab","forceUpdate","useForceUpdate","instrumentedOnChangeTab","eventName","eventSubs","Subscription","alertingEnabled","getCounter","TabContent","TransformationsEditor","getPanelEditorTabs","shouldShowAlertingTab","unifiedAlertingEnabled","hasRuleReadPermissions","isGraph","isTimeseries","ownProps","mapDispatchToProps","connector","PanelEditorUnconnected","SaveDashboardDrawer","configKey","mode","initDone","isOnlyPanel","tableViewEnabled","panelSize","DashboardPanel","panelPane","SplitPaneWrapper","size","updateTimeZoneForSession","DashNavTimeControls","editorActions","UnlinkModal","sectionNav","AppChromeUpdate","ToolbarButtonRow","PanelEditor","stylesFactory","paneSpacing","AnnotationPicker","annotation","events","onEnabledChanged","setLoading","onCancel","started","stopped","InlineFieldRow","InlineField","LoadingIndicator","Annotations","annotations","onAnnotationChanged","visibleAnnotations","setVisibleAnnotations","DashboardLinks","useEffectOnce","linkInfo","DashboardLinksDashboard","icon","linkElement","sanitize","SubMenuUnConnected","updatedAnnotation","readOnlyVariables","uid","templatingState","SubMenu","UnthemedDashboardPage","tr","liveTimer","scrollElement","GrafanaContext","prevProps","prevState","templateVarsChangedInUrl","prevUrlParams","templateVarChanges","dashboardWatcher","urlEditPanelId","urlViewPanelId","urlEditView","updatedState","updateStatePageNavFromProps","inspectPanelId","inspectPanel","initError","editPanel","viewPanel","updateScrollTop","kioskMode","DashboardLoading","showSubMenu","showToolbar","pageClassName","EntityNotFound","migrationFeatureFlags","isAutoMigrationFlagSet","isFeatureFlagSet","toggleState","dashboardWasAngular","showDashboardMigrationNotice","DashNav","DashboardFailed","DashboardGrid","ShareModal","DashboardSettings","navIndex","folderNavModel","DashboardPage","DashboardPageProxy","forceScenes","forceOld","isScenesSupportedRoute","SimpleStorage","path","storagePath","rsp","f","field","res","req","folder","file","overwriteExistingFile","formData","filenameAlreadyExists","folderName","fileNames","trimmedLowerCase","storage","getGrafanaStorage"],"sourceRoot":""}