{"version":3,"file":"EmbeddedDashboard.fc0b0aa94da40487ec7e.js","mappings":"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","sources":["webpack://grafana/./public/app/features/dashboard-scene/embedding/EmbeddedDashboard.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport { useEffect, useState } from 'react';\n\nimport { GrafanaTheme2, urlUtil } from '@grafana/data';\nimport { EmbeddedDashboardProps } from '@grafana/runtime';\nimport { SceneObjectStateChangedEvent, sceneUtils } from '@grafana/scenes';\nimport { Spinner, Alert, useStyles2 } from '@grafana/ui';\nimport { DashboardRoutes } from 'app/types';\n\nimport { getDashboardScenePageStateManager } from '../pages/DashboardScenePageStateManager';\nimport { DashboardScene } from '../scene/DashboardScene';\n\nexport function EmbeddedDashboard(props: EmbeddedDashboardProps) {\n  const stateManager = getDashboardScenePageStateManager();\n  const { dashboard, loadError } = stateManager.useState();\n\n  useEffect(() => {\n    stateManager.loadDashboard({ uid: props.uid!, route: DashboardRoutes.Embedded });\n    return () => {\n      stateManager.clearState();\n    };\n  }, [stateManager, props.uid]);\n\n  if (loadError) {\n    return (\n      <Alert severity=\"error\" title=\"Failed to load dashboard\">\n        {loadError}\n      </Alert>\n    );\n  }\n\n  if (!dashboard) {\n    return <Spinner />;\n  }\n\n  return <EmbeddedDashboardRenderer model={dashboard} {...props} />;\n}\n\ninterface RendererProps extends EmbeddedDashboardProps {\n  model: DashboardScene;\n}\n\nfunction EmbeddedDashboardRenderer({ model, initialState, onStateChange }: RendererProps) {\n  const [isActive, setIsActive] = useState(false);\n  const { controls, body, scopes } = model.useState();\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    setIsActive(true);\n\n    if (initialState) {\n      const searchParms = new URLSearchParams(initialState);\n      sceneUtils.syncStateFromSearchParams(model, searchParms);\n    }\n\n    return model.activate();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [model]);\n\n  useSubscribeToEmbeddedUrlState(onStateChange, model);\n\n  if (!isActive) {\n    return null;\n  }\n\n  return (\n    <div\n      className={cx(styles.canvas, controls && !scopes && styles.canvasWithControls, scopes && styles.canvasWithScopes)}\n    >\n      {scopes && <scopes.Component model={scopes} />}\n      {controls && (\n        <div className={cx(styles.controlsWrapper, scopes && styles.controlsWrapperWithScopes)}>\n          <controls.Component model={controls} />\n        </div>\n      )}\n      <div className={styles.body}>\n        <body.Component model={body} />\n      </div>\n    </div>\n  );\n}\n\nfunction useSubscribeToEmbeddedUrlState(onStateChange: ((state: string) => void) | undefined, model: DashboardScene) {\n  useEffect(() => {\n    if (!onStateChange) {\n      return;\n    }\n\n    let lastState = '';\n    const sub = model.subscribeToEvent(SceneObjectStateChangedEvent, (evt) => {\n      if (evt.payload.changedObject.urlSync) {\n        const state = sceneUtils.getUrlState(model);\n        const stateAsString = urlUtil.renderUrl('', state);\n\n        if (lastState !== stateAsString) {\n          lastState = stateAsString;\n          onStateChange(stateAsString);\n        }\n      }\n    });\n\n    return () => sub.unsubscribe();\n  }, [model, onStateChange]);\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    canvas: css({\n      label: 'canvas-content',\n      display: 'grid',\n      gridTemplateAreas: `\n        \"panels\"`,\n      gridTemplateColumns: `1fr`,\n      gridTemplateRows: '1fr',\n      flexBasis: '100%',\n      flexGrow: 1,\n    }),\n    canvasWithControls: css({\n      gridTemplateAreas: `\n        \"controls\"\n        \"panels\"`,\n      gridTemplateRows: 'auto 1fr',\n    }),\n    canvasWithScopes: css({\n      gridTemplateAreas: `\n        \"scopes controls\"\n        \"panels panels\"`,\n      gridTemplateColumns: `${theme.spacing(32)} 1fr`,\n      gridTemplateRows: 'auto 1fr',\n    }),\n    body: css({\n      label: 'body',\n      flexGrow: 1,\n      display: 'flex',\n      gap: '8px',\n      gridArea: 'panels',\n      marginBottom: theme.spacing(2),\n    }),\n    controlsWrapper: css({\n      display: 'flex',\n      flexDirection: 'column',\n      flexGrow: 0,\n      gridArea: 'controls',\n      padding: theme.spacing(2, 0, 2, 2),\n    }),\n    controlsWrapperWithScopes: css({\n      padding: theme.spacing(2, 0),\n    }),\n  };\n}\n"],"names":["EmbeddedDashboard","props","stateManager","dashboard","loadError","EmbeddedDashboardRenderer","model","initialState","onStateChange","isActive","setIsActive","controls","body","scopes","styles","getStyles","searchParms","useSubscribeToEmbeddedUrlState","lastState","sub","evt","state","stateAsString","theme"],"sourceRoot":""}