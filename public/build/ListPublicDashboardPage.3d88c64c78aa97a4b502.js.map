{"version":3,"file":"ListPublicDashboardPage.3d88c64c78aa97a4b502.js","mappings":"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","sources":["webpack://grafana/./public/app/features/manage-dashboards/components/PublicDashboardListTable/DeletePublicDashboardButton.tsx","webpack://grafana/./public/app/features/manage-dashboards/components/PublicDashboardListTable/PublicDashboardListTable.tsx","webpack://grafana/./public/app/features/manage-dashboards/PublicDashboardListPage.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Button, ModalsController, ButtonProps } from '@grafana/ui/src';\nimport { t } from 'app/core/internationalization';\nimport { useDeletePublicDashboardMutation } from 'app/features/dashboard/api/publicDashboardApi';\nimport { DashboardModel } from 'app/features/dashboard/state/DashboardModel';\n\nimport { DeletePublicDashboardModal } from './DeletePublicDashboardModal';\n\nexport interface PublicDashboardDeletion {\n  uid: string;\n  dashboardUid: string;\n  title: string;\n}\n\nexport const DeletePublicDashboardButton = ({\n  dashboard,\n  publicDashboard,\n  loader,\n  children,\n  onDismiss,\n  ...rest\n}: {\n  dashboard?: DashboardModel;\n  publicDashboard: PublicDashboardDeletion;\n  loader?: JSX.Element;\n  children?: React.ReactNode;\n  onDismiss?: () => void;\n} & ButtonProps) => {\n  const [deletePublicDashboard, { isLoading }] = useDeletePublicDashboardMutation();\n\n  const onDeletePublicDashboardClick = (pd: PublicDashboardDeletion, onDelete: () => void) => {\n    deletePublicDashboard({\n      dashboard,\n      uid: pd.uid,\n      dashboardUid: pd.dashboardUid,\n    });\n    onDelete();\n  };\n\n  return (\n    <ModalsController>\n      {({ showModal, hideModal }) => {\n        const translatedRevocationButtonText = t(\n          'public-dashboard-list.button.revoke-button-text',\n          'Revoke public URL'\n        );\n        return (\n          <Button\n            aria-label={translatedRevocationButtonText}\n            title={translatedRevocationButtonText}\n            onClick={() =>\n              showModal(DeletePublicDashboardModal, {\n                dashboardTitle: publicDashboard.title,\n                onConfirm: () => onDeletePublicDashboardClick(publicDashboard, hideModal),\n                onDismiss: () => {\n                  onDismiss ? onDismiss() : hideModal();\n                },\n              })\n            }\n            {...rest}\n          >\n            {isLoading && loader ? loader : children}\n          </Button>\n        );\n      }}\n    </ModalsController>\n  );\n};\n","import { css } from '@emotion/css';\nimport { useMemo, useState } from 'react';\nimport { useMedia } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors/src';\nimport { reportInteraction } from '@grafana/runtime';\nimport {\n  LinkButton,\n  useStyles2,\n  Spinner,\n  Card,\n  useTheme2,\n  Tooltip,\n  Icon,\n  Switch,\n  Pagination,\n  HorizontalGroup,\n  EmptyState,\n  TextLink,\n} from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { Trans, t } from 'app/core/internationalization';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport {\n  useListPublicDashboardsQuery,\n  useUpdatePublicDashboardMutation,\n} from 'app/features/dashboard/api/publicDashboardApi';\nimport {\n  generatePublicDashboardConfigUrl,\n  generatePublicDashboardUrl,\n} from 'app/features/dashboard/components/ShareModal/SharePublicDashboard/SharePublicDashboardUtils';\nimport { AccessControlAction } from 'app/types';\n\nimport { PublicDashboardListResponse } from '../../types';\n\nimport { DeletePublicDashboardButton } from './DeletePublicDashboardButton';\n\nconst PublicDashboardCard = ({ pd }: { pd: PublicDashboardListResponse }) => {\n  const styles = useStyles2(getStyles);\n  const theme = useTheme2();\n  const isMobile = useMedia(`(max-width: ${theme.breakpoints.values.sm}px)`);\n\n  const [update, { isLoading: isUpdateLoading }] = useUpdatePublicDashboardMutation();\n\n  const selectors = e2eSelectors.pages.PublicDashboards;\n  const hasWritePermissions = contextSrv.hasPermission(AccessControlAction.DashboardsPublicWrite);\n  const isOrphaned = !pd.dashboardUid;\n\n  const onTogglePause = (pd: PublicDashboardListResponse, isPaused: boolean) => {\n    const req = {\n      dashboard: { uid: pd.dashboardUid },\n      payload: {\n        uid: pd.uid,\n        isEnabled: !isPaused,\n      },\n    };\n\n    update(req);\n  };\n\n  const CardActions = useMemo(() => (isMobile ? Card.Actions : Card.SecondaryActions), [isMobile]);\n  const translatedPauseSharingText = t('public-dashboard-list.toggle.pause-sharing-toggle-text', 'Pause sharing');\n\n  return (\n    <Card className={styles.card} href={!isOrphaned ? `/d/${pd.dashboardUid}` : undefined}>\n      <Card.Heading className={styles.heading}>\n        {!isOrphaned ? (\n          <span>{pd.title}</span>\n        ) : (\n          <Tooltip\n            content={t(\n              'public-dashboard-list.dashboard-title.orphaned-tooltip',\n              'The linked dashboard has already been deleted'\n            )}\n            placement=\"top\"\n          >\n            <div className={styles.orphanedTitle}>\n              <Trans i18nKey=\"public-dashboard-list.dashboard-title.orphaned-title\">\n                <span>Orphaned public dashboard</span>\n              </Trans>\n              <Icon name=\"info-circle\" />\n            </div>\n          </Tooltip>\n        )}\n      </Card.Heading>\n      <CardActions className={styles.actions}>\n        <div className={styles.pauseSwitch}>\n          <Switch\n            value={!pd.isEnabled}\n            label={translatedPauseSharingText}\n            disabled={isUpdateLoading}\n            onChange={(e) => {\n              reportInteraction('grafana_dashboards_public_enable_clicked', {\n                action: e.currentTarget.checked ? 'disable' : 'enable',\n              });\n              onTogglePause(pd, e.currentTarget.checked);\n            }}\n            data-testid={selectors.ListItem.pauseSwitch}\n          />\n          <span>{translatedPauseSharingText}</span>\n        </div>\n        <LinkButton\n          disabled={isOrphaned}\n          fill=\"text\"\n          icon=\"external-link-alt\"\n          variant=\"secondary\"\n          target=\"_blank\"\n          color={theme.colors.warning.text}\n          href={generatePublicDashboardUrl(pd.accessToken)}\n          key=\"public-dashboard-url\"\n          tooltip={t('public-dashboard-list.button.view-button-tooltip', 'View public dashboard')}\n          data-testid={selectors.ListItem.linkButton}\n        />\n        <LinkButton\n          disabled={isOrphaned}\n          fill=\"text\"\n          icon=\"cog\"\n          variant=\"secondary\"\n          color={theme.colors.warning.text}\n          href={generatePublicDashboardConfigUrl(pd.dashboardUid, pd.slug)}\n          key=\"public-dashboard-config-url\"\n          tooltip={t('public-dashboard-list.button.config-button-tooltip', 'Configure public dashboard')}\n          data-testid={selectors.ListItem.configButton}\n        />\n        {hasWritePermissions && (\n          <DeletePublicDashboardButton\n            fill=\"text\"\n            icon=\"trash-alt\"\n            variant=\"secondary\"\n            publicDashboard={pd}\n            tooltip={t('public-dashboard-list.button.revoke-button-tooltip', 'Revoke public dashboard URL')}\n            loader={<Spinner />}\n            data-testid={selectors.ListItem.trashcanButton}\n          />\n        )}\n      </CardActions>\n    </Card>\n  );\n};\n\nexport const PublicDashboardListTable = () => {\n  const [page, setPage] = useState(1);\n\n  const styles = useStyles2(getStyles);\n  const { data: paginatedPublicDashboards, isLoading, isError } = useListPublicDashboardsQuery(page);\n\n  return (\n    <Page navId=\"dashboards/public\">\n      <Page.Contents isLoading={isLoading}>\n        {!isLoading && !isError && !!paginatedPublicDashboards && (\n          <div>\n            {paginatedPublicDashboards.publicDashboards.length === 0 ? (\n              <EmptyState\n                variant=\"call-to-action\"\n                message={t(\n                  'public-dashboard-list.empty-state.message',\n                  \"You haven't created any public dashboards yet\"\n                )}\n              >\n                <Trans i18nKey=\"public-dashboard-list.empty-state.more-info\">\n                  Create a public dashboard from any existing dashboard through the <b>Share</b> modal.{' '}\n                  <TextLink\n                    external\n                    href=\"https://grafana.com/docs/grafana/latest/dashboards/dashboard-public/#make-a-dashboard-public\"\n                  >\n                    Learn more\n                  </TextLink>\n                </Trans>\n              </EmptyState>\n            ) : (\n              <>\n                <ul className={styles.list}>\n                  {paginatedPublicDashboards.publicDashboards.map((pd: PublicDashboardListResponse) => (\n                    <li key={pd.uid}>\n                      <PublicDashboardCard pd={pd} />\n                    </li>\n                  ))}\n                </ul>\n                <HorizontalGroup justify=\"flex-end\">\n                  <Pagination\n                    onNavigate={setPage}\n                    currentPage={paginatedPublicDashboards.page}\n                    numberOfPages={paginatedPublicDashboards.totalPages}\n                    hideWhenSinglePage\n                  />\n                </HorizontalGroup>\n              </>\n            )}\n          </div>\n        )}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  list: css`\n    list-style-type: none;\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  card: css`\n    ${theme.breakpoints.up('sm')} {\n      display: flex;\n    }\n  `,\n  heading: css`\n    display: flex;\n    align-items: center;\n    gap: ${theme.spacing(1)};\n    flex: 1;\n  `,\n  orphanedTitle: css`\n    display: flex;\n    align-items: center;\n    gap: ${theme.spacing(1)};\n  `,\n  actions: css`\n    display: flex;\n    align-items: center;\n    position: relative;\n\n    gap: ${theme.spacing(0.5)};\n    ${theme.breakpoints.up('sm')} {\n      gap: ${theme.spacing(1)};\n    }\n  `,\n  pauseSwitch: css`\n    display: flex;\n    gap: ${theme.spacing(1)};\n    align-items: center;\n    font-size: ${theme.typography.bodySmall.fontSize};\n    margin-bottom: 0;\n    flex: 1;\n\n    ${theme.breakpoints.up('sm')} {\n      padding-right: ${theme.spacing(2)};\n    }\n  `,\n});\n","import { PublicDashboardListTable } from './components/PublicDashboardListTable/PublicDashboardListTable';\n\nexport const ListPublicDashboardPage = ({}) => {\n  return <PublicDashboardListTable />;\n};\n\nexport default ListPublicDashboardPage;\n"],"names":["DeletePublicDashboardButton","dashboard","publicDashboard","loader","children","onDismiss","rest","deletePublicDashboard","isLoading","onDeletePublicDashboardClick","pd","onDelete","showModal","hideModal","translatedRevocationButtonText","Button","DeletePublicDashboardModal","PublicDashboardCard","styles","getStyles","theme","isMobile","useMedia","update","isUpdateLoading","selectors","hasWritePermissions","isOrphaned","onTogglePause","isPaused","req","CardActions","Card","translatedPauseSharingText","Tooltip","Icon","Switch","e","Spinner","PublicDashboardListTable","page","setPage","paginatedPublicDashboards","isError","Page","EmptyState","TextLink","Pagination","ListPublicDashboardPage"],"sourceRoot":""}