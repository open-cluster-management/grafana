{"version":3,"file":"6969.1ff2f4d029e66230ac5d.js","mappings":"2NAcO,MAAMA,EAAwB,CAAC,CAAE,OAAAC,EAAQ,aAAAC,EAAc,uBAAAC,CAAuB,IAAa,CAChG,MAAMC,EAAWH,EAAO,iBAAiBC,CAAY,EAErD,GAAI,CAACE,EACH,SACE,OAACC,EAAA,EAAK,CAAC,SAAS,QAAQ,MAAM,qBAAqB,wDAEnD,EAIJ,MAAMC,KAAiB,KAAmBJ,EAAc,OAAO,KAAKD,EAAO,cAAc,CAAC,EAE1F,SACE,OAACM,EAAA,IACC,uBAAAJ,EACA,OAAAF,EACA,SAAU,CAAE,KAAMK,EAAgB,WAAS,KAA6BF,CAAQ,CAAE,EACpF,CAEJ,ECOA,EA/B2B,CAAC,CAAE,MAAAI,CAAM,IAAa,CAC/C,KAAM,CAAE,qBAAAC,CAAqB,KAAI,MAAgB,EAC3C,CAAE,KAAAC,EAAM,UAAAC,EAAW,MAAAC,CAAM,KAAIC,EAAA,GAAsBJ,CAAoB,EAEvEK,EAAON,GAAO,OAAO,KAC3B,OAAKM,EAIDH,GAAa,CAACD,EACT,aAILE,EACK,OAAOA,CAAK,EAGhBF,KAKH,OAACV,EAAA,CACC,uBAAwBS,EACxB,OAAQC,EACR,aAAc,mBAAmBI,CAAI,EACvC,EARO,QAbA,OAACC,EAAA,EAAc,CAAC,OAAO,uBAAwB,EAuB1D,C,mCCvCO,SAASC,EAAmBC,EAAsBC,EAA0B,CACjF,MAAMC,EAAmBF,EAAa,QAAQ,sBAAuB,EAAE,EAAE,KAAK,EAE9E,IAAIG,EAAU,GAAGD,CAAgB,UAEjC,QAASE,EAAI,EAAGH,EAAe,SAASE,CAAO,EAAGC,IAChDD,EAAU,GAAGD,CAAgB,UAAUE,CAAC,IAG1C,OAAOD,CACT,C","sources":["webpack://grafana/./public/app/features/alerting/unified/components/receivers/DuplicateTemplateView.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/DuplicateMessageTemplate.tsx","webpack://grafana/./public/app/features/alerting/unified/utils/duplicate.ts"],"sourcesContent":["import { Alert } from '@grafana/ui';\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\n\nimport { generateCopiedName } from '../../utils/duplicate';\nimport { updateDefinesWithUniqueValue } from '../../utils/templates';\n\nimport { TemplateForm } from './TemplateForm';\n\ninterface Props {\n  templateName: string;\n  config: AlertManagerCortexConfig;\n  alertManagerSourceName: string;\n}\n\nexport const DuplicateTemplateView = ({ config, templateName, alertManagerSourceName }: Props) => {\n  const template = config.template_files?.[templateName];\n\n  if (!template) {\n    return (\n      <Alert severity=\"error\" title=\"Template not found\">\n        Sorry, this template does not seem to exist.\n      </Alert>\n    );\n  }\n\n  const duplicatedName = generateCopiedName(templateName, Object.keys(config.template_files));\n\n  return (\n    <TemplateForm\n      alertManagerSourceName={alertManagerSourceName}\n      config={config}\n      existing={{ name: duplicatedName, content: updateDefinesWithUniqueValue(template) }}\n    />\n  );\n};\n","import { RouteChildrenProps } from 'react-router-dom';\n\nimport { EntityNotFound } from 'app/core/components/PageNotFound/EntityNotFound';\n\nimport { useAlertmanagerConfig } from '../../hooks/useAlertmanagerConfig';\nimport { useAlertmanager } from '../../state/AlertmanagerContext';\nimport { DuplicateTemplateView } from '../receivers/DuplicateTemplateView';\n\ntype Props = RouteChildrenProps<{ name: string }>;\n\nconst NewMessageTemplate = ({ match }: Props) => {\n  const { selectedAlertmanager } = useAlertmanager();\n  const { data, isLoading, error } = useAlertmanagerConfig(selectedAlertmanager);\n\n  const name = match?.params.name;\n  if (!name) {\n    return <EntityNotFound entity=\"Notification template\" />;\n  }\n\n  if (isLoading && !data) {\n    return 'loading...';\n  }\n\n  // TODO decent error handling\n  if (error) {\n    return String(error);\n  }\n\n  if (!data) {\n    return null;\n  }\n\n  return (\n    <DuplicateTemplateView\n      alertManagerSourceName={selectedAlertmanager!}\n      config={data}\n      templateName={decodeURIComponent(name)}\n    />\n  );\n};\n\nexport default NewMessageTemplate;\n","export function generateCopiedName(originalName: string, exisitingNames: string[]) {\n  const nonDuplicateName = originalName.replace(/\\(copy( [0-9]+)?\\)$/, '').trim();\n\n  let newName = `${nonDuplicateName} (copy)`;\n\n  for (let i = 2; exisitingNames.includes(newName); i++) {\n    newName = `${nonDuplicateName} (copy ${i})`;\n  }\n\n  return newName;\n}\n"],"names":["DuplicateTemplateView","config","templateName","alertManagerSourceName","template","Alert","duplicatedName","TemplateForm","match","selectedAlertmanager","data","isLoading","error","useAlertmanagerConfig","name","EntityNotFound","generateCopiedName","originalName","exisitingNames","nonDuplicateName","newName","i"],"sourceRoot":""}