{"version":3,"file":"SoloPanelPage.69e7de505f7fa84f4afb.js","mappings":"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","sources":["webpack://grafana/./public/app/features/dashboard-scene/solo/useSoloPanel.ts","webpack://grafana/./public/app/features/dashboard-scene/solo/SoloPanelPage.tsx","webpack://grafana/./public/app/features/dashboard/containers/SoloPanelPage.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nimport { VizPanel, SceneObject, SceneGridRow, getUrlSyncManager } from '@grafana/scenes';\n\nimport { DashboardGridItem } from '../scene/DashboardGridItem';\nimport { DashboardScene } from '../scene/DashboardScene';\nimport { RowRepeaterBehavior } from '../scene/RowRepeaterBehavior';\nimport { DashboardRepeatsProcessedEvent } from '../scene/types';\nimport { findVizPanelByKey, isPanelClone } from '../utils/utils';\n\nexport function useSoloPanel(dashboard: DashboardScene, panelId: string): [VizPanel | undefined, string | undefined] {\n  const [panel, setPanel] = useState<VizPanel>();\n  const [error, setError] = useState<string | undefined>();\n\n  useEffect(() => {\n    getUrlSyncManager().initSync(dashboard);\n\n    const cleanUp = dashboard.activate();\n\n    let panel: VizPanel | null = null;\n    try {\n      panel = findVizPanelByKey(dashboard, panelId);\n    } catch (e) {\n      // do nothing, just the panel is not found or not a VizPanel\n    }\n\n    if (panel) {\n      activateParents(panel);\n      setPanel(panel);\n    } else if (isPanelClone(panelId)) {\n      findRepeatClone(dashboard, panelId).then((panel) => {\n        if (panel) {\n          setPanel(panel);\n        } else {\n          setError('Panel not found');\n        }\n      });\n    } else {\n      setError('Panel not found');\n    }\n\n    return cleanUp;\n  }, [dashboard, panelId]);\n\n  return [panel, error];\n}\n\nfunction activateParents(panel: VizPanel) {\n  let parent = panel.parent;\n\n  while (parent && !parent.isActive) {\n    parent.activate();\n    parent = parent.parent;\n  }\n}\n\nfunction findRepeatClone(dashboard: DashboardScene, panelId: string): Promise<VizPanel | undefined> {\n  return new Promise((resolve) => {\n    dashboard.subscribeToEvent(DashboardRepeatsProcessedEvent, () => {\n      const panel = findVizPanelByKey(dashboard, panelId);\n      if (panel) {\n        resolve(panel);\n      } else {\n        // If rows are repeated they could add new panel repeaters that needs to be activated\n        activateAllRepeaters(dashboard.state.body);\n      }\n    });\n\n    activateAllRepeaters(dashboard.state.body);\n  });\n}\n\nfunction activateAllRepeaters(layout: SceneObject) {\n  layout.forEachChild((child) => {\n    if (child instanceof DashboardGridItem && !child.isActive) {\n      child.activate();\n      return;\n    }\n\n    if (child instanceof SceneGridRow && child.state.$behaviors) {\n      for (const behavior of child.state.$behaviors) {\n        if (behavior instanceof RowRepeaterBehavior && !child.isActive) {\n          child.activate();\n          break;\n        }\n      }\n\n      // Activate any panel DashboardGridItem inside the row\n      activateAllRepeaters(child);\n    }\n  });\n}\n","// Libraries\nimport { css } from '@emotion/css';\nimport { useEffect } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Spinner, useStyles2 } from '@grafana/ui';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { EntityNotFound } from 'app/core/components/PageNotFound/EntityNotFound';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { DashboardPageRouteParams } from 'app/features/dashboard/containers/types';\nimport { DashboardRoutes } from 'app/types';\n\nimport { getDashboardScenePageStateManager } from '../pages/DashboardScenePageStateManager';\nimport { DashboardScene } from '../scene/DashboardScene';\n\nimport { useSoloPanel } from './useSoloPanel';\n\nexport interface Props extends GrafanaRouteComponentProps<DashboardPageRouteParams, { panelId: string }> {}\n\n/**\n * Used for iframe embedding and image rendering of single panels\n */\nexport function SoloPanelPage({ match, queryParams }: Props) {\n  const stateManager = getDashboardScenePageStateManager();\n  const { dashboard } = stateManager.useState();\n\n  useEffect(() => {\n    stateManager.loadDashboard({ uid: match.params.uid!, route: DashboardRoutes.Embedded });\n    return () => stateManager.clearState();\n  }, [stateManager, match, queryParams]);\n\n  if (!queryParams.panelId) {\n    return <EntityNotFound entity=\"Panel\" />;\n  }\n\n  if (!dashboard) {\n    return <PageLoader />;\n  }\n\n  return <SoloPanelRenderer dashboard={dashboard} panelId={queryParams.panelId} />;\n}\n\nexport default SoloPanelPage;\n\nexport function SoloPanelRenderer({ dashboard, panelId }: { dashboard: DashboardScene; panelId: string }) {\n  const [panel, error] = useSoloPanel(dashboard, panelId);\n  const styles = useStyles2(getStyles);\n\n  if (error) {\n    return <Alert title={error} />;\n  }\n\n  if (!panel) {\n    return (\n      <span>\n        Loading <Spinner />\n      </span>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <panel.Component model={panel} />\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    position: 'fixed',\n    bottom: 0,\n    right: 0,\n    margin: 0,\n    left: 0,\n    top: 0,\n    width: '100%',\n    height: '100%',\n  }),\n});\n","import { css } from '@emotion/css';\nimport { Component } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, useStyles2 } from '@grafana/ui';\nimport { GrafanaContext, GrafanaContextType } from 'app/core/context/GrafanaContext';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\nimport { StoreState } from 'app/types';\n\nimport { DashboardPanel } from '../dashgrid/DashboardPanel';\nimport { initDashboard } from '../state/initDashboard';\n\nexport interface DashboardPageRouteParams {\n  uid?: string;\n  type?: string;\n  slug?: string;\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  dashboard: state.dashboard.getModel(),\n});\n\nconst mapDispatchToProps = {\n  initDashboard,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = GrafanaRouteComponentProps<DashboardPageRouteParams, { panelId: string; timezone?: string }> &\n  ConnectedProps<typeof connector>;\n\nexport interface State {\n  panel: PanelModel | null;\n  notFound: boolean;\n}\n\nexport class SoloPanelPage extends Component<Props, State> {\n  declare context: GrafanaContextType;\n  static contextType = GrafanaContext;\n\n  state: State = {\n    panel: null,\n    notFound: false,\n  };\n\n  componentDidMount() {\n    const { match, route } = this.props;\n\n    this.props.initDashboard({\n      urlSlug: match.params.slug,\n      urlUid: match.params.uid,\n      urlType: match.params.type,\n      routeName: route.routeName,\n      fixUrl: false,\n      keybindingSrv: this.context.keybindings,\n    });\n  }\n\n  getPanelId(): number {\n    return parseInt(this.props.queryParams.panelId ?? '0', 10);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { dashboard } = this.props;\n\n    if (!dashboard) {\n      return;\n    }\n\n    // we just got a new dashboard\n    if (!prevProps.dashboard || prevProps.dashboard.uid !== dashboard.uid) {\n      const panel = dashboard.getPanelByUrlId(this.props.queryParams.panelId);\n\n      if (!panel) {\n        this.setState({ notFound: true });\n        return;\n      }\n\n      if (panel) {\n        dashboard.exitViewPanel(panel);\n      }\n\n      this.setState({ panel });\n      dashboard.initViewPanel(panel);\n    }\n  }\n\n  render() {\n    return (\n      <SoloPanel\n        dashboard={this.props.dashboard}\n        notFound={this.state.notFound}\n        panel={this.state.panel}\n        panelId={this.getPanelId()}\n        timezone={this.props.queryParams.timezone}\n      />\n    );\n  }\n}\n\nexport interface SoloPanelProps extends State {\n  dashboard: DashboardModel | null;\n  panelId: number;\n  timezone?: string;\n}\n\nexport const SoloPanel = ({ dashboard, notFound, panel, panelId, timezone }: SoloPanelProps) => {\n  const styles = useStyles2(getStyles);\n  if (notFound) {\n    return <Alert severity=\"error\" title={`Panel with id ${panelId} not found`} />;\n  }\n\n  if (!panel || !dashboard) {\n    return <div>Loading & initializing dashboard</div>;\n  }\n\n  return (\n    <div className={styles.container}>\n      <AutoSizer>\n        {({ width, height }) => {\n          if (width === 0) {\n            return null;\n          }\n          return (\n            <DashboardPanel\n              stateKey={panel.key}\n              width={width}\n              height={height}\n              dashboard={dashboard}\n              panel={panel}\n              isEditing={false}\n              isViewing={true}\n              lazy={false}\n              timezone={timezone}\n              hideMenu={true}\n            />\n          );\n        }}\n      </AutoSizer>\n    </div>\n  );\n};\n\nexport default connector(SoloPanelPage);\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    position: 'fixed',\n    bottom: 0,\n    right: 0,\n    margin: 0,\n    left: 0,\n    top: 0,\n    width: '100%',\n    height: '100%',\n  }),\n});\n"],"names":["useSoloPanel","dashboard","panelId","panel","setPanel","error","setError","cleanUp","activateParents","findRepeatClone","parent","resolve","activateAllRepeaters","layout","child","DashboardGridItem","behavior","RowRepeaterBehavior","SoloPanelPage","match","queryParams","stateManager","SoloPanelRenderer","PageLoader","EntityNotFound","styles","getStyles","Alert","Spinner","theme","mapStateToProps","state","mapDispatchToProps","connector","route","prevProps","SoloPanel","notFound","timezone","width","height"],"sourceRoot":""}