{"version":3,"file":"AlertingRuleForm.586c303e8b2f7bb347ea.js","mappings":"6OAUO,SAASA,EAAa,CAAE,MAAAC,EAAO,SAAAC,CAAS,EAAsB,CACnE,SACE,QAACC,EAAA,EAAK,CAAC,aAAW,MAAWC,CAAa,EAAE,QAAS,SAAS,UAAU,MAAAH,EACtE,oBAAC,KAAG,SAAAC,CAAA,CAAS,KACb,OAAC,MAAU,CAAC,KAAK,gBAAgB,wBAAY,GAC/C,CAEJ,CAEA,MAAME,EAAiBC,IAA0B,CAC/C,WAAS,OAAI,CACX,OAAQA,EAAM,QAAQ,CAAC,CACzB,CAAC,CACH,G,qVCPA,MAAMC,EAA2B,CAAC,CAAE,SAAAC,EAAU,aAAAC,EAAc,QAAAC,CAAQ,IAAqC,CACvG,KAAM,CAAE,YAAaC,EAAqB,GAAI,WAAAC,CAAW,EAAIC,GAAA,GAAa,UAAU,YAAY,SAAS,CACvG,QAASL,EACT,OAAQC,CACV,CAAC,EAEKK,EAAmB,GAAGN,CAAQ,IAAI,IAAI,KAAK,EAAE,QAAQ,CAAC,GAE5D,OAAII,KACK,OAACG,EAAA,EAAkB,CAAC,KAAK,aAAc,MAI9C,OAACC,GAAA,GACC,OAAQP,EACR,eAAgBE,EAChB,iBAAAG,EACA,QAAAJ,CAAA,CACF,CAEJ,EAOaO,GAAsB,CAAC,CAAE,QAAAP,EAAS,SAAAF,CAAS,IAAiC,CACvF,KAAM,CAACU,EAAWC,CAAY,KAAI,YAAwB,MAAM,EAEhE,SACE,OAACC,GAAA,GACC,UAAAF,EACA,YAAaC,EACb,QAAAT,EACA,gBAAiB,OAAO,OAAO,KAAyB,EAExD,mBAACH,EAAA,CAAyB,SAAAC,EAAoB,aAAcU,EAAW,QAAAR,CAAA,CAAkB,EAC3F,CAEJ,E,kFCtCO,MAAMW,GAA0B,CAAC,CAAE,gBAAAC,CAAgB,IAAa,CACrE,KAAM,CACJ,QAAAC,EACA,MAAAC,EACA,UAAW,CAAE,OAAAC,CAAO,EACpB,SAAAC,CACF,KAAI,MAA+B,EAE7BC,KAAQ,MAAWC,EAAQ,EAE3BC,MAAgBC,GAAA,GAA4BC,GAAUA,EAAM,UAAU,EACtEC,KAAW,eAAY,KAC7B,aAAU,IAAM,CACdA,KAAS,OAAsB,CAAE,gBAAAV,CAAgB,CAAC,CAAC,CACrD,EAAG,CAACA,EAAiBU,CAAQ,CAAC,EAE9B,MAAMC,EAAcJ,GAAcP,CAAe,GAAG,OAE9CY,GAAYV,EAAM,WAAW,EAE7BW,MAAmB,WACvB,IACEF,EAAc,OAAO,KAAKA,CAAW,EAAE,IAAKC,IAAe,CAAE,MAAOA,EAAW,MAAOA,CAAU,EAAE,EAAI,CAAC,EACzG,CAACD,CAAW,CACd,EAEMG,MAAe,WACnB,IACGF,IAAaD,IAAcC,EAAS,GAAG,IAAKG,IAAW,CAAE,MAAOA,EAAM,KAAM,MAAOA,EAAM,IAAK,EAAE,GAAM,CAAC,EAC1G,CAACH,GAAWD,CAAW,CACzB,EAEA,SACE,QAAC,OAAI,UAAWN,EAAM,QACpB,oBAACW,EAAA,GACC,cAAY,mBACZ,MAAM,YACN,MAAOb,EAAO,WAAW,QACzB,QAAS,CAAC,CAACA,EAAO,WAAW,QAE7B,mBAAC,MACC,OAAQ,CAAC,CAAE,MAAO,CAAE,SAAAc,EAAU,IAAAC,GAAK,GAAGC,EAAM,CAAE,OAC5C,OAAC,MACE,GAAGA,GACJ,iBAAgB,GAChB,UAAWd,EAAM,MACjB,SAAWe,IAAU,CACnBhB,EAAS,QAAS,EAAE,EACpBa,EAASG,GAAM,KAAK,CACtB,EACA,QAASP,GACT,MAAO,GACT,EAEF,KAAK,YACL,QAAAZ,EACA,MAAO,CACL,SAAU,CAAE,MAAO,GAAM,QAAS,WAAY,EAC9C,SAAU,CACR,cAAe,KACjB,CACF,EACF,EACF,KACA,OAACe,EAAA,EAAK,CAAC,cAAY,eAAe,MAAM,QAAQ,MAAOb,EAAO,OAAO,QAAS,QAAS,CAAC,CAACA,EAAO,OAAO,QACrG,mBAAC,MACC,OAAQ,CAAC,CAAE,MAAO,CAAE,IAAAe,EAAK,GAAGC,EAAM,CAAE,OAClC,OAAC,MACE,GAAGA,GACJ,iBAAgB,GAChB,QAASL,GACT,MAAO,GACP,SAAWM,IAAU,CACnBhB,EAAS,QAASgB,GAAM,OAAS,EAAE,CACrC,EACA,UAAWf,EAAM,MACnB,EAEF,KAAK,QACL,QAAAJ,EACA,MAAO,CACL,SAAU,CAAE,MAAO,GAAM,QAAS,WAAY,EAC9C,SAAU,CACR,cAAe,KACjB,CACF,EACF,EACF,GACF,CAEJ,EAEMK,GAAYtB,IAA0B,CAC1C,WAAS,OAAI,CACX,QAAS,OACT,cAAe,MACf,eAAgB,aAEhB,YAAa,CACX,WAAYA,EAAM,QAAQ,CAAC,CAC7B,CACF,CAAC,EACD,SAAO,OAAI,CACT,MAAO,kBACT,CAAC,CACH,G,0BC9GO,MAAMqC,GAA0B,IAAM,CAC3C,MAAMC,KAAS,MAAWC,EAAS,EAC7B,CACJ,SAAAC,EACA,QAAAvB,EACA,MAAAC,EACA,UAAW,CAAE,OAAAC,CAAO,CACtB,KAAI,MAA+B,EAE7BsB,EAAOvB,EAAM,MAAM,EACnBwB,GAAiBxB,EAAM,gBAAgB,EAE7C,SACE,QAACyB,GAAA,EAAiB,CAAC,OAAQ,EAAG,MAAM,0BAClC,oBAACX,EAAA,GACC,MAAM,iBACN,YAAY,8IAEZ,oBAAC,OAAI,UAAWM,EAAO,QACrB,oBAACN,EAAA,EAAK,CAAC,QAAS,CAAC,CAACb,EAAO,SAAS,QAAS,MAAOA,EAAO,SAAS,QAAS,UAAWmB,EAAO,YAC3F,mBAACM,EAAA,GACE,GAAGJ,EAAS,UAAW,CAAE,QAAS,CAAE,MAAO,QAAS,QAAS,6BAA8B,CAAE,CAAC,EAC/F,MAAO,EACT,EACF,KACA,OAAC,MACC,KAAK,cACL,OAAQ,CAAC,CAAE,MAAO,CAAE,SAAAP,EAAU,IAAAC,EAAK,GAAGC,EAAM,CAAE,OAC5C,OAACU,EAAA,IACE,GAAGV,GACJ,QAASW,EAAA,GACT,SAAWV,IAAUH,EAASG,IAAO,KAAK,EAC1C,MAAO,GACP,UAAWE,EAAO,SACpB,EAEF,QAAArB,CAAA,CACF,GACF,EACF,EACCwB,IAAS,KAAa,eAAiBC,OACtC,OAAC3B,GAAuB,CAAC,gBAAiB2B,EAAA,CAAgB,KAG5D,OAACK,GAAA,EAAW,EAAC,GACf,CAEJ,EAEMR,GAAavC,IAA0B,CAC3C,eAAa,OAAI,CACf,aAAc,CAChB,CAAC,EACD,WAAS,OAAI,CACX,QAAS,OACT,cAAe,MACf,eAAgB,aAChB,WAAY,YACd,CAAC,EACD,YAAU,OAAI,CACZ,WAAYA,EAAM,QAAQ,EAAG,CAC/B,CAAC,CACH,G,2BCpEO,SAASgD,IAAsC,CACpD,KAAM,CAAE,MAAA9B,CAAM,KAAI,MAA+B,EAE3CwB,EAAiBxB,EAAM,gBAAgB,EAE7C,OAAKwB,KAKH,OAACC,GAAA,GACC,OAAQ,EACR,MAAO,0BACP,YAAY,0DAEZ,mBAAC5B,GAAuB,CAAC,gBAAiB2B,CAAA,CAAgB,EAC5D,EAVO,IAYX,C,4BCoCO,MAAMO,GAAgB,CAAC,CAAE,SAAAC,EAAU,QAAAC,CAAQ,IAAa,CAC7D,MAAMb,KAAS,MAAW,EAAS,EAC7BZ,KAAW,eAAY,EACvB0B,KAAY,OAAmB,EAC/B,CAACC,CAAW,KAAIC,EAAA,GAAe,EAC/B,CAACC,GAAcC,CAAe,KAAI,YAAS,EAAK,EAChD,CAACC,EAAeC,EAAgB,KAAI,YAASR,GAAU,MAAM,UAAY,KAAiC,EAC1G,CAACS,EAAmB,KAAIC,GAAA,GAAuB,EAE/CC,MAAc,KAAwC,EACtDC,KAAW,OAA8BD,GAAY,IAAI,EACzDE,GAAgBF,GAAY,GAE5BG,GAAYX,EAAY,SAA8B,OAAOA,EAAY,QAAQ,EAA9C,iBACnC,CAACY,GAAiBC,EAAkB,KAAI,YAAkB,EAAK,EAE/DC,MAAgC,WAAQ,IACxCjB,KACK,OAA2BA,CAAQ,EAGxCC,EACKiB,GAAsBjB,CAAO,EAGlC,OAAOE,EAAY,UAAa,SAC3BgB,GAA0BhB,EAAY,SAAUS,CAAQ,EAG1D,CACL,MAAG,OAAqB,EACxB,UAAW,IACX,WAAS,OAAkB,EAC3B,KAAMA,GAAY,KAAa,QAC/B,cAAAL,CACF,EACC,CAACP,EAAUC,EAASE,EAAaI,EAAeK,CAAQ,CAAC,EAEtDQ,MAAU,MAAwB,CACtC,KAAM,WACN,cAAAH,GACA,iBAAkB,EACpB,CAAC,EAEK,CAAE,aAAAI,GAAc,MAAArD,EAAM,EAAIoD,GAE1B7B,GAAOvB,GAAM,MAAM,EACnBwB,GAAiBxB,GAAM,gBAAgB,EAEvCsD,GAA8B,GAAQ/B,QAAS,MAA2BA,EAAI,GAAOC,KAErF+B,MAAcjD,GAAA,GAA4BC,IAAUA,GAAM,SAAS,QAAQ,GAAK,SACtFiD,EAAA,GAAYjD,IAAWA,GAAM,gBAAgB,SAAS,SAAW,KAAyB,EAE1F,KAAM,CAACkD,GAAmBC,EAAoB,KAAI,YAAS,EAAE,EAEvDC,GAAsB,CAACC,GAAM,KAAO,CACxCF,GAAqBE,EAAG,CAC1B,EAEMC,GAAS,CAACC,GAAwBC,KAAwB,CAC9D,GAAIN,KAAsB,GAAI,CAC5BvB,EAAU,MAAMuB,EAAiB,EACjC,MACF,IAEA,OAAwB,CAAE,WAAYzB,EAAW,SAAW,SAAU,SAAU8B,GAAO,IAAK,CAAC,EAGxF9B,IACC8B,GAAO,cACT,aAAa,QAAQ,MAAoB,MAAM,EAE/C,aAAa,QAAQ,MAAoB,OAAO,GAIpDtD,KACE,OAAmB,CACjB,OAAQ,CACN,GAAGyC,GACH,GAAGa,GACH,YACEA,GAAO,aACH,IAAI,CAAC,CAAE,IAAAE,GAAK,MAAA9C,EAAM,KAAO,CAAE,IAAK8C,GAAI,KAAK,EAAG,MAAO9C,GAAM,KAAK,CAAE,EAAE,EACnE,OAAO,CAAC,CAAE,IAAA8C,GAAK,MAAA9C,EAAM,IAAM,CAAC,CAAC8C,IAAO,CAAC,CAAC9C,EAAK,GAAK,CAAC,EACtD,OACE4C,GAAO,QACH,IAAI,CAAC,CAAE,IAAAE,GAAK,MAAA9C,EAAM,KAAO,CAAE,IAAK8C,GAAI,KAAK,EAAG,MAAO9C,GAAM,KAAK,CAAE,EAAE,EACnE,OAAO,CAAC,CAAE,IAAA8C,EAAI,IAAM,CAAC,CAACA,EAAG,GAAK,CAAC,CACtC,EACA,SAAAhC,EACA,eAAgB+B,GAAajB,GAAW,OACxC,qBAAsBG,GAAc,KACpC,cAAAV,CACF,CAAC,CACH,CACF,EAEM0B,GAAa,SAAY,CAC7B,GAAIjC,EAAU,CACZ,MAAMkC,MAAsB,MAAyClC,CAAQ,EAE7E,MAAMS,GAAoB,QAAQyB,GAAqBlC,EAAS,IAAI,EACpE,KAAgB,QAAQc,EAAQ,CAClC,CACF,EAEMqB,GAAiDlE,IAAiB,IACtE,OAAwB,CACtB,gBAAiBmE,GAAA,EAAO,UAAU,QAClC,OAAQ,MAAW,KAAK,MACxB,QAAS,MAAW,KAAK,GACzB,MAAO,OAAO,KAAKnE,EAAM,EAAE,SAAS,EACpC,WAAY+B,EAAW,SAAW,QACpC,CAAC,EACDE,EAAU,MAAM,kEAAkE,CACpF,EAEMmC,GAAqB,IAAM,IAC/B,OAAQ,MAAY,qBAAqB,KACzC,OAA4B,CAAE,WAAYrC,EAAW,SAAW,QAAS,CAAC,CAC5E,EAEMsC,GAAsBtE,GAAM,eAAe,KACjD,aAAU,IAAMwC,GAAiB8B,EAAmB,EAAG,CAACA,EAAmB,CAAC,EAE5E,MAAMC,MACJ,QAACC,GAAA,EAAK,CAAC,eAAe,WAAW,WAAW,SACzC,UAAAxC,MACC,QAACyC,GAAA,IACC,QAAQ,UACR,KAAK,SACL,KAAK,KACL,QAASpB,GAAcS,IAAWD,GAAOC,GAAQ,EAAK,EAAGK,EAAS,EAClE,SAAUZ,GAAY,QAErB,UAAAA,GAAY,YAAW,OAACmB,GAAA,EAAO,CAAC,UAAWtD,EAAO,cAAe,OAAQ,GAAM,EAAG,aAErF,KAEF,QAACqD,GAAA,IACC,QAAQ,UACR,KAAK,SACL,KAAK,KACL,QAASpB,GAAcS,IAAWD,GAAOC,GAAQ,EAAI,EAAGK,EAAS,EACjE,SAAUZ,GAAY,QAErB,UAAAA,GAAY,YAAW,OAACmB,GAAA,EAAO,CAAC,UAAWtD,EAAO,cAAe,OAAQ,GAAM,EAAG,sBAErF,KACA,OAAC,QAAI,CAAC,GAAI0B,GACR,mBAAC2B,GAAA,GAAM,CAAC,QAAQ,YAAY,SAAUlB,GAAY,QAAS,KAAK,SAAS,QAASc,GAAoB,KAAK,KAAK,kBAEhH,EACF,EACCrC,KACC,OAACyC,GAAA,GAAM,CAAC,KAAK,UAAU,QAAQ,cAAc,KAAK,SAAS,QAAS,IAAMzB,GAAmB,EAAI,EAAG,KAAK,KAAK,kBAE9G,EACE,KACHhB,GAAY2C,GAA4B3E,EAAK,MAC5C,OAACyE,GAAA,IACC,QAAQ,YACR,KAAK,SACL,QAAS,IAAMnC,EAAgB,EAAI,EACnC,SAAUiB,GAAY,QACtB,KAAK,KACN,qBAED,GAEJ,EAGIqB,GAAW5C,MAAY,MAAmBA,EAAS,IAAI,MAAK,MAAyBA,EAAS,IAAI,EACxG,OAAKT,MAIH,QAAC,KAAY,CAAE,GAAG6B,GAChB,oBAACyB,GAAA,EAAe,CAAC,QAASN,EAAA,CAAe,KACzC,OAAC,QAAK,SAAWO,IAAMA,GAAE,eAAe,EAAG,UAAW1D,EAAO,KAC3D,oBAAC,OAAI,UAAWA,EAAO,aACpB,UAAAwD,OAAY,OAACG,EAAA,EAAc,EAAC,KAC7B,OAACC,GAAA,EAAe,CAAC,cAAc,OAAO,oBAAqB,GACzD,oBAACR,GAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAE7B,oBAAC,KAAsB,EAAC,KAExB,OAACS,GAAA,EAAuB,CAAC,oBAAqB,CAAC,CAACjD,EAAU,aAAc2B,EAAA,CAAqB,EAE5FL,OACC,oBAEG,mBAA2B/B,EAAI,MAC9B,OAAC2D,GAAA,GACC,cAAA3C,EACA,iBAAAC,GACA,SAAU,EAAQR,EAClB,wBAAyB,GAC3B,EAGDT,KAAS,KAAa,kBAAiB,OAACJ,GAAuB,EAAC,EAEhEI,KAAS,KAAa,mBAAkB,OAACO,GAAmC,EAAC,KAI9E,OAACqD,GAAA,EAAiB,CAAC,SAAUtC,EAAA,CAAe,EAE3C,IAAC,MAAsBtB,EAAI,MAAK,OAAC6D,EAAA,EAAe,EAAC,GACpD,GAEJ,EACF,GACF,EACF,EACCrC,MACC,OAACsC,GAAA,GACC,OAAQ,GACR,MAAM,cACN,KAAK,4FACL,YAAY,cACZ,KAAK,uBACL,UAAWpB,GACX,UAAW,IAAMjB,GAAmB,EAAK,EAC3C,EACE,KACHX,MACC,MAA2Bd,EAAI,KAC7B,OAAC9B,GAAmB,CAAC,SAAUoD,GAAe,QAAS,IAAMP,EAAgB,EAAK,EAAG,KAErF,OAACgD,GAAA,GAAa,CAAC,QAAS,IAAMhD,EAAgB,EAAK,EAAG,EAEtD,MACN,EA5DO,IA8DX,EAEMqC,GAA+B3E,GAAwC,CAC3E,KAAM,CAAC4C,EAAUpB,CAAc,EAAIxB,EAAM,CAAC,OAAQ,gBAAgB,CAAC,EAEnE,OAAQ4C,IAAa,KAAa,eAAiBA,IAAa,KAAa,iBAAmBpB,IAAmB,EACrH,EAEA,SAAS2B,GAA0BoC,EAAwBhE,EAAoC,CAC7F,IAAIiE,EAEJ,GAAI,CACFA,EAAsB,KAAK,MAAMD,CAAc,CACjD,MAAc,CACZ,MAAO,CACL,MAAG,OAAqB,EACxB,WAAS,OAAkB,CAC7B,CACF,CAEA,SAAO,OAAoB,CACzB,MAAG,OAAqB,EACxB,GAAGC,EACH,eAAa,OAA4BA,EAAoB,aAAe,CAAC,CAAC,EAC9E,QAASA,EAAoB,YAAW,OAAkB,EAC1D,KAAMjE,GAAQ,KAAa,QAC3B,cAAe,KACjB,CAAC,CACH,CAEA,SAAS2B,GAAsBuC,EAA+C,CAC5E,SAAO,OAAoB,CACzB,MAAG,OAAqB,EACxB,GAAGA,CACL,CAAC,CACH,CAEA,MAAM,GAAa3G,IAA0B,CAC3C,iBAAe,OAAI,CACjB,YAAaA,EAAM,QAAQ,CAAC,CAC9B,CAAC,EACD,QAAM,OAAI,CACR,MAAO,OACP,OAAQ,OACR,QAAS,OACT,cAAe,QACjB,CAAC,EACD,gBAAc,OAAI,CAChB,WAAYA,EAAM,OAAO,WAAW,QACpC,SAAU,SACV,SAAUA,EAAM,YAAY,OAAO,GACnC,KAAM,CACR,CAAC,EACD,WAAS,OAAI,CACX,QAAS,OACT,cAAe,MACf,eAAgB,YAClB,CAAC,CACH,G,iDCtVO,SAAS4G,GAAgB,CAAE,aAAAC,CAAa,EAAqC,CAClF,KAAM,CAAE,QAAAC,EAAS,OAAQH,EAAM,MAAAI,CAAM,KAAI,OAAoB,CAAE,eAAgBF,CAAa,CAAC,EAE7F,GAAIC,EACF,SAAO,OAACrG,EAAA,EAAkB,CAAC,KAAK,qBAAsB,GAGxD,GAAIkG,EAAM,CACR,MAAMK,EAAYC,GAAoBN,CAAI,EACpCO,KAAc,OAAsBF,CAAS,EAEnD,SAAO,OAAC/D,GAAa,CAAC,QAASiE,CAAA,CAAa,CAC9C,CAEA,OAAIH,KAEA,OAACjH,EAAA,EAAK,CAAC,MAAM,QAAQ,SAAS,QAC3B,mBAAmBiH,CAAK,EAC3B,KAKF,OAACjH,EAAA,GACC,MAAM,gDACN,cAAc,wBACd,SAAU,IAAM,KAAgB,WAAQ,MAAkB,gBAAgB,CAAC,EAC7E,CAEJ,CAEA,SAASqH,GAAeR,EAAoBS,EAAiB,IACvD,MAAmBT,CAAI,IACzBA,EAAK,cAAc,MAAQS,MAEzB,MAAoBT,CAAI,IAC1BA,EAAK,MAAQS,MAGX,MAAqBT,CAAI,IAC3BA,EAAK,OAASS,EAElB,CAEO,SAASH,GAAoBN,EAAsC,CACxE,MAAMK,KAAY,aAAUL,CAAI,EAChC,OAAAQ,GACEH,EAAU,QACV,SAAmB,MAAYA,EAAU,IAAI,EAAGA,EAAU,MAAM,MAAM,IAAI,IAAW,CAAC,CACxF,KAEI,MAAmBA,EAAU,IAAI,IACnCA,EAAU,KAAK,cAAc,IAAM,GAGvBA,EAAU,KAAK,cAAc,aACvCA,EAAU,MAAQ,CAAE,KAAM,GAAI,MAAOA,EAAU,MAAM,KAAM,IAIxDA,CACT,C,4BC9DO,SAASK,GAAmB,CAAE,WAAAC,EAAY,GAAAC,CAAG,EAA4B,CAC9E,KAAM,CACJ,QAASC,EACT,OAAQC,EACR,MAAAV,CACF,KAAI,OAAoB,CAAE,eAAgBO,CAAW,CAAC,EAEhDI,EAAiB,MAAsCJ,CAAU,EAEjE,CAAE,WAAAK,GAAY,QAASC,CAAgB,KAAIC,GAAA,GAAkBH,EAAgBD,GAAkB,IAAI,EAIzG,OAFgBD,GAAoBI,KAG3B,OAACnH,EAAA,EAAkB,CAAC,KAAK,iBAAkB,GAGhDsG,KAEA,OAACjH,EAAA,EAAK,CAAC,SAAS,QAAQ,MAAM,sBAC3B,mBAAmBiH,CAAK,EAC3B,EAICU,EAIDE,KAAe,MACV,OAAChI,EAAY,CAAC,MAAM,mBAAmB,gEAAoD,KAG7F,OAACsD,GAAa,CAAC,SAAUwE,CAAA,CAAkB,KAPzC,OAAC9H,EAAY,CAAC,MAAM,iBAAiB,4CAAgC,CAQhF,C,uCCzBA,MAAMmI,EAAwC,CAC5C,KAAM,OACN,GAAI,iBACN,EAGMC,EAAa,CAACT,EAA6B7E,IAC3CA,IAAS,aAAeA,IAAS,oBAC/B6E,EAEK,CAAE,GAAGQ,EAAgB,GAAI,kBAAmB,KAAM,qBAAsB,EAExE,CAAE,GAAGA,EAAgB,GAAI,iBAAkB,KAAM,oBAAqB,EAI7ER,EAEK,CAAE,GAAGQ,EAAgB,GAAI,kBAAmB,KAAM,WAAY,EAE9D,CAAE,GAAGA,EAAgB,GAAI,iBAAkB,KAAM,gBAAiB,EAIvEE,EAAa,CAAC,CAAE,MAAAC,CAAM,IAAuB,CACjD,MAAMvG,KAAW,eAAY,EACvB,CAACwG,CAAY,KAAIC,GAAA,GAAmB,EAEpC,CAAE,KAAA1F,CAAK,EAAIwF,EAAM,OACjBV,EAAK,MAA6BU,EAAM,MAAM,EAC9CX,EAAa,MAAgBC,EAAI,EAAI,EAErCa,GAAaF,EAAa,IAAI,UAAU,GAAK,OAC7CG,EAAqB,MAAgBD,EAAU,EAE/C,CAAE,QAAAtB,EAAU,EAAK,KAAIwB,EAAA,GAAS,SAAY,CAC1ChB,GACF,MAAM5F,KAAS,OAAgC,CAAE,gBAAiB4F,EAAW,cAAe,CAAC,CAAC,EAE5Fe,GACF,MAAM3G,KAAS,OAAgC,CAAE,gBAAiB2G,EAAmB,cAAe,CAAC,CAAC,CAE1G,EAAG,CAAC3G,CAAQ,CAAC,EAEP,CAAE,sBAAA6G,GAAuB,oBAAAC,GAAqB,aAAAC,EAAa,KAAI,KAAe,EAE9EC,KAAa,eAAY,IAAM,CACnC,GAAI,CAAA5B,EAIJ,MAAI,CAACQ,GAAc,CAACiB,IAAyB,CAACC,MACrC,OAAC7I,EAAY,CAAC,MAAM,sBAAsB,uDAA2C,EAG1F2H,GAAc,CAACmB,GAAanB,EAAW,cAAc,KAChD,OAAC3H,EAAY,CAAC,MAAM,oBAAoB,qDAAyC,EAGtF2H,KACK,OAACD,GAAkB,CAAU,WAAAC,EAAwB,GAAAC,CAAA,EAA5BA,CAAoC,EAGlEc,KACK,OAACzB,GAAe,CAAC,aAAcyB,CAAA,CAAoB,KAGrD,OAACpF,GAAa,EAAC,CACxB,EAAG,CAACuF,GAAqBD,GAAuBE,GAAcJ,EAAoBd,EAAID,EAAYR,CAAO,CAAC,EAE1G,SACE,OAAC6B,GAAA,EAAmB,CAAC,UAAW7B,EAAS,MAAM,aAAa,QAASiB,EAAWT,EAAY7E,CAAI,EAC7F,SAAAiG,EAAW,EACd,CAEJ,EAEA,KAAe,MAAkBV,EAAY,CAAE,MAAO,MAAO,CAAC,C,qZClEvD,SAASY,GAAqB,CAAE,SAAAC,EAAU,SAAA3I,EAAS,EAA8B,CACtF,MAAMoE,MAAU,MAAwB,CACtC,KAAM,WACN,cAAeuE,EACf,iBAAkB,EACpB,CAAC,EACK,CAACxF,CAAW,KAAIC,GAAA,GAAe,EAE/BJ,EAAW,EAAQ2F,EACnBzF,KAAY,OAAmB,EAC/BY,EAAYX,EAAY,SAA8B,OAAOA,EAAY,QAAQ,EAA9C,iBAEnC,CAACyF,EAAYC,EAAa,KAAI,YAAqC,MAAS,EAE5E,CAACpE,GAAmBC,EAAoB,KAAI,YAAS,EAAE,EACvD,CAACnB,GAAeC,EAAgB,KAAI,YAASmF,GAAU,eAAiB,IAAiC,EAEzGxD,GAAY,IAAY,CAC5BjC,EAAU,MAAM,kEAAkE,CACpF,EAEMyB,GAAsB,CAACC,GAAM,KAAO,CACxCF,GAAqBE,EAAG,CAC1B,EAEMC,GAAU+D,IAA2C,CACzD,GAAInE,KAAsB,GAAI,CAC5BvB,EAAU,MAAMuB,EAAiB,EACjC,MACF,CACAoE,GAAcD,EAAU,CAC1B,EAEM1I,MAAU,eAAY,IAAM,CAChC2I,GAAc,MAAS,CACzB,EAAG,CAACA,EAAa,CAAC,EAEZtD,GAAgB,IACpB,OAAC,KAAU,CAAC,KAAMzB,EAAuB,KAAK,KAAK,QAAQ,YAAY,QAAS,IAAMe,GAAO,MAAS,EAAG,mBAAzE,QAEhC,KACA,OAACY,EAAA,GAAM,CAAmB,KAAK,KAAK,QAASrB,GAAQ,aAAc0E,IAAejE,GAAOiE,EAAU,EAAG3D,EAAS,EAAG,mBAAtG,aAEZ,CACF,EAEA,SACE,mBACE,oBAAC,KAAY,CAAE,GAAGf,GAChB,oBAACyB,GAAA,EAAe,CAAC,QAASN,EAAA,CAAe,KACzC,OAAC,QAAK,SAAWO,IAAMA,GAAE,eAAe,EACtC,mBAAC,OACC,mBAACE,EAAA,EAAe,CAAC,cAAc,OAAO,oBAAqB,GACzD,oBAACR,GAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAE7B,oBAAC,IAAsB,EAAC,KAExB,OAACS,GAAA,EAAuB,CAAC,oBAAqBjD,EAAU,aAAc2B,EAAA,CAAqB,KAG3F,OAACuB,EAAA,GACC,cAAA3C,GACA,iBAAAC,GACA,SAAU,EAAQR,EAClB,wBAAyB,GAC3B,KAIA,OAACmD,GAAA,EAAiB,CAAC,SAAAnG,EAAA,CAAoB,KAEvC,OAACoG,EAAA,EAAe,EAAC,GACnB,EACF,EACF,EACF,EACCwC,MAAc,OAACG,GAAA,CAA0B,aAAcH,EAAY,QAAA1I,GAAkB,IAAKF,EAAA,CAAU,GACvG,EACF,CAEJ,CAEA,MAAMgJ,GAAc,CAACC,EAAsBpH,KAAkB,CAC3D,KAAM,CAAE,WAAAqH,EAAW,KAAI,MAAsB,KAAyB,EAEhEC,EAAcD,IAAY,YAMhC,SAJoBd,EAAA,GAAS,SACpBe,EAAc,QAAM,OAAqBA,EAAaF,EAAcpH,EAAK,EAAI,OACnF,CAACsH,EAAaF,EAAcpH,EAAK,CAAC,CAGvC,EAQauH,GAAqB,CAChCC,EACAP,GACAQ,KAC8B,CAC9B,MAAMC,KAAiB,MAAgCT,EAAU,EAE3DU,EAAc,CAAE,GAAGD,EAAgB,cAAe,CAAE,GAAGA,EAAe,cAAe,IAAAF,CAAS,CAAE,EACtG,GAAIC,IAAe,MAAO,CAExB,IAAIG,EAAuB,GAC3B,MAAMC,EAAeJ,GAAc,MAAM,IAAK7C,MACxC,MAAmBA,CAAI,GAAKA,EAAK,cAAc,MAAQ4C,GACzDI,EAAuB,GAChBD,GAEA/C,CAEV,EACD,OAAKgD,GAEHC,EAAa,KAAKF,CAAW,EAExB,CACL,GAAGF,GACH,MAAOI,CACT,CACF,KAEE,OAAO,CACL,KAAMJ,IAAe,MAAQ,GAC7B,MAAO,CAACE,CAAW,CACrB,CAEJ,EAEMG,GAAwB,CAAC7E,EAAwBuE,KAAgB,CACrE,MAAMO,GAAgBZ,GAAYlE,EAAO,QAAQ,KAAO,GAAIA,EAAO,KAAK,EAIxE,MAAO,CAAE,WAHkC,WAAQ,IAC1CsE,GAAmBC,GAAKvE,EAAQ8E,IAAe,KAAK,EAC1D,CAACP,GAAKO,GAAe9E,CAAM,CAAC,EACb,aAAc8E,GAAc,OAAQ,CACxD,EAEMC,GAAiC,CAAC,CACtC,aAAA5J,EACA,aAAA6J,GACA,QAAA5J,GACA,IAAAmJ,CACF,IAA2C,CACzC,KAAM,CAACU,EAAWnB,CAAU,EAAIvI,GAAA,GAAa,UAAU,wBAAwB,YAAY,EACrF,CAAE,aAAA2J,EAAc,QAAAC,CAAQ,EAAIN,GAAsBG,GAAcT,CAAG,EAEnEJ,GAAea,GAAa,QAAQ,KAAO,GAMjD,MAJA,aAAU,IAAM,CACd,CAACE,GAAgBD,EAAU,CAAE,QAAAE,EAAS,OAAQhK,EAAc,aAAAgJ,EAAa,CAAC,CAC5E,EAAG,CAACA,GAAchJ,EAAcgK,EAASF,EAAWC,CAAY,CAAC,EAE7DpB,EAAW,UACb,SAAO,OAACrI,EAAA,EAAkB,CAAC,KAAK,aAAc,GAGhD,MAAMD,GAAmB,iBAAiB2J,EAAQ,IAAI,IAAIZ,CAAG,IAAI,IAAI,KAAK,EAAE,QAAQ,CAAC,GAErF,SACE,OAAC7I,GAAA,GACC,OAAQP,EACR,eAAgB2I,EAAW,MAAQ,GACnC,iBAAAtI,GACA,QAAAJ,EAAA,CACF,CAEJ,EAQa6I,MAA4B,QAAK,CAAC,CAAE,QAAA7I,EAAS,aAAA4J,GAAc,IAAAT,EAAI,IAAsC,CAChH,KAAM,CAAC3I,EAAWC,CAAY,KAAI,YAAwB,MAAM,EAEhE,SACE,OAACC,GAAA,GACC,MAAO,eACP,UAAAF,EACA,YAAaC,EACb,QAAAT,EACA,gBAAiB,OAAO,OAAO,IAAyB,EAExD,mBAAC2J,GAAA,CACC,aAAcnJ,EACd,QAAAR,EACA,aAAA4J,GACA,IAAAT,EAAA,CACF,EACF,CAEJ,CAAC,EAEDN,GAA0B,YAAc,4BC1NzB,SAASmB,GAAoB,CAAE,MAAAnC,CAAM,EAA6B,CAC/E,MAAMoC,MAAiB,WAAoC,IAClD,MAAgBpC,EAAM,OAAO,GAAI,EAAI,EAC3C,CAACA,EAAM,OAAO,EAAE,CAAC,EAEpB,OAAKoC,MAWH,OAACC,GAAA,CACC,mBAACC,GAAA,CAAiB,eAAAF,EAAA,CAAgC,EACpD,KAXE,OAACC,GAAA,CACC,mBAACxK,EAAA,EAAK,CAAC,MAAM,kBAAkB,SAAS,QAAQ,wFAEhD,EACF,CASN,CAMA,SAASwK,GAAoB,CAAE,SAAAzK,CAAS,EAA6B,CACnE,SACE,OAAC8I,EAAA,GACC,MAAM,aACN,QAAS,CACP,KAAM,gBACN,SACE,oIACJ,EAEC,SAAA9I,CAAA,CACH,CAEJ,CAEA,SAAS0K,GAAiB,CAAE,eAAAF,CAAe,EAAuC,CAChF,KAAM,CAAE,QAAAvD,GAAS,MAAAC,GAAO,OAAQyD,CAAU,KAAI,MAAoB,CAAE,eAAAH,CAA+B,CAAC,EAEpG,OAAIvD,MACK,OAACrG,EAAA,EAAkB,CAAC,KAAK,qBAAsB,GAGpDsG,MAEA,OAACjH,EAAA,EAAK,CAAC,MAAM,4BAA4B,SAAS,QAC/C,kBAAmBiH,EAAK,EAC3B,EAIA,CAACyD,GAAa,CAAC1D,MAGf,OAAChH,EAAA,GACC,MAAM,gDACN,cAAc,wBACd,SAAU,IAAM,KAAgB,WAAQ,KAAkB,gBAAgB,CAAC,EAC7E,EAIA0K,GAAa,IAAC,MAAmBA,EAAU,IAAI,KAG/C,OAAC1K,EAAA,GACC,MAAM,gDACN,cAAc,wBACd,SAAU,IAAM,KAAgB,WAAQ,KAAkB,gBAAgB,CAAC,EAC7E,EAIA0K,MAAa,MAAmBA,EAAU,IAAI,KAE9C,OAAC5B,GAAA,CACC,YAAU,MAA2B4B,CAAS,EAC9C,SAAUA,EAAU,KAAK,cAAc,IACzC,KAIG,OAAC1K,EAAA,EAAK,CAAC,MAAM,eAAgB,EACtC,C,kICpGO,SAAS2K,IAAmB,CACjC,MAAMnI,KAAS,MAAWoI,CAAqB,EAC/C,SACE,QAAC,OAAI,uFAEH,OAAC,OAAG,EAAE,2DAEN,OAAC,OAAG,KACJ,QAAC,OAAI,UAAWpI,EAAO,KACrB,qBAAC,OAAI,UAAWA,EAAO,OACrB,oBAAC,OAAI,kBAAM,KACX,OAAC,OAAI,qBAAS,KACd,OAAC,OAAI,mBAAO,GACd,KACA,OAACqI,EAAA,CAAyB,KAAM,IAAY,QAAS,KAAK,UAAU,QAAQ,KAAM,MAClF,OAACA,EAAA,CAAyB,KAAM,IAAY,QAAS,KAAK,UAAU,QAAQ,KAAM,MAClF,OAACA,EAAA,CAAyB,KAAM,IAAY,MAAO,KAAK,QAAQ,QAAQ,IAAK,MAC7E,OAACA,EAAA,CAAyB,KAAM,IAAY,KAAM,KAAK,OAAO,QAAQ,IAAK,MAC3E,OAACA,EAAA,CAAyB,KAAM,IAAY,MAAO,KAAK,QAAQ,QAAQ,IAAK,MAC7E,QAAC,OAAI,UAAWrI,EAAO,SACrB,oBAAC,OAAI,mCAAuB,KAC5B,OAAC,QAAK,iCAAqB,GAC7B,GACF,GACF,CAEJ,CAEA,SAASqI,EAAyB,CAAE,KAAAC,EAAM,KAAAC,EAAM,QAAAC,CAAQ,EAAyD,CAC/G,MAAMxI,KAAS,MAAWoI,CAAqB,EAE/C,SACE,oBACE,oBAAC,OAAI,UAAWpI,EAAO,KAAO,SAAAsI,CAAA,CAAK,KACnC,OAAC,OAAK,SAAAC,CAAA,CAAK,KACX,OAAC,QAAM,SAAAC,CAAA,CAAQ,GACjB,CAEJ,CAEA,MAAMJ,EAAyB1K,IAA0B,CACvD,QAAM,OAAI,CACR,WAAYA,EAAM,WAAW,cAC/B,CAAC,EACD,QAAM,OAAI,CACR,QAAS,OACT,oBAAqB,sBACrB,IAAKA,EAAM,QAAQ,EAAG,CAAC,CACzB,CAAC,EACD,UAAQ,OAAI,CACV,QAAS,WACT,WAAYA,EAAM,WAAW,cAC/B,CAAC,EACD,YAAU,OAAI,CACZ,QAAS,WACT,UAAW,CACT,WAAY,YACd,CACF,CAAC,CACH,GC1Da+K,KAAoB,cAAiE,CAACC,EAAO9I,OAEtG,OAACU,EAAA,GACC,UACE,OAACqI,EAAA,EAAS,CAAC,WAAS,OAACR,GAAgB,EAAC,EAAI,SAAU,GAClD,mBAACS,EAAA,EAAI,CAAC,KAAK,cAAc,KAAK,IAAK,GACrC,EAED,GAAGF,EACJ,IAAA9I,CAAA,CACF,CAEH,EAED6I,EAAkB,YAAc,mB,qDClBzB,MAAMI,EAAiBnL,IACrB,CACL,aAAW,OAAI,CACb,WAAY,SACZ,QAAS,OACT,SAAU,aAEV,YAAa,CACX,WAAYA,EAAM,QAAQ,CAAC,CAC7B,CACF,CAAC,EACD,SAAO,OAAI,CACT,KAAM,CACR,CAAC,EACD,qBAAmB,OAAI,CACrB,SAAUA,EAAM,QAAQ,EAAE,CAC5B,CAAC,EACD,uBAAqB,OAAI,CACvB,QAASA,EAAM,QAAQ,CAAC,CAC1B,CAAC,EACD,YAAU,OAAI,CACZ,eAAgB,WAClB,CAAC,EACD,YAAU,OAAI,CACZ,OAAQ,OACR,WAAY,OACZ,MAAOA,EAAM,OAAO,KAAK,OAC3B,CAAC,CACH,E,sCChCK,MAAMoL,EAAqB,CAChC,UAAW,CACT,MAAO,aACP,YACE,mIACF,UAAW,kBACb,EACA,cAAe,CACb,MAAO,iBACP,YACE,6KACF,UAAW,sBACb,EACA,eAAgB,CACd,MAAO,kBACP,YAAa,yFACb,UAAW,uBACb,CACF,C,sCCZO,MAAMC,EAAmD,CAC9D,WAAY,MACZ,eAAgB,KAChB,gBAAiB,IACnB,C,uJCAA,MAAMC,EAAsC7I,IAAwB,CAClE,WAAS,OAA6BA,CAAI,EACtC,oIACA,kIACJ,MAAO,4BACT,GAMa8I,EAAyB,IAAM,CAC1C,KAAM,CACJ,SAAA/I,EACA,MAAAtB,EACA,UAAW,CAAE,OAAAC,CAAO,CACtB,KAAI,MAA+B,EAE7BqK,EAAetK,EAAM,MAAM,EACjC,GAAI,CAACsK,EACH,OAAO,KAET,MAAMC,MAAc,OAAsBD,CAAY,EAChDE,MAAyB,OAA6BF,CAAY,EAClEG,MAAuB,OAA2BH,CAAY,EAE9DI,GAAaH,GADIC,GAAyB,4BAA8B,iBAC5B,aAClD,SACE,OAAC,KACC,OAAQ,EACR,MAAO,SAASE,EAAU,QAC1B,eACE,QAAC,IAAI,CAAC,QAAQ,YAAY,MAAM,YAAY,2CACXA,GAAW,KAC5C,EAGF,oBAAC,IAAK,CAAC,UAAU,SACf,oBAAC,IAAK,CAAC,MAAM,OAAO,MAAOzK,GAAQ,MAAM,QAAS,QAAS,CAAC,CAACA,EAAO,MAAM,QACxE,mBAAC,KACC,cAAa,KAAU,WAAW,WAAW,cAC7C,GAAG,OACH,MAAO,GACN,GAAGqB,EAAS,OAAQ,CACnB,SAAU,CAAE,MAAO,GAAM,QAAS,mBAAoB,EACtD,QAASmJ,GACLL,EAAmC,IAAa,cAAc,EAC9D,MACN,CAAC,EACD,aAAW,OACX,YAAa,aAAaM,EAAU,UACtC,EACF,EACCF,OACC,OAAC,IAAK,CAAC,MAAM,SAAS,MAAOvK,GAAQ,QAAQ,QAAS,QAAS,CAAC,CAACA,EAAO,QAAQ,QAC9E,mBAAC,KACC,GAAG,SACH,MAAO,GACN,GAAGqB,EAAS,SAAU,CACrB,SAAU,CAAE,MAAO,GAAM,QAAS,0BAA2B,EAC7D,QAAS8I,EAAmC,IAAa,gBAAgB,CAC3E,CAAC,EACD,aAAW,SACX,YAAa,0BACf,EACF,GAEJ,EACF,CAEJ,C,sUCtEO,MAAMO,EAAsB,CAAC,CAAE,UAAAC,CAAU,OAE5C,OAACpG,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAC7B,mBAAC,OACE,SAAAoG,EAAU,IAAI,CAACC,EAAUC,IAAU,CAClC,MAAMC,EAAWF,EAAS,KAAiB,EACrCG,EAAiBH,EAAS,KAAwB,EAClD7G,EAAM+G,EAAS,KAAOD,EAC5B,SACE,OAACG,GAAA,IAEC,KAAMF,EAAS,KACf,KAAMF,EAAS,KACf,eAAa,OAAuBA,CAAQ,EAC5C,eAAAG,CAAA,EAJKhH,CAKP,CAEJ,CAAC,EACH,EACF,E,wECGJ,MAAMkH,GAA8B,IAE7B,SAASC,GAAqB,CACnC,aAAAC,EACA,QAAAC,EACA,qBAAAC,EACA,iBAAAC,CACF,EAA8B,CAC5B,MAAMnK,KAAS,MAAWC,EAAS,EAC7B,CAAE,QAAAtB,EAAS,MAAAC,EAAO,QAAAwL,CAAQ,KAAI,MAA+B,EAE7DC,EAAqBzL,EAAM,iBAAiBoL,CAAY,uBAAuB,EAE/EM,EAAmCL,EAAQ,KAAMM,GAAWA,EAAO,MAAM,OAASF,CAAkB,GAAG,MACvGG,EACJF,EACI,CAAE,MAAOA,EAAkC,MAAOA,EAAiC,IAAK,EACxF,CAAE,MAAO,OAAW,MAAO,EAAG,EAE9BG,GAA2B,IAE3B,CAACC,EAAsBC,CAAuB,KAAI,YAAS,EAAK,EAEhEC,GAASC,GAAe,IAAI,QAASC,IAAY,WAAWA,GAASD,CAAE,CAAC,EAGxEE,MAAuB,eAAY,IAAM,CACzCV,GACFD,EAAQ,iBAAiBJ,CAAY,wBAAyB,CAAE,YAAa,EAAK,CAAC,CAEvF,EAAG,CAACA,EAAcK,EAAoBD,CAAO,CAAC,EAExCY,GAAiB,IAAM,CAC3BL,EAAwB,EAAI,EAC5B,QAAQ,IAAI,CAACR,EAAiB,EAAGS,GAAMH,EAAwB,CAAC,CAAC,EAAE,QAAQ,IAAM,CAC/EE,EAAwB,EAAK,EAC7BI,GAAqB,CACvB,CAAC,CACH,EAGA,sBAAU,IAAM,CACdA,GAAqB,CACvB,EAAG,CAACA,EAAoB,CAAC,KAGvB,OAAC3H,EAAA,EAAK,CAAC,UAAU,SACf,mBAACA,EAAA,EAAK,CAAC,UAAU,MAAM,WAAW,SAChC,mBAAC1D,EAAA,EAAK,CAAC,MAAM,gBAAgB,cAAY,uBACvC,mBAAC,MACC,OAAQ,CAAC,CAAE,MAAO,CAAE,SAAAC,EAAU,IAAAC,GAAK,GAAGC,EAAM,EAAG,WAAY,CAAE,MAAA4E,EAAM,CAAE,OACnE,oBACE,qBAAC,OAAI,UAAWzE,EAAO,sBACrB,oBAACO,EAAA,IACC,YAAa0J,EAAQ,OAASH,GAC9B,aAAW,gBACX,aAAcU,EACd,SAAU,CAAC1K,GAAkDmL,KAAkB,CAC7EtL,EAASG,IAAO,OAAO,IAAI,EAC3BoK,EAAqBpK,IAAO,KAAK,CACnC,EAMA,QAAAmK,EACA,MAAO,GACT,KACA,QAAC,OAAI,UAAWjK,EAAO,kBACrB,oBAACkL,EAAA,GACC,KAAK,OACL,QAASF,GACT,aAAW,yBACX,QAAQ,8BACR,aAAW,MAAGhL,EAAO,cAAe,CAClC,CAACA,EAAO,OAAO,EAAG0K,CACpB,CAAC,EACH,KACA,OAACS,GAAA,EAAoB,GACvB,GACF,EAKC1G,OAAS,OAAC2G,GAAA,EAAsB,CAAE,SAAA3G,IAAO,QAAQ,GACpD,EAEF,MAAO,CACL,SAAU,CACR,MAAO,GACP,QAAS,4BACX,EACA,SAAU,CACR,mBAAqB3E,GACfmK,EAAQ,KAAMM,IAAWA,GAAO,MAAM,OAASzK,CAAK,EAC/C,GAEF,iBAAiBuK,CAAkB,kBAE9C,CACF,EACA,QAAA1L,EACA,KAAM,iBAAiBqL,CAAY,wBACrC,EACF,EACF,EACF,CAEJ,CACA,SAASmB,IAAsB,CAE7B,SACE,OAACE,GAAA,EAAQ,CAAC,SAAQ,GAAC,QAAM,MAFC,yBAEoC,EAAG,aAAW,gCAAgC,yCAE5G,CAEJ,CAEA,MAAMC,MAAW,aAAU,CACzB,KAAM,CACJ,UAAW,gBACb,EACA,GAAI,CACF,UAAW,cACb,CACF,CAAC,EAEKrL,GAAavC,IAA0B,CAC3C,yBAAuB,OAAI,CACzB,QAAS,OACT,cAAe,MACf,WAAY,SACZ,IAAKA,EAAM,QAAQ,CAAC,EACpB,UAAWA,EAAM,QAAQ,CAAC,CAC5B,CAAC,EACD,qBAAmB,OAAI,CACrB,QAAS,OACT,cAAe,MACf,WAAY,SACZ,eAAgB,SAChB,IAAKA,EAAM,QAAQ,CAAC,CACtB,CAAC,EACD,iBAAe,OAAI,CACjB,MAAOA,EAAM,OAAO,KAAK,UACzB,OAAQ,UACR,aAAcA,EAAM,MAAM,OAAO,OACjC,SAAU,QACZ,CAAC,EACD,WAAS,OAAI,CACX,cAAe,OACf,CAACA,EAAM,YAAY,aAAa,eAAe,CAAC,EAAG,CACjD,UAAW,GAAG4N,EAAQ,qBACxB,EACA,CAAC5N,EAAM,YAAY,aAAa,QAAQ,CAAC,EAAG,CAC1C,UAAW,GAAG4N,EAAQ,qBACxB,CACF,CAAC,EACD,QAAM,OAAI,CACR,MAAO5N,EAAM,OAAO,QAAQ,IAC9B,CAAC,CACH,G,wCCnLO,SAAS6N,EAAiB,CAAE,aAAAvB,CAAa,EAA0B,CACxE,MAAMhK,KAAS,MAAW,IAAa,EACjC,CACJ,QAAArB,EACA,UAAW,CAAE,OAAAE,CAAO,CACtB,KAAI,MAA+B,EAE7B2M,EAAoBC,GAAyB,EACnD,SACE,OAAC/L,EAAA,GACC,MAAM,eACN,cAAY,wBACZ,YAAY,oFACZ,QAAS,CAAC,CAACb,EAAO,gBAAgBmL,CAAY,GAAG,kBAEjD,mBAAC,MACC,OAAQ,CAAC,CAAE,MAAO,CAAE,SAAArK,EAAU,IAAAC,EAAK,GAAGC,CAAM,CAAE,OAC5C,OAAC,MACC,aAAW,eACV,GAAGA,EACJ,UAAWG,EAAO,MAClB,SAAWF,GAAUH,KAAS,OAA6BG,CAAK,CAAC,EACjE,QAAS0L,EACT,YAAY,yBACd,EAEF,QAAA7M,EACA,KAAM,iBAAiBqL,CAAY,qBACrC,EACF,CAEJ,CAEA,SAASyB,IAA2D,CAelE,OAdgCC,EAAA,EAAgB,UAAU,kBAAkB,SAAS,OAAW,CAC9F,eAAgB,GAChB,mBAAoB,GACpB,iBAAmBC,IAAY,CAC7B,GAAGA,EACH,YAAaA,EAAO,KAChBA,EAAO,KAAK,IAAK7L,IAAW,CAC1B,MAAOA,EAAM,KACb,MAAOA,EAAM,KACb,YAAaA,EAAM,eAAe,IAAK8L,MAAa,OAAqBA,CAAQ,CAAC,EAAE,KAAK,QAAQ,CACnG,EAAE,EACF,CAAC,CACP,EACF,CAAC,EAC8B,WACjC,C,sECjDO,SAASC,GAAa,CAAE,aAAA7B,CAAa,EAAsB,CAChE,MAAM8B,KAAa,MAAW,IAAa,EACrC,CACJ,SAAA5L,EACA,UAAW,CAAE,OAAArB,CAAO,EACpB,UAAAkN,CACF,KAAI,MAA+B,EACnC,SACE,oBACE,oBAACrM,EAAA,GACC,MAAOoJ,EAAA,EAAmB,UAAU,MACpC,YAAaA,EAAA,EAAmB,UAAU,YAC1C,QAAS,CAAC,CAACjK,EAAO,gBAAgBmL,CAAY,GAAG,eACjD,MAAOnL,EAAO,gBAAgBmL,CAAY,GAAG,gBAAgB,QAE7D,mBAACvB,EAAA,GACE,GAAGvI,EAAS,iBAAiB8J,CAAY,kBAAmB,CAAE,SAAU,KAAsB,CAAC,EAChG,aAAYlB,EAAA,EAAmB,UAAU,UACzC,UAAWgD,EAAW,kBACtB,YAAa,IAAwB,WACvC,EACF,KACA,OAACpM,EAAA,GACC,MAAOoJ,EAAA,EAAmB,cAAc,MACxC,YAAaA,EAAA,EAAmB,cAAc,YAC9C,QAAS,CAAC,CAACjK,EAAO,gBAAgBmL,CAAY,GAAG,mBACjD,MAAOnL,EAAO,gBAAgBmL,CAAY,GAAG,oBAAoB,QAEjE,mBAACvB,EAAA,GACE,GAAGvI,EAAS,iBAAiB8J,CAAY,sBAAuB,CAC/D,SAAU,KACZ,CAAC,EACD,aAAYlB,EAAA,EAAmB,cAAc,UAC7C,UAAWgD,EAAW,kBACtB,YAAa,IAAwB,eACvC,EACF,KACA,OAACpM,EAAA,GACC,MAAOoJ,EAAA,EAAmB,eAAe,MACzC,YAAaA,EAAA,EAAmB,eAAe,YAC/C,QAAS,CAAC,CAACjK,EAAO,gBAAgBmL,CAAY,GAAG,oBACjD,MAAOnL,EAAO,gBAAgBmL,CAAY,GAAG,qBAAqB,QAElE,mBAACvB,EAAA,GACE,GAAGvI,EAAS,iBAAiB8J,CAAY,uBAAwB,CAChE,SAAWlK,GAAkB,CAC3B,MAAMkM,EAAgBD,EAAU,iBAAiB/B,CAAY,sBAAsB,EACnF,SAAO,OAAwBlK,EAAOkM,CAAa,CACrD,CACF,CAAC,EACD,aAAYlD,EAAA,EAAmB,eAAe,UAC9C,UAAWgD,EAAW,kBACtB,YAAa,IAAwB,gBACvC,EACF,GACF,CAEJ,CCnDA,MAAMG,GAA6B,CAAC,iBAAkB,WAAW,EAE3DC,GAAmB,CACvB,eAAgB,IAAwB,WACxC,mBAAoB,IAAwB,eAC5C,oBAAqB,IAAwB,eAC/C,EACMC,GAAmB,MAKZC,GAAkB,CAAC,CAAE,aAAApC,CAAa,IAA4B,CACzE,MAAM8B,KAAa,MAAW,IAAa,EACrC,CACJ,QAAAnN,EACA,MAAAC,EACA,SAAAsB,EACA,SAAApB,EACA,UAAW,CAAE,OAAAD,CAAO,CACtB,KAAI,MAA+B,EAC7B,CAACwN,EAAgBC,CAAiB,KAAI,eAAS,OAA0B,CAAC,CAAC,CAAC,EAC5E,CAAE,mBAAAC,EAAoB,eAAAC,EAAgB,oBAAAC,EAAoB,EAAIP,GAC9DQ,EAAmB9N,EAAM,iBAAiBoL,CAAY,mBAAmB,EACzE2C,EAAkB/N,EAAM,iBAAiBoL,CAAY,kBAAkB,EACvE4C,GAAehO,EAAM,iBAAiBoL,CAAY,UAAU,GAAG,QAAU,EAEzEhK,MAAS,MAAW,EAAS,EACnC,sBAAU,IAAM,CACV0M,GAAoBE,KAAiB,GACvC9N,EAAS,iBAAiBkL,CAAY,WAAYiC,EAA0B,CAEhF,EAAG,CAACS,EAAkB5N,EAAUkL,EAAc4C,EAAY,CAAC,KAGzD,QAACxJ,EAAA,EAAK,CAAC,UAAU,SACf,qBAACA,EAAA,EAAK,CAAC,UAAU,MAAM,IAAK,EAAG,WAAW,SAAS,eAAe,gBAChE,oBAACyJ,GAAA,EAAW,CAAC,MAAM,oBAAoB,YAAa,GAAM,UAAW7M,GAAO,cAC1E,mBAAC8M,EAAA,EAAM,CAAC,GAAG,2BAA4B,GAAG5M,EAAS,iBAAiB8J,CAAY,mBAAmB,EAAG,EACxG,EACC,CAAC0C,MACA,QAACK,EAAA,EAAI,CAAC,QAAQ,OAAO,MAAM,YAAY,0BAC3B,OAAC,UAAQ,SAAAd,GAA2B,KAAK,IAAI,EAAE,GAC3D,GAEJ,EACCS,MACC,OAAChN,EAAA,GACC,MAAM,WACN,YAAY,gKACX,GAAGQ,EAAS,iBAAiB8J,CAAY,UAAU,EACpD,QAAS,CAAC,CAACnL,EAAO,gBAAgBmL,CAAY,GAAG,QACjD,UAAWhK,GAAO,gBAElB,mBAAC,MACC,MAAO,CACL,SAAWF,IACL,CAACA,IAASA,GAAM,SAAW,EACtB,4CAELA,GAAM,SAAW,GAAKA,GAAM,CAAC,IAAMqM,IAIRF,GAA2B,MAAOpM,IAAUC,GAAM,SAASD,EAAK,CAAC,EAHvF,GAKA,yBAAyBoM,GAA2B,KAAK,IAAI,CAAC,EAI3E,EACA,OAAQ,CAAC,CAAE,MAAO,CAAE,SAAAtM,GAAU,IAAAC,EAAK,GAAGC,EAAM,EAAG,WAAY,CAAE,MAAA4E,EAAM,CAAE,OACnE,oBACE,oBAAC,MACC,aAAW,WACV,GAAG5E,GACJ,iBAAgB,GAChB,UAAWiM,EAAW,MACtB,eAAiBkB,IAAgB,CAC/BV,EAAmBW,IAAS,CAAC,GAAGA,MAAM,OAAwBD,EAAG,CAAC,CAAC,EAGnElO,EAAS,iBAAiBkL,CAAY,WAAY,CAAC,GAAGnK,GAAM,MAAOmN,EAAG,CAAC,CACzE,EACA,SAAWlN,IACFH,MAAS,OAA6BG,EAAK,CAAC,EAErD,QAAS,CAAC,GAAG,MAAsB,GAAGuM,CAAc,EACpD,WAAY,CACV,iBACE3D,GAUA,CACA,KAAM,CAAE,KAAAwE,EAAK,EAAIxE,GACjB,OAAIwE,GAAK,QACA,QAEFC,EAAA,GAAiBzE,EAAK,CAC/B,CACF,EACF,EACCjE,OAAS,OAAC2G,GAAA,EAAsB,CAAE,SAAA3G,GAAM,QAAQ,GACnD,EAEF,KAAM,iBAAiBuF,CAAY,WACnC,QAAArL,CAAA,CACF,EACF,KAEF,QAACyE,EAAA,EAAK,CAAC,UAAU,MAAM,IAAK,EAAG,WAAW,SAAS,eAAe,gBAChE,oBAACyJ,GAAA,EAAW,CAAC,MAAM,mBAAmB,YAAa,GAAM,UAAW7M,GAAO,cACzE,mBAAC8M,EAAA,EAAM,CAAC,GAAG,0BAA2B,GAAG5M,EAAS,iBAAiB8J,CAAY,kBAAkB,EAAG,EACtG,EACC,CAAC2C,MACA,QAACI,EAAA,EAAI,CAAC,QAAQ,OAAO,MAAM,YAAY,4BACzB,QAAC,UAAQ,UAAAP,EAAe,MAAE,EAAS,sBAC/B,QAAC,UAAQ,UAAAD,EAAmB,MAAE,EAAS,uBACtC,OAAC,UAAQ,SAAAE,EAAA,CAAoB,GAChD,GAEJ,EACCE,MACC,OAAC,OAAI,UAAW3M,GAAO,gBACrB,mBAAC6L,GAAY,CAAC,aAAA7B,CAAA,CAA4B,EAC5C,GAEJ,CAEJ,EAEM,GAAatM,IAA0B,CAC3C,iBAAe,OAAI,CACjB,SAAU,cACV,IAAKA,EAAM,QAAQ,CAAC,EACpB,WAAY,QACd,CAAC,EACD,mBAAiB,OAAI,CACnB,WAAY,OACZ,aAAcA,EAAM,QAAQ,CAAC,CAC/B,CAAC,CACH,GCnJO,SAAS0P,GAA0B,CAAE,aAAApD,CAAa,EAAmC,CAC1F,MAAMhK,KAAS,MAAW,EAAS,EAE7BqN,EAAmBrD,EAAa,KAChC,CACJ,UAAAsD,EACA,MAAOC,EACP,cAAAC,EACA,QAASrD,CACX,KAAI,OAAwB,EAEtB,CAACG,EAAkCmD,CAAmC,KAAI,YAE9E,EAEIvD,EAAwBwD,GAA4C,CACxED,EAAoCC,CAAY,CAClD,EAEM,CAAE,MAAA9O,CAAM,KAAI,MAA+B,EAC3C+O,GACJ/O,EAAM,iBAAiByO,CAAgB,mBAAmB,GAC1DzO,EAAM,iBAAiByO,CAAgB,kBAAkB,GACzDzO,EAAM,iBAAiByO,CAAgB,oBAAoB,GAAG,OAAS,EAEnEpD,EAAUuD,EAAc,IAAK/D,GAAa,CAC9C,MAAMmE,GAAenE,GAAU,iCACzBoE,MAAc,OAAChE,GAAA,GAA2B,CAAC,UAAW+D,IAAgB,CAAC,EAAG,EAEhF,MAAO,CAAE,MAAOnE,EAAS,KAAM,MAAOA,EAAU,YAAAoE,EAAY,CAC9D,CAAC,EAED,OAAIN,KACK,OAAC/P,GAAA,EAAK,CAAC,MAAM,iCAAiC,SAAS,OAAQ,GAEpE8P,KACK,OAACnP,GAAA,EAAkB,CAAC,KAAM,aAAc,KAG/C,QAACiF,EAAA,EAAK,CAAC,UAAU,SACf,qBAACA,EAAA,EAAK,CAAC,UAAU,MAAM,WAAW,SAChC,oBAAC,OAAI,UAAWpD,EAAO,sBAAuB,KAC9C,QAAC,OAAI,UAAWA,EAAO,iBAAkB,6BAEvC,OAAC,OAAI,IAAKgK,EAAa,OAAQ,IAAI,qBAAqB,UAAWhK,EAAO,IAAK,EAC9EqN,CAAA,EACH,KACA,OAAC,OAAI,UAAWrN,EAAO,uBAAwB,GACjD,KACA,OAACoD,EAAA,EAAK,CAAC,UAAU,MAAM,IAAK,EAAG,WAAW,SACxC,mBAAC2G,GAAA,CACC,aAAcsD,EACd,QAAApD,EACA,qBAAAC,EACA,iBAAAC,CAAA,CACF,EACF,EACCG,GAAkC,qCACjC,OAACf,EAAmB,CAAC,UAAWe,EAAiC,iCAAkC,KAErG,OAAC,OAAI,UAAWtK,EAAO,eACrB,mBAAC8N,GAAA,GACC,MAAM,0CACN,OAAQH,GACR,UAAW3N,EAAO,mBAElB,oBAACoD,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAC7B,oBAACmI,EAAgB,CAAC,aAAc8B,CAAA,CAAkB,KAClD,OAACjB,GAAe,CAAC,aAAciB,CAAA,CAAkB,GACnD,EACF,EACF,GACF,CAEJ,CAEA,MAAM,GAAa3P,IAA0B,CAC3C,yBAAuB,OAAI,CACzB,OAAQ,EACR,MAAOA,EAAM,QAAQ,CAAC,EACtB,gBAAiBA,EAAM,OAAO,UAAU,IAC1C,CAAC,EACD,oBAAkB,OAAI,CACpB,KAAM,aACR,CAAC,EACD,0BAAwB,OAAI,CAC1B,OAAQ,MACR,MAAO,OACP,KAAM,EACN,gBAAiBA,EAAM,OAAO,UAAU,IAC1C,CAAC,EACD,OAAK,OAAI,CACP,WAAYA,EAAM,QAAQ,CAAC,EAC3B,MAAOA,EAAM,QAAQ,CAAC,EACtB,OAAQA,EAAM,QAAQ,CAAC,EACvB,YAAaA,EAAM,QAAQ,CAAC,CAC9B,CAAC,EACD,sBAAoB,OAAI,CACtB,MAAO,cACP,SAAUA,EAAM,WAAW,KAAK,QAClC,CAAC,EACD,kBAAgB,OAAI,CAClB,QAAS,OACT,cAAe,SACf,SAAUA,EAAM,YAAY,OAAO,GACnC,OAAQ,aAAaA,EAAM,OAAO,OAAO,IAAI,GAC7C,aAAcA,EAAM,MAAM,OAAO,QACjC,QAAS,GAAGA,EAAM,QAAQ,CAAC,CAAC,IAAIA,EAAM,QAAQ,CAAC,CAAC,GAChD,UAAWA,EAAM,QAAQ,CAAC,CAC5B,CAAC,CACH,GC3HO,SAASqQ,IAAoB,CAClC,KAAM,CAAE,UAAAhC,CAAU,KAAI,MAA+B,EAC/CiC,EAAuBjC,EAAU,eAAe,EAWhDkC,KAT+B,MAAuC,cAAc,EAO5B,6BAES,OAAQC,GAAOA,EAAG,mBAAmB,EAwB5G,SArB+C,WAC7C,IACED,EAAsC,IAAKC,GAAO,CAChD,MAAMC,EAAuBH,EAAuBA,EAAqBE,EAAG,IAAI,EAAI,OACpF,MAAO,CACL,aAAcA,EACd,qBAAsBC,GAAsB,sBAAwB,GACpE,cAAe,CACb,kBAAmBA,GAAsB,mBAAqB,CAAC,EAC/D,iBAAkBA,GAAsB,kBAAoB,GAC5D,QAASA,GAAsB,SAAW,CAAC,EAC3C,gBAAiBA,GAAsB,iBAAmB,GAC1D,eAAgBA,GAAsB,gBAAkB,GACxD,mBAAoBA,GAAsB,oBAAsB,GAChE,oBAAqBA,GAAsB,qBAAuB,EACpE,CACF,CACF,CAAC,EACH,CAACF,EAAuCD,CAAoB,CAC9D,EAE8C,IAAI,CAACI,EAA0B1E,OAEzE,OAAC,OACC,WAAY,eACZ,uBAAwB0E,EAAyB,aAAa,KAG9D,mBAAChB,GAAyB,CAAC,aAAcgB,EAAyB,aAAc,GAF3EA,EAAyB,aAAa,KAAO1E,CAGpD,CAEH,CACH,C,4BCvCO,SAAS2E,GAAkB,CAAE,OAAAC,EAAQ,QAAAxQ,EAAS,eAAAsC,EAAgB,cAAAmO,CAAc,EAA2B,CAC5G,SACE,OAACC,GAAA,EAAK,CAAC,MAAM,cAAc,cAAa,GAAC,OAAAF,EAAgB,UAAW,IAAMxQ,EAAQ,EAChF,mBAAC,MAAa,CAAC,eAAAsC,EAAgC,QAAAtC,EAAkB,cAAAyQ,CAAA,CAA8B,EACjG,CAEJ,C,gBCZO,SAASE,GAAkB,CAAE,YAAAC,CAAY,EAA2B,CACzE,KAAM,CAAE,MAAA9P,CAAM,KAAI,MAA+B,EAC3C+P,EAAS/P,EAAM,QAAQ,EACvBgQ,EAAY,OAAO,KAAKD,CAAM,EAAE,OAAS,GAAKA,EAAO,KAAME,GAAUA,EAAM,KAAOA,EAAM,KAAK,EAEnG,SACE,QAACzL,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAC7B,qBAACA,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAC7B,oBAAC2J,EAAA,EAAI,CAAC,QAAQ,KAAK,kBAAM,KACzB,QAAC3J,EAAA,EAAK,CAAC,UAAW,MAAO,IAAK,EAC5B,oBAAC2J,EAAA,EAAI,CAAC,QAAQ,YAAY,MAAM,YAAY,kGAE5C,KACA,OAAC+B,EAAA,GACC,YAAY;AAAA,2EAEZ,MAAM,SACR,GACF,GACF,KACA,QAAC1L,EAAA,EAAK,CAAC,UAAU,MAAM,IAAK,EAAG,WAAW,SACxC,oBAAC,MAAY,CAAC,OAAAuL,CAAA,CAAgB,EAC7BC,KACC,OAACvL,GAAA,GAAM,CAAC,QAAQ,YAAY,KAAK,SAAS,QAASqL,EAAa,KAAK,KAAK,uBAE1E,KAEA,QAACtL,EAAA,EAAK,CAAC,UAAU,MAAM,IAAK,EAAG,WAAW,SACxC,oBAAC2J,EAAA,EAAI,CAAC,8BAAkB,KACxB,OAAC1J,GAAA,GAAM,CAAC,KAAK,OAAO,KAAK,SAAS,QAAQ,YAAY,QAASqL,EAAa,KAAK,KAAK,sBAEtF,GACF,GAEJ,GACF,CAEJ,C,uCCpCA,MAAMK,MAAoC,QAAK,IAAM,+BAA6C,EAgBrFC,GAAsB,CAAC,CAClC,aAAAC,EACA,aAAAC,EACA,UAAAC,EACA,OAAAC,EACA,UAAAC,EACA,SAAAzR,CACF,IAAgC,CAC9B,MAAMoC,KAAS,MAAW,EAAS,EAC7BsP,EAAW,CAACH,GAAa,CAACC,EAE1BG,EAAkBtR,GAAA,GAAa,UAAU,QAEzC,CAACmM,EAAS,CAAE,KAAA8C,EAAO,CAAC,EAAG,UAAAI,GAAW,gBAAiBkC,CAAqB,CAAC,EAAID,EAAgB,YAAY,EAIzGE,KAAqB,YAAQvC,EAAK,QAAS2B,GAAUA,GAAO,MAAM,CAAC,EAEnEa,GAAY,IAAM,CAClB,CAACN,GAAU,CAACD,GAKhB/E,EAAQ,CACN,aAAA6E,EACA,UAAAE,EACA,aAAAD,EACA,OAAAE,EACA,UAAAC,EACA,SAAAzR,CACF,CAAC,CACH,EAGM+R,MAA0B,MAAmD,cAAc,EAE3FC,GAAYD,GAAwB,SAAW,EAErD,SACE,QAAC,KAAK,CAAC,UAAU,SACf,qBAAC,OAAI,UAAW3P,EAAO,sBACrB,qBAAC,OAAI,UAAWA,EAAO,cACrB,oBAAC+M,EAAA,EAAI,CAAC,QAAQ,KAAK,0CAA8B,EAChDO,IAAakC,MACZ,OAACzC,EAAA,EAAI,CAAC,MAAM,YAAY,QAAQ,YAAY,sBAE5C,EAEDyC,KACC,OAACzC,EAAA,EAAI,CAAC,MAAM,YAAY,QAAQ,YAAY,yIAG5C,KAEA,OAACA,EAAA,EAAI,CAAC,MAAM,YAAY,QAAQ,YAAY,qKAG5C,GAEJ,KACA,OAAC,OAAI,UAAW/M,EAAO,OACrB,mBAACqD,GAAA,GAAM,CAAC,KAAK,OAAO,QAAQ,YAAY,KAAK,SAAS,QAASqM,GAAW,SAAAJ,EAAoB,2BAE9F,EACF,GACF,EACC,CAAChC,IAAa,CAACkC,GAAwBC,EAAmB,OAAS,MAClE,OAAC,WAAQ,CAAC,YAAU,OAACtR,GAAA,EAAkB,CAAC,KAAK,oBAAqB,GAC/D,SAAAwR,GAAwB,IAAKE,MAC5B,OAACd,GAAA,CACC,mBAAAc,EACA,mBAAAJ,EACA,UAAAG,EAAA,EACKC,EAAmB,IAC1B,CACD,EACH,GAEJ,CAEJ,EAEM,GAAanS,IAA0B,CAC3C,sBAAoB,OAAI,CACtB,MAAO,OACP,OAAQ,CACV,CAAC,EACD,iBAAe,OAAI,CACjB,OAAQ,CACV,CAAC,EACD,yBAAuB,OAAI,CACzB,QAAS,OACT,cAAe,MACf,eAAgB,gBAChB,WAAY,aACZ,UAAWA,EAAM,QAAQ,CAAC,CAC5B,CAAC,EACD,iBAAe,OAAI,CACjB,KAAM,CACR,CAAC,EACD,UAAQ,OAAI,CACV,eAAgB,UAClB,CAAC,EACD,iBAAe,OAAI,CACjB,QAAS,OACT,eAAgB,aAChB,SAAU,MACZ,CAAC,EACD,0BAAwB,OAAI,CAC1B,QAAS,OACT,cAAe,MACf,IAAKA,EAAM,QAAQ,CAAC,CACtB,CAAC,CACH,GCvHA,IAAKoS,IAAAA,IACHA,EAAA,mBAAqB,sBACrBA,EAAA,aAAe,gBAFZA,IAAAA,IAAA,IAKL,SAASC,IAAoC,CAC3C,KAAM,CAAE,8CAAAC,CAA8C,EAAItE,EAAA,EACpD,CAAE,YAAauE,CAAe,EAAID,EAA8C,MAAS,EAC/F,OACEC,GAAgB,sBAAwB,KAAmB,UAC3DA,GAAgB,sBAAwB,KAAmB,GAE/D,CAEO,MAAMlM,GAAoB,CAAC,CAAE,SAAAnG,CAAS,IAA8B,CACzE,KAAM,CAAE,MAAAgB,EAAO,UAAAmN,EAAW,SAAAjN,CAAS,KAAI,MAA+B,EAChEkB,KAAS,MAAW,EAAS,EAE7B,CAACG,CAAI,EAAIvB,EAAM,CAAC,OAAQ,SAAU,UAAW,YAAa,SAAU,OAAQ,eAAe,CAAC,EAC5F,CAACsR,EAAkBC,CAAmB,KAAI,YAAS,EAAK,EAExD/P,EAAiBxB,EAAM,gBAAgB,GAAK,KAC5CwR,EAAiCpN,EAAA,EAAO,eAAe,2BAA6B,GACpFqN,EAAsBlQ,IAAS,IAAa,QAC5CmQ,GAAiCP,GAAkC,EAEnEQ,EACJpQ,IAAS,IAAa,SAAWiQ,GAAkCE,GAErE,SAASE,EACPC,GAIA,CACIA,IACF3R,EAAS,SAAU2R,EAAc,EAEnCN,EAAoB,EAAK,CAC3B,CACA,OAAKhQ,KAKH,QAACE,GAAA,GACC,OAAQ,EACR,SAAO,MAAsBF,CAAI,EAAI,aAAe,qCACpD,eACE,OAACiD,EAAA,EAAK,CAAC,UAAU,MAAM,IAAK,GAAK,WAAW,SACzC,SAAAjD,IAAS,IAAa,kBACrB,OAAC4M,EAAA,EAAI,CAAC,QAAQ,YAAY,MAAM,YAAY,qEAE5C,EAEAwD,MACE,OAACxD,EAAA,EAAI,CAAC,QAAQ,YAAY,MAAM,YAAY,8EAE5C,EAGN,EAEF,UAAS,GAET,oBAAC0B,GAAiB,CAAC,YAAa,IAAM0B,EAAoB,EAAI,EAAG,KACjE,OAAC9B,GAAA,CACC,OAAQ6B,EACR,QAASM,EACT,eAAApQ,EACA,cAAe2L,EAAU,QAAQ,EACnC,EACCwE,MACC,QAAC,OAAI,UAAWvQ,EAAO,uBACrB,oBAAC+M,EAAA,EAAI,CAAC,QAAQ,KAAK,yBAAa,KAChC,OAACA,EAAA,EAAI,CAAC,QAAQ,YAAY,MAAM,YAAY,8EAE5C,GACF,EAEDwD,KACC,OAACG,GAAA,CAA0B,SAAA9S,CAAA,CAAoB,EAEjDyS,KACE,OAACM,GAAA,CAAiB,SAAA/S,CAAA,CAAoB,EACpC,MACN,EA7CO,IA+CX,EAaA,SAAS8S,GAA0B,CAAE,SAAA9S,CAAS,EAA0B,CACtE,KAAM,CAAE,MAAAgB,EAAO,SAAAE,CAAS,KAAI,MAA+B,EACrDkB,KAAS,MAAW,EAAS,EAE7B,CAAC4Q,CAAa,EAAIhS,EAAM,CAAC,eAAe,CAAC,EAEzCiS,EAAiB,CACrB,CAAE,MAAO,uBAAwB,MAAO,eAA4B,EACpE,CAAE,MAAO,0BAA2B,MAAO,qBAAkC,CAC/E,EAEMC,EAAyBvG,GAA2B,CACxDzL,EAAS,gBAAiByL,IAAW,eAA2B,CAClE,EAEA,SACE,QAACnH,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAC7B,oBAACA,EAAA,EAAK,CAAC,UAAU,SACf,mBAAC2N,GAAA,GACC,QAASF,EACT,MAAOD,EAAgB,gBAA8B,sBACrD,SAAUE,EACV,UAAW9Q,EAAO,eACpB,EACF,KAEA,OAACgR,GAAA,CAAyB,cAAAJ,CAAA,CAA8B,EAEvDA,KAAgB,OAAC7C,GAAiB,EAAC,KAAK,OAAC4C,GAAA,CAAiB,SAAA/S,CAAA,CAAoB,GACjF,CAEJ,CAMA,SAAS+S,GAAiB,CAAE,SAAA/S,CAAS,EAA0B,CAC7D,KAAM,CAAE,MAAAgB,CAAM,KAAI,MAA+B,EAC3C,CAAC+P,EAAQsC,EAAS9B,EAAWC,EAAQC,CAAS,EAAIzQ,EAAM,CAC5D,SACA,UACA,YACA,SACA,OACA,eACF,CAAC,EACD,SACE,OAACoQ,GAAA,CACC,aAAciC,EACd,aAActC,EACd,UAAAQ,EACA,OAAAC,EACA,UAAAC,EACA,SAAAzR,CAAA,CACF,CAEJ,CAGA,SAASsT,IAAoC,CAC3C,SACE,OAACpC,EAAA,GACC,eACE,QAAC1L,EAAA,EAAK,CAAC,IAAK,EAAG,UAAU,SACvB,oBAACA,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAC7B,+BAAE,6JAGF,EACF,KACA,QAACA,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAC7B,gCAAE,wLAGF,KACA,OAAC,KACC,KAAM,qGACN,OAAO,SACP,IAAI,aAEJ,oBAAC2J,EAAA,EAAI,CAAC,MAAM,OAAO,kDACiB,OAACnE,EAAA,EAAI,CAAC,KAAK,mBAAoB,IACnE,EACF,GACF,GACF,EAEF,MAAM,uBACR,CAEJ,CAEA,SAASuI,IAA8B,CACrC,SACE,OAACrC,EAAA,GACC,eACE,oBAAE,sEAEA,OAAC,OAAG,KACJ,OAAC,OAAG,EAAE,+FAEN,OAAC,OAAG,EAAE,kGAEN,OAAC,OAAG,EAAE,8IAGN,OAAC,OAAG,EAAE,uGAEN,OAAC,OAAG,EAAE,kFAER,EAEF,aAAa,+EACb,SAAS,gCACT,MAAM,wBACR,CAEJ,CAKO,MAAMkC,GAA2B,CAAC,CAAE,cAAAJ,CAAc,OAErD,QAACxN,EAAA,EAAK,CAAC,WAAW,SAChB,oBAAC2J,EAAA,EAAI,CAAC,QAAQ,YAAY,MAAM,YAC7B,SAAA6D,EACG,0EACA,0HACN,EACCA,KAAgB,OAACO,GAAA,EAA4B,KAAK,OAACD,GAAA,EAAkC,GACxF,EAIE,GAAaxT,IAA0B,CAC3C,kBAAgB,OAAI,CAClB,MAAO,aACT,CAAC,EACD,0BAAwB,OAAI,CAC1B,QAAS,OACT,cAAe,SACf,UAAWA,EAAM,QAAQ,CAAC,CAC5B,CAAC,CACH,E,0SCrPO,SAAS0T,GAAsBC,EAAiE,CACrG,MAAO,SAAUA,CACnB,CAEO,SAASC,GAAwBD,EAAmE,CACzG,MAAO,sBAAuBA,CAChC,C,2BCVO,SAASE,EAAiBF,EAA8D,CAC7F,GAAID,GAAsBC,CAAO,EAC/B,OAAOG,EAAsBH,EAASA,EAAQ,cAAe,KAAa,aAAa,EAGzF,GAAIC,GAAwBD,CAAO,EACjC,OAAOG,EAAsBH,EAAS,KAA2B,KAAa,OAAO,EAGvF,MAAM,IAAI,MAAM,kCAAkC,CACpD,CAMA,SAASG,EACPH,EACAI,EACAjQ,EACiC,CACjC,SAAOkQ,GAAA,GAAqB,CAC1B,aAAcC,EAAenQ,CAAQ,EACrC,UAAQ,OAAc,EACnB,MAAgC,CAC/B,OAAQ,OACR,IAAK,qBAAqBiQ,CAAa,GACvC,KAAMJ,CACR,CAAC,EACA,QACCO,EAAA,GAAI,CAAC,CAAE,KAAA1E,CAAK,IACHyE,EAAenQ,EAAU,CAC9B,MAAO,KAAa,KACpB,OAAQ0L,EAAK,UAAU,IAAI,KAAiB,CAC9C,CAAC,CACF,KACD2E,EAAA,GAAYpN,MACHqN,EAAA,IACLH,EAAenQ,EAAU,CACvB,MAAO,KAAa,MACpB,SAAOuQ,GAAA,GAAiBtN,CAAK,CAC/B,CAAC,CACH,CACD,KACDuN,GAAA,GAAM,CACR,CACJ,CAAC,CACH,CAEA,SAASL,EAAenQ,EAAwB0L,EAA2B,CAAC,EAAwB,CAClG,MAAO,CACL,SAAA1L,EACA,KAAM,CACJ,MAAO,KAAa,QACpB,OAAQ,CAAC,EACT,aAAW,OAAoB,EAC/B,GAAG0L,CACL,CACF,CACF,C,uFCjEO,SAAS+E,GAAkBvJ,EAAyC,CACzE,KAAM,CAAE,QAAAwJ,CAAQ,EAAIxJ,EACd1I,KAAS,MAAWC,EAAS,EAC7BkS,EAAiC,CACrC,SAAU,CAAC,EACX,UAAW,CACT,CACE,QAAS,CAAE,GAAI,MAAe,OAAQ,QAAS,MAAO,EACtD,WAAY,CAAC,CAAE,GAAI,qBAAsB,MAAO,MAAqB,QAAS,CAAC,CACjF,CACF,CACF,EAEA,GAAI,CAACD,EACH,OAAO,KAGT,KAAM,CAAE,KAAAhF,GAAM,SAAA1L,EAAS,EAAI0Q,EAE3B,OAAIhF,GAAK,QAAU,KAAa,WAE5B,OAAC,OAAI,UAAWlN,EAAO,UACrB,mBAAC,QAAK,8BAAkB,EAC1B,EAIAkN,GAAK,QAAU,KAAa,SAE5B,OAAC,OAAI,UAAWlN,EAAO,UACpB,SAAAkN,GAAK,SAAQ,OAAiBA,GAAK,KAAK,EAAI,+BAC/C,KAIF,QAAC,OAAI,UAAWlN,EAAO,UACrB,qBAAC,QAAK,+EAC+D,IAClEwB,KAAa,KAAa,QAAU,mEAAqE,MAC5G,KACA,OAAC,OAAI,UAAWxB,EAAO,MACrB,mBAAC,MAAS,CACP,UAAC,CAAE,MAAAoS,GAAO,OAAAC,EAAO,OAChB,OAAC,OAAI,MAAO,CAAE,MAAO,GAAGD,EAAK,KAAM,OAAQ,GAAGC,EAAM,IAAK,EACvD,mBAACC,GAAA,GACC,MAAM,GACN,MAAAF,GACA,OAAAC,GACA,SAAS,QACT,KAAAnF,GACA,YAAAiF,CAAA,CACF,EACF,EAEJ,EACF,GACF,CAEJ,CAEA,SAASlS,GAAUvC,EAAsB,CACvC,MAAO,CACL,aAAW,OAAI,CACb,OAAQ,GAAGA,EAAM,QAAQ,CAAC,CAAC,IAC7B,CAAC,EACD,SAAO,OAAI,CACT,KAAM,WACN,OAAQ,QACR,UAAWA,EAAM,QAAQ,CAAC,EAC1B,OAAQ,aAAaA,EAAM,OAAO,OAAO,MAAM,GAC/C,aAAcA,EAAM,MAAM,OAAO,OACnC,CAAC,CACH,CACF,CCtEA,MAAM6U,GAAsC,CAAC,OAAQ,iBAAkB,YAAa,UAAW,YAAY,EAEpG,SAAS9R,IAAyC,CACvD,MAAMT,KAAS,MAAW,CAAS,EAC7B,CAACkS,EAASxC,CAAS,EAAI8C,EAAW,EAClC,CAAE,MAAA5T,CAAM,KAAI,MAA+B,EAC3C,CAACuB,GAAMgP,GAAW8B,EAAO,EAAIrS,EAAM,CAAC,OAAQ,YAAa,SAAS,CAAC,EACnE,CAAE,wBAAA6T,EAAwB,KAAIC,GAAA,GAAsBzB,EAAO,EAEjE,GAAI,CAAC9Q,OAAQ,OAA8BA,EAAI,EAC7C,OAAO,KAGT,MAAMwS,GAAqB,EAAQxD,IAAcsD,GAEjD,SACE,QAAC,OAAI,UAAWzS,EAAO,UACrB,qBAACoD,EAAA,EAAK,CACH,UAAAqP,OACC,OAACpP,EAAA,GAAM,CAAC,SAAU,CAACsP,GAAoB,KAAK,SAAS,QAAQ,UAAU,QAASjD,EAAW,0BAE3F,EAED,CAAC+C,OACA,OAACjV,EAAA,EAAK,CAAC,MAAM,2BAA2B,SAAS,UAAU,6GAE3D,GAEJ,KACA,OAACyU,GAAiB,CAAC,QAAAC,CAAA,CAAkB,GACvC,CAEJ,CAEO,SAASM,GAA4D,CAC1E,KAAM,CAACN,EAASU,CAAU,KAAI,YAA0C,EAClE,CAAE,UAAA7G,CAAU,KAAI,MAA+B,EAC/C8G,KAAYC,EAAA,GAAgB,EAE5BpD,MAAY,eAAY,IAAM,CAClC,MAAMhN,GAASqJ,EAAUwG,EAAM,EACzBlB,GAAU0B,GAAqBrQ,EAAM,EAE3C6O,EAAiBF,EAAO,EACrB,QAAK2B,EAAA,GAAWC,IAAa,CAACC,GAAYD,EAAQ,EAAG,EAAI,CAAC,EAC1D,UAAWA,IAAa,CAClBJ,EAAU,GAGfD,EAAWK,EAAQ,CACrB,CAAC,CACL,EAAG,CAAClH,EAAW8G,CAAS,CAAC,EAEzB,MAAO,CAACX,EAASxC,EAAS,CAC5B,CAEA,SAASqD,GAAqBrQ,EAAmC,CAC/D,KAAM,CAACvC,EAAMC,EAAgB+O,EAAW8B,GAASkC,EAAU,EAAIzQ,EACzD0Q,MAAa,MAAiB,EAAE,oBAAoBhT,CAAc,EACxE,GAAI,CAACgT,GACH,MAAM,IAAI,MAAM,wCAAwChT,CAAc,EAAE,EAG1E,OAAQD,EAAM,CACZ,KAAK,KAAa,cAChB,MAAO,CACL,cAAeiT,GAAW,IAC1B,eAAAhT,EACA,KAAM+S,EACR,EAEF,KAAK,KAAa,QAChB,MAAO,CACL,kBAAmB,CACjB,UAAAhE,EACA,KAAM8B,GACN,OAAK,MAAkB,KAAK,IAAI,CAAC,CACnC,CACF,EAEF,QACE,MAAM,IAAI,MAAM,cAAc9Q,CAAI,4BAA4B,CAClE,CACF,CAEA,SAAS+S,GAAYD,EAAwC,CAC3D,OAAQA,EAAS,KAAK,MAAO,CAC3B,KAAK,KAAa,KAClB,KAAK,KAAa,MAChB,MAAO,GACT,QACE,MAAO,EACX,CACF,CAEA,SAAS,EAAUvV,EAAsB,CACvC,MAAO,CACL,aAAW,OAAI,CACb,UAAWA,EAAM,QAAQ,CAAC,EAC1B,SAAU,GAAGA,EAAM,YAAY,OAAO,GAAG,IAC3C,CAAC,CACH,CACF,C,uUClHO,SAAS2V,GAAyD,CACvE,MAAMC,KAAcpU,GAAA,GAA4BC,GAAUA,EAAM,WAAW,EAO3E,OAL6B,OAAO,OAAOmU,CAAW,EACnD,IAAKC,GAAOA,EAAG,MAAM,EACrB,OAAQA,GAAkC,EAAQA,GAAI,WAAY,EAIlE,IAAKA,MAAO,OAAoBA,EAAG,IAAI,CAAC,EACxC,OAAQC,GAAqD,EAAQA,CAAS,CACnF,C,iJCFO,SAASC,GAA2B,CAAE,OAAAlB,CAAO,EAA4B,CAC9E,MAAMmB,EAAcnB,EAAO,OAAQ1S,GAAU,CAAC,CAAC,QAAS,MAAM,EAAE,SAASA,EAAM,IAAI,CAAC,EAC9E8T,EAAkBpB,EAAO,UAAW1S,GAAUA,EAAM,OAAS,OAAO,EACpE+T,EAAiBrB,EAAO,UAAW1S,GAAUA,EAAM,OAAS,MAAM,EAElEgU,EAAeH,EAAY,IAAKI,GAAevB,EAAO,QAAQuB,CAAU,CAAC,EAEzEC,EAAsBxB,EAAOoB,CAAe,GAAG,OAAO,QAAU,EAEhEK,EAAoC,CAAC,EAE3C,QAAStK,EAAQ,EAAGA,EAAQqK,EAAqBrK,IAAS,CACxD,MAAMuK,EAAcJ,EAAa,IAAKK,IAAe,CAAC3B,EAAO2B,EAAU,EAAE,KAAM3B,EAAO2B,EAAU,EAAE,OAAOxK,CAAK,CAAC,CAAC,EAC1GvK,GAAQoT,EAAOoB,CAAe,GAAG,SAASjK,CAAK,EAC/CyK,EAAO5B,EAAOqB,CAAc,GAAG,SAASlK,CAAK,KAE/C,OAAoBvK,EAAK,GAC3B6U,EAAU,KAAK,CACb,MAAA7U,GACA,KAAAgV,EACA,OAAQ,OAAO,YAAYF,CAAW,CACxC,CAAC,CAEL,CAEA,MAAO,CAAE,UAAAD,CAAU,CACrB,CC5BO,SAASI,GAAkB,CAAE,QAAAlC,CAAQ,EAA2B,CACrE,MAAMlS,KAAS,MAAWC,CAAS,EAC7BoU,EAAeZ,GAA2BvB,CAAO,EAEvD,SACE,QAAC,SAAM,UAAWlS,EAAO,MACvB,qBAAC,WACC,oBAAC,OAAI,0BAAc,KACnB,OAAC,QAAK,6EAAiE,GACzE,KACA,OAAC,SACC,oBAAC,MACC,oBAAC,MAAG,iBAAK,KACT,OAAC,MAAG,kBAAM,KACV,OAAC,MAAG,gBAAI,GACV,EACF,KACA,OAAC,SACE,SAAAqU,EAAa,UAAU,IAAI,CAAC,CAAE,MAAAlV,EAAO,KAAAgV,EAAM,OAAAxF,CAAO,EAAGjF,IAAU,CAC9D,MAAM4K,KAAe,OAAa3F,CAAM,EAExC,SACE,QAAC,MACC,oBAAC,MAAI,mBAAC4F,GAAA,EAAa,CAAC,MAAApV,CAAA,CAAc,EAAG,KACrC,OAAC,MACC,mBAACqV,GAAA,EAAO,CAAC,KAAMF,EAAc,UAAWtU,EAAO,QAAS,EAC1D,KACA,OAAC,MACE,SAAAmU,MACC,OAACM,EAAA,EAAO,CAAC,QAASN,EAChB,mBAACvL,GAAA,EAAI,CAAC,KAAK,aAAc,GAC3B,EAEJ,IAXOc,CAYT,CAEJ,CAAC,EACH,GACF,CAEJ,CAEA,MAAMzJ,EAAavC,IAA0B,CAC3C,SAAO,OAAI,CACT,MAAO,OACP,OAAQA,EAAM,QAAQ,EAAG,CAAC,EAE1B,QAAS,CACP,YAAa,MACb,MAAOA,EAAM,OAAO,KAAK,QAEzB,WAAY,CACV,SAAUA,EAAM,WAAW,UAAU,SACrC,MAAOA,EAAM,OAAO,KAAK,SAC3B,CACF,EAEA,SAAU,CACR,QAASA,EAAM,QAAQ,EAAG,CAAC,CAC7B,EAEA,mBAAoB,CAClB,YAAaA,EAAM,QAAQ,CAAC,CAC9B,EAEA,WAAY,CACV,iBAAkB,CAChB,MAAO,MACT,EAEA,iBAAkB,CAChB,MAAO,MACT,EAEA,iBAAkB,CAChB,MAAO,MACT,CACF,EAEA,kBAAmB,CACjB,UAAW,QACb,EAEA,6BAA8B,CAC5B,gBAAiBA,EAAM,OAAO,WAAW,SAC3C,CACF,CAAC,EACD,WAAS,OAAI,CACX,eAAgB,YAClB,CAAC,CACH,G,gBCnFO,MAAMgX,GAAmB,CAAC,CAC/B,MAAA5U,EACA,SAAAH,EACA,eAAAS,EACA,wBAAAuU,EAA0B,EAC5B,IAA6B,CAC3B,MAAM3U,KAAS,MAAW,CAAS,EAE7B,CAAE,WAAA4U,EAAY,WAAAC,CAAW,EAAIC,EAAgB1U,CAAc,EAC3D2U,EAAYF,EAAW,CAAE,MAAO,IAAK,KAAM,EAAM,EAAG/U,CAAK,EAEzD,CACJ,MAAA2E,EACA,QAAAD,GACA,MAAOwQ,CACT,KAAIhP,GAAA,GAAS,OACJ,KAAiB,EAAE,IAAI5F,CAAc,EAC3C,CAACA,CAAc,CAAC,EAEb6U,MAAgB,eACnBC,IAAqB,CACpBvV,EAASiV,EAAWM,EAAK,CAAC,CAC5B,EACA,CAACvV,EAAUiV,CAAU,CACvB,EAEM,CAACP,GAAc3E,CAAS,KAAI,MAAW,EAEvCyF,EAAoB,SAAY,CACpCzF,EAAU,CACZ,EAEA,GAAIlL,IAAWwQ,GAAY,OAAS5U,EAClC,OAAO,KAGT,MAAMgV,MAAM,KAAiB,EAAE,oBAAoBhV,CAAc,EAEjE,GAAIqE,GAAS,CAACuQ,GAAc,CAACA,GAAY,YAAY,aAAe,CAACI,GAAK,CACxE,MAAMC,GAAe5Q,GAAO,SAAW,gEACvC,SAAO,QAAC,OAAI,iDAAqC4Q,EAAA,EAAa,CAChE,CAEA,MAAMC,GAAgBjB,IAAc,KAAK,QAAU,MAAa,KAE1DkB,GAAcP,GAAY,YAAY,YAGtCQ,GAAmBnB,IAAc,MAAM,QAAQ,KAAMoB,IAAMA,GAAE,OAAS,oBAAoB,EAE1FC,GAAmBF,IAAoBA,GAAiB,OAAO,KAAM3V,IAAUA,GAAM,OAAO,OAAS,CAAC,EAE5G,SACE,oBACE,oBAAC8V,GAAA,EAA+B,CAAC,iBAAkBP,GACjD,mBAACG,GAAA,CACC,MAAOR,EACP,QAAS,CAACA,CAAS,EACnB,IAAK,MAAQ,cACb,SAAUE,GACV,WAAY,OACZ,WAAYD,CAAA,CACd,EACF,EACCL,MACC,QAAC,OAAI,UAAW3U,EAAO,QACrB,oBAACqD,EAAA,IACC,KAAK,SACL,QAAS8R,EACT,SAAUd,IAAc,KAAK,QAAU,MAAa,QACrD,0BAED,EACCiB,IAAiB,CAACI,OACjB,OAAClY,EAAA,EAAK,CAAC,MAAM,iBAAiB,SAAS,OAAO,UAAWwC,EAAO,aAAc,sDAE9E,EAED0V,OAAoB,OAACtB,GAAiB,CAAC,QAASoB,EAAA,CAAkB,GACrE,GAEJ,CAEJ,EAEM,EAAa9X,IAA0B,CAC3C,WAAS,OAAI,CACX,QAASA,EAAM,QAAQ,EAAG,CAAC,EAC3B,SAAU,GAAGA,EAAM,YAAY,OAAO,EAAE,IAC1C,CAAC,EACD,gBAAc,OAAI,CAChB,OAAQA,EAAM,QAAQ,EAAG,CAAC,CAC5B,CAAC,CACH,GAOO,SAASoX,EAAgB1U,EAAsC,CACpE,SAAO,WAAQ,IAAM,CAGnB,UAFiB,KAAiB,EAAE,oBAAoBA,CAAc,GAEpD,KAAM,CACtB,IAAK,OACL,IAAK,aACH,MAAO,CACL,WAAa8U,GAAsBA,EAAgC,KACnE,WAAY,CAACtU,EAAqBd,KAA+B,CAAE,GAAGc,EAAU,KAAMd,CAAM,EAC9F,EACF,QACE,MAAM,IAAI,MAAM,GAAGM,CAAc,2CAA2C,CAChF,CACF,EAAG,CAACA,CAAc,CAAC,CACrB,C,yBChHO,MAAMwV,EAAoB,CAAC,CAChC,UAAAzG,EACA,eAAA0G,EACA,QAAA5E,EACA,UAAA6E,EACA,cAAAC,EACA,mBAAAC,EACA,uBAAAC,EACA,wBAAAC,CACF,IAAa,CACX,MAAMC,KAAoB,WAAQ,IACzBlF,EAAQ,OAAO,CAACmF,EAAwBlB,QACtC,MAAkBA,GAAM,KAAK,EAAIkB,EAAI,OAAOlB,GAAM,KAAK,EAAIkB,EACjE,CAAC,CAAC,EACJ,CAACnF,CAAO,CAAC,EACNjR,MAAS,MAAW,EAAS,EAEnC,SACE,OAAC,OAAI,UAAWA,GAAO,QACpB,SAAAmW,EAAkB,IAAKjB,GAAU,CAChC,MAAMhI,GAAO4I,EAAUZ,EAAM,KAAK,EAE5BmB,GAAmBlH,IAAc+F,EAAM,MACvCzQ,EAAQyI,MAAO,MAAqBA,EAAI,EAAI,OAC5CoJ,EAAUpJ,MAAO,MAAkBA,GAAK,MAAM,EAAI,OAExD,SACE,OAACqJ,EAAA,IAEC,iBAAAF,GACA,KAAAnJ,GACA,MAAAzI,EACA,QAAA6R,EACA,QAAArF,EACA,MAAAiE,EACA,eAAAW,EACA,mBAAAG,EACA,cAAAD,EACA,uBAAAE,EACA,cAAeC,CAAA,EAXVhB,EAAM,KAYb,CAEJ,CAAC,EACH,CAEJ,EACM,GAAaxX,IAA0B,CAC3C,WAAS,OAAI,CACX,QAAS,OACT,IAAKA,EAAM,QAAQ,CAAC,EACpB,aAAc,UACd,SAAU,MACZ,CAAC,CACH,G,kMC3DO,MAAM8Y,GAAe,CAAC,CAC3B,MAAAtB,EACA,aAAAuB,EACA,kBAAAC,EACA,qBAAAC,EACA,MAAAjN,CACF,IAAyB,CACvB,MAAM1J,KAAS,MAAW,EAAS,EAE7B,CAAC4W,EAAaC,CAAc,KAAI,YAAS,EAAK,EAE9CC,EAAY5B,EAAM,qBAAoB,wBAAoBA,EAAM,iBAAiB,EAAI,OAE3F,SACE,oBACE,oBAAC6B,GAAA,GACC,WACE,QAAC,OAAI,UAAW/W,EAAO,aACpB,UAAA0W,MACC,OAAC7J,GAAA,EAAW,CAAC,MAAM,aACjB,mBAACmK,GAAA,GACC,UAAW9B,EAAM,sBAAqB,MAA4B,EAClE,SAAW+B,IAAUP,EAAkBO,GAAOvN,CAAK,EACrD,EACF,KAEF,OAACwN,GAAmB,CAAC,QAAST,EAAc,SAAWxM,IAAY0M,EAAqB1M,GAASP,CAAK,EAAG,KACzG,OAACyN,GAAiB,CAAC,QAASV,EAAc,SAAWxM,IAAY0M,EAAqB1M,GAASP,CAAK,EAAG,GACzG,EAEF,YAAa,GACb,UAAU,eAEV,oBAAC,UAAO,KAAK,SAAS,UAAW1J,EAAO,WAAY,QAAS,IAAM6W,EAAe,CAACD,CAAW,EAAG,qBACtFA,KAAc,OAAChO,GAAA,EAAI,CAAC,KAAK,aAAc,MAAK,OAACA,GAAA,EAAI,CAAC,KAAK,YAAa,IAC/E,EACF,KAEA,QAAC,OAAI,UAAW5I,EAAO,aACrB,oBAAC,QAAM,mBAAS8W,GAAW,IAAI,EAAE,OAAO,IAAI,EAAE,QAAQ,EAAI,EAAE,EAC3DL,EAAa,kBAAiB,QAAC,QAAK,oBAAQA,EAAa,eAAc,EACvEA,EAAa,gBAAe,QAAC,QAAK,+BAAmBA,EAAa,aAAY,GACjF,GACF,CAEJ,EAEM,GAAa/Y,GAAyB,CAC1C,MAAM0Z,KAAc,MAAkB1Z,CAAK,EAE3C,MAAO,CACL,gBAAc,OAAI,CAChB,QAAS,CACP,eAAgB,eAClB,CACF,CAAC,EAED,gBAAc,OAAI,CAChB,MAAOA,EAAM,OAAO,KAAK,UACzB,YAAaA,EAAM,QAAQ,CAAC,CAC9B,CAAC,EAED,cAAY,OAAI0Z,EAAa,CAC3B,MAAO1Z,EAAM,OAAO,KAAK,KACzB,OAAQ,UAER,UAAW,CACT,eAAgB,WAClB,CACF,CAAC,CACH,CACF,E,gBC9DO,MAAM2Z,GAA0B,MAC1BC,GAAuB,KA4BvBC,GAAe,CAAC,CAC3B,KAAArK,EACA,MAAAzI,EACA,WAAA2O,EACA,MAAA1J,EACA,mBAAA8N,EACA,cAAAvC,EACA,kBAAAyB,EACA,aAAAe,EACA,cAAAC,EACA,iBAAAC,GACA,MAAAzC,EACA,QAAAjE,GACA,WAAA2G,GACA,eAAAC,EACA,kBAAAC,EACA,UAAA3I,GACA,eAAA0G,GACA,qBAAAc,EACF,IAAa,CACX,MAAM3W,MAAS,MAAW,EAAS,EAC7B,CAAC+X,GAAYC,EAAa,KAAI,YAAwB,EAGtDC,GAAoB,CACxB,GAHeF,IAAY,gBAAkBA,GAAW,gBAAgB,MAAQ,eAAe,EAAI,CAAC,EAIpG,MAAG,aAAU7C,EAAM,KAAK,CAC1B,EAEI+C,GAAkB,YAAcA,GAAkB,YAAY,MAAQ/C,EAAM,mBAC9E,OAAQ,mDAAoD,CAC1D,wBAAyB+C,GAAkB,YAAY,KAAO,GAC9D,mBAAoB/C,EAAM,cAC1B,eAAgBA,EAAM,MAAM,YAAY,MAAQ,cAClD,CAAC,EAKD+C,GAAkB,WAAW,IAAM/C,EAAM,eAG3C,SAASgD,IAA6B,CACpC,MAAMlY,MAAS,MAAW,EAAS,EACnC,SACE,OAAC,OAAI,UAAWA,GAAO,UACrB,mBAACyU,EAAA,GACC,WACE,mBAAE,2IAGF,EAGF,mBAAC7L,GAAA,GACC,KAAK,cACL,QAAS,IACP,OAAO,KACL,uFACA,QACF,EAEJ,EACF,EACF,CAEJ,CAGA,SAASuP,GAAa,CAAE,MAAAjD,GAAO,MAAAzQ,GAAO,MAAAiF,EAAM,EAAwD,CAClG,MAAM+M,GAAkC,CACtC,cAAevB,GAAM,MAAM,cAC3B,YAAaA,GAAM,MAAM,cAAa,OAAuBA,GAAM,MAAM,UAAU,EAAI,MACzF,EACMkD,GAAuC,CAC3C,cAAe3B,GAAa,cAC5B,YAAaA,GAAa,WAC5B,EAEMJ,GAAmBlH,KAAc+F,GAAM,MAE7C,SACE,QAAC9R,EAAA,EAAK,CAAC,UAAU,MAAM,WAAW,SAAS,IAAK,EAC9C,oBAAC8U,GAAA,EAA2B,KAC5B,OAAC1B,GAAA,CACC,kBAAAE,EACA,MAAOxB,GACP,aAAckD,GACd,qBAAAzB,GACA,MAAOjN,EAAA,CACT,KACA,OAAC2O,GAAA,EAAyB,CAAC,eAAgB,IAAMxC,GAAeX,GAAM,KAAK,EAAG,YAAamB,EAAA,CAAkB,GAC/G,CAEJ,CAEA,MAAMiC,GAAoBpL,EAAK,QAAU,MAAa,WAGhDqL,MAAgB,aAAUtH,GAAQ,IAAKiE,IAAUA,GAAM,KAAK,CAAC,EAEnE,SACE,QAAC9R,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,GAC7B,oBAAC,OAAI,UAAWpD,GAAO,QACrB,mBAACwY,GAAA,GACC,SAAQ,GACR,YAAa,GACb,WAAYpF,EACZ,mBAAoB4E,GACpB,mBAAqBS,IAAajB,EAAmBiB,GAAU/O,CAAK,EACpE,GAAIwL,EAAM,MACV,MAAAxL,EAEA,KAAAwD,EACA,MAAO+K,GACP,SAAW/C,IAAUD,EAAcC,GAAOxL,CAAK,EAC/C,cAAAgO,EACA,WAAY,IAAMC,MAAiB,aAAUzC,CAAK,CAAC,EACnD,WAAYuC,EACZ,QAASc,GACT,mBAAoB,OAAM,OAACJ,GAAA,CAAa,MAAAjD,EAAc,MAAAxL,EAAc,MAAAjF,CAAA,CAAc,EAClF,IAAK,MAAQ,gBACb,oBAAqB,IAVhByQ,EAAM,KAWb,EACF,EACCoD,OAAqB,OAACI,GAAA,EAAU,CAAC,KAAAxL,EAAY,WAAA0K,GAAwB,eAAAC,CAAA,CAAgC,GACxG,CAEJ,EAEac,GAAoB,CAAC,CAAE,SAAApb,CAAS,IAAmC,CAC9E,MAAMyC,KAAS,MAAW,EAAS,EACnC,SAAO,OAAC,OAAI,UAAWA,EAAO,QAAU,SAAAzC,CAAA,CAAS,CACnD,EAEO,SAAS2Z,GAAoB,CAClC,QAAAjN,EACA,SAAAtK,CACF,EAGG,CACD,MAAMG,EAAQmK,EAAQ,eAAiB,GAEjC2O,EAAuBC,GAAyC,CACpE,MAAMC,EAAsB,SAASD,EAAM,OAAO,MAAO,EAAE,EAErDE,EAAgB,MAAMD,CAAmB,GAAKA,IAAwB,EAAI,OAAYA,EAExFC,IAAkB9O,EAAQ,eAC5BtK,EAAS,CACP,GAAGsK,EACH,cAAA8O,CACF,CAAC,CAEL,EAEA,SACE,OAAClM,GAAA,GACC,WAAY,GACZ,MAAM,kBACN,QAAQ,kLAER,mBAACvM,GAAA,GACC,KAAK,SACL,MAAO,GACP,YAAa+W,GAAwB,SAAS,EAC9C,WAAY,GACZ,OAAQuB,EACR,aAAc9Y,CAAA,CAChB,EACF,CAEJ,CAEO,SAASqX,GAAkB,CAChC,QAAAlN,EACA,SAAAtK,CACF,EAGG,CACD,MAAMG,EAAQmK,EAAQ,aAAe,GAE/B+O,EAAqBH,GAAyC,CAClE,MAAMI,EAAcJ,EAAM,OAAO,MAC7BI,IAAgBnZ,GAClBH,EAAS,CACP,GAAGsK,EACH,YAAAgP,CACF,CAAC,CAEL,EAEA,SACE,OAACpM,GAAA,GACC,MAAM,WACN,WAAY,GACZ,WACE,oBAAE,wGACwF,OAAC,QAAK,cAAE,EAAO,0CAEzG,EAGF,mBAACvM,GAAA,GACC,KAAK,OACL,MAAO,GACP,YAAagX,GACb,WAAY,GACZ,OAAQ0B,EACR,aAAclZ,CAAA,CAChB,EACF,CAEJ,CAEA,MAAM,GAAapC,IAA0B,CAC3C,WAAS,OAAI,CACX,MAAO,uBACP,aAAcA,EAAM,QAAQ,CAAC,EAC7B,OAAQ,aAAaA,EAAM,OAAO,OAAO,IAAI,GAC7C,aAAcA,EAAM,MAAM,OAAO,QAEjC,OAAQ,CACN,SAAU,SACZ,CACF,CAAC,EACD,aAAW,OAAI,CACb,QAAS,OACT,WAAY,SACZ,UAAW,CACT,QAAS,IACT,OAAQ,SACV,CACF,CAAC,CACH,GChQO,MAAMwb,WAAkB,eAAqB,CAClD,YAAYxQ,EAAc,CACxB,MAAMA,CAAK,EAGb,mBAAiBwM,GAAqB,CACpC,KAAM,CAAE,QAAAjE,EAAS,gBAAAkI,CAAgB,EAAI,KAAK,MAC1CA,EAAgBlI,EAAQ,OAAQmI,GAAMA,EAAE,QAAUlE,EAAM,KAAK,CAAC,CAChE,EAEA,uBAAoB,CAAC4B,EAA8BpN,IAAkB,CACnE,KAAM,CAAE,QAAAuH,EAAS,gBAAAkI,CAAgB,EAAI,KAAK,MAC1CA,EACElI,EAAQ,IAAI,CAACoI,EAAMC,IACbA,IAAc5P,EACT2P,EAEF,CACL,GAAGA,EACH,kBAAmBvC,CACrB,CACD,CACH,CACF,EAEA,0BAAuB,CAAC7M,EAA4BP,IAAkB,CACpE,KAAM,CAAE,QAAAuH,EAAS,gBAAAkI,CAAgB,EAAI,KAAK,MAC1CA,EACElI,EAAQ,IAAI,CAACoI,EAAMC,IACbA,IAAc5P,EACT2P,EAEF,CACL,GAAGA,EACH,MAAO,CACL,GAAGA,EAAK,MACR,cAAepP,EAAQ,cACvB,WAAYA,EAAQ,YAAc,gBAAuBA,EAAQ,WAAW,EAAI,MAClF,CACF,CACD,CACH,CACF,EAEA,wBAAqB,CAACwO,EAAsC/O,IAAkB,CAC5E,KAAM,CAAE,QAAAuH,EAAS,gBAAAkI,CAAgB,EAAI,KAAK,MAEpCI,EAAiBtI,EAAQ,IAAI,CAACoI,EAAMC,IAAc,CACtD,GAAIA,IAAc5P,EAChB,OAAO2P,EAGT,MAAMG,GAAmB,KAAK,sBAAsBH,CAAI,EAGxD,OAAIZ,EAAS,OAASe,IAAkB,KAC/BC,GAAUJ,EAAMZ,CAAQ,EAE1BiB,EAASL,EAAMZ,CAAQ,CAChC,CAAC,EAEDU,EAAgBI,CAAc,CAChC,EAEA,mBAAgB,CAACrE,EAAkBxL,IAAkB,CACnD,KAAM,CAAE,QAAAuH,EAAS,gBAAAkI,CAAgB,EAAI,KAAK,MAE1CA,EACElI,EAAQ,IAAI,CAACoI,EAAMC,IACbA,IAAc5P,EACT2P,EAGF,CACL,GAAGA,EACH,MAAOnE,EAAM,MACb,UAAWmE,EAAK,MAAM,WAAa,GACnC,MAAO,CACL,GAAGA,EAAK,MACR,GAAGnE,EACH,WAAYA,EAAM,UACpB,CACF,CACD,CACH,CACF,EAEA,eAAavJ,GAAuB,CAClC,KAAM,CAAE,QAAAsF,EAAS,gBAAAkI,CAAgB,EAAI,KAAK,MAE1C,GAAI,CAACxN,GAAU,CAACA,EAAO,YACrB,OAGF,MAAMgO,EAAahO,EAAO,OAAO,MAC3BiO,EAAWjO,EAAO,YAAY,MACpC,GAAIgO,IAAeC,EACjB,OAGF,MAAMC,EAAS,MAAM,KAAK5I,CAAO,EAC3B,CAAC6I,CAAO,EAAID,EAAO,OAAOF,EAAY,CAAC,EAC7CE,EAAO,OAAOD,EAAU,EAAGE,CAAO,EAClCX,EAAgBU,CAAM,CACxB,EAEA,2BAAyB3E,MAChB,KAAiB,EAAE,oBAAoBA,EAAM,aAAa,CAxGnE,CA2GA,QAAS,CACP,KAAM,CAAE,QAAAjE,EAAS,YAAA8I,EAAa,UAAA5K,CAAU,EAAI,KAAK,MAC3C6K,KAAmB,MAAwB,CAAC,GAAG/I,EAAS,GAAG8I,CAAW,EAAG5K,CAAS,EAExF,SACE,OAAC,MAAe,CAAC,UAAW,KAAK,UAC/B,mBAAC,MAAS,CAAC,YAAY,mBAAmB,UAAU,WACjD,SAAC8K,MAEE,OAAC,OAAI,IAAKA,EAAS,SAAW,GAAGA,EAAS,eACxC,oBAAC7W,EAAA,EAAK,CAAC,UAAU,SACd,UAAA6N,EAAQ,IAAI,CAACiE,EAAOxL,IAAU,CAC7B,MAAMwQ,EAAc,KAAK,MAAM,YAAchF,EAAM,MAC7ChI,GAAkB,KAAK,MAAM,OAAOgI,EAAM,KAAK,GAAK,CACxD,OAAQ,CAAC,EACT,MAAO,MAAa,UACtB,EACM9B,EAAa,KAAK,sBAAsB8B,CAAK,EACnD,IAAIzQ,GAOJ,OANIyI,IAAQgN,EACVzV,MAAQ,MAA0ByI,EAAI,EAC7BA,KACTzI,MAAQ,MAAqByI,EAAI,GAG9BkG,KAoBH,OAACmE,GAAA,CACC,MAAA7N,EAEA,WAAA0J,EACA,KAAAlG,GACA,MAAAzI,GACA,MAAAyQ,EACA,cAAe,KAAK,cACpB,cAAe,KAAK,cACpB,QAAS,CAAC,GAAGjE,EAAS,GAAG8I,CAAW,EACpC,mBAAoB,KAAK,mBACzB,iBAAkB,KAAK,MAAM,iBAC7B,kBAAmB,KAAK,kBACxB,qBAAsB,KAAK,qBAC3B,WAAYC,EAAiB9E,EAAM,KAAK,GAAG,OAC3C,eAAgB8E,EAAiB9E,EAAM,KAAK,GAAG,KAC/C,aAAc,KAAK,MAAM,aACzB,UAAW,KAAK,MAAM,UACtB,eAAgB,KAAK,MAAM,gBAhBtBA,EAAM,KAiBb,KArCE,OAACiF,EAAA,CAEC,MAAAzQ,EACA,MAAOwL,EAAM,MACb,mBAAoB,IAAM,CACxB,MAAMkF,MAAoB,OAAiB,EAAE,oBAAoB,IAAI,EACjEA,IACF,KAAK,mBAAmBA,GAAmB1Q,CAAK,CAEpD,EACA,cAAe,IAAM,CACnB,KAAK,cAAcwL,CAAK,CAC1B,GAXK,GAAGA,EAAM,KAAK,IAAIxL,CAAK,EAY9B,CA0BN,CAAC,EACAuQ,EAAS,aACZ,EACF,CAEJ,CACF,EACF,CAEJ,CACF,CAEA,SAASR,GAAUJ,EAAkBZ,EAAsE,CACzG,MAAO,CACL,GAAGY,EACH,MAAO,CACL,MAAG,QAAKA,EAAK,MAAO,YAAY,EAChC,cAAY,OAAiBZ,CAAQ,CACvC,EACA,cAAeA,EAAS,GAC1B,CACF,CAEA,SAASiB,EAASL,EAAkBZ,EAAsE,CACxG,MAAO,CACL,MAAOY,EAAK,MACZ,kBAAmBA,EAAK,kBACxB,UAAW,GACX,cAAeZ,EAAS,IACxB,MAAO,CACL,MAAOY,EAAK,MACZ,KAAM,GACN,cAAY,OAAiBZ,CAAQ,CACvC,CACF,CACF,CASA,MAAM0B,EAAqB,CAAC,CAAE,MAAAzQ,EAAO,mBAAA2Q,EAAoB,cAAA3C,EAAe,MAAA4C,CAAM,IAA+B,CAC3G,MAAMC,EAAQD,EAAM,MAEd,CAACE,EAAaC,CAAc,KAAI,YAAkB,EAAK,EAEvDC,EAAgB,IAAM,CAC1BD,EAAgBE,IAAS,CAACA,EAAI,CAChC,EAEMC,EAAyB,IAAM,CACnCP,EAAmB,CACrB,EAEA,SACE,OAAC1B,GAAiB,CAChB,oBAACkC,GAAA,EAAiB,CAAC,MAAON,EAAO,UAAS,GAAC,MAAA7Q,EAAc,GAAI6Q,EAAO,OAAM,GAAC,YAAa,GACtF,qBAACO,GAAA,EAAI,CACH,oBAACA,GAAA,EAAK,QAAL,CAAa,4CAAgC,KAC9C,OAACA,GAAA,EAAK,YAAL,CAAiB,6GAElB,KACA,OAACA,GAAA,EAAK,OAAL,CACC,mBAAClS,GAAA,EAAI,CAAC,KAAK,iBAAkB,GAC/B,KACA,QAACkS,GAAA,EAAK,QAAL,CACC,oBAACzX,EAAA,GAAM,CAAc,QAAQ,YAAY,QAASuX,EAAwB,8BAA9D,QAEZ,KACA,OAACvX,EAAA,GAAM,CAAc,QAAQ,cAAc,QAASqU,EAAe,yBAAvD,QAEZ,GACF,KACA,OAACoD,GAAA,EAAK,iBAAL,CACC,mBAACzX,EAAA,IAEC,QAASqX,EACT,KAAMF,EAAc,WAAa,aACjC,KAAK,OACL,KAAK,KACN,yBALK,SAON,EACF,GACF,EACCA,MACC,OAAC,OACC,mBAAC,OACC,mBAAC,QAAM,cAAK,UAAUF,EAAO,KAAM,CAAC,EAAE,EACxC,EACF,GAEJ,EACF,CAEJ,ECnSa/E,EAAc,CAAC,CAC1B,QAAAtE,EACA,YAAA8I,EACA,UAAAjE,EACA,aAAA2B,EACA,gBAAAsD,EACA,iBAAApD,EACA,UAAAxI,EACA,eAAA0G,CACF,IAAa,CACX,MAAM7V,KAAS,MAAW,CAAS,EAEnC,SACE,OAAC,OAAI,UAAWA,EAAO,UACrB,mBAACkZ,GAAA,CACC,KAAMpD,EACN,QAAA7E,EACA,YAAA8I,EACA,aAAAtC,EACA,gBAAiBsD,EACjB,iBAAApD,EACA,UAAAxI,EACA,eAAA0G,CAAA,CACF,EACF,CAEJ,EAEM,EAAanY,IAA0B,CAC3C,aAAW,OAAI,CACb,gBAAiBA,EAAM,OAAO,WAAW,QACzC,OAAQ,MACV,CAAC,CACH,G,qCC1BO,MAAMsd,EAAoD,CAAC,CAChE,QAAA/J,EACA,cAAAgE,EACA,WAAAgG,EACA,UAAAnF,EACA,eAAA1V,CACF,IAAM,CACJ,KAAM,CAAC8M,EAAMgO,CAAO,KAAI,YAAoB,CAC1C,OAAQ,CAAC,EACT,MAAO,MAAa,WACpB,aAAW,MAAW,EAAE,UAAU,CACpC,CAAC,EAEKlb,KAAS,MAAW,CAAS,KAEnC,aAAU,IAAM,CACdkb,EAAQpF,IAAY7E,EAAQ,CAAC,GAAG,KAAK,CAAC,CACxC,EAAG,CAAC6E,EAAW7E,CAAO,CAAC,EAEvB,KAAM,CACJ,MAAAxM,EACA,QAAAD,GACA,MAAOwQ,CACT,KAAIhP,GAAA,GAAS,OACJ,KAAiB,EAAE,IAAI5F,CAAc,EAC3C,CAACA,CAAc,CAAC,EAEb+a,GAAsBC,GAA4B,CACtD,GAAI,IAAC,MAAkBA,CAAY,GAAK,CAACpG,EACvC,OAGF,KAAM,CAACE,EAAK,EAAIjE,EACV,CAAE,IAAKoK,GAAc,KAAAlb,EAAK,EAAI6U,EAC9BsG,GAASnb,KAAS,MAAe,KACjCob,GAAOH,EAAa,KAEpBI,GAAS,CACb,GAAGtG,GACH,GAAGkG,EACH,cAAeC,GACf,KAAAE,GACA,MAAO,CACL,KAAAA,GACA,WAAYH,EAAa,WACzB,MAAOA,EAAa,MACpB,WAAYA,EAAa,WAEzB,QAASA,EAAa,QACtB,MAAOA,EAAa,MAKpB,UAAWE,GAASF,EAAa,WAAa,KAAc,QAAUA,EAAa,UACnF,aAAcA,EAAa,YAC7B,CACF,EACAnG,EAAc,CAACuG,EAAM,CAAC,CACxB,EAEA,GAAIhX,IAAWwQ,GAAY,OAAS5U,EAClC,OAAO,KAGT,MAAMgV,MAAM,KAAiB,EAAE,oBAAoBhV,CAAc,EAEjE,GAAIqE,GAAS,CAACuQ,GAAc,CAACA,GAAY,YAAY,aAAe,CAACI,GAAK,CACxE,MAAMC,EAAe5Q,GAAO,SAAW,gEACvC,SAAO,QAAC,OAAI,iDAAqC4Q,CAAA,EAAa,CAChE,CAEA,MAAME,EAAcP,EAAW,WAAW,YAE1C,SACE,oBACG,UAAA/D,EAAQ,WACP,oBACE,oBAACsE,EAAA,CACC,MAAOtE,EAAQ,CAAC,EAChB,QAAAA,EACA,IAAK,MAAQ,gBACb,SAAUkK,GACV,WAAYF,EACZ,WAAYjG,CAAA,CACd,GACE9H,GAAM,QAAU,CAAC,GAAG,IAAKuO,MAClB,OAACC,EAAA,EAAe,CAAmB,MAAOD,CAAA,EAApBA,EAAI,OAAqB,CACvD,GACH,EAGDvO,MACC,OAAC,OAAI,UAAWlN,EAAO,WACrB,mBAAC0Y,GAAA,EAAU,CAAC,KAAAxL,CAAA,CAAY,EAC1B,GAEJ,CAEJ,EAEM,EAAaxP,IAA0B,CAC3C,cAAY,OAAI,CACd,OAAQA,EAAM,QAAQ,EAAG,CAAC,CAC5B,CAAC,CACH,G,oCCjHO,SAASie,EAAuB,CAAE,MAAA7b,EAAO,SAAAwP,EAAU,GAAG5G,CAAM,EAAuB,CACxF,MAAMkT,EAAwBvI,EAAyB,EAEjD,CAAE,QAAA7O,EAAU,EAAK,KAAIwB,GAAA,GAAS,OAAM,UAAS,MAA4B,CAAC,EAAG,CAAC,KAAQ,CAAC,EAEvF6V,KAAmB,eACtBtI,GACQ,CAAC,CAACqI,EAAsB,KAAK,CAAC,CAAE,GAAA3W,CAAG,IAAMA,IAAOsO,EAAG,EAAE,EAE9D,CAACqI,CAAqB,CACxB,EAEA,SACE,OAACE,EAAA,GACC,SAAUtX,GAAW8K,EACrB,UAAS,GACT,SAAQ,GACR,OAAQuM,EACR,QAAS/b,EACR,GAAG4I,CAAA,CACN,CAEJ,CC3BO,MAAMqT,EAA0B,CAAC,CAAE,SAAAzM,EAAU,wBAAA0M,CAAwB,IAAoC,CAC9G,KAAM,CACJ,QAAArd,EACA,UAAW,CAAE,OAAAE,CAAO,EACpB,SAAAC,EACA,MAAAF,CACF,KAAI,MAA+B,EAE7BoB,KAAS,MAAW,EAAS,EAC7BkJ,EAAetK,EAAM,MAAM,EAEjC,SACE,mBACE,mBAAC,OAAI,UAAWoB,EAAO,QACnB,UAAAkJ,IAAiB,IAAa,eAAiBA,IAAiB,IAAa,oBAC7E,OAACxJ,EAAA,GACC,UAAWM,EAAO,UAClB,MAAOsP,EAAW,cAAgB,qBAClC,MAAOzQ,EAAO,gBAAgB,QAC9B,QAAS,CAAC,CAACA,EAAO,gBAAgB,QAElC,mBAAC,MACC,OAAQ,CAAC,CAAE,MAAO,CAAE,SAAAc,EAAU,IAAAC,GAAK,GAAGC,CAAM,CAAE,OAC5C,OAAC8b,EAAA,CACE,GAAG9b,EACJ,SAAAyP,EACA,SAAWiE,IAAmC,CAE5CzU,EAAS,aAAc,EAAE,EACzBa,EAAS4T,IAAI,MAAQ,IAAI,EACzByI,EAAwBzI,IAAI,KAAO,IAAI,CACzC,EACF,EAEF,KAAK,iBACL,QAAA5U,EACA,MAAO,CACL,SAAU,CAAE,MAAO,GAAM,QAAS,6BAA8B,CAClE,EACF,EACF,EAEJ,EACF,CAEJ,EAEM,GAAajB,IAA0B,CAC3C,aAAW,OAAI,CACb,MAAO,QACP,QAAS,CACP,WAAYA,EAAM,QAAQ,CAAC,CAC7B,CACF,CAAC,EACD,WAAS,OAAI,CACX,QAAS,OACT,cAAe,MACf,eAAgB,aAChB,WAAY,UACd,CAAC,CACH,G,4BC5DA,SAASue,GAAwB,CAC/B,MAAMhW,EAAwB,MAAW,cAAc,uBAAoB,kBAAkB,EACvFC,EAAsB,MAAW,cAAc,uBAAoB,yBAAyB,EAC5FgW,EAAkBjW,EAAwB,IAAa,QAAU,IAAa,cAE9EkW,EAAmC,CAAC,EAC1C,OAAIlW,GACFkW,EAAiB,KAAK,IAAa,OAAO,EAExCjW,GACFiW,EAAiB,KAAK,IAAa,cAAe,IAAa,cAAc,EAGxE,CAAE,iBAAAA,EAAkB,gBAAAD,CAAgB,CAC7C,CAEA,MAAME,GAAsBnL,GACnBA,EAAQ,OAAQmI,GAAMA,EAAE,gBAAkB,KAAuB,EAAE,SAAW,EAEjFiD,GAAe,CAAC,CACpB,QAAApL,EACA,aAAA/H,EACA,sBAAA0S,CACF,IAIM,CAEJ,MAAMU,EAAqBL,EAAsB,EAG3CM,EAAYH,GAAmBnL,CAAO,EACtCuL,EAA0BvL,EAAQ,CAAC,GAAG,eAAiB,GACvDwL,EAAsBvT,IAAiB,IAAa,eAGpDwT,EACJ,CAACD,GACDF,GACAX,EAAsB,KAAMe,GAAeA,EAAW,MAAQH,CAAuB,EAEjFI,EAAyB,CAACH,EAE1BI,GAAqBP,EAAmB,iBAAiB,SAAS,IAAa,OAAO,EACtFQ,EAAmBR,EAAmB,iBAAiB,SAAS,IAAa,aAAa,EAG1FS,GACJ7T,IAAiB,IAAa,eAAiB2T,IAAsBD,EACjEI,GACJ9T,IAAiB,IAAa,SAAWwT,GAAwBI,GAAoBJ,EAEvF,OAAOK,IAA+BC,EACxC,EASO,SAASC,GAAuB,CACrC,oBAAAC,EACA,sBAAAtB,EACA,QAAA3K,EACA,cAAAkM,CACF,EAAgC,CAC9B,KAAM,CAAE,UAAApR,CAAU,KAAI,MAA+B,EAC/C,CAAC7C,CAAY,EAAI6C,EAAU,CAAC,MAAM,CAAC,EACnCqR,EAAYf,GAAa,CAAE,QAAApL,EAAS,aAAA/H,EAAc,sBAAA0S,CAAsB,CAAC,EAEzE3R,EAAU,CACd,CAAE,MAAO,kBAAmB,MAAO,IAAa,OAAQ,EACxD,CAAE,MAAO,sBAAuB,MAAO,IAAa,aAAc,CACpE,EAIMoT,EAAkBD,EAAY,CAAC,EAAI,CAAC,IAAa,aAAa,EAEpE,SACE,QAACha,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAAG,WAAW,aAC3C,qBAACA,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAC7B,oBAAC2J,GAAA,EAAI,CAAC,QAAQ,KAAK,qBAAS,KAC5B,QAAC3J,EAAA,EAAK,CAAC,UAAU,MAAM,IAAK,GAAK,WAAW,SAC1C,oBAAC2J,GAAA,EAAI,CAAC,QAAQ,YAAY,MAAM,YAAY,wDAE5C,KACA,OAAC+B,GAAA,GACC,eACE,oBACE,oBAAC/B,GAAA,EAAI,CAAC,MAAM,UAAU,QAAQ,KAAK,uCAEnC,KACA,OAAC,KAAE,6TAIH,KACA,OAACA,GAAA,EAAI,CAAC,MAAM,UAAU,QAAQ,KAAK,2CAEnC,KACA,OAAC,KAAE,wNAGH,GACF,EAEF,aAAa,8FACb,SAAS,8BACT,MAAM,mBACR,GACF,GACF,KACA,OAACgE,GAAA,GACC,QAAA9G,EACA,SAAUiT,EACV,gBAAAG,EACA,MAAOnU,EACP,SAAUiU,CAAA,CACZ,EAECD,MACC,OAACnQ,GAAA,EAAI,CAAC,MAAM,YAAY,uEAA2D,EAGpF,CAACmQ,MACA,mBACG,SAAAE,KACC,OAACrQ,GAAA,EAAI,CAAC,MAAM,YACT,SAAA7D,IAAiB,IAAa,QAC3B,uLACA,sHACN,KAEA,OAAC6D,GAAA,EAAI,CAAC,MAAM,YAAY,uFAA2E,EAEvG,GAEJ,CAEJ,CCnJO,MAAMuQ,GAAuD,CAClE,CAAC,IAAa,cAAc,EAAG,CAC7B,aAAc,wBACd,UAAW,6BACX,YACE,4HACF,SAAU,EACZ,EACA,CAAC,IAAa,gBAAgB,EAAG,CAC/B,aAAc,wBACd,UAAW,6BACX,YACE,4HACF,SAAU,EACZ,EACA,CAAC,IAAa,OAAO,EAAG,CACtB,aAAc,mCACd,UAAW,mCACX,YACE,mWACF,SAAU,qFACZ,EACA,CAAC,IAAa,aAAa,EAAG,CAC5B,aAAc,mCACd,UAAW,mCACX,YACE,mWACF,SAAU,qFACZ,CACF,E,4BCnCO,MAAMC,GAAyBtM,GAA0B,CAC9D,GAAI,CACF,YAAK,UAAUA,CAAO,EACf,EACT,MAAY,CACV,MAAO,EACT,CACF,EAEauM,GAAwC,CACnDvM,EACAwM,IACkC,CAElC,GAAIF,GAAsBtM,CAAO,EAC/B,OAAO,KAGT,GAAIwM,EAAW,gBAAkB,MAC/B,OAAOA,EAGJ,CACH,MAAMC,EAAuBzM,EAAQ,KAAM0M,GAAgBA,EAAY,QAAUF,EAAW,MAAM,UAAU,EAC5G,OAAIC,EACKF,GAAsCvM,EAASyM,CAAoB,EAEnE,IAEX,CACF,E,4BCTA,MAAME,GAA+B,CACnC3M,EACAkC,IACkC,CAClC,MAAM0K,EAAiB5M,EAAQ,KAAMwM,GAAeA,EAAW,QAAUtK,CAAU,EAEnF,OADmB0K,GAAkBL,GAAsCvM,EAAS4M,CAAc,CAEpG,EAEMC,GAA2C,CAC/C,QAAS,CAAC,CACZ,EAEaC,MAAiB,OAAyB,gBAAgB,EAC1DC,MAAkB,OAAa,iBAAiB,EAChDC,MAAiB,OAA2B,gBAAgB,EAE5DC,MAAmB,OAAkC,kBAAkB,EACvEC,MAAmB,OAAqB,kBAAkB,EAC1DC,MAAoB,OAAa,mBAAmB,EACpDC,MAAiB,OAA2B,gBAAgB,EAC5DC,MAAmB,OAA8B,kBAAkB,EACnEC,MAAwB,OAAqD,uBAAuB,EACpGC,MAAoB,OAAqD,mBAAmB,EAC5FC,MAAuB,OAA2D,sBAAsB,EACxGC,MAA4B,OAAa,2BAA2B,EACpEC,MAAsB,OAAuD,qBAAqB,EAClGC,MAAoB,OAAqD,mBAAmB,EAE5FC,MAA2B,OACtC,0BACF,EAEaC,MAA+B,OAAchB,GAAeiB,GAAY,CAEnFA,EACG,QAAQhB,GAAgB,CAAC5e,EAAO,CAAE,QAAA0I,CAAQ,IAAM,CAC/C1I,EAAM,QAAU6f,GAAS7f,EAAM,QAAS0I,CAAO,CACjD,CAAC,EACA,QAAQmW,GAAkB7e,GAAU,CACnC,MAAM8f,KAAa,OAAsC,EACpDA,IAIL9f,EAAM,QAAU6f,GAAS7f,EAAM,QAAS,CACtC,cAAe8f,EAAW,IAC1B,MAAO,CACL,MAAO,GACP,cAAY,OAAiBA,CAAU,CACzC,CACF,CAAC,EACH,CAAC,EACA,QAAQhB,GAAgB,CAAC9e,EAAO,CAAE,QAAA0I,CAAQ,IAAM,CAC/C,MAAMsO,EAAoBhX,EAAM,QAAQ,OAAQ+V,MAAU,MAAkBA,EAAM,KAAK,CAAC,EACxF/V,EAAM,QAAU,CAAC,GAAG0I,EAAS,GAAGsO,CAAiB,CACnD,CAAC,EACA,QAAQ0I,GAA0B,CAAC1f,EAAO,CAAE,QAAA0I,CAAQ,IAAM,CACzD,MAAMqN,EAAQrN,EAAQ,qBAAqB,CAAC,EACtCqX,EAAqB,CACzB,GAAGhK,EACE,KAAMrN,EAAQ,WAAY,MAAOqN,GAAO,KAC/C,EAEA/V,EAAM,QAAU,CAAC+f,CAAkB,CACrC,CAAC,EACA,QAAQP,GAAqB,CAACxf,EAAOggB,IAAW,CAC/ChgB,EAAM,QAAUA,EAAM,QAAQ,IAAK+V,GAC1BA,EAAM,QAAUiK,EAAO,QAAQ,MAClC,CACE,GAAGjK,EACH,MAAO,CACL,GAAGA,EAAM,MACT,cAAeiK,EAAO,QAAQ,aAChC,CACF,EACAjK,CACL,CACH,CAAC,EACA,QAAQ0J,GAAmB,CAACzf,EAAOggB,IAAW,CAC7ChgB,EAAM,QAAUA,EAAM,QAAQ,IAAK+V,GAC1BA,EAAM,QAAUiK,EAAO,QAAQ,MAClC,CACE,GAAGjK,EACH,MAAO,CACL,GAAGA,EAAM,MACT,WAAYiK,EAAO,QAAQ,YAAc,gBAAuBA,EAAO,QAAQ,WAAW,EAAI,MAChG,CACF,EACAjK,CACL,CACH,CAAC,EAGH6J,EACG,QAAQb,GAAkB,CAAC/e,EAAO,CAAE,QAAA0I,CAAQ,IAAM,CACjD1I,EAAM,QAAU6f,GAAS7f,EAAM,QAAS,CACtC,cAAe,MACf,MAAO,MAAqB,SAAS,CACnC,KAAM0I,EACN,WAAY,CAAC,CAAE,GAAG,KAAkB,MAAO,CAAE,OAAQ,CAAC,CAAE,CAAE,CAAC,EAC3D,WAAY,EACd,CAAC,CACH,CAAC,CACH,CAAC,EACA,QAAQsW,GAAkB,CAAChf,EAAO,CAAE,QAAA0I,CAAQ,IAAM,CACjD1I,EAAM,QAAUA,EAAM,QAAQ,OAAQ+V,GAAUA,EAAM,QAAUrN,CAAO,CACzE,CAAC,EACA,QAAQuW,GAAoBjf,GAAU,CACrCA,EAAM,QAAUA,EAAM,QAAQ,OAAQ+V,GAAU,IAAC,MAAkBA,EAAM,KAAK,CAAC,CACjF,CAAC,EACA,QAAQmJ,GAAgB,CAAClf,EAAO,CAAE,QAAA0I,CAAQ,IAAM,CAC/C1I,EAAM,QAAU,CAAC,GAAGA,EAAM,QAAS,GAAG0I,CAAO,CAC/C,CAAC,EACA,QAAQyW,GAAkB,CAACnf,EAAO,CAAE,QAAA0I,CAAQ,IAAM,CACjD1I,EAAM,QAAUA,EAAM,QAAQ,IAAK+V,GAAU,CAC3C,MAAMkK,EAAuBxB,GAA6Bze,EAAM,QAAS0I,EAAQ,UAAU,EAErFwX,EAAoBD,EACtBA,EAAqB,qBACrB,MAA4B,EAEhC,OAAIlK,EAAM,QAAUrN,EAAQ,QAC1BqN,EAAM,MAAQrN,EACVA,EAAQ,OAAS,MAAoB,WACvCqN,EAAM,kBAAoBmK,IAGvBnK,CACT,CAAC,CACH,CAAC,EACA,QAAQwJ,GAA4Bvf,GAAU,CAC7C,MAAMmgB,EAAWngB,EAAM,QAAQ,IAAK+V,GAAU,CAE5C,GAAIA,EAAM,gBAAkB,MAAyB,CACnD,MAAMF,EAAa4I,GAA6Bze,EAAM,QAAS+V,EAAM,MAAM,UAAU,EAC/EmK,EAAoBrK,EAAaA,EAAW,qBAAoB,MAA4B,EAClGE,EAAM,kBAAoBmK,CAC5B,CACA,OAAOnK,CACT,CAAC,EACD/V,EAAM,QAAUmgB,CAClB,CAAC,EACA,QAAQf,GAAuB,CAACpf,EAAO,CAAE,QAAA0I,CAAQ,IAAM,CACtD,KAAM,CAAE,SAAA0X,EAAU,SAAAC,CAAS,EAAI3X,EAI/B,MADuB,MAAY1I,EAAM,QAASogB,CAAQ,EAExD,OAGF,MAAMhG,KAAiB,MAA6Bpa,EAAM,QAASqgB,EAAUD,CAAQ,EACrFpgB,EAAM,QAAUoa,EAAe,IAAKrE,GAC9BA,EAAM,QAAUsK,EACX,CACL,GAAGtK,EACH,MAAOqK,EACP,MAAO,CACL,GAAGrK,EAAM,MACT,MAAOqK,CACT,CACF,EAGKrK,CACR,CACH,CAAC,EACA,QAAQsJ,GAAmB,CAACrf,EAAO,CAAE,QAAA0I,CAAQ,IAAM,CAClD1I,EAAM,WAAU,MAA6BA,EAAM,QAAS0I,EAAQ,SAAUA,EAAQ,QAAQ,CAChG,CAAC,EACA,QAAQ4W,GAAsB,CAACtf,EAAOggB,IAAW,CAChDhgB,EAAM,QAAUA,EAAM,QAAQ,IAAK+V,GAC1BA,EAAM,QAAUiK,EAAO,QAAQ,MAClC,CACE,GAAGjK,EACH,MAAO,CACL,GAAG,MAAqB,SAAS,CAC/B,KAAMiK,EAAO,QAAQ,KACrB,WAAY,CAAC,CAAE,GAAG,KAAkB,MAAO,CAAE,OAAQ,CAAC,CAAE,CAAE,CAAC,EAC3D,WAAY,EACd,CAAC,EACD,MAAOA,EAAO,QAAQ,KACxB,CACF,EACAjK,CACL,CACH,CAAC,CACL,CAAC,EAEK8J,GAAW,CACf/N,EACAwO,IACiB,CACjB,MAAMlF,KAAQ,MAAatJ,CAAO,EAC5BiE,EAAoB,CACxB,GAAGuK,EACH,MAAAlF,EACA,UAAW,GACX,MAAO,CACL,GAAGkF,EAAW,MACd,KAAM,GACN,MAAAlF,CACF,EACA,kBAAmBkF,EAAW,mBAAqBC,GAAiBD,EAAW,KAAK,CACtF,EAEA,MAAO,CAAC,GAAGxO,EAASiE,CAAK,CAC3B,EAEMwK,GAAoBpF,GAAoD,CAC5E,GAAI,UAAkBA,CAAK,EAI3B,SAAO,MAA4B,CACrC,E,gBCzOO,SAASqF,IAAsB,CACpC,KAAM,CAACC,EAAkBC,CAAmB,KAAI,YAAoC,CAAC,CAAC,EAEhFC,KAAS,UAAO,IAAIC,GAAA,CAAqB,KAE/C,aAAU,IAAM,CACd,MAAMC,EAAgBF,EAAO,QAE7B,OAAAE,EAAc,IAAI,EAAE,UAAW9S,GAAS,CACtC2S,EAAoB3S,CAAI,CAC1B,CAAC,EAEM,IAAM,CACX8S,EAAc,QAAQ,CACxB,CACF,EAAG,CAAC,CAAC,EAEL,MAAMC,KAAmB,eAAY,IAAM,CACzCJ,EAAoB,CAAC,CAAC,CACxB,EAAG,CAAC,CAAC,EAECK,KAAgB,eAAY,IAAM,CACtCJ,EAAO,QAAQ,OAAO,CACxB,EAAG,CAAC,CAAC,EAEC7E,KAAa,eAAY,CAACkF,EAAgChR,IAAsB,CACpF2Q,EAAO,QAAQ,IAAIK,EAAkBhR,CAAS,CAChD,EAAG,CAAC,CAAC,EAECiR,KAAmB,WAAQ,IACxB,OAAO,OAAOR,CAAgB,EAAE,KAAM,GAAM,EAAE,QAAU,MAAa,OAAO,EAClF,CAACA,CAAgB,CAAC,EAErB,MAAO,CAAE,iBAAAA,EAAkB,WAAA3E,EAAY,cAAAiF,EAAe,iBAAAE,EAAkB,iBAAAH,CAAiB,CAC3F,CCoBO,MAAMpc,GAA0B,CAAC,CAAE,oBAAAqZ,EAAqB,aAAAmD,CAAa,IAAa,CACvF,KAAM,CACJ,SAAAvhB,EACA,UAAAiN,EACA,MAAAnN,EACA,UAAW,CAAE,OAAAC,CAAO,EACpB,QAAAF,CACF,KAAI,MAA+B,EAE7B,CAAE,iBAAAihB,EAAkB,WAAA3E,EAAY,cAAAiF,GAAe,iBAAAE,EAAkB,iBAAAH,EAAiB,EAAIN,GAAoB,EAE1G7B,GAAe,CACnB,QAAS/R,EAAU,SAAS,CAC9B,EAEM,CAAC,CAAE,QAAAkF,CAAQ,EAAG7R,CAAQ,KAAI,cAAW0f,GAA8BhB,EAAY,EAC/E,CAAC3d,GAAMgP,GAAW/O,EAAc,EAAIxB,EAAM,CAAC,OAAQ,YAAa,gBAAgB,CAAC,EAEjF0hB,MAAwB,OAA4BngB,EAAI,EACxDsc,MAAsB,OAA2Btc,EAAI,EACrDogB,MAAuB,OAA0BpgB,EAAI,EAErDqgB,MAAsB,gBAAY,KACxC,aAAU,IAAM,CACdA,MAAoB,MAA4B,CAAC,CACnD,EAAG,CAACA,EAAmB,CAAC,EAExB,MAAM5E,GAAwBvI,EAAyB,EAEjDoN,MAAoB,eACvBtR,GAAuB,CAClBoR,IAMJtF,EAAWlP,EAAU,SAAS,EAAGoD,IAAcpD,EAAU,WAAW,GAAK,GAAG,CAC9E,EACA,CAACwU,GAAsBtF,EAAYlP,CAAS,CAC9C,KAGA,aAAU,IAAM,CACdjN,EAAS,UAAWmS,EAAS,CAAE,eAAgB,EAAM,CAAC,CACxD,EAAG,CAACA,EAASgK,EAAYnc,CAAQ,CAAC,EAElC,MAAM4hB,MAA0B,OAAsC,IAAM,OAGtEC,MAAc,WAAQ,IACnB1P,EAAQ,OAAQiE,GAAU,IAAC,MAAkBA,EAAM,KAAK,CAAC,EAC/D,CAACjE,CAAO,CAAC,EAGNkF,MAAoB,WAAQ,IACzBlF,EAAQ,OAAQiE,MAAU,MAAkBA,EAAM,KAAK,CAAC,EAC9D,CAACjE,CAAO,CAAC,EAEN2P,GAAe3P,EAAQ,SAAW,KAIxC,aAAU,IAAM,CACd,GAAI9Q,IAAQ,IAAC,OAA2BA,EAAI,EAC1C,OAGF,MAAM0gB,EAAmB9U,EAAU,WAAW,EAC9C,GAAI,CAAC8U,EACH,OAGF,MAAMC,EAAclB,EAAiBiB,CAAgB,EACrD,GAAI,CAACC,EACH,OAGF,MAAMrc,MAAQ,MAAqBqc,CAAW,MAAK,MAA0BA,CAAW,EAExFT,EAAa5b,IAAO,SAAW,EAAE,CACnC,EAAG,CAACmb,EAAkB7T,EAAWsU,EAAclgB,EAAI,CAAC,EAEpD,MAAM4gB,MAAqB,eACxBxG,GAAyB,CACnBA,IAILkG,GAAkBlG,CAAK,EAEvBzb,EAAS,YAAayb,CAAK,EAC7B,EACA,CAACkG,GAAmB3hB,CAAQ,CAC9B,EAEMiX,MAAgB,eACpB,CAACyJ,EAAkBD,IAAqB,IACf,MAAYtO,EAASsO,CAAQ,IAMpDngB,EAASmf,GAAsB,CAAE,SAAAiB,EAAU,SAAAD,CAAS,CAAC,CAAC,EAGlDpQ,KAAcqQ,GAChBuB,GAAmBxB,CAAQ,EAE/B,EACA,CAACpQ,GAAW8B,EAAS8P,EAAkB,CACzC,EAEMC,GAAgCC,GAA8B,EAE9DlG,MAAkB,eACrBxB,GAAiC,CAOhC,MAAMpD,GADkBpK,EAAU,SAAS,EACD,OAAQmJ,OAAU,MAAkBA,GAAM,KAAK,CAAC,EAC1FpW,EAAS,UAAW,CAAC,GAAGya,EAAgB,GAAGpD,EAAiB,EAAG,CAAE,eAAgB,EAAM,CAAC,EACxF6K,GAA8BzH,CAAc,EAE5Cna,EAAS6e,GAAe1E,CAAc,CAAC,EACvCna,EAASsf,GAA0B,CAAC,EAGpC,KAAM,CAACc,GAAUD,EAAQ,KAAI,MAA+BtO,EAASsI,CAAc,EAC/EiG,IAAYD,IACdngB,EAASof,GAAkB,CAAE,SAAAgB,GAAU,SAAAD,EAAS,CAAC,CAAC,CAEtD,EACA,CAACtO,EAAS+P,GAA+BjV,EAAWjN,CAAQ,CAC9D,EAEMoiB,MAAgC,eACnC3H,GAAiC,CAChC,MAAMrE,EAAQqE,EAAe,CAAC,EAE9B,GAAI,IAAC,MAAkBrE,EAAM,KAAK,EAChC,OAGF,MAAM/B,GAAa+B,EAAM,MAAM,KAE/BpW,EAAS,UAAWya,EAAgB,CAAE,eAAgB,EAAM,CAAC,EAC7DyH,GAA8BzH,CAAc,EAE5Cna,EAASyf,GAAyB,CAAE,qBAAsBtF,EAAgB,WAAApG,EAAW,CAAC,CAAC,EACvFsN,GAAkB,CACpB,EACA,CAACA,GAAmB3hB,EAAUkiB,EAA6B,CAC7D,EAEMG,GAAiCvF,GAAsB,CAAC,KAE9D,aAAU,IAAM,CAEd,GADAqE,GAAiB,EACb9f,KAAS,IAAa,eAAgB,CACxC,MAAMob,EAAOxP,EAAU,YAAY,EAEnC,GAAI,CAACoV,GACH,OAOF,MAAMC,GAAe,CACnB,MAAO,IACP,cALClE,MAAuB,KAAiB,EAAE,oBAAoB9c,EAAc,GAAG,KAChF+gB,GAA+B,IAK/B,UAAW,GACX,qBAAmB,MAA4B,EAC/C,KAAA5F,EACA,QAAS,GACT,MAAO,CACL,MAAO,IACP,KAAM,GACN,KAAAA,CACF,CACF,EACAnc,EAASyf,GAAyB,CAAE,qBAAsB,CAACuC,EAAY,EAAG,WAAY7F,CAAK,CAAC,CAAC,CAC/F,CACF,EAAG,CAACpb,GAAMghB,GAAgCjE,EAAqBnR,EAAW3L,GAAgB6f,EAAgB,CAAC,EAE3G,MAAMtI,MAAmB,eAAazC,GAAsB,CAC1D9V,EAAS2e,GAAe7I,CAAK,CAAC,CAChC,EAAG,CAAC,CAAC,KAGL,aAAU,IAAM,CACd,GAAI,IAAC,MAAYjE,EAAS9B,EAAS,EAAG,CACpC,MAAMkS,EAAYpQ,EAAQ,GAAG,EAAE,GAAG,OAAS,KAC3C8P,GAAmBM,CAAS,CAC9B,CACF,EAAG,CAAClS,GAAW8B,EAAS8P,EAAkB,CAAC,EAE3C,MAAMO,MAAc,eACjBnhB,GAA8B,CAC7Bf,EAAS8e,GAAiB/d,CAAI,CAAC,CACjC,EACA,CAACf,CAAQ,CACX,EAEMY,MAAS,MAAW,EAAS,EAM7Bgc,MAA0B,eAC7BuF,GAA0B,CACzB,MAAMC,KAAa,aAAUvQ,CAAO,EACpCuQ,EAAW,CAAC,EAAE,cAAgBD,EAC9BziB,EAAS,UAAW0iB,EAAY,CAAE,eAAgB,EAAM,CAAC,EAEzDR,GAA8BQ,CAAU,EAExCpiB,EAAS6e,GAAeuD,CAAU,CAAC,CACrC,EACA,CAACvQ,EAASnS,EAAUkiB,GAA+B5hB,CAAQ,CAC7D,EAKMqiB,GAAsB3hB,GAAkB,CAC5C,MAAM0hB,KAAa,aAAUvQ,CAAO,EAEpC,GAAIuQ,EAAW,CAAC,EAAE,MAChB,MAAI,MAAkBA,EAAW,CAAC,EAAE,KAAK,EACvCA,EAAW,CAAC,EAAE,MAAM,KAAO1hB,MACtB,CAGL,MAAM4hB,GAA4B,CAChC,MAAG,aAAUF,EAAW,CAAC,EAAE,KAAK,EAChC,KAAM1hB,CACR,EACA0hB,EAAW,CAAC,EAAE,MAAQE,EACxB,CAGF5iB,EAAS,UAAW0iB,EAAY,CAAE,eAAgB,EAAM,CAAC,EAEzDR,GAA8BQ,CAAU,EAExCpiB,EAAS6e,GAAeuD,CAAU,CAAC,EACnCf,GAAkB,CACpB,EAEMkB,MAA6B,eAAY,IAAMviB,EAASgf,GAAkB,CAAC,EAAG,CAAChf,CAAQ,CAAC,EAExFwiB,MAA0B,eAC7B7H,GAA8B3a,EAASif,GAAetE,CAAW,CAAC,EACnE,CAAC3a,CAAQ,CACX,EAGM,CAACyiB,GAAiBC,EAAkB,KAAI,YAAuB,CAAC,CAAC,EACjE,CAACC,GAAeC,EAAgB,KAAI,YAAwB,IAAI,EAEhEC,MAA8B,eAAY,IAAM,CACpDL,GAAwBC,EAAe,CACzC,EAAG,CAACA,GAAiBD,EAAuB,CAAC,EAEvCzE,MAAgB,eAAY,IAAM,CAEtC,GADmBpR,EAAU,MAAM,IAChB,IAAa,cAC9BjN,EAAS,OAAQ,IAAa,OAAO,EACrCA,EAAS,iBAAkB,IAAI,EAE/B+iB,GAAgB,OAAS,GAAKI,GAA4B,EAC1DF,IAAiBjjB,EAAS,YAAaijB,EAAa,MAC/C,CACLjjB,EAAS,OAAQ,IAAa,aAAa,EAG3C,MAAMojB,KAAY,KAAiB,EAAE,oBAAoBjR,EAAQ,CAAC,EAAE,aAAa,GAAG,KAChFiR,GACFpjB,EAAS,iBAAkBojB,CAAS,EAGtClB,GAA8B/P,CAAO,EAErC,MAAM8I,GAAc9I,EAAQ,OAAQiE,IAAUA,GAAM,gBAAkB,KAAuB,EAC7F4M,GAAmB/H,EAAW,EAC9B4H,GAA2B,EAC3BK,GAAiB7S,EAAS,CAC5B,CACF,EAAG,CACDpD,EACAjN,EACA+iB,GAAgB,OAChBI,GACAF,GACAf,GACA/P,EACA0Q,GACAxS,EACF,CAAC,EAEK,CAAE,aAAAgT,GAAc,UAAAC,GAAW,YAAAC,GAAa,SAAAC,EAAS,EAAIhF,GAAand,IAAQ,IAAa,OAAO,EACpG,OAAKA,MAIH,QAACE,EAAA,GACC,OAAQ,EACR,MAAO8hB,GACP,eACE,QAAC/e,EAAA,EAAK,CAAC,UAAU,MAAM,IAAK,GAAK,WAAW,SAC1C,oBAAC2J,GAAA,EAAI,CAAC,QAAQ,YAAY,MAAM,YAC7B,SAAAqV,EAAA,CACH,KACA,OAACtT,GAAA,GACC,YAAauT,GACb,aAAcC,GACd,SAAU,yCACV,MAAOF,EAAA,CACT,GACF,EAID,oBAA8BjiB,EAAI,MACjC,OAAC4b,EAAuB,CAAC,wBAAAC,GAAkD,SAAUkB,CAAA,CAAqB,EAI3GT,IAAuBrc,OACtB,OAACV,EAAA,EAAK,CAAC,MAAOb,EAAO,YAAY,QAAS,QAAS,CAAC,CAACA,EAAO,YAAY,QACtE,mBAACmc,EAAA,CACC,eAAA5a,GACA,QAAA6Q,EACA,WAAY,IAAMwP,GAAkB,EACpC,cAAeS,GACf,UAAWtB,CAAA,CACb,EACF,EAIDW,IAAwBngB,OACvB,QAACgD,EAAA,EAAK,CAAC,UAAU,SACf,oBAAC1D,EAAA,EAAK,CAAC,MAAOb,EAAO,YAAY,QAAS,QAAS,CAAC,CAACA,EAAO,YAAY,QACtE,mBAAC,MACC,KAAK,aACL,OAAQ,CAAC,CAAE,MAAO,CAAE,IAAAe,EAAK,GAAGC,CAAM,CAAE,OAEhC,OAAC6U,GAAA,CACE,GAAG7U,EACJ,eAAAO,GACA,wBAAyB,CAACqc,GAC1B,SAAUgF,EAAA,CACZ,EAGJ,QAAA9iB,EACA,MAAO,CACL,SAAU,CAAE,MAAO,GAAM,QAAS,gCAAiC,CACrE,EACF,EACF,KACA,OAACse,GAAA,CACC,oBAAAC,EACA,QAAAjM,EACA,sBAAA2K,GACA,cAAAuB,EAAA,CACF,GACF,KAID,OAA2Bhd,EAAI,MAC9B,QAACiD,EAAA,EAAK,CAAC,UAAU,SAEf,oBAACmS,EAAA,CACC,QAASoL,GACT,YAAaxK,GACb,aAAc,IAAMsK,GAAkB,EACtC,gBAAA1F,GACA,iBAAApD,GACA,UAAWiI,EACX,UAAAzQ,GACA,eAAgB4R,EAAA,CAClB,KACA,OAACtM,EAAA,EAAO,CAAC,QAAS,gDAAiD,KAAMiM,GACvE,mBAACrd,EAAA,IACC,KAAK,SACL,QAAS,IAAM,CACbjE,EAAS4e,GAAgB,CAAC,CAC5B,EACA,QAAQ,YACR,cAAauE,EAAA,GAAU,WAAW,SAAS,SAC3C,SAAU7B,GACV,UAAW1gB,GAAO,eACnB,qBAED,EACF,EAECsgB,OACC,OAACrD,GAAA,CACC,oBAAAC,EACA,sBAAAtB,GACA,QAAA3K,EACA,cAAAkM,EAAA,CACF,KAGF,QAAC/Z,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAC7B,oBAAC2J,GAAA,EAAI,CAAC,QAAQ,KAAK,uBAAW,KAC9B,OAACA,GAAA,EAAI,CAAC,QAAQ,YAAY,MAAM,YAAY,iFAE5C,GACF,KAEA,OAAC6I,EAAA,CACC,QAAA3E,EACA,UAAW2O,EACX,UAAAzQ,GACA,eAAgB4R,GAChB,mBAAqBxG,GAAU,CAC7Bnb,EAAS+e,GAAiB5D,CAAK,CAAC,CAClC,EACA,cAAAxE,GACA,uBAAwB,CAACwE,EAAOpa,IAAS,CACvCf,EAASqf,GAAqB,CAAE,MAAAlE,EAAO,KAAApa,CAAK,CAAC,CAAC,CAChD,EACA,wBAA0Bma,GAAU,CAClClb,EAASkf,GAAiBhE,CAAK,CAAC,CAClC,EACF,KAEA,QAAClX,EAAA,EAAK,CAAC,UAAU,MACd,UAAAJ,GAAA,EAAO,uBAAsB,OAACwf,GAAA,CAAmB,YAAAlB,EAAA,CAA0B,EAE3ElB,MACC,OAAC/c,EAAA,GAAM,CAAC,KAAK,UAAU,KAAK,SAAS,QAAQ,cAAc,QAAS6c,GAAe,kBAEnF,EAED,CAACE,MACA,OAAC/c,EAAA,IACC,cAAakf,EAAA,GAAU,WAAW,WAAW,cAC7C,KAAK,OACL,KAAK,SACL,QAAS,IAAM9B,GAAkB,EACjC,SAAUG,GACX,mBAED,GAEJ,EAGCA,OACC,OAACpjB,EAAA,EAAK,CAAC,MAAM,iDAAiD,SAAS,UAAU,oEAEjF,GAEJ,GAEJ,EAhKO,IAkKX,EAEA,SAASglB,GAAmB,CAAE,YAAAlB,CAAY,EAAyD,CACjG,MAAMmB,KACJ,OAACC,EAAA,EAAI,CACF,eAAgB,IAAKviB,MACpB,OAACsU,EAAA,EAAO,CAAkB,QAAStU,EAAK,aAAe,GAAI,UAAU,QACnE,mBAACwiB,GAAA,GAEC,QAAS,IAAMrB,EAAYnhB,EAAK,OAAS,MAAoB,IAAI,EACjE,MAAOA,EAAK,OAAS,IAFhBA,EAAK,KAGZ,GALYA,EAAK,KAMnB,CACD,EACH,EAGF,SACE,OAACyiB,GAAA,EAAQ,CAAC,QAASH,EACjB,oBAACpf,EAAA,GAAM,CAAC,QAAQ,YAAY,8BAE1B,OAACuF,GAAA,EAAI,CAAC,KAAK,YAAa,IAC1B,EACF,CAEJ,CAEA,MAAM,GAAalL,IAA0B,CAC3C,kBAAgB,OAAI,CAClB,MAAO,aACT,CAAC,EACD,YAAU,OAAI,CACZ,QAAS,OACT,cAAe,MACf,WAAY,SACZ,MAAO,cACP,WAAYA,EAAM,WAAW,iBAC7B,WAAYA,EAAM,QAAQ,CAAC,EAC3B,SAAUA,EAAM,WAAW,KAAK,GAChC,OAAQ,SACV,CAAC,EACD,gBAAc,OAAI,CAChB,WAAYA,EAAM,QAAQ,EAAG,EAC7B,eAAgB,WAClB,CAAC,EACD,YAAU,OAAI,CACZ,MAAOA,EAAM,OAAO,KAAK,IAC3B,CAAC,CACH,GAEMujB,GAAgC,IAAM,CAC1C,KAAM,CAAE,SAAAniB,CAAS,KAAI,MAA+B,EAEpD,OAAQya,GAAiC,CAEvC,MAAMrE,EAAQqE,EAAe,CAAC,EAC9B,GAAI,CAACrE,EACH,OAIF,GAAI,IADuB,KAAiB,EAAE,oBAAoBA,EAAM,aAAa,EAEnF,MAAM,IAAI,MAAM,uCAAuC,EAGzD,MAAI,MAAkBA,EAAM,KAAK,EAAG,CAClC,MAAM/B,EAAa+B,EAAM,MAAM,KAC/BpW,EAAS,aAAcqU,CAAU,CACnC,CACF,CACF,C,kOC7kBA,MAAM0P,GAA+B,CACnCC,EACAC,IAEA,OAAO,QAAQD,GAAY,CAAC,CAAC,EAAE,OAC7B,CAAC1M,EAAK,CAAC7N,EAAMzI,EAAK,IAAM,CACtB,GAAGsW,EACH,CACE,KAAA7N,EACA,MAAAzI,GACA,SAAUijB,EAAU,KAAgB,MAAQ,KAAgB,KAC9D,CACF,EACA,CAAC,CACH,EAEIC,EAA2BC,GAAqDA,EAAgB,MAEhGC,EAA6BC,IAChCA,GAAO,CAAC,GAAG,IAAIH,CAAuB,EAE5BI,EAA4C,CACvD,KAAM,GACN,MAAO,GACP,SAAU,KAAgB,KAC5B,EAGaC,EAAiB,CAAC,iBAAkB,WAAW,EAG/CC,EAAuB,CAClC,CAAE,MAAO,iBAAkB,MAAO,iBAAkB,QAAS,EAAK,EAClE,CAAE,MAAO,YAAa,MAAO,YAAa,QAAS,EAAK,EACxD,CAAE,MAAO,gBAAiB,MAAO,KAAM,CACzC,EAEaC,EAA0B,CACrC,GAAI,GACJ,iBAAkB,GAClB,QAASF,EACT,gBAAiB,CAAC,EAClB,OAAQ,CAAC,EACT,SAAU,GACV,SAAU,GACV,gBAAiB,GACjB,eAAgB,GAChB,mBAAoB,GACpB,oBAAqB,GACrB,kBAAmB,CAAC,CACtB,EAGO,SAASG,EAA2BC,EAA2B,CACpE,MAAO,CACL,MAAI,YAAS,QAAQ,EACrB,GAAGA,EACH,QAASA,EAAM,QAAU,CAAC,GAAG,IAAID,CAA0B,CAC7D,CACF,CAGO,MAAME,GAAwBD,GAAwD,CAC3F,GAAI,CAACA,EACH,OAAOF,EAGT,MAAMte,EAAK,OAAQwe,EAAQA,EAAM,MAAK,YAAS,QAAQ,EAEvD,GAAI,OAAO,KAAKA,CAAK,EAAE,SAAW,EAEhC,MADoB,CAAE,GAAGF,EAAY,GAAAte,CAAG,EAI1C,MAAM0e,EAA4B,CAAC,EACnCF,EAAM,QAAQ,QAASG,IAAa,CAClC,MAAMC,GAAeH,GAAqBE,EAAQ,EAClDD,EAAW,KAAKE,EAAY,CAC9B,CAAC,EAED,MAAMC,EACJL,EAAM,iBAAiB,IAAKM,KAAa,CAAE,KAAMA,GAAQ,CAAC,EAAG,SAAUA,GAAQ,CAAC,EAAG,MAAOA,GAAQ,CAAC,CAAE,EAAE,GAAK,CAAC,EAEzGjB,GACJW,EAAM,UACF,QAASM,OAEF,MAAoBA,EAAO,EAAE,QAAQ,IAAqB,CAClE,EACA,IAAI,CAAC,CAAE,KAAAxb,GAAM,SAAAyb,GAAU,MAAAlkB,EAAM,KAAO,CACnC,QAAM,MAAoByI,EAAI,EAC9B,SAAAyb,GACA,SAAO,MAAoBlkB,EAAK,CAClC,EAAE,GAAK,CAAC,EAEZ,MAAO,CACL,GAAAmF,EAEA,gBAAiB,CACf,GAAG6d,GACH,GAAGgB,EACH,GAAGjB,GAA6BY,EAAM,MAAO,EAAK,EAClD,GAAGZ,GAA6BY,EAAM,SAAU,EAAI,CACtD,EACA,SAAUA,EAAM,UAAY,GAC5B,SAAUA,EAAM,UAAY,GAC5B,iBAAkB,MAAM,QAAQA,EAAM,QAAQ,GAAKA,EAAM,SAAS,OAAS,EAC3E,QAASA,EAAM,UAAY,OAC3B,gBAAiB,CAACA,EAAM,WAAYA,EAAM,eAAgBA,EAAM,eAAe,EAAE,KAAK,OAAO,EAC7F,eAAgBA,EAAM,YAAc,GACpC,mBAAoBA,EAAM,gBAAkB,GAC5C,oBAAqBA,EAAM,iBAAmB,GAC9C,OAAQE,EACR,kBAAmBF,EAAM,qBAAuB,CAAC,CACnD,CACF,EAGaQ,GAAuB,CAClCC,EACAC,EACAC,IACU,CACV,MAAMxjB,KAAW,MAAkBujB,EAAY,IAAM,GAAIC,CAAS,EAE5D,CACJ,iBAAA1X,GACA,QAAA2X,GACA,gBAAA1X,GACA,eAAAH,GACA,mBAAAD,GACA,oBAAAE,GACA,SAAAhD,EACF,EAAI0a,EAGEG,GAAsB,OAEtBC,GAAW7X,GAAmB2X,GAAUC,GAGxCE,GADoB7X,IAAmBH,GACNA,GAAiB8X,GAGlDG,GADwB9X,IAAmBJ,GACFA,GAAqB+X,GAG9DI,EADyB/X,IAAmBF,GACDA,GAAsB6X,GAGjEK,EAA+CR,EAAY,iBAC7D,OAAQV,GAAUA,EAAM,MAAQA,EAAM,UAAYA,EAAM,QAAU,MAAQA,EAAM,QAAU,MAAS,EACpG,IAAI,CAAC,CAAE,KAAAlb,EAAM,SAAAyb,GAAU,MAAAlkB,EAAM,IAAM,CAACyI,EAAMyb,GAAUlkB,EAAK,CAAC,EAEvD8kB,EAAST,EAAY,QAAQ,IAAKP,GACtCK,GAAqBC,EAAwBN,EAAUQ,CAAS,CAClE,EAEMS,EAAiB,CACrB,GAAIjkB,GAAY,CAAC,EACjB,SAAUujB,EAAY,SACtB,SAAAI,GACA,gBAAAI,EACA,MAAO,OACP,SAAU,OACV,WAAAH,GACA,eAAAC,GACA,gBAAAC,EACA,OAAAE,EACA,oBAAqBT,EAAY,kBACjC,SAAA1a,EACF,EAKA,OAAIya,IAA2B,MAE7BW,EAAQ,SAAWV,EAAY,iBAAiB,IAAI,IAAa,EACjEU,EAAQ,gBAAkB,SAE1BA,EAAQ,mBAAkB,MAAkBA,CAAO,EACnDA,EAAQ,SAAW,QAGjBV,EAAY,WACdU,EAAQ,SAAWV,EAAY,UAG1BU,CACT,EAEaC,GAA2BC,IAA0C,CAChF,MAAOA,EACP,MAAOA,CACT,GAEaC,GAA6B7B,IACvCA,GAAO,CAAC,GAAG,IAAI2B,EAAuB,EAE5BG,GAA0BhC,GAEjCA,IAAoB,KACf,KAGJA,EAIED,EAAwBC,CAAe,GAAK,GAH1C,GAMEiC,GACXC,GAEKA,EAIEjC,EAA0BiC,CAAgB,EAHxC,CAAC,EAML,SAASC,GAAsBC,EAAmB,CACvD,MAAI,CAACA,GAAYA,EAAS,SAAW,EAC5B,MAGF,MAA0BA,CAAQ,GAAK,sDAChD,CAGO,MAAMC,GAA0BxC,GAC9BA,EAAS,IAAKiB,GAAY,CAC/B,KAAM,CAACxb,EAAMyb,EAAUlkB,EAAK,EAAIikB,EAChC,MAAO,GAAGxb,CAAI,GAAGyb,CAAQ,GAAGlkB,EAAK,EACnC,CAAC,EAGUylB,GAA0B,CAACC,EAAwBxZ,EAAgB,KAAO,CACrF,GAAIwZ,EAAe,SAAW,EAC5B,MAAO,GAGT,MAAMC,EAAsBL,GAAsBI,CAAc,EAC1DE,EAAqBN,GAAsBpZ,CAAa,EAE9D,GAAIyZ,IAAwB,GAC1B,OAAOA,EAGT,GAAIC,IAAuB,GACzB,OAAOA,EAGT,MAAMC,MAAiB,MAA4BH,CAAc,EAC3DI,MAAgB,MAA4B5Z,CAAa,EAI/D,OAFuC4Z,KAAkB,GAAKD,GAAiBC,GAEvC,8DAAgE,EAC1G,C,sCCnRO,SAASC,EAAmBC,EAAsBC,EAA0B,CACjF,MAAMC,EAAmBF,EAAa,QAAQ,sBAAuB,EAAE,EAAE,KAAK,EAE9E,IAAIhhB,EAAU,GAAGkhB,CAAgB,UAEjC,QAASC,EAAI,EAAGF,EAAe,SAASjhB,CAAO,EAAGmhB,IAChDnhB,EAAU,GAAGkhB,CAAgB,UAAUC,CAAC,IAG1C,OAAOnhB,CACT,C,kICKO,MAAMohB,EAAmC,CAC9ChC,EACAiC,EACA/B,IACU,CAEV,GAAI,CADagC,EAAkBD,EAAiB,IAAM,GAAI/B,CAAS,EAErE,MAAM,IAAI,MAAM,0BAA0B+B,EAAiB,EAAE,GAAG,EAGlE,SAASE,EAAeC,GAAkC,CACxD,IAAIC,GAAsBD,GAE1B,GAAIA,GAAa,KAAOH,EAAiB,GAAI,CAC3C,MAAMK,MAAW,MAAqBtC,EAAwBiC,EAAkB/B,CAAS,EACzFmC,GAAe,CACb,GAAGD,GACH,GAAGE,EACL,CACF,CAEA,MAAO,CACL,GAAGD,GACH,OAAQD,GAAa,QAAQ,IAAID,CAAc,CACjD,CACF,CAEA,OAAOA,EAAejC,CAAS,CACjC,EAIaqC,EAAyB,CAACC,EAAwBtC,IAAwC,CACrG,GAAIsC,EAAU,KAAOtC,EAAU,GAC7B,MAAM,IAAI,MAAM,iCAAiC,EAGnD,SAASuC,EAAYL,EAAwC,CAC3D,MAAO,CACL,GAAGA,EACH,OAAQA,EAAa,QAAQ,OAAO,CAAClQ,EAAqB,CAAC,EAAGqN,MACxDA,GAAM,KAAOiD,EAAU,IAI3BtQ,EAAI,KAAKuQ,EAAYlD,EAAK,CAAC,EACpBrN,GACN,CAAC,CAAC,CACP,CACF,CAEA,OAAOuQ,EAAYvC,CAAS,CAC9B,EAKawC,EAA2B,CACtC1C,EACAiC,EACAU,EACAzC,EACA0C,IACgB,CAChB,MAAMN,MAAW,MAAqBtC,EAAwBiC,EAAkB/B,CAAS,EAEzF,SAAO,MAAQA,EAAY2C,IAAc,CACvC,KAAM,CAACC,GAAaC,GAAaC,EAAgB,EAAIC,GAAgBJ,GAAWF,CAAc,EAE9F,GAAIG,KAAgB,QAAaC,KAAgB,QAAaC,KAAqB,OACjF,MAAM,IAAI,MAAM,mCAAmCL,EAAe,EAAE,WAAW,EAI7EC,IAAa,UACXE,GAAY,OACdA,GAAY,OAAO,KAAKR,EAAQ,EAEhCQ,GAAY,OAAS,CAACR,EAAQ,GAK9BM,IAAa,UACfG,GAAY,UAAS,yBAAsBA,GAAY,QAAU,CAAC,EAAGT,GAAUU,EAAgB,GAI7FJ,IAAa,UACfG,GAAY,UAAS,wBAAqBA,GAAY,QAAU,CAAC,EAAGT,GAAUU,EAAgB,EAElG,CAAC,CACH,EAIO,SAASC,GACd/C,EACAyC,EAC4F,CAC5F,IAAIO,EACAC,EACAC,EAGJ,SAASH,GAAgBb,GAA2B5c,GAAeud,GAA0B,CACvFG,IAIAd,GAAa,KAAOO,EAAe,KACrCO,EAAgBd,GAChBe,EAAsBJ,GACtBK,EAAgC5d,IAG9B4c,GAAa,QACfA,GAAa,OAAO,QAAQ,CAAC7C,GAAO/Z,KAAUyd,GAAgB1D,GAAO/Z,GAAO4c,EAAY,CAAC,EAE7F,CAEAa,OAAAA,GAAgB/C,EAAW,EAAGA,CAAS,EAEhC,CAACgD,EAAeC,EAAqBC,CAA6B,CAC3E,CAEO,SAASC,EAAc9D,EAAmC,CAC/D,SAAO,QACL,CACE,GAAGA,EACH,OAAQA,EAAM,QAAQ,IAAKA,GAAU8D,EAAc9D,CAAK,CAAC,CAC3D,EACA,IACF,CACF,CAEO,SAAS2C,EAAkBnhB,EAAYmf,EAAiD,CAC7F,OAAOA,EAAU,KAAOnf,EAAKmf,EAAYA,EAAU,QAAQ,KAAMX,GAAU2C,EAAkBnhB,EAAIwe,CAAK,CAAC,CACzG,C,2ECzIO,SAASrgB,EAAMsF,EAAmB,CACvC,MAAM1I,KAAS,MAAWC,EAAWyI,CAAK,EAC1C,SAAO,OAAC,OAAI,UAAW1I,EAAO,KAAO,SAAA0I,EAAM,SAAS,CACtD,CAEA,MAAMzI,EAAY,CAACvC,EAAsBgL,KAAuB,CAC9D,QAAM,OAAI,CACR,QAAS,OACT,cAAeA,EAAM,WAAa,MAClC,SAAWA,EAAM,MAAQ,GAAQ,OAAS,OAC1C,WAAYA,EAAM,WAClB,IAAKhL,EAAM,QAAQgL,EAAM,KAAO,CAAC,EACjC,SAAUA,EAAM,QAClB,CAAC,CACH,E","sources":["webpack://grafana/./public/app/features/alerting/unified/AlertWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaRuleExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/GroupAndNamespaceFields.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/CloudEvaluationBehavior.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/RecordingRulesNameSpaceAndGroupStep.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/alert-rule-form/AlertRuleForm.tsx","webpack://grafana/./public/app/features/alerting/unified/CloneRuleEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/ExistingRuleEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/RuleEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/alert-rule-form/ModifyExportRuleForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaModifyExport.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/PromDurationDocs.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/PromDurationInput.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/formStyles.ts","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/routeTimingsFields.ts","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/timingOptions.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/AlertRuleNameInput.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/alert-rule-form/simplifiedRouting/contactPoint/ContactPointDetails.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/alert-rule-form/simplifiedRouting/contactPoint/ContactPointSelector.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/alert-rule-form/simplifiedRouting/route-settings/MuteTimingFields.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/alert-rule-form/simplifiedRouting/route-settings/RouteTimings.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/alert-rule-form/simplifiedRouting/route-settings/RouteSettings.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/alert-rule-form/simplifiedRouting/AlertManagerRouting.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/alert-rule-form/simplifiedRouting/SimplifiedRouting.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/labels/LabelsEditorModal.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/labels/LabelsFieldInForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/notificaton-preview/NotificationPreview.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/NotificationsStep.tsx","webpack://grafana/./public/app/features/alerting/unified/types/preview.ts","webpack://grafana/./public/app/features/alerting/unified/api/preview.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/PreviewRuleResult.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/PreviewRule.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useRuleSourcesWithRuler.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/preview.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/CloudAlertPreview.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/ExpressionEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/ExpressionsEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/QueryOptions.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/QueryWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/QueryRows.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/QueryEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/RecordingRuleEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/CloudRulesSourcePicker.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/query-and-alert-condition/CloudDataSourceSelector.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/query-and-alert-condition/SmartAlertTypeDetector.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/query-and-alert-condition/descriptions.tsx","webpack://grafana/./public/app/features/alerting/unified/utils/dataSourceFromExpression.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/query-and-alert-condition/reducer.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/query-and-alert-condition/useAlertQueryRunner.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/query-and-alert-condition/QueryAndExpressionsStep.tsx","webpack://grafana/./public/app/features/alerting/unified/utils/amroutes.ts","webpack://grafana/./public/app/features/alerting/unified/utils/duplicate.ts","webpack://grafana/./public/app/features/alerting/unified/utils/routeTree.ts","webpack://grafana/./public/app/plugins/datasource/parca/QueryEditor/Stack.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, LinkButton, useStyles2 } from '@grafana/ui';\n\ninterface AlertWarningProps {\n  title: string;\n  children: React.ReactNode;\n}\nexport function AlertWarning({ title, children }: AlertWarningProps) {\n  return (\n    <Alert className={useStyles2(warningStyles).warning} severity=\"warning\" title={title}>\n      <p>{children}</p>\n      <LinkButton href=\"alerting/list\">To rule list</LinkButton>\n    </Alert>\n  );\n}\n\nconst warningStyles = (theme: GrafanaTheme2) => ({\n  warning: css({\n    margin: theme.spacing(4),\n  }),\n});\n","import { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { allGrafanaExportProviders, ExportFormats } from './providers';\n\ninterface GrafanaRuleExportPreviewProps {\n  alertUid: string;\n  exportFormat: ExportFormats;\n  onClose: () => void;\n}\n\nconst GrafanaRuleExportPreview = ({ alertUid, exportFormat, onClose }: GrafanaRuleExportPreviewProps) => {\n  const { currentData: ruleTextDefinition = '', isFetching } = alertRuleApi.endpoints.exportRules.useQuery({\n    ruleUid: alertUid,\n    format: exportFormat,\n  });\n\n  const downloadFileName = `${alertUid}-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={ruleTextDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n};\n\ninterface GrafanaRulerExporterProps {\n  onClose: () => void;\n  alertUid: string;\n}\n\nexport const GrafanaRuleExporter = ({ onClose, alertUid }: GrafanaRulerExporterProps) => {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaRuleExportPreview alertUid={alertUid} exportFormat={activeTab} onClose={onClose} />\n    </GrafanaExportDrawer>\n  );\n};\n","import { css } from '@emotion/css';\nimport { useEffect, useMemo } from 'react';\nimport { useFormContext, Controller } from 'react-hook-form';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Field, useStyles2, VirtualizedSelect } from '@grafana/ui';\nimport { useDispatch } from 'app/types';\n\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { fetchRulerRulesAction } from '../../state/actions';\nimport { RuleFormValues } from '../../types/rule-form';\n\nimport { checkForPathSeparator } from './util';\n\ninterface Props {\n  rulesSourceName: string;\n}\n\nexport const GroupAndNamespaceFields = ({ rulesSourceName }: Props) => {\n  const {\n    control,\n    watch,\n    formState: { errors },\n    setValue,\n  } = useFormContext<RuleFormValues>();\n\n  const style = useStyles2(getStyle);\n\n  const rulerRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchRulerRulesAction({ rulesSourceName }));\n  }, [rulesSourceName, dispatch]);\n\n  const rulesConfig = rulerRequests[rulesSourceName]?.result;\n\n  const namespace = watch('namespace');\n\n  const namespaceOptions = useMemo(\n    (): Array<SelectableValue<string>> =>\n      rulesConfig ? Object.keys(rulesConfig).map((namespace) => ({ label: namespace, value: namespace })) : [],\n    [rulesConfig]\n  );\n\n  const groupOptions = useMemo(\n    (): Array<SelectableValue<string>> =>\n      (namespace && rulesConfig?.[namespace]?.map((group) => ({ label: group.name, value: group.name }))) || [],\n    [namespace, rulesConfig]\n  );\n\n  return (\n    <div className={style.flexRow}>\n      <Field\n        data-testid=\"namespace-picker\"\n        label=\"Namespace\"\n        error={errors.namespace?.message}\n        invalid={!!errors.namespace?.message}\n      >\n        <Controller\n          render={({ field: { onChange, ref, ...field } }) => (\n            <VirtualizedSelect\n              {...field}\n              allowCustomValue\n              className={style.input}\n              onChange={(value) => {\n                setValue('group', ''); //reset if namespace changes\n                onChange(value.value);\n              }}\n              options={namespaceOptions}\n              width={42}\n            />\n          )}\n          name=\"namespace\"\n          control={control}\n          rules={{\n            required: { value: true, message: 'Required.' },\n            validate: {\n              pathSeparator: checkForPathSeparator,\n            },\n          }}\n        />\n      </Field>\n      <Field data-testid=\"group-picker\" label=\"Group\" error={errors.group?.message} invalid={!!errors.group?.message}>\n        <Controller\n          render={({ field: { ref, ...field } }) => (\n            <VirtualizedSelect\n              {...field}\n              allowCustomValue\n              options={groupOptions}\n              width={42}\n              onChange={(value) => {\n                setValue('group', value.value ?? '');\n              }}\n              className={style.input}\n            />\n          )}\n          name=\"group\"\n          control={control}\n          rules={{\n            required: { value: true, message: 'Required.' },\n            validate: {\n              pathSeparator: checkForPathSeparator,\n            },\n          }}\n        />\n      </Field>\n    </div>\n  );\n};\n\nconst getStyle = (theme: GrafanaTheme2) => ({\n  flexRow: css({\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n\n    '& > * + *': {\n      marginLeft: theme.spacing(3),\n    },\n  }),\n  input: css({\n    width: '330px !important',\n  }),\n});\n","import { css } from '@emotion/css';\nimport { useFormContext, Controller } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Field, Input, Select, useStyles2 } from '@grafana/ui';\n\nimport { RuleFormType, RuleFormValues } from '../../types/rule-form';\nimport { timeOptions } from '../../utils/time';\n\nimport { GroupAndNamespaceFields } from './GroupAndNamespaceFields';\nimport { PreviewRule } from './PreviewRule';\nimport { RuleEditorSection } from './RuleEditorSection';\n\nexport const CloudEvaluationBehavior = () => {\n  const styles = useStyles2(getStyles);\n  const {\n    register,\n    control,\n    watch,\n    formState: { errors },\n  } = useFormContext<RuleFormValues>();\n\n  const type = watch('type');\n  const dataSourceName = watch('dataSourceName');\n\n  return (\n    <RuleEditorSection stepNo={3} title=\"Set evaluation behavior\">\n      <Field\n        label=\"Pending period\"\n        description='Period the threshold condition must be met to trigger the alert. Selecting \"None\" triggers the alert immediately once the condition is met.'\n      >\n        <div className={styles.flexRow}>\n          <Field invalid={!!errors.forTime?.message} error={errors.forTime?.message} className={styles.inlineField}>\n            <Input\n              {...register('forTime', { pattern: { value: /^\\d+$/, message: 'Must be a positive integer.' } })}\n              width={8}\n            />\n          </Field>\n          <Controller\n            name=\"forTimeUnit\"\n            render={({ field: { onChange, ref, ...field } }) => (\n              <Select\n                {...field}\n                options={timeOptions}\n                onChange={(value) => onChange(value?.value)}\n                width={15}\n                className={styles.timeUnit}\n              />\n            )}\n            control={control}\n          />\n        </div>\n      </Field>\n      {type === RuleFormType.cloudAlerting && dataSourceName && (\n        <GroupAndNamespaceFields rulesSourceName={dataSourceName} />\n      )}\n\n      <PreviewRule />\n    </RuleEditorSection>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  inlineField: css({\n    marginBottom: 0,\n  }),\n  flexRow: css({\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    alignItems: 'flex-start',\n  }),\n  timeUnit: css({\n    marginLeft: theme.spacing(0.5),\n  }),\n});\n","import { useFormContext } from 'react-hook-form';\n\nimport { RuleFormValues } from '../../types/rule-form';\n\nimport { GroupAndNamespaceFields } from './GroupAndNamespaceFields';\nimport { RuleEditorSection } from './RuleEditorSection';\n\nexport function RecordingRulesNameSpaceAndGroupStep() {\n  const { watch } = useFormContext<RuleFormValues>();\n\n  const dataSourceName = watch('dataSourceName');\n\n  if (!dataSourceName) {\n    return null;\n  }\n\n  return (\n    <RuleEditorSection\n      stepNo={3}\n      title={'Add namespace and group'}\n      description=\"Select the Namespace and Group for your recording rule.\"\n    >\n      <GroupAndNamespaceFields rulesSourceName={dataSourceName} />\n    </RuleEditorSection>\n  );\n}\n","import { css } from '@emotion/css';\nimport { useEffect, useMemo, useState } from 'react';\nimport { FormProvider, SubmitErrorHandler, UseFormWatch, useForm } from 'react-hook-form';\nimport { Link, useParams } from 'react-router-dom';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config, locationService } from '@grafana/runtime';\nimport { Button, ConfirmModal, CustomScrollbar, Spinner, Stack, useStyles2 } from '@grafana/ui';\nimport { AppChromeUpdate } from 'app/core/components/AppChrome/AppChromeUpdate';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { contextSrv } from 'app/core/core';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport InfoPausedRule from 'app/features/alerting/unified/components/InfoPausedRule';\nimport {\n  getRuleGroupLocationFromRuleWithLocation,\n  isGrafanaManagedRuleByType,\n  isGrafanaRulerRule,\n  isGrafanaRulerRulePaused,\n  isRecordingRuleByType,\n} from 'app/features/alerting/unified/utils/rules';\nimport { useDispatch } from 'app/types';\nimport { RuleWithLocation } from 'app/types/unified-alerting';\n\nimport {\n  LogMessages,\n  logInfo,\n  trackAlertRuleFormCancelled,\n  trackAlertRuleFormError,\n  trackAlertRuleFormSaved,\n} from '../../../Analytics';\nimport { useDeleteRuleFromGroup } from '../../../hooks/ruleGroup/useDeleteRuleFromGroup';\nimport { useUnifiedAlertingSelector } from '../../../hooks/useUnifiedAlertingSelector';\nimport { saveRuleFormAction } from '../../../state/actions';\nimport { RuleFormType, RuleFormValues } from '../../../types/rule-form';\nimport { initialAsyncRequestState } from '../../../utils/redux';\nimport {\n  DEFAULT_GROUP_EVALUATION_INTERVAL,\n  MANUAL_ROUTING_KEY,\n  formValuesFromExistingRule,\n  getDefaultFormValues,\n  getDefaultQueries,\n  ignoreHiddenQueries,\n  normalizeDefaultAnnotations,\n} from '../../../utils/rule-form';\nimport { GrafanaRuleExporter } from '../../export/GrafanaRuleExporter';\nimport { AlertRuleNameAndMetric } from '../AlertRuleNameInput';\nimport AnnotationsStep from '../AnnotationsStep';\nimport { CloudEvaluationBehavior } from '../CloudEvaluationBehavior';\nimport { GrafanaEvaluationBehavior } from '../GrafanaEvaluationBehavior';\nimport { NotificationsStep } from '../NotificationsStep';\nimport { RecordingRulesNameSpaceAndGroupStep } from '../RecordingRulesNameSpaceAndGroupStep';\nimport { RuleInspector } from '../RuleInspector';\nimport { QueryAndExpressionsStep } from '../query-and-alert-condition/QueryAndExpressionsStep';\nimport { translateRouteParamToRuleType } from '../util';\n\ntype Props = {\n  existing?: RuleWithLocation;\n  prefill?: Partial<RuleFormValues>; // Existing implies we modify existing rule. Prefill only provides default form values\n};\n\nexport const AlertRuleForm = ({ existing, prefill }: Props) => {\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n  const notifyApp = useAppNotification();\n  const [queryParams] = useQueryParams();\n  const [showEditYaml, setShowEditYaml] = useState(false);\n  const [evaluateEvery, setEvaluateEvery] = useState(existing?.group.interval ?? DEFAULT_GROUP_EVALUATION_INTERVAL);\n  const [deleteRuleFromGroup] = useDeleteRuleFromGroup();\n\n  const routeParams = useParams<{ type: string; id: string }>();\n  const ruleType = translateRouteParamToRuleType(routeParams.type);\n  const uidFromParams = routeParams.id;\n\n  const returnTo = !queryParams.returnTo ? '/alerting/list' : String(queryParams.returnTo);\n  const [showDeleteModal, setShowDeleteModal] = useState<boolean>(false);\n\n  const defaultValues: RuleFormValues = useMemo(() => {\n    if (existing) {\n      return formValuesFromExistingRule(existing);\n    }\n\n    if (prefill) {\n      return formValuesFromPrefill(prefill);\n    }\n\n    if (typeof queryParams.defaults === 'string') {\n      return formValuesFromQueryParams(queryParams.defaults, ruleType);\n    }\n\n    return {\n      ...getDefaultFormValues(),\n      condition: 'C',\n      queries: getDefaultQueries(),\n      type: ruleType || RuleFormType.grafana,\n      evaluateEvery: evaluateEvery,\n    };\n  }, [existing, prefill, queryParams, evaluateEvery, ruleType]);\n\n  const formAPI = useForm<RuleFormValues>({\n    mode: 'onSubmit',\n    defaultValues,\n    shouldFocusError: true,\n  });\n\n  const { handleSubmit, watch } = formAPI;\n\n  const type = watch('type');\n  const dataSourceName = watch('dataSourceName');\n\n  const showDataSourceDependantStep = Boolean(type && (isGrafanaManagedRuleByType(type) || !!dataSourceName));\n\n  const submitState = useUnifiedAlertingSelector((state) => state.ruleForm.saveRule) || initialAsyncRequestState;\n  useCleanup((state) => (state.unifiedAlerting.ruleForm.saveRule = initialAsyncRequestState));\n\n  const [conditionErrorMsg, setConditionErrorMsg] = useState('');\n\n  const checkAlertCondition = (msg = '') => {\n    setConditionErrorMsg(msg);\n  };\n\n  const submit = (values: RuleFormValues, exitOnSave: boolean) => {\n    if (conditionErrorMsg !== '') {\n      notifyApp.error(conditionErrorMsg);\n      return;\n    }\n\n    trackAlertRuleFormSaved({ formAction: existing ? 'update' : 'create', ruleType: values.type });\n\n    // when creating a new rule, we save the manual routing setting in local storage\n    if (!existing) {\n      if (values.manualRouting) {\n        localStorage.setItem(MANUAL_ROUTING_KEY, 'true');\n      } else {\n        localStorage.setItem(MANUAL_ROUTING_KEY, 'false');\n      }\n    }\n\n    dispatch(\n      saveRuleFormAction({\n        values: {\n          ...defaultValues,\n          ...values,\n          annotations:\n            values.annotations\n              ?.map(({ key, value }) => ({ key: key.trim(), value: value.trim() }))\n              .filter(({ key, value }) => !!key && !!value) ?? [],\n          labels:\n            values.labels\n              ?.map(({ key, value }) => ({ key: key.trim(), value: value.trim() }))\n              .filter(({ key }) => !!key) ?? [],\n        },\n        existing,\n        redirectOnSave: exitOnSave ? returnTo : undefined,\n        initialAlertRuleName: defaultValues.name,\n        evaluateEvery: evaluateEvery,\n      })\n    );\n  };\n\n  const deleteRule = async () => {\n    if (existing) {\n      const ruleGroupIdentifier = getRuleGroupLocationFromRuleWithLocation(existing);\n\n      await deleteRuleFromGroup.execute(ruleGroupIdentifier, existing.rule);\n      locationService.replace(returnTo);\n    }\n  };\n\n  const onInvalid: SubmitErrorHandler<RuleFormValues> = (errors): void => {\n    trackAlertRuleFormError({\n      grafana_version: config.buildInfo.version,\n      org_id: contextSrv.user.orgId,\n      user_id: contextSrv.user.id,\n      error: Object.keys(errors).toString(),\n      formAction: existing ? 'update' : 'create',\n    });\n    notifyApp.error('There are errors in the form. Please correct them and try again!');\n  };\n\n  const cancelRuleCreation = () => {\n    logInfo(LogMessages.cancelSavingAlertRule);\n    trackAlertRuleFormCancelled({ formAction: existing ? 'update' : 'create' });\n  };\n\n  const evaluateEveryInForm = watch('evaluateEvery');\n  useEffect(() => setEvaluateEvery(evaluateEveryInForm), [evaluateEveryInForm]);\n\n  const actionButtons = (\n    <Stack justifyContent=\"flex-end\" alignItems=\"center\">\n      {existing && (\n        <Button\n          variant=\"primary\"\n          type=\"button\"\n          size=\"sm\"\n          onClick={handleSubmit((values) => submit(values, false), onInvalid)}\n          disabled={submitState.loading}\n        >\n          {submitState.loading && <Spinner className={styles.buttonSpinner} inline={true} />}\n          Save rule\n        </Button>\n      )}\n      <Button\n        variant=\"primary\"\n        type=\"button\"\n        size=\"sm\"\n        onClick={handleSubmit((values) => submit(values, true), onInvalid)}\n        disabled={submitState.loading}\n      >\n        {submitState.loading && <Spinner className={styles.buttonSpinner} inline={true} />}\n        Save rule and exit\n      </Button>\n      <Link to={returnTo}>\n        <Button variant=\"secondary\" disabled={submitState.loading} type=\"button\" onClick={cancelRuleCreation} size=\"sm\">\n          Cancel\n        </Button>\n      </Link>\n      {existing ? (\n        <Button fill=\"outline\" variant=\"destructive\" type=\"button\" onClick={() => setShowDeleteModal(true)} size=\"sm\">\n          Delete\n        </Button>\n      ) : null}\n      {existing && isCortexLokiOrRecordingRule(watch) && (\n        <Button\n          variant=\"secondary\"\n          type=\"button\"\n          onClick={() => setShowEditYaml(true)}\n          disabled={submitState.loading}\n          size=\"sm\"\n        >\n          Edit YAML\n        </Button>\n      )}\n    </Stack>\n  );\n\n  const isPaused = existing && isGrafanaRulerRule(existing.rule) && isGrafanaRulerRulePaused(existing.rule);\n  if (!type) {\n    return null;\n  }\n  return (\n    <FormProvider {...formAPI}>\n      <AppChromeUpdate actions={actionButtons} />\n      <form onSubmit={(e) => e.preventDefault()} className={styles.form}>\n        <div className={styles.contentOuter}>\n          {isPaused && <InfoPausedRule />}\n          <CustomScrollbar autoHeightMin=\"100%\" hideHorizontalTrack={true}>\n            <Stack direction=\"column\" gap={3}>\n              {/* Step 1 */}\n              <AlertRuleNameAndMetric />\n              {/* Step 2 */}\n              <QueryAndExpressionsStep editingExistingRule={!!existing} onDataChange={checkAlertCondition} />\n              {/* Step 3-4-5 */}\n              {showDataSourceDependantStep && (\n                <>\n                  {/* Step 3 */}\n                  {isGrafanaManagedRuleByType(type) && (\n                    <GrafanaEvaluationBehavior\n                      evaluateEvery={evaluateEvery}\n                      setEvaluateEvery={setEvaluateEvery}\n                      existing={Boolean(existing)}\n                      enableProvisionedGroups={false}\n                    />\n                  )}\n\n                  {type === RuleFormType.cloudAlerting && <CloudEvaluationBehavior />}\n\n                  {type === RuleFormType.cloudRecording && <RecordingRulesNameSpaceAndGroupStep />}\n\n                  {/* Step 4 & 5 */}\n                  {/* Notifications step*/}\n                  <NotificationsStep alertUid={uidFromParams} />\n                  {/* Annotations only for cloud and Grafana */}\n                  {!isRecordingRuleByType(type) && <AnnotationsStep />}\n                </>\n              )}\n            </Stack>\n          </CustomScrollbar>\n        </div>\n      </form>\n      {showDeleteModal ? (\n        <ConfirmModal\n          isOpen={true}\n          title=\"Delete rule\"\n          body=\"Deleting this rule will permanently remove it. Are you sure you want to delete this rule?\"\n          confirmText=\"Yes, delete\"\n          icon=\"exclamation-triangle\"\n          onConfirm={deleteRule}\n          onDismiss={() => setShowDeleteModal(false)}\n        />\n      ) : null}\n      {showEditYaml ? (\n        isGrafanaManagedRuleByType(type) ? (\n          <GrafanaRuleExporter alertUid={uidFromParams} onClose={() => setShowEditYaml(false)} />\n        ) : (\n          <RuleInspector onClose={() => setShowEditYaml(false)} />\n        )\n      ) : null}\n    </FormProvider>\n  );\n};\n\nconst isCortexLokiOrRecordingRule = (watch: UseFormWatch<RuleFormValues>) => {\n  const [ruleType, dataSourceName] = watch(['type', 'dataSourceName']);\n\n  return (ruleType === RuleFormType.cloudAlerting || ruleType === RuleFormType.cloudRecording) && dataSourceName !== '';\n};\n\nfunction formValuesFromQueryParams(ruleDefinition: string, type: RuleFormType): RuleFormValues {\n  let ruleFromQueryParams: Partial<RuleFormValues>;\n\n  try {\n    ruleFromQueryParams = JSON.parse(ruleDefinition);\n  } catch (err) {\n    return {\n      ...getDefaultFormValues(),\n      queries: getDefaultQueries(),\n    };\n  }\n\n  return ignoreHiddenQueries({\n    ...getDefaultFormValues(),\n    ...ruleFromQueryParams,\n    annotations: normalizeDefaultAnnotations(ruleFromQueryParams.annotations ?? []),\n    queries: ruleFromQueryParams.queries ?? getDefaultQueries(),\n    type: type || RuleFormType.grafana,\n    evaluateEvery: DEFAULT_GROUP_EVALUATION_INTERVAL,\n  });\n}\n\nfunction formValuesFromPrefill(rule: Partial<RuleFormValues>): RuleFormValues {\n  return ignoreHiddenQueries({\n    ...getDefaultFormValues(),\n    ...rule,\n  });\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  buttonSpinner: css({\n    marginRight: theme.spacing(1),\n  }),\n  form: css({\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  }),\n  contentOuter: css({\n    background: theme.colors.background.primary,\n    overflow: 'hidden',\n    maxWidth: theme.breakpoints.values.xl,\n    flex: 1,\n  }),\n  flexRow: css({\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n  }),\n});\n","import { cloneDeep } from 'lodash';\n\nimport { locationService } from '@grafana/runtime/src';\nimport { Alert, LoadingPlaceholder } from '@grafana/ui/src';\n\nimport { RuleIdentifier, RuleWithLocation } from '../../../types/unified-alerting';\nimport { RulerRuleDTO } from '../../../types/unified-alerting-dto';\n\nimport { AlertRuleForm } from './components/rule-editor/alert-rule-form/AlertRuleForm';\nimport { useRuleWithLocation } from './hooks/useCombinedRule';\nimport { generateCopiedName } from './utils/duplicate';\nimport { stringifyErrorLike } from './utils/misc';\nimport { rulerRuleToFormValues } from './utils/rule-form';\nimport { getRuleName, isAlertingRulerRule, isGrafanaRulerRule, isRecordingRulerRule } from './utils/rules';\nimport { createRelativeUrl } from './utils/url';\n\nexport function CloneRuleEditor({ sourceRuleId }: { sourceRuleId: RuleIdentifier }) {\n  const { loading, result: rule, error } = useRuleWithLocation({ ruleIdentifier: sourceRuleId });\n\n  if (loading) {\n    return <LoadingPlaceholder text=\"Loading the rule...\" />;\n  }\n\n  if (rule) {\n    const ruleClone = cloneRuleDefinition(rule);\n    const formPrefill = rulerRuleToFormValues(ruleClone);\n\n    return <AlertRuleForm prefill={formPrefill} />;\n  }\n\n  if (error) {\n    return (\n      <Alert title=\"Error\" severity=\"error\">\n        {stringifyErrorLike(error)}\n      </Alert>\n    );\n  }\n\n  return (\n    <Alert\n      title=\"Cannot copy the rule. The rule does not exist\"\n      buttonContent=\"Go back to alert list\"\n      onRemove={() => locationService.replace(createRelativeUrl('/alerting/list'))}\n    />\n  );\n}\n\nfunction changeRuleName(rule: RulerRuleDTO, newName: string) {\n  if (isGrafanaRulerRule(rule)) {\n    rule.grafana_alert.title = newName;\n  }\n  if (isAlertingRulerRule(rule)) {\n    rule.alert = newName;\n  }\n\n  if (isRecordingRulerRule(rule)) {\n    rule.record = newName;\n  }\n}\n\nexport function cloneRuleDefinition(rule: RuleWithLocation<RulerRuleDTO>) {\n  const ruleClone = cloneDeep(rule);\n  changeRuleName(\n    ruleClone.rule,\n    generateCopiedName(getRuleName(ruleClone.rule), ruleClone.group.rules.map(getRuleName))\n  );\n\n  if (isGrafanaRulerRule(ruleClone.rule)) {\n    ruleClone.rule.grafana_alert.uid = '';\n\n    // Provisioned alert rules have provisioned alert group which cannot be used in UI\n    if (Boolean(ruleClone.rule.grafana_alert.provenance)) {\n      ruleClone.group = { name: '', rules: ruleClone.group.rules };\n    }\n  }\n\n  return ruleClone;\n}\n","import { Alert, LoadingPlaceholder } from '@grafana/ui';\nimport { RuleIdentifier } from 'app/types/unified-alerting';\n\nimport { AlertWarning } from './AlertWarning';\nimport { AlertRuleForm } from './components/rule-editor/alert-rule-form/AlertRuleForm';\nimport { useRuleWithLocation } from './hooks/useCombinedRule';\nimport { useIsRuleEditable } from './hooks/useIsRuleEditable';\nimport { stringifyErrorLike } from './utils/misc';\nimport * as ruleId from './utils/rule-id';\n\ninterface ExistingRuleEditorProps {\n  identifier: RuleIdentifier;\n  id?: string;\n}\n\nexport function ExistingRuleEditor({ identifier, id }: ExistingRuleEditorProps) {\n  const {\n    loading: loadingAlertRule,\n    result: ruleWithLocation,\n    error,\n  } = useRuleWithLocation({ ruleIdentifier: identifier });\n\n  const ruleSourceName = ruleId.ruleIdentifierToRuleSourceName(identifier);\n\n  const { isEditable, loading: loadingEditable } = useIsRuleEditable(ruleSourceName, ruleWithLocation?.rule);\n\n  const loading = loadingAlertRule || loadingEditable;\n\n  if (loading) {\n    return <LoadingPlaceholder text=\"Loading rule...\" />;\n  }\n\n  if (error) {\n    return (\n      <Alert severity=\"error\" title=\"Failed to load rule\">\n        {stringifyErrorLike(error)}\n      </Alert>\n    );\n  }\n\n  if (!ruleWithLocation) {\n    return <AlertWarning title=\"Rule not found\">Sorry! This rule does not exist.</AlertWarning>;\n  }\n\n  if (isEditable === false) {\n    return <AlertWarning title=\"Cannot edit rule\">Sorry! You do not have permission to edit this rule.</AlertWarning>;\n  }\n\n  return <AlertRuleForm existing={ruleWithLocation} />;\n}\n","import { useCallback } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { NavModelItem } from '@grafana/data';\nimport { withErrorBoundary } from '@grafana/ui';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { useDispatch } from 'app/types';\nimport { RuleIdentifier } from 'app/types/unified-alerting';\n\nimport { AlertWarning } from './AlertWarning';\nimport { CloneRuleEditor } from './CloneRuleEditor';\nimport { ExistingRuleEditor } from './ExistingRuleEditor';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { AlertRuleForm } from './components/rule-editor/alert-rule-form/AlertRuleForm';\nimport { useURLSearchParams } from './hooks/useURLSearchParams';\nimport { fetchRulesSourceBuildInfoAction } from './state/actions';\nimport { useRulesAccess } from './utils/accessControlHooks';\nimport * as ruleId from './utils/rule-id';\n\ntype RuleEditorProps = GrafanaRouteComponentProps<{\n  id?: string;\n  type?: 'recording' | 'alerting' | 'grafana-recording';\n}>;\n\nconst defaultPageNav: Partial<NavModelItem> = {\n  icon: 'bell',\n  id: 'alert-rule-view',\n};\n\n// sadly we only get the \"type\" when a new rule is being created, when editing an existing recording rule we can't actually know it from the URL\nconst getPageNav = (identifier?: RuleIdentifier, type?: 'recording' | 'alerting' | 'grafana-recording') => {\n  if (type === 'recording' || type === 'grafana-recording') {\n    if (identifier) {\n      // this branch should never trigger actually, the type param isn't used when editing rules\n      return { ...defaultPageNav, id: 'alert-rule-edit', text: 'Edit recording rule' };\n    } else {\n      return { ...defaultPageNav, id: 'alert-rule-add', text: 'New recording rule' };\n    }\n  }\n\n  if (identifier) {\n    // keep this one ambiguous, don't mentiond a specific alert type here\n    return { ...defaultPageNav, id: 'alert-rule-edit', text: 'Edit rule' };\n  } else {\n    return { ...defaultPageNav, id: 'alert-rule-add', text: 'New alert rule' };\n  }\n};\n\nconst RuleEditor = ({ match }: RuleEditorProps) => {\n  const dispatch = useDispatch();\n  const [searchParams] = useURLSearchParams();\n\n  const { type } = match.params;\n  const id = ruleId.getRuleIdFromPathname(match.params);\n  const identifier = ruleId.tryParse(id, true);\n\n  const copyFromId = searchParams.get('copyFrom') ?? undefined;\n  const copyFromIdentifier = ruleId.tryParse(copyFromId);\n\n  const { loading = true } = useAsync(async () => {\n    if (identifier) {\n      await dispatch(fetchRulesSourceBuildInfoAction({ rulesSourceName: identifier.ruleSourceName }));\n    }\n    if (copyFromIdentifier) {\n      await dispatch(fetchRulesSourceBuildInfoAction({ rulesSourceName: copyFromIdentifier.ruleSourceName }));\n    }\n  }, [dispatch]);\n\n  const { canCreateGrafanaRules, canCreateCloudRules, canEditRules } = useRulesAccess();\n\n  const getContent = useCallback(() => {\n    if (loading) {\n      return;\n    }\n\n    if (!identifier && !canCreateGrafanaRules && !canCreateCloudRules) {\n      return <AlertWarning title=\"Cannot create rules\">Sorry! You are not allowed to create rules.</AlertWarning>;\n    }\n\n    if (identifier && !canEditRules(identifier.ruleSourceName)) {\n      return <AlertWarning title=\"Cannot edit rules\">Sorry! You are not allowed to edit rules.</AlertWarning>;\n    }\n\n    if (identifier) {\n      return <ExistingRuleEditor key={id} identifier={identifier} id={id} />;\n    }\n\n    if (copyFromIdentifier) {\n      return <CloneRuleEditor sourceRuleId={copyFromIdentifier} />;\n    }\n    // new alert rule\n    return <AlertRuleForm />;\n  }, [canCreateCloudRules, canCreateGrafanaRules, canEditRules, copyFromIdentifier, id, identifier, loading]);\n\n  return (\n    <AlertingPageWrapper isLoading={loading} navId=\"alert-list\" pageNav={getPageNav(identifier, type)}>\n      {getContent()}\n    </AlertingPageWrapper>\n  );\n};\n\nexport default withErrorBoundary(RuleEditor, { style: 'page' });\n","import { memo, useCallback, useEffect, useMemo, useState } from 'react';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport { useAsync } from 'react-use';\n\nimport { Button, CustomScrollbar, LinkButton, LoadingPlaceholder, Stack } from '@grafana/ui';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\n\nimport { AppChromeUpdate } from '../../../../../../core/components/AppChrome/AppChromeUpdate';\nimport {\n  PostableRulerRuleGroupDTO,\n  RulerRuleDTO,\n  RulerRuleGroupDTO,\n} from '../../../../../../types/unified-alerting-dto';\nimport { alertRuleApi } from '../../../api/alertRuleApi';\nimport { fetchRulerRulesGroup } from '../../../api/ruler';\nimport { useDataSourceFeatures } from '../../../hooks/useCombinedRule';\nimport { RuleFormValues } from '../../../types/rule-form';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../../utils/datasource';\nimport { DEFAULT_GROUP_EVALUATION_INTERVAL, formValuesToRulerGrafanaRuleDTO } from '../../../utils/rule-form';\nimport { isGrafanaRulerRule } from '../../../utils/rules';\nimport { FileExportPreview } from '../../export/FileExportPreview';\nimport { GrafanaExportDrawer } from '../../export/GrafanaExportDrawer';\nimport { ExportFormats, allGrafanaExportProviders } from '../../export/providers';\nimport { AlertRuleNameAndMetric } from '../AlertRuleNameInput';\nimport AnnotationsStep from '../AnnotationsStep';\nimport { GrafanaEvaluationBehavior } from '../GrafanaEvaluationBehavior';\nimport { NotificationsStep } from '../NotificationsStep';\nimport { QueryAndExpressionsStep } from '../query-and-alert-condition/QueryAndExpressionsStep';\n\ninterface ModifyExportRuleFormProps {\n  alertUid: string;\n  ruleForm?: RuleFormValues;\n}\n\nexport function ModifyExportRuleForm({ ruleForm, alertUid }: ModifyExportRuleFormProps) {\n  const formAPI = useForm<RuleFormValues>({\n    mode: 'onSubmit',\n    defaultValues: ruleForm,\n    shouldFocusError: true,\n  });\n  const [queryParams] = useQueryParams();\n\n  const existing = Boolean(ruleForm); // always should be true\n  const notifyApp = useAppNotification();\n  const returnTo = !queryParams.returnTo ? '/alerting/list' : String(queryParams.returnTo);\n\n  const [exportData, setExportData] = useState<RuleFormValues | undefined>(undefined);\n\n  const [conditionErrorMsg, setConditionErrorMsg] = useState('');\n  const [evaluateEvery, setEvaluateEvery] = useState(ruleForm?.evaluateEvery ?? DEFAULT_GROUP_EVALUATION_INTERVAL);\n\n  const onInvalid = (): void => {\n    notifyApp.error('There are errors in the form. Please correct them and try again!');\n  };\n\n  const checkAlertCondition = (msg = '') => {\n    setConditionErrorMsg(msg);\n  };\n\n  const submit = (exportData: RuleFormValues | undefined) => {\n    if (conditionErrorMsg !== '') {\n      notifyApp.error(conditionErrorMsg);\n      return;\n    }\n    setExportData(exportData);\n  };\n\n  const onClose = useCallback(() => {\n    setExportData(undefined);\n  }, [setExportData]);\n\n  const actionButtons = [\n    <LinkButton href={returnTo} key=\"cancel\" size=\"sm\" variant=\"secondary\" onClick={() => submit(undefined)}>\n      Cancel\n    </LinkButton>,\n    <Button key=\"export-rule\" size=\"sm\" onClick={formAPI.handleSubmit((formValues) => submit(formValues), onInvalid)}>\n      Export\n    </Button>,\n  ];\n\n  return (\n    <>\n      <FormProvider {...formAPI}>\n        <AppChromeUpdate actions={actionButtons} />\n        <form onSubmit={(e) => e.preventDefault()}>\n          <div>\n            <CustomScrollbar autoHeightMin=\"100%\" hideHorizontalTrack={true}>\n              <Stack direction=\"column\" gap={3}>\n                {/* Step 1 */}\n                <AlertRuleNameAndMetric />\n                {/* Step 2 */}\n                <QueryAndExpressionsStep editingExistingRule={existing} onDataChange={checkAlertCondition} />\n                {/* Step 3-4-5 */}\n\n                <GrafanaEvaluationBehavior\n                  evaluateEvery={evaluateEvery}\n                  setEvaluateEvery={setEvaluateEvery}\n                  existing={Boolean(existing)}\n                  enableProvisionedGroups={true}\n                />\n\n                {/* Step 4 & 5 */}\n                {/* Notifications step*/}\n                <NotificationsStep alertUid={alertUid} />\n                {/* Annotations only for cloud and Grafana */}\n                <AnnotationsStep />\n              </Stack>\n            </CustomScrollbar>\n          </div>\n        </form>\n        {exportData && <GrafanaRuleDesignExporter exportValues={exportData} onClose={onClose} uid={alertUid} />}\n      </FormProvider>\n    </>\n  );\n}\n\nconst useGetGroup = (nameSpaceUID: string, group: string) => {\n  const { dsFeatures } = useDataSourceFeatures(GRAFANA_RULES_SOURCE_NAME);\n\n  const rulerConfig = dsFeatures?.rulerConfig;\n\n  const targetGroup = useAsync(async () => {\n    return rulerConfig ? await fetchRulerRulesGroup(rulerConfig, nameSpaceUID, group) : undefined;\n  }, [rulerConfig, nameSpaceUID, group]);\n\n  return targetGroup;\n};\n\ninterface GrafanaRuleDesignExportPreviewProps {\n  exportFormat: ExportFormats;\n  onClose: () => void;\n  exportValues: RuleFormValues;\n  uid: string;\n}\nexport const getPayloadToExport = (\n  uid: string,\n  formValues: RuleFormValues,\n  existingGroup: RulerRuleGroupDTO<RulerRuleDTO> | null | undefined\n): PostableRulerRuleGroupDTO => {\n  const grafanaRuleDto = formValuesToRulerGrafanaRuleDTO(formValues);\n\n  const updatedRule = { ...grafanaRuleDto, grafana_alert: { ...grafanaRuleDto.grafana_alert, uid: uid } };\n  if (existingGroup?.rules) {\n    // we have to update the rule in the group in the same position if it exists, otherwise we have to add it at the end\n    let alreadyExistsInGroup = false;\n    const updatedRules = existingGroup.rules.map((rule: RulerRuleDTO) => {\n      if (isGrafanaRulerRule(rule) && rule.grafana_alert.uid === uid) {\n        alreadyExistsInGroup = true;\n        return updatedRule;\n      } else {\n        return rule;\n      }\n    });\n    if (!alreadyExistsInGroup) {\n      // we have to add the updated rule at the end of the group\n      updatedRules.push(updatedRule);\n    }\n    return {\n      ...existingGroup,\n      rules: updatedRules,\n    };\n  } else {\n    // we have to create a new group with the updated rule\n    return {\n      name: existingGroup?.name ?? '',\n      rules: [updatedRule],\n    };\n  }\n};\n\nconst useGetPayloadToExport = (values: RuleFormValues, uid: string) => {\n  const rulerGroupDto = useGetGroup(values.folder?.uid ?? '', values.group);\n  const payload: PostableRulerRuleGroupDTO = useMemo(() => {\n    return getPayloadToExport(uid, values, rulerGroupDto?.value);\n  }, [uid, rulerGroupDto, values]);\n  return { payload, loadingGroup: rulerGroupDto.loading };\n};\n\nconst GrafanaRuleDesignExportPreview = ({\n  exportFormat,\n  exportValues,\n  onClose,\n  uid,\n}: GrafanaRuleDesignExportPreviewProps) => {\n  const [getExport, exportData] = alertRuleApi.endpoints.exportModifiedRuleGroup.useMutation();\n  const { loadingGroup, payload } = useGetPayloadToExport(exportValues, uid);\n\n  const nameSpaceUID = exportValues.folder?.uid ?? '';\n\n  useEffect(() => {\n    !loadingGroup && getExport({ payload, format: exportFormat, nameSpaceUID });\n  }, [nameSpaceUID, exportFormat, payload, getExport, loadingGroup]);\n\n  if (exportData.isLoading) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n\n  const downloadFileName = `modify-export-${payload.name}-${uid}-${new Date().getTime()}`;\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={exportData.data ?? ''}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n};\n\ninterface GrafanaRuleDesignExporterProps {\n  onClose: () => void;\n  exportValues: RuleFormValues;\n  uid: string;\n}\n\nexport const GrafanaRuleDesignExporter = memo(({ onClose, exportValues, uid }: GrafanaRuleDesignExporterProps) => {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      title={'Export Group'}\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaRuleDesignExportPreview\n        exportFormat={activeTab}\n        onClose={onClose}\n        exportValues={exportValues}\n        uid={uid}\n      />\n    </GrafanaExportDrawer>\n  );\n});\n\nGrafanaRuleDesignExporter.displayName = 'GrafanaRuleDesignExporter';\n","import * as React from 'react';\nimport { useMemo } from 'react';\n\nimport { locationService } from '@grafana/runtime';\nimport { Alert, LoadingPlaceholder } from '@grafana/ui';\n\nimport { GrafanaRouteComponentProps } from '../../../../../core/navigation/types';\nimport { RuleIdentifier } from '../../../../../types/unified-alerting';\nimport { useRuleWithLocation } from '../../hooks/useCombinedRule';\nimport { stringifyErrorLike } from '../../utils/misc';\nimport { formValuesFromExistingRule } from '../../utils/rule-form';\nimport * as ruleId from '../../utils/rule-id';\nimport { isGrafanaRulerRule } from '../../utils/rules';\nimport { createRelativeUrl } from '../../utils/url';\nimport { AlertingPageWrapper } from '../AlertingPageWrapper';\nimport { ModifyExportRuleForm } from '../rule-editor/alert-rule-form/ModifyExportRuleForm';\n\ninterface GrafanaModifyExportProps extends GrafanaRouteComponentProps<{ id?: string }> {}\n\nexport default function GrafanaModifyExport({ match }: GrafanaModifyExportProps) {\n  const ruleIdentifier = useMemo<RuleIdentifier | undefined>(() => {\n    return ruleId.tryParse(match.params.id, true);\n  }, [match.params.id]);\n\n  if (!ruleIdentifier) {\n    return (\n      <ModifyExportWrapper>\n        <Alert title=\"Invalid rule ID\" severity=\"error\">\n          The rule UID in the page URL is invalid. Please check the URL and try again.\n        </Alert>\n      </ModifyExportWrapper>\n    );\n  }\n\n  return (\n    <ModifyExportWrapper>\n      <RuleModifyExport ruleIdentifier={ruleIdentifier} />\n    </ModifyExportWrapper>\n  );\n}\n\ninterface ModifyExportWrapperProps {\n  children: React.ReactNode;\n}\n\nfunction ModifyExportWrapper({ children }: ModifyExportWrapperProps) {\n  return (\n    <AlertingPageWrapper\n      navId=\"alert-list\"\n      pageNav={{\n        text: 'Modify export',\n        subTitle:\n          'Modify the current alert rule and export the rule definition in the format of your choice. Any changes you make will not be saved.',\n      }}\n    >\n      {children}\n    </AlertingPageWrapper>\n  );\n}\n\nfunction RuleModifyExport({ ruleIdentifier }: { ruleIdentifier: RuleIdentifier }) {\n  const { loading, error, result: rulerRule } = useRuleWithLocation({ ruleIdentifier: ruleIdentifier });\n\n  if (loading) {\n    return <LoadingPlaceholder text=\"Loading the rule...\" />;\n  }\n\n  if (error) {\n    return (\n      <Alert title=\"Cannot load modify export\" severity=\"error\">\n        {stringifyErrorLike(error)}\n      </Alert>\n    );\n  }\n\n  if (!rulerRule && !loading) {\n    // alert rule does not exist\n    return (\n      <Alert\n        title=\"Cannot load the rule. The rule does not exist\"\n        buttonContent=\"Go back to alert list\"\n        onRemove={() => locationService.replace(createRelativeUrl('/alerting/list'))}\n      />\n    );\n  }\n\n  if (rulerRule && !isGrafanaRulerRule(rulerRule.rule)) {\n    // alert rule exists but is not a grafana-managed rule\n    return (\n      <Alert\n        title=\"This rule is not a Grafana-managed alert rule\"\n        buttonContent=\"Go back to alert list\"\n        onRemove={() => locationService.replace(createRelativeUrl('/alerting/list'))}\n      />\n    );\n  }\n\n  if (rulerRule && isGrafanaRulerRule(rulerRule.rule)) {\n    return (\n      <ModifyExportRuleForm\n        ruleForm={formValuesFromExistingRule(rulerRule)}\n        alertUid={rulerRule.rule.grafana_alert.uid}\n      />\n    );\n  }\n\n  return <Alert title=\"Unknown error\" />;\n}\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { TimeOptions } from '../../types/time';\n\nexport function PromDurationDocs() {\n  const styles = useStyles2(getPromDurationStyles);\n  return (\n    <div>\n      Prometheus duration format consist of a number followed by a time unit.\n      <br />\n      Different units can be combined for more granularity.\n      <hr />\n      <div className={styles.list}>\n        <div className={styles.header}>\n          <div>Symbol</div>\n          <div>Time unit</div>\n          <div>Example</div>\n        </div>\n        <PromDurationDocsTimeUnit unit={TimeOptions.seconds} name=\"seconds\" example=\"20s\" />\n        <PromDurationDocsTimeUnit unit={TimeOptions.minutes} name=\"minutes\" example=\"10m\" />\n        <PromDurationDocsTimeUnit unit={TimeOptions.hours} name=\"hours\" example=\"4h\" />\n        <PromDurationDocsTimeUnit unit={TimeOptions.days} name=\"days\" example=\"3d\" />\n        <PromDurationDocsTimeUnit unit={TimeOptions.weeks} name=\"weeks\" example=\"2w\" />\n        <div className={styles.examples}>\n          <div>Multiple units combined</div>\n          <code>1m30s, 2h30m20s, 1w2d</code>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction PromDurationDocsTimeUnit({ unit, name, example }: { unit: TimeOptions; name: string; example: string }) {\n  const styles = useStyles2(getPromDurationStyles);\n\n  return (\n    <>\n      <div className={styles.unit}>{unit}</div>\n      <div>{name}</div>\n      <code>{example}</code>\n    </>\n  );\n}\n\nconst getPromDurationStyles = (theme: GrafanaTheme2) => ({\n  unit: css({\n    fontWeight: theme.typography.fontWeightBold,\n  }),\n  list: css({\n    display: 'grid',\n    gridTemplateColumns: 'max-content 1fr 2fr',\n    gap: theme.spacing(1, 3),\n  }),\n  header: css({\n    display: 'contents',\n    fontWeight: theme.typography.fontWeightBold,\n  }),\n  examples: css({\n    display: 'contents',\n    '& > div': {\n      gridColumn: '1 / span 2',\n    },\n  }),\n});\n","import { forwardRef } from 'react';\n\nimport { Icon, Input } from '@grafana/ui';\n\nimport { HoverCard } from '../HoverCard';\n\nimport { PromDurationDocs } from './PromDurationDocs';\n\nexport const PromDurationInput = forwardRef<HTMLInputElement, React.ComponentProps<typeof Input>>((props, ref) => {\n  return (\n    <Input\n      suffix={\n        <HoverCard content={<PromDurationDocs />} disabled={false}>\n          <Icon name=\"info-circle\" size=\"lg\" />\n        </HoverCard>\n      }\n      {...props}\n      ref={ref}\n    />\n  );\n});\n\nPromDurationInput.displayName = 'PromDurationInput';\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getFormStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      alignItems: 'center',\n      display: 'flex',\n      flexFlow: 'row nowrap',\n\n      '& > * + *': {\n        marginLeft: theme.spacing(1),\n      },\n    }),\n    input: css({\n      flex: 1,\n    }),\n    promDurationInput: css({\n      maxWidth: theme.spacing(32),\n    }),\n    timingFormContainer: css({\n      padding: theme.spacing(1),\n    }),\n    linkText: css({\n      textDecoration: 'underline',\n    }),\n    collapse: css({\n      border: 'none',\n      background: 'none',\n      color: theme.colors.text.primary,\n    }),\n  };\n};\n","export const routeTimingsFields = {\n  groupWait: {\n    label: 'Group wait',\n    description:\n      'The wait time before sending the first notification for a new group of alerts. If empty, it is inherited from the parent policy.',\n    ariaLabel: 'Group wait value',\n  },\n  groupInterval: {\n    label: 'Group interval',\n    description:\n      'The wait time before sending a notification about changes in the alert group after the first notification has been sent. If empty, it is inherited from the parent policy.',\n    ariaLabel: 'Group interval value',\n  },\n  repeatInterval: {\n    label: 'Repeat interval',\n    description: 'The wait time before resending a notification that has already been sent successfully.',\n    ariaLabel: 'Repeat interval value',\n  },\n};\n","export type TimingOptions = {\n  group_wait?: string;\n  group_interval?: string;\n  repeat_interval?: string;\n};\n\nexport const TIMING_OPTIONS_DEFAULTS: Required<TimingOptions> = {\n  group_wait: '30s',\n  group_interval: '5m',\n  repeat_interval: '4h',\n};\n","import { useFormContext } from 'react-hook-form';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Field, Input, Stack, Text } from '@grafana/ui';\n\nimport { RuleFormType, RuleFormValues } from '../../types/rule-form';\nimport { isCloudRecordingRuleByType, isGrafanaRecordingRuleByType, isRecordingRuleByType } from '../../utils/rules';\n\nimport { RuleEditorSection } from './RuleEditorSection';\n\nconst recordingRuleNameValidationPattern = (type: RuleFormType) => ({\n  message: isGrafanaRecordingRuleByType(type)\n    ? 'Recording rule metric must be valid metric name. It may only contain letters, numbers, and colons. It may not contain whitespace.'\n    : 'Recording rule name must be valid metric name. It may only contain letters, numbers, and colons. It may not contain whitespace.',\n  value: /^[a-zA-Z_:][a-zA-Z0-9_:]*$/,\n});\n\n/**\n *  This component renders the input for the alert rule name.\n *  In case of recording rule, it also renders the input for the recording rule metric, and it validates this value.\n */\nexport const AlertRuleNameAndMetric = () => {\n  const {\n    register,\n    watch,\n    formState: { errors },\n  } = useFormContext<RuleFormValues>();\n\n  const ruleFormType = watch('type');\n  if (!ruleFormType) {\n    return null;\n  }\n  const isRecording = isRecordingRuleByType(ruleFormType);\n  const isGrafanaRecordingRule = isGrafanaRecordingRuleByType(ruleFormType);\n  const isCloudRecordingRule = isCloudRecordingRuleByType(ruleFormType);\n  const recordingLabel = isGrafanaRecordingRule ? 'recording rule and metric' : 'recording rule';\n  const entityName = isRecording ? recordingLabel : 'alert rule';\n  return (\n    <RuleEditorSection\n      stepNo={1}\n      title={`Enter ${entityName} name`}\n      description={\n        <Text variant=\"bodySmall\" color=\"secondary\">\n          Enter a name to identify your {entityName}.\n        </Text>\n      }\n    >\n      <Stack direction=\"column\">\n        <Field label=\"Name\" error={errors?.name?.message} invalid={!!errors.name?.message}>\n          <Input\n            data-testid={selectors.components.AlertRules.ruleNameField}\n            id=\"name\"\n            width={38}\n            {...register('name', {\n              required: { value: true, message: 'Must enter a name' },\n              pattern: isCloudRecordingRule\n                ? recordingRuleNameValidationPattern(RuleFormType.cloudRecording)\n                : undefined,\n            })}\n            aria-label=\"name\"\n            placeholder={`Give your ${entityName} a name`}\n          />\n        </Field>\n        {isGrafanaRecordingRule && (\n          <Field label=\"Metric\" error={errors?.metric?.message} invalid={!!errors.metric?.message}>\n            <Input\n              id=\"metric\"\n              width={38}\n              {...register('metric', {\n                required: { value: true, message: 'Must enter a metric name' },\n                pattern: recordingRuleNameValidationPattern(RuleFormType.grafanaRecording),\n              })}\n              aria-label=\"metric\"\n              placeholder={`Give your metric a name`}\n            />\n          </Field>\n        )}\n      </Stack>\n    </RuleEditorSection>\n  );\n};\n","import { Stack } from '@grafana/ui';\n\nimport { ContactPointReceiverTitleRow } from '../../../../contact-points/ContactPoint';\nimport { RECEIVER_META_KEY, RECEIVER_PLUGIN_META_KEY } from '../../../../contact-points/constants';\nimport { ReceiverConfigWithMetadata, getReceiverDescription } from '../../../../contact-points/utils';\n\ninterface ContactPointDetailsProps {\n  receivers: ReceiverConfigWithMetadata[];\n}\n\nexport const ContactPointDetails = ({ receivers }: ContactPointDetailsProps) => {\n  return (\n    <Stack direction=\"column\" gap={0}>\n      <div>\n        {receivers.map((receiver, index) => {\n          const metadata = receiver[RECEIVER_META_KEY];\n          const pluginMetadata = receiver[RECEIVER_PLUGIN_META_KEY];\n          const key = metadata.name + index;\n          return (\n            <ContactPointReceiverTitleRow\n              key={key}\n              name={metadata.name}\n              type={receiver.type}\n              description={getReceiverDescription(receiver)}\n              pluginMetadata={pluginMetadata}\n            />\n          );\n        })}\n      </div>\n    </Stack>\n  );\n};\n","import { css, cx, keyframes } from '@emotion/css';\nimport * as React from 'react';\nimport { useCallback, useEffect, useState } from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport {\n  ActionMeta,\n  Field,\n  FieldValidationMessage,\n  IconButton,\n  Select,\n  Stack,\n  TextLink,\n  useStyles2,\n} from '@grafana/ui';\nimport { RuleFormValues } from 'app/features/alerting/unified/types/rule-form';\nimport { createRelativeUrl } from 'app/features/alerting/unified/utils/url';\n\nimport { ContactPointWithMetadata } from '../../../../contact-points/utils';\n\nexport interface ContactPointSelectorProps {\n  alertManager: string;\n  options: Array<{\n    label: string;\n    value: ContactPointWithMetadata;\n    description: React.JSX.Element;\n  }>;\n  onSelectContactPoint: (contactPoint?: ContactPointWithMetadata) => void;\n  refetchReceivers: () => Promise<unknown>;\n}\n\nconst MAX_CONTACT_POINTS_RENDERED = 500;\n\nexport function ContactPointSelector({\n  alertManager,\n  options,\n  onSelectContactPoint,\n  refetchReceivers,\n}: ContactPointSelectorProps) {\n  const styles = useStyles2(getStyles);\n  const { control, watch, trigger } = useFormContext<RuleFormValues>();\n\n  const contactPointInForm = watch(`contactPoints.${alertManager}.selectedContactPoint`);\n\n  const selectedContactPointWithMetadata = options.find((option) => option.value.name === contactPointInForm)?.value;\n  const selectedContactPointSelectableValue: SelectableValue<ContactPointWithMetadata> =\n    selectedContactPointWithMetadata\n      ? { value: selectedContactPointWithMetadata, label: selectedContactPointWithMetadata.name }\n      : { value: undefined, label: '' };\n\n  const LOADING_SPINNER_DURATION = 1000;\n\n  const [loadingContactPoints, setLoadingContactPoints] = useState(false);\n  // we need to keep track if the fetching takes more than 1 second, so we can show the loading spinner until the fetching is done\n  const sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n\n  // if we have a contact point selected, check if it still exists in the event that someone has deleted it\n  const validateContactPoint = useCallback(() => {\n    if (contactPointInForm) {\n      trigger(`contactPoints.${alertManager}.selectedContactPoint`, { shouldFocus: true });\n    }\n  }, [alertManager, contactPointInForm, trigger]);\n\n  const onClickRefresh = () => {\n    setLoadingContactPoints(true);\n    Promise.all([refetchReceivers(), sleep(LOADING_SPINNER_DURATION)]).finally(() => {\n      setLoadingContactPoints(false);\n      validateContactPoint();\n    });\n  };\n\n  // validate the contact point and check if it still exists when mounting the component\n  useEffect(() => {\n    validateContactPoint();\n  }, [validateContactPoint]);\n\n  return (\n    <Stack direction=\"column\">\n      <Stack direction=\"row\" alignItems=\"center\">\n        <Field label=\"Contact point\" data-testid=\"contact-point-picker\">\n          <Controller\n            render={({ field: { onChange, ref, ...field }, fieldState: { error } }) => (\n              <>\n                <div className={styles.contactPointsSelector}>\n                  <Select<ContactPointWithMetadata>\n                    virtualized={options.length > MAX_CONTACT_POINTS_RENDERED}\n                    aria-label=\"Contact point\"\n                    defaultValue={selectedContactPointSelectableValue}\n                    onChange={(value: SelectableValue<ContactPointWithMetadata>, _: ActionMeta) => {\n                      onChange(value?.value?.name);\n                      onSelectContactPoint(value?.value);\n                    }}\n                    // We are passing a JSX.Element into the \"description\" for options, which isn't how the TS typings are defined.\n                    // The regular Select component will render it just fine, but we can't update the typings because SelectableValue\n                    // is shared with other components where the \"description\" _has_ to be a string.\n                    // I've tried unsuccessfully to separate the typings just I'm giving up :'(\n                    // @ts-ignore\n                    options={options}\n                    width={50}\n                  />\n                  <div className={styles.contactPointsInfo}>\n                    <IconButton\n                      name=\"sync\"\n                      onClick={onClickRefresh}\n                      aria-label=\"Refresh contact points\"\n                      tooltip=\"Refresh contact points list\"\n                      className={cx(styles.refreshButton, {\n                        [styles.loading]: loadingContactPoints,\n                      })}\n                    />\n                    <LinkToContactPoints />\n                  </div>\n                </div>\n\n                {/* Error can come from the required validation we have in here, or from the manual setError we do in the parent component.\n                The only way I found to check the custom error is to check if the field has a value and if it's not in the options. */}\n\n                {error && <FieldValidationMessage>{error?.message}</FieldValidationMessage>}\n              </>\n            )}\n            rules={{\n              required: {\n                value: true,\n                message: 'Contact point is required.',\n              },\n              validate: {\n                contactPointExists: (value: string) => {\n                  if (options.some((option) => option.value.name === value)) {\n                    return true;\n                  }\n                  return `Contact point ${contactPointInForm} does not exist.`;\n                },\n              },\n            }}\n            control={control}\n            name={`contactPoints.${alertManager}.selectedContactPoint`}\n          />\n        </Field>\n      </Stack>\n    </Stack>\n  );\n}\nfunction LinkToContactPoints() {\n  const hrefToContactPoints = '/alerting/notifications';\n  return (\n    <TextLink external href={createRelativeUrl(hrefToContactPoints)} aria-label=\"View or create contact points\">\n      View or create contact points\n    </TextLink>\n  );\n}\n\nconst rotation = keyframes({\n  from: {\n    transform: 'rotate(720deg)',\n  },\n  to: {\n    transform: 'rotate(0deg)',\n  },\n});\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  contactPointsSelector: css({\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: theme.spacing(1),\n    marginTop: theme.spacing(1),\n  }),\n  contactPointsInfo: css({\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: theme.spacing(1),\n  }),\n  refreshButton: css({\n    color: theme.colors.text.secondary,\n    cursor: 'pointer',\n    borderRadius: theme.shape.radius.circle,\n    overflow: 'hidden',\n  }),\n  loading: css({\n    pointerEvents: 'none',\n    [theme.transitions.handleMotion('no-preference')]: {\n      animation: `${rotation} 2s infinite linear`,\n    },\n    [theme.transitions.handleMotion('reduce')]: {\n      animation: `${rotation} 6s infinite linear`,\n    },\n  }),\n  warn: css({\n    color: theme.colors.warning.text,\n  }),\n});\n","import { useFormContext, Controller } from 'react-hook-form';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Field, MultiSelect, useStyles2 } from '@grafana/ui';\nimport { alertmanagerApi } from 'app/features/alerting/unified/api/alertmanagerApi';\nimport { RuleFormValues } from 'app/features/alerting/unified/types/rule-form';\nimport { timeIntervalToString } from 'app/features/alerting/unified/utils/alertmanager';\nimport { mapMultiSelectValueToStrings } from 'app/features/alerting/unified/utils/amroutes';\n\nimport { getFormStyles } from '../../../../notification-policies/formStyles';\n\nexport interface MuteTimingFieldsProps {\n  alertManager: string;\n}\n\nexport function MuteTimingFields({ alertManager }: MuteTimingFieldsProps) {\n  const styles = useStyles2(getFormStyles);\n  const {\n    control,\n    formState: { errors },\n  } = useFormContext<RuleFormValues>();\n\n  const muteTimingOptions = useSelectableMuteTimings();\n  return (\n    <Field\n      label=\"Mute timings\"\n      data-testid=\"am-mute-timing-select\"\n      description=\"Select a mute timing to define when not to send notifications for this alert rule\"\n      invalid={!!errors.contactPoints?.[alertManager]?.muteTimeIntervals}\n    >\n      <Controller\n        render={({ field: { onChange, ref, ...field } }) => (\n          <MultiSelect\n            aria-label=\"Mute timings\"\n            {...field}\n            className={styles.input}\n            onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n            options={muteTimingOptions}\n            placeholder=\"Select mute timings...\"\n          />\n        )}\n        control={control}\n        name={`contactPoints.${alertManager}.muteTimeIntervals`}\n      />\n    </Field>\n  );\n}\n\nfunction useSelectableMuteTimings(): Array<SelectableValue<string>> {\n  const fetchGrafanaMuteTimings = alertmanagerApi.endpoints.getMuteTimingList.useQuery(undefined, {\n    refetchOnFocus: true,\n    refetchOnReconnect: true,\n    selectFromResult: (result) => ({\n      ...result,\n      mutetimings: result.data\n        ? result.data.map((value) => ({\n            value: value.name,\n            label: value.name,\n            description: value.time_intervals.map((interval) => timeIntervalToString(interval)).join(', AND '),\n          }))\n        : [],\n    }),\n  });\n  return fetchGrafanaMuteTimings.mutetimings;\n}\n","import { useFormContext } from 'react-hook-form';\n\nimport { Field, useStyles2 } from '@grafana/ui';\nimport { RuleFormValues } from 'app/features/alerting/unified/types/rule-form';\nimport { promDurationValidator, repeatIntervalValidator } from 'app/features/alerting/unified/utils/amroutes';\n\nimport { PromDurationInput } from '../../../../notification-policies/PromDurationInput';\nimport { getFormStyles } from '../../../../notification-policies/formStyles';\nimport { routeTimingsFields } from '../../../../notification-policies/routeTimingsFields';\nimport { TIMING_OPTIONS_DEFAULTS } from '../../../../notification-policies/timingOptions';\n\ninterface RouteTimingsProps {\n  alertManager: string;\n}\n\nexport function RouteTimings({ alertManager }: RouteTimingsProps) {\n  const formStyles = useStyles2(getFormStyles);\n  const {\n    register,\n    formState: { errors },\n    getValues,\n  } = useFormContext<RuleFormValues>();\n  return (\n    <>\n      <Field\n        label={routeTimingsFields.groupWait.label}\n        description={routeTimingsFields.groupWait.description}\n        invalid={!!errors.contactPoints?.[alertManager]?.groupWaitValue}\n        error={errors.contactPoints?.[alertManager]?.groupWaitValue?.message}\n      >\n        <PromDurationInput\n          {...register(`contactPoints.${alertManager}.groupWaitValue`, { validate: promDurationValidator })}\n          aria-label={routeTimingsFields.groupWait.ariaLabel}\n          className={formStyles.promDurationInput}\n          placeholder={TIMING_OPTIONS_DEFAULTS.group_wait}\n        />\n      </Field>\n      <Field\n        label={routeTimingsFields.groupInterval.label}\n        description={routeTimingsFields.groupInterval.description}\n        invalid={!!errors.contactPoints?.[alertManager]?.groupIntervalValue}\n        error={errors.contactPoints?.[alertManager]?.groupIntervalValue?.message}\n      >\n        <PromDurationInput\n          {...register(`contactPoints.${alertManager}.groupIntervalValue`, {\n            validate: promDurationValidator,\n          })}\n          aria-label={routeTimingsFields.groupInterval.ariaLabel}\n          className={formStyles.promDurationInput}\n          placeholder={TIMING_OPTIONS_DEFAULTS.group_interval}\n        />\n      </Field>\n      <Field\n        label={routeTimingsFields.repeatInterval.label}\n        description={routeTimingsFields.repeatInterval.description}\n        invalid={!!errors.contactPoints?.[alertManager]?.repeatIntervalValue}\n        error={errors.contactPoints?.[alertManager]?.repeatIntervalValue?.message}\n      >\n        <PromDurationInput\n          {...register(`contactPoints.${alertManager}.repeatIntervalValue`, {\n            validate: (value: string) => {\n              const groupInterval = getValues(`contactPoints.${alertManager}.repeatIntervalValue`);\n              return repeatIntervalValidator(value, groupInterval);\n            },\n          })}\n          aria-label={routeTimingsFields.repeatInterval.ariaLabel}\n          className={formStyles.promDurationInput}\n          placeholder={TIMING_OPTIONS_DEFAULTS.repeat_interval}\n        />\n      </Field>\n    </>\n  );\n}\n","import { css } from '@emotion/css';\nimport { useEffect, useState } from 'react';\nimport * as React from 'react';\nimport { useFormContext, Controller } from 'react-hook-form';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Field, FieldValidationMessage, InlineField, MultiSelect, Stack, Switch, Text, useStyles2 } from '@grafana/ui';\nimport { MultiValueRemove, MultiValueRemoveProps } from '@grafana/ui/src/components/Select/MultiValue';\nimport { RuleFormValues } from 'app/features/alerting/unified/types/rule-form';\nimport {\n  commonGroupByOptions,\n  mapMultiSelectValueToStrings,\n  stringToSelectableValue,\n  stringsToSelectableValues,\n} from 'app/features/alerting/unified/utils/amroutes';\n\nimport { getFormStyles } from '../../../../notification-policies/formStyles';\nimport { TIMING_OPTIONS_DEFAULTS } from '../../../../notification-policies/timingOptions';\n\nimport { RouteTimings } from './RouteTimings';\n\nconst REQUIRED_FIELDS_IN_GROUPBY = ['grafana_folder', 'alertname'];\n\nconst DEFAULTS_TIMINGS = {\n  groupWaitValue: TIMING_OPTIONS_DEFAULTS.group_wait,\n  groupIntervalValue: TIMING_OPTIONS_DEFAULTS.group_interval,\n  repeatIntervalValue: TIMING_OPTIONS_DEFAULTS.repeat_interval,\n};\nconst DISABLE_GROUPING = '...';\n\nexport interface RoutingSettingsProps {\n  alertManager: string;\n}\nexport const RoutingSettings = ({ alertManager }: RoutingSettingsProps) => {\n  const formStyles = useStyles2(getFormStyles);\n  const {\n    control,\n    watch,\n    register,\n    setValue,\n    formState: { errors },\n  } = useFormContext<RuleFormValues>();\n  const [groupByOptions, setGroupByOptions] = useState(stringsToSelectableValues([]));\n  const { groupIntervalValue, groupWaitValue, repeatIntervalValue } = DEFAULTS_TIMINGS;\n  const overrideGrouping = watch(`contactPoints.${alertManager}.overrideGrouping`);\n  const overrideTimings = watch(`contactPoints.${alertManager}.overrideTimings`);\n  const groupByCount = watch(`contactPoints.${alertManager}.groupBy`)?.length ?? 0;\n\n  const styles = useStyles2(getStyles);\n  useEffect(() => {\n    if (overrideGrouping && groupByCount === 0) {\n      setValue(`contactPoints.${alertManager}.groupBy`, REQUIRED_FIELDS_IN_GROUPBY);\n    }\n  }, [overrideGrouping, setValue, alertManager, groupByCount]);\n\n  return (\n    <Stack direction=\"column\">\n      <Stack direction=\"row\" gap={1} alignItems=\"center\" justifyContent=\"space-between\">\n        <InlineField label=\"Override grouping\" transparent={true} className={styles.switchElement}>\n          <Switch id=\"override-grouping-toggle\" {...register(`contactPoints.${alertManager}.overrideGrouping`)} />\n        </InlineField>\n        {!overrideGrouping && (\n          <Text variant=\"body\" color=\"secondary\">\n            Grouping: <strong>{REQUIRED_FIELDS_IN_GROUPBY.join(', ')}</strong>\n          </Text>\n        )}\n      </Stack>\n      {overrideGrouping && (\n        <Field\n          label=\"Group by\"\n          description=\"Combine multiple alerts into a single notification by grouping them by the same label values. If empty, it is inherited from the default notification policy.\"\n          {...register(`contactPoints.${alertManager}.groupBy`)}\n          invalid={!!errors.contactPoints?.[alertManager]?.groupBy}\n          className={styles.optionalContent}\n        >\n          <Controller\n            rules={{\n              validate: (value: string[]) => {\n                if (!value || value.length === 0) {\n                  return 'At least one group by option is required.';\n                }\n                if (value.length === 1 && value[0] === DISABLE_GROUPING) {\n                  return true;\n                }\n                // we need to make sure that the required fields are included\n                const requiredFieldsIncluded = REQUIRED_FIELDS_IN_GROUPBY.every((field) => value.includes(field));\n                if (!requiredFieldsIncluded) {\n                  return `Group by must include ${REQUIRED_FIELDS_IN_GROUPBY.join(', ')}`;\n                }\n                return true;\n              },\n            }}\n            render={({ field: { onChange, ref, ...field }, fieldState: { error } }) => (\n              <>\n                <MultiSelect\n                  aria-label=\"Group by\"\n                  {...field}\n                  allowCustomValue\n                  className={formStyles.input}\n                  onCreateOption={(opt: string) => {\n                    setGroupByOptions((opts) => [...opts, stringToSelectableValue(opt)]);\n\n                    // @ts-ignore-check: react-hook-form made me do this\n                    setValue(`contactPoints.${alertManager}.groupBy`, [...field.value, opt]);\n                  }}\n                  onChange={(value) => {\n                    return onChange(mapMultiSelectValueToStrings(value));\n                  }}\n                  options={[...commonGroupByOptions, ...groupByOptions]}\n                  components={{\n                    MultiValueRemove(\n                      props: React.PropsWithChildren<\n                        MultiValueRemoveProps &\n                          Array<SelectableValue<string>> & {\n                            data: {\n                              label: string;\n                              value: string;\n                              isFixed: boolean;\n                            };\n                          }\n                      >\n                    ) {\n                      const { data } = props;\n                      if (data.isFixed) {\n                        return null;\n                      }\n                      return MultiValueRemove(props);\n                    },\n                  }}\n                />\n                {error && <FieldValidationMessage>{error.message}</FieldValidationMessage>}\n              </>\n            )}\n            name={`contactPoints.${alertManager}.groupBy`}\n            control={control}\n          />\n        </Field>\n      )}\n      <Stack direction=\"row\" gap={1} alignItems=\"center\" justifyContent=\"space-between\">\n        <InlineField label=\"Override timings\" transparent={true} className={styles.switchElement}>\n          <Switch id=\"override-timings-toggle\" {...register(`contactPoints.${alertManager}.overrideTimings`)} />\n        </InlineField>\n        {!overrideTimings && (\n          <Text variant=\"body\" color=\"secondary\">\n            Group wait: <strong>{groupWaitValue}, </strong>\n            Group interval: <strong>{groupIntervalValue}, </strong>\n            Repeat interval: <strong>{repeatIntervalValue}</strong>\n          </Text>\n        )}\n      </Stack>\n      {overrideTimings && (\n        <div className={styles.optionalContent}>\n          <RouteTimings alertManager={alertManager} />\n        </div>\n      )}\n    </Stack>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  switchElement: css({\n    flexFlow: 'row-reverse',\n    gap: theme.spacing(1),\n    alignItems: 'center',\n  }),\n  optionalContent: css({\n    marginLeft: '49px',\n    marginBottom: theme.spacing(1),\n  }),\n});\n","import { css } from '@emotion/css';\nimport { useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, CollapsableSection, LoadingPlaceholder, Stack, useStyles2 } from '@grafana/ui';\nimport { RuleFormValues } from 'app/features/alerting/unified/types/rule-form';\nimport { AlertManagerDataSource } from 'app/features/alerting/unified/utils/datasource';\n\nimport { ContactPointReceiverSummary } from '../../../contact-points/ContactPoint';\nimport { useGrafanaContactPoints } from '../../../contact-points/useContactPoints';\nimport { ContactPointWithMetadata } from '../../../contact-points/utils';\n\nimport { ContactPointDetails } from './contactPoint/ContactPointDetails';\nimport { ContactPointSelector } from './contactPoint/ContactPointSelector';\nimport { MuteTimingFields } from './route-settings/MuteTimingFields';\nimport { RoutingSettings } from './route-settings/RouteSettings';\n\ninterface AlertManagerManualRoutingProps {\n  alertManager: AlertManagerDataSource;\n}\n\nexport function AlertManagerManualRouting({ alertManager }: AlertManagerManualRoutingProps) {\n  const styles = useStyles2(getStyles);\n\n  const alertManagerName = alertManager.name;\n  const {\n    isLoading,\n    error: errorInContactPointStatus,\n    contactPoints,\n    refetch: refetchReceivers,\n  } = useGrafanaContactPoints();\n\n  const [selectedContactPointWithMetadata, setSelectedContactPointWithMetadata] = useState<\n    ContactPointWithMetadata | undefined\n  >();\n\n  const onSelectContactPoint = (contactPoint?: ContactPointWithMetadata) => {\n    setSelectedContactPointWithMetadata(contactPoint);\n  };\n\n  const { watch } = useFormContext<RuleFormValues>();\n  const hasRouteSettings =\n    watch(`contactPoints.${alertManagerName}.overrideGrouping`) ||\n    watch(`contactPoints.${alertManagerName}.overrideTimings`) ||\n    watch(`contactPoints.${alertManagerName}.muteTimeIntervals`)?.length > 0;\n\n  const options = contactPoints.map((receiver) => {\n    const integrations = receiver?.grafana_managed_receiver_configs;\n    const description = <ContactPointReceiverSummary receivers={integrations ?? []} />;\n\n    return { label: receiver.name, value: receiver, description };\n  });\n\n  if (errorInContactPointStatus) {\n    return <Alert title=\"Failed to fetch contact points\" severity=\"error\" />;\n  }\n  if (isLoading) {\n    return <LoadingPlaceholder text={'Loading...'} />;\n  }\n  return (\n    <Stack direction=\"column\">\n      <Stack direction=\"row\" alignItems=\"center\">\n        <div className={styles.firstAlertManagerLine}></div>\n        <div className={styles.alertManagerName}>\n          Alertmanager:\n          <img src={alertManager.imgUrl} alt=\"Alert manager logo\" className={styles.img} />\n          {alertManagerName}\n        </div>\n        <div className={styles.secondAlertManagerLine}></div>\n      </Stack>\n      <Stack direction=\"row\" gap={1} alignItems=\"center\">\n        <ContactPointSelector\n          alertManager={alertManagerName}\n          options={options}\n          onSelectContactPoint={onSelectContactPoint}\n          refetchReceivers={refetchReceivers}\n        />\n      </Stack>\n      {selectedContactPointWithMetadata?.grafana_managed_receiver_configs && (\n        <ContactPointDetails receivers={selectedContactPointWithMetadata.grafana_managed_receiver_configs} />\n      )}\n      <div className={styles.routingSection}>\n        <CollapsableSection\n          label=\"Muting, grouping and timings (optional)\"\n          isOpen={hasRouteSettings}\n          className={styles.collapsableSection}\n        >\n          <Stack direction=\"column\" gap={1}>\n            <MuteTimingFields alertManager={alertManagerName} />\n            <RoutingSettings alertManager={alertManagerName} />\n          </Stack>\n        </CollapsableSection>\n      </div>\n    </Stack>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  firstAlertManagerLine: css({\n    height: 1,\n    width: theme.spacing(4),\n    backgroundColor: theme.colors.secondary.main,\n  }),\n  alertManagerName: css({\n    with: 'fit-content',\n  }),\n  secondAlertManagerLine: css({\n    height: '1px',\n    width: '100%',\n    flex: 1,\n    backgroundColor: theme.colors.secondary.main,\n  }),\n  img: css({\n    marginLeft: theme.spacing(2),\n    width: theme.spacing(3),\n    height: theme.spacing(3),\n    marginRight: theme.spacing(1),\n  }),\n  collapsableSection: css({\n    width: 'fit-content',\n    fontSize: theme.typography.body.fontSize,\n  }),\n  routingSection: css({\n    display: 'flex',\n    flexDirection: 'column',\n    maxWidth: theme.breakpoints.values.xl,\n    border: `solid 1px ${theme.colors.border.weak}`,\n    borderRadius: theme.shape.radius.default,\n    padding: `${theme.spacing(1)} ${theme.spacing(2)}`,\n    marginTop: theme.spacing(2),\n  }),\n});\n","import { useMemo } from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nimport { AlertmanagerProvider } from 'app/features/alerting/unified/state/AlertmanagerContext';\nimport { RuleFormValues } from 'app/features/alerting/unified/types/rule-form';\nimport { getAlertManagerDataSourcesByPermission } from 'app/features/alerting/unified/utils/datasource';\n\nimport { AlertManagerManualRouting } from './AlertManagerRouting';\n\nexport function SimplifiedRouting() {\n  const { getValues } = useFormContext<RuleFormValues>();\n  const contactPointsInAlert = getValues('contactPoints');\n\n  const allAlertManagersByPermission = getAlertManagerDataSourcesByPermission('notification');\n\n  // We decided to only show internal alert manager for now. Once we want to show external alert managers we can use this code\n  // const alertManagersDataSources = allAlertManagersByPermission.availableInternalDataSources.concat(\n  //   allAlertManagersByPermission.availableExternalDataSources\n  // );\n\n  const alertManagersDataSources = allAlertManagersByPermission.availableInternalDataSources;\n\n  const alertManagersDataSourcesWithConfigAPI = alertManagersDataSources.filter((am) => am.hasConfigurationAPI);\n\n  // we merge the selected contact points data for each alert manager, with the alert manager meta data\n  const alertManagersWithSelectedContactPoints = useMemo(\n    () =>\n      alertManagersDataSourcesWithConfigAPI.map((am) => {\n        const selectedContactPoint = contactPointsInAlert ? contactPointsInAlert[am.name] : undefined;\n        return {\n          alertManager: am,\n          selectedContactPoint: selectedContactPoint?.selectedContactPoint ?? '',\n          routeSettings: {\n            muteTimeIntervals: selectedContactPoint?.muteTimeIntervals ?? [],\n            overrideGrouping: selectedContactPoint?.overrideGrouping ?? false,\n            groupBy: selectedContactPoint?.groupBy ?? [],\n            overrideTimings: selectedContactPoint?.overrideTimings ?? false,\n            groupWaitValue: selectedContactPoint?.groupWaitValue ?? '',\n            groupIntervalValue: selectedContactPoint?.groupIntervalValue ?? '',\n            repeatIntervalValue: selectedContactPoint?.repeatIntervalValue ?? '',\n          },\n        };\n      }),\n    [alertManagersDataSourcesWithConfigAPI, contactPointsInAlert]\n  );\n\n  return alertManagersWithSelectedContactPoints.map((alertManagerContactPoint, index) => {\n    return (\n      <AlertmanagerProvider\n        accessType={'notification'}\n        alertmanagerSourceName={alertManagerContactPoint.alertManager.name}\n        key={alertManagerContactPoint.alertManager.name + index}\n      >\n        <AlertManagerManualRouting alertManager={alertManagerContactPoint.alertManager} />\n      </AlertmanagerProvider>\n    );\n  });\n}\n","import { Modal } from '@grafana/ui';\n\nimport { LabelsSubForm } from './LabelsField';\n\nexport interface LabelsEditorModalProps {\n  isOpen: boolean;\n  initialLabels: Array<{\n    key: string;\n    value: string;\n  }>;\n  onClose: (\n    labelsToUodate?: Array<{\n      key: string;\n      value: string;\n    }>\n  ) => void;\n  dataSourceName: string;\n}\nexport function LabelsEditorModal({ isOpen, onClose, dataSourceName, initialLabels }: LabelsEditorModalProps) {\n  return (\n    <Modal title=\"Edit labels\" closeOnEscape isOpen={isOpen} onDismiss={() => onClose()}>\n      <LabelsSubForm dataSourceName={dataSourceName} onClose={onClose} initialLabels={initialLabels} />\n    </Modal>\n  );\n}\n","import { useFormContext } from 'react-hook-form';\n\nimport { Button, Stack, Text } from '@grafana/ui';\n\nimport { RuleFormValues } from '../../../types/rule-form';\nimport { NeedHelpInfo } from '../NeedHelpInfo';\n\nimport { LabelsInRule } from './LabelsField';\n\ninterface LabelsFieldInFormProps {\n  onEditClick: () => void;\n}\nexport function LabelsFieldInForm({ onEditClick }: LabelsFieldInFormProps) {\n  const { watch } = useFormContext<RuleFormValues>();\n  const labels = watch('labels');\n  const hasLabels = Object.keys(labels).length > 0 && labels.some((label) => label.key || label.value);\n\n  return (\n    <Stack direction=\"column\" gap={2}>\n      <Stack direction=\"column\" gap={1}>\n        <Text element=\"h5\">Labels</Text>\n        <Stack direction={'row'} gap={1}>\n          <Text variant=\"bodySmall\" color=\"secondary\">\n            Add labels to your rule for searching, silencing, or routing to a notification policy.\n          </Text>\n          <NeedHelpInfo\n            contentText=\"The dropdown only displays labels that you have previously used for alerts.\n              Select a label from the options below or type in a new one.\"\n            title=\"Labels\"\n          />\n        </Stack>\n      </Stack>\n      <Stack direction=\"row\" gap={1} alignItems=\"center\">\n        <LabelsInRule labels={labels} />\n        {hasLabels ? (\n          <Button variant=\"secondary\" type=\"button\" onClick={onEditClick} size=\"sm\">\n            Edit labels\n          </Button>\n        ) : (\n          <Stack direction=\"row\" gap={2} alignItems=\"center\">\n            <Text>No labels selected</Text>\n            <Button icon=\"plus\" type=\"button\" variant=\"secondary\" onClick={onEditClick} size=\"sm\">\n              Add labels\n            </Button>\n          </Stack>\n        )}\n      </Stack>\n    </Stack>\n  );\n}\n","import { css } from '@emotion/css';\nimport { compact } from 'lodash';\nimport { lazy, Suspense } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, LoadingPlaceholder, Text, useStyles2 } from '@grafana/ui';\nimport { alertRuleApi } from 'app/features/alerting/unified/api/alertRuleApi';\nimport { Stack } from 'app/plugins/datasource/parca/QueryEditor/Stack';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { useGetAlertManagerDataSourcesByPermissionAndConfig } from '../../../utils/datasource';\nimport { Folder } from '../RuleFolderPicker';\n\nconst NotificationPreviewByAlertManager = lazy(() => import('./NotificationPreviewByAlertManager'));\n\ninterface NotificationPreviewProps {\n  customLabels: Array<{\n    key: string;\n    value: string;\n  }>;\n  alertQueries: AlertQuery[];\n  condition: string | null;\n  folder: Folder | null;\n  alertName?: string;\n  alertUid?: string;\n}\n\n// TODO the scroll position keeps resetting when we preview\n// this is to be expected because the list of routes dissapears as we start the request but is very annoying\nexport const NotificationPreview = ({\n  alertQueries,\n  customLabels,\n  condition,\n  folder,\n  alertName,\n  alertUid,\n}: NotificationPreviewProps) => {\n  const styles = useStyles2(getStyles);\n  const disabled = !condition || !folder;\n\n  const previewEndpoint = alertRuleApi.endpoints.preview;\n\n  const [trigger, { data = [], isLoading, isUninitialized: previewUninitialized }] = previewEndpoint.useMutation();\n\n  // potential instances are the instances that are going to be routed to the notification policies\n  // convert data to list of labels: are the representation of the potential instances\n  const potentialInstances = compact(data.flatMap((label) => label?.labels));\n\n  const onPreview = () => {\n    if (!folder || !condition) {\n      return;\n    }\n\n    // Get the potential labels given the alert queries, the condition and the custom labels (autogenerated labels are calculated on the BE side)\n    trigger({\n      alertQueries: alertQueries,\n      condition: condition,\n      customLabels: customLabels,\n      folder: folder,\n      alertName: alertName,\n      alertUid: alertUid,\n    });\n  };\n\n  //  Get alert managers's data source information\n  const alertManagerDataSources = useGetAlertManagerDataSourcesByPermissionAndConfig('notification');\n\n  const onlyOneAM = alertManagerDataSources.length === 1;\n\n  return (\n    <Stack direction=\"column\">\n      <div className={styles.routePreviewHeaderRow}>\n        <div className={styles.previewHeader}>\n          <Text element=\"h5\">Alert instance routing preview</Text>\n          {isLoading && previewUninitialized && (\n            <Text color=\"secondary\" variant=\"bodySmall\">\n              Loading...\n            </Text>\n          )}\n          {previewUninitialized ? (\n            <Text color=\"secondary\" variant=\"bodySmall\">\n              When you have your folder selected and your query and labels are configured, click &quot;Preview\n              routing&quot; to see the results here.\n            </Text>\n          ) : (\n            <Text color=\"secondary\" variant=\"bodySmall\">\n              Based on the labels added, alert instances are routed to the following notification policies. Expand each\n              notification policy below to view more details.\n            </Text>\n          )}\n        </div>\n        <div className={styles.button}>\n          <Button icon=\"sync\" variant=\"secondary\" type=\"button\" onClick={onPreview} disabled={disabled}>\n            Preview routing\n          </Button>\n        </div>\n      </div>\n      {!isLoading && !previewUninitialized && potentialInstances.length > 0 && (\n        <Suspense fallback={<LoadingPlaceholder text=\"Loading preview...\" />}>\n          {alertManagerDataSources.map((alertManagerSource) => (\n            <NotificationPreviewByAlertManager\n              alertManagerSource={alertManagerSource}\n              potentialInstances={potentialInstances}\n              onlyOneAM={onlyOneAM}\n              key={alertManagerSource.name}\n            />\n          ))}\n        </Suspense>\n      )}\n    </Stack>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  collapsableSection: css({\n    width: 'auto',\n    border: 0,\n  }),\n  previewHeader: css({\n    margin: 0,\n  }),\n  routePreviewHeaderRow: css({\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginTop: theme.spacing(1),\n  }),\n  collapseLabel: css({\n    flex: 1,\n  }),\n  button: css({\n    justifyContent: 'flex-end',\n  }),\n  tagsInDetails: css({\n    display: 'flex',\n    justifyContent: 'flex-start',\n    flexWrap: 'wrap',\n  }),\n  policyPathItemMatchers: css({\n    display: 'flex',\n    flexDirection: 'row',\n    gap: theme.spacing(1),\n  }),\n});\n","import { css } from '@emotion/css';\nimport { useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Icon, RadioButtonGroup, Stack, Text, useStyles2 } from '@grafana/ui';\nimport { AlertmanagerChoice } from 'app/plugins/datasource/alertmanager/types';\n\nimport { alertmanagerApi } from '../../api/alertmanagerApi';\nimport { RuleFormType, RuleFormValues } from '../../types/rule-form';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { isRecordingRuleByType } from '../../utils/rules';\n\nimport { NeedHelpInfo } from './NeedHelpInfo';\nimport { RuleEditorSection } from './RuleEditorSection';\nimport { SimplifiedRouting } from './alert-rule-form/simplifiedRouting/SimplifiedRouting';\nimport { LabelsEditorModal } from './labels/LabelsEditorModal';\nimport { LabelsFieldInForm } from './labels/LabelsFieldInForm';\nimport { NotificationPreview } from './notificaton-preview/NotificationPreview';\n\ntype NotificationsStepProps = {\n  alertUid?: string;\n};\n\nenum RoutingOptions {\n  NotificationPolicy = 'notification policy',\n  ContactPoint = 'contact point',\n}\n\nfunction useHasInternalAlertmanagerEnabled() {\n  const { useGetGrafanaAlertingConfigurationStatusQuery } = alertmanagerApi;\n  const { currentData: amChoiceStatus } = useGetGrafanaAlertingConfigurationStatusQuery(undefined);\n  return (\n    amChoiceStatus?.alertmanagersChoice === AlertmanagerChoice.Internal ||\n    amChoiceStatus?.alertmanagersChoice === AlertmanagerChoice.All\n  );\n}\n\nexport const NotificationsStep = ({ alertUid }: NotificationsStepProps) => {\n  const { watch, getValues, setValue } = useFormContext<RuleFormValues>();\n  const styles = useStyles2(getStyles);\n\n  const [type] = watch(['type', 'labels', 'queries', 'condition', 'folder', 'name', 'manualRouting']);\n  const [showLabelsEditor, setShowLabelsEditor] = useState(false);\n\n  const dataSourceName = watch('dataSourceName') ?? GRAFANA_RULES_SOURCE_NAME;\n  const simplifiedRoutingToggleEnabled = config.featureToggles.alertingSimplifiedRouting ?? false;\n  const shouldRenderpreview = type === RuleFormType.grafana;\n  const hasInternalAlertmanagerEnabled = useHasInternalAlertmanagerEnabled();\n\n  const shouldAllowSimplifiedRouting =\n    type === RuleFormType.grafana && simplifiedRoutingToggleEnabled && hasInternalAlertmanagerEnabled;\n\n  function onCloseLabelsEditor(\n    labelsToUpdate?: Array<{\n      key: string;\n      value: string;\n    }>\n  ) {\n    if (labelsToUpdate) {\n      setValue('labels', labelsToUpdate);\n    }\n    setShowLabelsEditor(false);\n  }\n  if (!type) {\n    return null;\n  }\n\n  return (\n    <RuleEditorSection\n      stepNo={4}\n      title={isRecordingRuleByType(type) ? 'Add labels' : 'Configure labels and notifications'}\n      description={\n        <Stack direction=\"row\" gap={0.5} alignItems=\"center\">\n          {type === RuleFormType.cloudRecording ? (\n            <Text variant=\"bodySmall\" color=\"secondary\">\n              Add labels to help you better manage your recording rules\n            </Text>\n          ) : (\n            shouldAllowSimplifiedRouting && (\n              <Text variant=\"bodySmall\" color=\"secondary\">\n                Select who should receive a notification when an alert rule fires.\n              </Text>\n            )\n          )}\n        </Stack>\n      }\n      fullWidth\n    >\n      <LabelsFieldInForm onEditClick={() => setShowLabelsEditor(true)} />\n      <LabelsEditorModal\n        isOpen={showLabelsEditor}\n        onClose={onCloseLabelsEditor}\n        dataSourceName={dataSourceName}\n        initialLabels={getValues('labels')}\n      />\n      {shouldAllowSimplifiedRouting && (\n        <div className={styles.configureNotifications}>\n          <Text element=\"h5\">Notifications</Text>\n          <Text variant=\"bodySmall\" color=\"secondary\">\n            Select who should receive a notification when an alert rule fires.\n          </Text>\n        </div>\n      )}\n      {shouldAllowSimplifiedRouting ? ( // when simplified routing is enabled and is grafana rule\n        <ManualAndAutomaticRouting alertUid={alertUid} />\n      ) : // when simplified routing is not enabled, render the notification preview as we did before\n      shouldRenderpreview ? (\n        <AutomaticRooting alertUid={alertUid} />\n      ) : null}\n    </RuleEditorSection>\n  );\n};\n\n/**\n * Preconditions:\n * - simplified routing is enabled\n * - the alert rule is a grafana rule\n *\n * This component will render the switch between the select contact point routing and the notification policy routing.\n * It also renders the section body of the NotificationsStep, depending on the routing option selected.\n * If select contact point routing is selected, it will render the SimplifiedRouting component.\n * If notification policy routing is selected, it will render the AutomaticRouting component.\n *\n */\nfunction ManualAndAutomaticRouting({ alertUid }: { alertUid?: string }) {\n  const { watch, setValue } = useFormContext<RuleFormValues>();\n  const styles = useStyles2(getStyles);\n\n  const [manualRouting] = watch(['manualRouting']);\n\n  const routingOptions = [\n    { label: 'Select contact point', value: RoutingOptions.ContactPoint },\n    { label: 'Use notification policy', value: RoutingOptions.NotificationPolicy },\n  ];\n\n  const onRoutingOptionChange = (option: RoutingOptions) => {\n    setValue('manualRouting', option === RoutingOptions.ContactPoint);\n  };\n\n  return (\n    <Stack direction=\"column\" gap={2}>\n      <Stack direction=\"column\">\n        <RadioButtonGroup\n          options={routingOptions}\n          value={manualRouting ? RoutingOptions.ContactPoint : RoutingOptions.NotificationPolicy}\n          onChange={onRoutingOptionChange}\n          className={styles.routingOptions}\n        />\n      </Stack>\n\n      <RoutingOptionDescription manualRouting={manualRouting} />\n\n      {manualRouting ? <SimplifiedRouting /> : <AutomaticRooting alertUid={alertUid} />}\n    </Stack>\n  );\n}\n\ninterface AutomaticRootingProps {\n  alertUid?: string;\n}\n\nfunction AutomaticRooting({ alertUid }: AutomaticRootingProps) {\n  const { watch } = useFormContext<RuleFormValues>();\n  const [labels, queries, condition, folder, alertName] = watch([\n    'labels',\n    'queries',\n    'condition',\n    'folder',\n    'name',\n    'manualRouting',\n  ]);\n  return (\n    <NotificationPreview\n      alertQueries={queries}\n      customLabels={labels}\n      condition={condition}\n      folder={folder}\n      alertName={alertName}\n      alertUid={alertUid}\n    />\n  );\n}\n\n// Auxiliar components to build the texts and descriptions in the NotificationsStep\nfunction NeedHelpInfoForNotificationPolicy() {\n  return (\n    <NeedHelpInfo\n      contentText={\n        <Stack gap={1} direction=\"column\">\n          <Stack direction=\"column\" gap={0}>\n            <>\n              Firing alert instances are routed to notification policies based on matching labels. The default\n              notification policy matches all alert instances.\n            </>\n          </Stack>\n          <Stack direction=\"column\" gap={0}>\n            <>\n              Custom labels change the way your notifications are routed. First, add labels to your alert rule and then\n              connect them to your notification policy by adding label matchers.\n            </>\n            <a\n              href={`https://grafana.com/docs/grafana/latest/alerting/fundamentals/notifications/notification-policies/`}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              <Text color=\"link\">\n                Read about notification policies. <Icon name=\"external-link-alt\" />\n              </Text>\n            </a>\n          </Stack>\n        </Stack>\n      }\n      title=\"Notification routing\"\n    />\n  );\n}\n\nfunction NeedHelpInfoForContactpoint() {\n  return (\n    <NeedHelpInfo\n      contentText={\n        <>\n          Select a contact point to notify all recipients in it.\n          <br />\n          <br />\n          Notifications for firing alert instances are grouped based on folder and alert rule name.\n          <br />\n          The wait time before sending the first notification for a new group of alerts is 30 seconds.\n          <br />\n          The waiting time before sending a notification about changes in the alert group after the first notification\n          has been sent is 5 minutes.\n          <br />\n          The wait time before resending a notification that has already been sent successfully is 4 hours.\n          <br />\n          Grouping and wait time values are defined in your default notification policy.\n        </>\n      }\n      externalLink=\"https://grafana.com/docs/grafana/latest/alerting/fundamentals/notifications/\"\n      linkText=\"Read more about notifications\"\n      title=\"Notify contact points\"\n    />\n  );\n}\ninterface NotificationsStepDescriptionProps {\n  manualRouting: boolean;\n}\n\nexport const RoutingOptionDescription = ({ manualRouting }: NotificationsStepDescriptionProps) => {\n  return (\n    <Stack alignItems=\"center\">\n      <Text variant=\"bodySmall\" color=\"secondary\">\n        {manualRouting\n          ? 'Notifications for firing alerts are routed to a selected contact point.'\n          : 'Notifications for firing alerts are routed to contact points based on matching labels and the notification policy tree.'}\n      </Text>\n      {manualRouting ? <NeedHelpInfoForContactpoint /> : <NeedHelpInfoForNotificationPolicy />}\n    </Stack>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  routingOptions: css({\n    width: 'fit-content',\n  }),\n  configureNotifications: css({\n    display: 'flex',\n    flexDirection: 'column',\n    marginTop: theme.spacing(2),\n  }),\n});\n","import { PanelData } from '@grafana/data';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { RuleFormType } from './rule-form';\n\nexport type PreviewRuleRequest = GrafanaPreviewRuleRequest | CloudPreviewRuleRequest;\n\nexport type GrafanaPreviewRuleRequest = {\n  grafana_condition: {\n    condition: string;\n    data: AlertQuery[];\n    now: string;\n  };\n};\n\nexport type CloudPreviewRuleRequest = {\n  dataSourceUid: string;\n  dataSourceName: string;\n  expr: string;\n};\n\nexport type PreviewRuleResponse = {\n  ruleType: RuleFormType;\n  data: PanelData;\n};\n\nexport function isCloudPreviewRequest(request: PreviewRuleRequest): request is CloudPreviewRuleRequest {\n  return 'expr' in request;\n}\n\nexport function isGrafanaPreviewRequest(request: PreviewRuleRequest): request is GrafanaPreviewRuleRequest {\n  return 'grafana_condition' in request;\n}\n","import { Observable, of } from 'rxjs';\nimport { catchError, map, share } from 'rxjs/operators';\n\nimport {\n  dataFrameFromJSON,\n  DataFrameJSON,\n  getDefaultTimeRange,\n  LoadingState,\n  PanelData,\n  withLoadingIndicator,\n} from '@grafana/data';\nimport { getBackendSrv, toDataQueryError } from '@grafana/runtime';\n\nimport {\n  isCloudPreviewRequest,\n  isGrafanaPreviewRequest,\n  PreviewRuleRequest,\n  PreviewRuleResponse,\n} from '../types/preview';\nimport { RuleFormType } from '../types/rule-form';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nexport function previewAlertRule(request: PreviewRuleRequest): Observable<PreviewRuleResponse> {\n  if (isCloudPreviewRequest(request)) {\n    return fetchAlertRulePreview(request, request.dataSourceUid, RuleFormType.cloudAlerting);\n  }\n\n  if (isGrafanaPreviewRequest(request)) {\n    return fetchAlertRulePreview(request, GRAFANA_RULES_SOURCE_NAME, RuleFormType.grafana);\n  }\n\n  throw new Error('unsupported preview rule request');\n}\n\ntype AlertRulePreviewResponse = {\n  instances: DataFrameJSON[];\n};\n\nfunction fetchAlertRulePreview(\n  request: PreviewRuleRequest,\n  dataSourceUid: string,\n  ruleType: RuleFormType\n): Observable<PreviewRuleResponse> {\n  return withLoadingIndicator({\n    whileLoading: createResponse(ruleType),\n    source: getBackendSrv()\n      .fetch<AlertRulePreviewResponse>({\n        method: 'POST',\n        url: `/api/v1/rule/test/${dataSourceUid}`,\n        data: request,\n      })\n      .pipe(\n        map(({ data }) => {\n          return createResponse(ruleType, {\n            state: LoadingState.Done,\n            series: data.instances.map(dataFrameFromJSON),\n          });\n        }),\n        catchError((error: Error) => {\n          return of(\n            createResponse(ruleType, {\n              state: LoadingState.Error,\n              error: toDataQueryError(error),\n            })\n          );\n        }),\n        share()\n      ),\n  });\n}\n\nfunction createResponse(ruleType: RuleFormType, data: Partial<PanelData> = {}): PreviewRuleResponse {\n  return {\n    ruleType,\n    data: {\n      state: LoadingState.Loading,\n      series: [],\n      timeRange: getDefaultTimeRange(),\n      ...data,\n    },\n  };\n}\n","import { css } from '@emotion/css';\nimport * as React from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { FieldConfigSource, FieldMatcherID, GrafanaTheme2, LoadingState } from '@grafana/data';\nimport { PanelRenderer } from '@grafana/runtime';\nimport { TableCellDisplayMode, useStyles2 } from '@grafana/ui';\n\nimport { PreviewRuleResponse } from '../../types/preview';\nimport { RuleFormType } from '../../types/rule-form';\nimport { messageFromError } from '../../utils/redux';\n\ntype Props = {\n  preview: PreviewRuleResponse | undefined;\n};\n\nexport function PreviewRuleResult(props: Props): React.ReactElement | null {\n  const { preview } = props;\n  const styles = useStyles2(getStyles);\n  const fieldConfig: FieldConfigSource = {\n    defaults: {},\n    overrides: [\n      {\n        matcher: { id: FieldMatcherID.byName, options: 'Info' },\n        properties: [{ id: 'custom.displayMode', value: TableCellDisplayMode.JSONView }],\n      },\n    ],\n  };\n\n  if (!preview) {\n    return null;\n  }\n\n  const { data, ruleType } = preview;\n\n  if (data.state === LoadingState.Loading) {\n    return (\n      <div className={styles.container}>\n        <span>Loading preview...</span>\n      </div>\n    );\n  }\n\n  if (data.state === LoadingState.Error) {\n    return (\n      <div className={styles.container}>\n        {data.error ? messageFromError(data.error) : 'Failed to preview alert rule'}\n      </div>\n    );\n  }\n  return (\n    <div className={styles.container}>\n      <span>\n        Preview based on the result of running the query, for this moment.{' '}\n        {ruleType === RuleFormType.grafana ? 'Configuration for `no data` and `error handling` is not applied.' : null}\n      </span>\n      <div className={styles.table}>\n        <AutoSizer>\n          {({ width, height }) => (\n            <div style={{ width: `${width}px`, height: `${height}px` }}>\n              <PanelRenderer\n                title=\"\"\n                width={width}\n                height={height}\n                pluginId=\"table\"\n                data={data}\n                fieldConfig={fieldConfig}\n              />\n            </div>\n          )}\n        </AutoSizer>\n      </div>\n    </div>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      margin: `${theme.spacing(2)} 0`,\n    }),\n    table: css({\n      flex: '1 1 auto',\n      height: '135px',\n      marginTop: theme.spacing(2),\n      border: `1px solid ${theme.colors.border.medium}`,\n      borderRadius: theme.shape.radius.default,\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport * as React from 'react';\nimport { useCallback, useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { useMountedState } from 'react-use';\nimport { takeWhile } from 'rxjs/operators';\n\nimport { dateTimeFormatISO, GrafanaTheme2, LoadingState } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { Alert, Button, Stack, useStyles2 } from '@grafana/ui';\n\nimport { previewAlertRule } from '../../api/preview';\nimport { useAlertQueriesStatus } from '../../hooks/useAlertQueriesStatus';\nimport { PreviewRuleRequest, PreviewRuleResponse } from '../../types/preview';\nimport { RuleFormType, RuleFormValues } from '../../types/rule-form';\nimport { isDataSourceManagedRuleByType } from '../../utils/rules';\n\nimport { PreviewRuleResult } from './PreviewRuleResult';\n\nconst fields: Array<keyof RuleFormValues> = ['type', 'dataSourceName', 'condition', 'queries', 'expression'];\n\nexport function PreviewRule(): React.ReactElement | null {\n  const styles = useStyles2(getStyles);\n  const [preview, onPreview] = usePreview();\n  const { watch } = useFormContext<RuleFormValues>();\n  const [type, condition, queries] = watch(['type', 'condition', 'queries']);\n  const { allDataSourcesAvailable } = useAlertQueriesStatus(queries);\n\n  if (!type || isDataSourceManagedRuleByType(type)) {\n    return null;\n  }\n\n  const isPreviewAvailable = Boolean(condition) && allDataSourcesAvailable;\n\n  return (\n    <div className={styles.container}>\n      <Stack>\n        {allDataSourcesAvailable && (\n          <Button disabled={!isPreviewAvailable} type=\"button\" variant=\"primary\" onClick={onPreview}>\n            Preview alerts\n          </Button>\n        )}\n        {!allDataSourcesAvailable && (\n          <Alert title=\"Preview is not available\" severity=\"warning\">\n            Cannot display the query preview. Some of the data sources used in the queries are not available.\n          </Alert>\n        )}\n      </Stack>\n      <PreviewRuleResult preview={preview} />\n    </div>\n  );\n}\n\nexport function usePreview(): [PreviewRuleResponse | undefined, () => void] {\n  const [preview, setPreview] = useState<PreviewRuleResponse | undefined>();\n  const { getValues } = useFormContext<RuleFormValues>();\n  const isMounted = useMountedState();\n\n  const onPreview = useCallback(() => {\n    const values = getValues(fields);\n    const request = createPreviewRequest(values);\n\n    previewAlertRule(request)\n      .pipe(takeWhile((response) => !isCompleted(response), true))\n      .subscribe((response) => {\n        if (!isMounted()) {\n          return;\n        }\n        setPreview(response);\n      });\n  }, [getValues, isMounted]);\n\n  return [preview, onPreview];\n}\n\nfunction createPreviewRequest(values: any[]): PreviewRuleRequest {\n  const [type, dataSourceName, condition, queries, expression] = values;\n  const dsSettings = getDataSourceSrv().getInstanceSettings(dataSourceName);\n  if (!dsSettings) {\n    throw new Error(`Cannot find data source settings for ${dataSourceName}`);\n  }\n\n  switch (type) {\n    case RuleFormType.cloudAlerting:\n      return {\n        dataSourceUid: dsSettings.uid,\n        dataSourceName,\n        expr: expression,\n      };\n\n    case RuleFormType.grafana:\n      return {\n        grafana_condition: {\n          condition,\n          data: queries,\n          now: dateTimeFormatISO(Date.now()),\n        },\n      };\n\n    default:\n      throw new Error(`Alert type ${type} not supported by preview.`);\n  }\n}\n\nfunction isCompleted(response: PreviewRuleResponse): boolean {\n  switch (response.data.state) {\n    case LoadingState.Done:\n    case LoadingState.Error:\n      return true;\n    default:\n      return false;\n  }\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      marginTop: theme.spacing(2),\n      maxWidth: `${theme.breakpoints.values.xxl}px`,\n    }),\n  };\n}\n","import { DataSourceInstanceSettings } from '@grafana/data';\nimport { PromBasedDataSource } from 'app/types/unified-alerting';\n\nimport { getDataSourceByName } from '../utils/datasource';\n\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\nexport function useRulesSourcesWithRuler(): DataSourceInstanceSettings[] {\n  const dataSources = useUnifiedAlertingSelector((state) => state.dataSources);\n\n  const dataSourcesWithRuler = Object.values(dataSources)\n    .map((ds) => ds.result)\n    .filter((ds): ds is PromBasedDataSource => Boolean(ds?.rulerConfig));\n  // try fetching rules for each prometheus to see if it has ruler\n\n  return dataSourcesWithRuler\n    .map((ds) => getDataSourceByName(ds.name))\n    .filter((dsConfig): dsConfig is DataSourceInstanceSettings => Boolean(dsConfig));\n}\n","import { DataFrame } from '@grafana/data';\n\nimport { GrafanaAlertState, isGrafanaAlertState, Labels } from '../../../../../types/unified-alerting-dto';\n\ninterface AlertPreviewInstance {\n  state: GrafanaAlertState;\n  info?: string;\n  labels: Labels;\n}\n\ninterface AlertPreview {\n  instances: AlertPreviewInstance[];\n}\n\n// Alerts previews come in a DataFrame format which is more suited for displaying time series data\n// In order to display a list of tags we need to transform DataFrame into set of labels\nexport function mapDataFrameToAlertPreview({ fields }: DataFrame): AlertPreview {\n  const labelFields = fields.filter((field) => !['State', 'Info'].includes(field.name));\n  const stateFieldIndex = fields.findIndex((field) => field.name === 'State');\n  const infoFieldIndex = fields.findIndex((field) => field.name === 'Info');\n\n  const labelIndexes = labelFields.map((labelField) => fields.indexOf(labelField));\n\n  const instanceStatusCount = fields[stateFieldIndex]?.values.length ?? 0;\n\n  const instances: AlertPreviewInstance[] = [];\n\n  for (let index = 0; index < instanceStatusCount; index++) {\n    const labelValues = labelIndexes.map((labelIndex) => [fields[labelIndex].name, fields[labelIndex].values[index]]);\n    const state = fields[stateFieldIndex]?.values?.[index];\n    const info = fields[infoFieldIndex]?.values?.[index];\n\n    if (isGrafanaAlertState(state)) {\n      instances.push({\n        state: state,\n        info: info,\n        labels: Object.fromEntries(labelValues),\n      });\n    }\n  }\n\n  return { instances };\n}\n","import { css } from '@emotion/css';\n\nimport { DataFrame, GrafanaTheme2 } from '@grafana/data/src';\nimport { Icon, TagList, Tooltip, useStyles2 } from '@grafana/ui/src';\n\nimport { labelsToTags } from '../../utils/labels';\nimport { AlertStateTag } from '../rules/AlertStateTag';\n\nimport { mapDataFrameToAlertPreview } from './preview';\n\ninterface CloudAlertPreviewProps {\n  preview: DataFrame;\n}\n\nexport function CloudAlertPreview({ preview }: CloudAlertPreviewProps) {\n  const styles = useStyles2(getStyles);\n  const alertPreview = mapDataFrameToAlertPreview(preview);\n\n  return (\n    <table className={styles.table}>\n      <caption>\n        <div>Alerts preview</div>\n        <span>Preview based on the result of running the query for this moment.</span>\n      </caption>\n      <thead>\n        <tr>\n          <th>State</th>\n          <th>Labels</th>\n          <th>Info</th>\n        </tr>\n      </thead>\n      <tbody>\n        {alertPreview.instances.map(({ state, info, labels }, index) => {\n          const instanceTags = labelsToTags(labels);\n\n          return (\n            <tr key={index}>\n              <td>{<AlertStateTag state={state} />}</td>\n              <td>\n                <TagList tags={instanceTags} className={styles.tagList} />\n              </td>\n              <td>\n                {info && (\n                  <Tooltip content={info}>\n                    <Icon name=\"info-circle\" />\n                  </Tooltip>\n                )}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  table: css({\n    width: '100%',\n    margin: theme.spacing(2, 0),\n\n    caption: {\n      captionSide: 'top',\n      color: theme.colors.text.primary,\n\n      '& > span': {\n        fontSize: theme.typography.bodySmall.fontSize,\n        color: theme.colors.text.secondary,\n      },\n    },\n\n    'td, th': {\n      padding: theme.spacing(1, 1),\n    },\n\n    'td + td, th + th': {\n      paddingLeft: theme.spacing(3),\n    },\n\n    'thead th': {\n      '&:nth-child(1)': {\n        width: '80px',\n      },\n\n      '&:nth-child(2)': {\n        width: 'auto',\n      },\n\n      '&:nth-child(3)': {\n        width: '40px',\n      },\n    },\n\n    'td:nth-child(3)': {\n      textAlign: 'center',\n    },\n\n    'tbody tr:nth-child(2n + 1)': {\n      backgroundColor: theme.colors.background.secondary,\n    },\n  }),\n  tagList: css({\n    justifyContent: 'flex-start',\n  }),\n});\n","import { css } from '@emotion/css';\nimport { noop } from 'lodash';\nimport { useCallback, useMemo } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { CoreApp, DataQuery, DataSourcePluginContextProvider, GrafanaTheme2, LoadingState } from '@grafana/data';\nimport { PromQuery } from '@grafana/prometheus';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { Alert, Button, useStyles2 } from '@grafana/ui';\nimport { LokiQuery } from 'app/plugins/datasource/loki/types';\n\nimport { CloudAlertPreview } from './CloudAlertPreview';\nimport { usePreview } from './PreviewRule';\n\nexport interface ExpressionEditorProps {\n  value?: string;\n  onChange: (value: string) => void;\n  dataSourceName: string; // will be a prometheus or loki datasource\n  showPreviewAlertsButton: boolean;\n}\n\nexport const ExpressionEditor = ({\n  value,\n  onChange,\n  dataSourceName,\n  showPreviewAlertsButton = true,\n}: ExpressionEditorProps) => {\n  const styles = useStyles2(getStyles);\n\n  const { mapToValue, mapToQuery } = useQueryMappers(dataSourceName);\n  const dataQuery = mapToQuery({ refId: 'A', hide: false }, value);\n\n  const {\n    error,\n    loading,\n    value: dataSource,\n  } = useAsync(() => {\n    return getDataSourceSrv().get(dataSourceName);\n  }, [dataSourceName]);\n\n  const onChangeQuery = useCallback(\n    (query: DataQuery) => {\n      onChange(mapToValue(query));\n    },\n    [onChange, mapToValue]\n  );\n\n  const [alertPreview, onPreview] = usePreview();\n\n  const onRunQueriesClick = async () => {\n    onPreview();\n  };\n\n  if (loading || dataSource?.name !== dataSourceName) {\n    return null;\n  }\n\n  const dsi = getDataSourceSrv().getInstanceSettings(dataSourceName);\n\n  if (error || !dataSource || !dataSource?.components?.QueryEditor || !dsi) {\n    const errorMessage = error?.message || 'Data source plugin does not export any Query Editor component';\n    return <div>Could not load query editor due to: {errorMessage}</div>;\n  }\n\n  const previewLoaded = alertPreview?.data.state === LoadingState.Done;\n\n  const QueryEditor = dataSource?.components?.QueryEditor;\n\n  // The Preview endpoint returns the preview as a single-element array of data frames\n  const previewDataFrame = alertPreview?.data?.series?.find((s) => s.name === 'evaluation results');\n  // The preview API returns arrays with empty elements when there are no firing alerts\n  const previewHasAlerts = previewDataFrame && previewDataFrame.fields.some((field) => field.values.length > 0);\n\n  return (\n    <>\n      <DataSourcePluginContextProvider instanceSettings={dsi}>\n        <QueryEditor\n          query={dataQuery}\n          queries={[dataQuery]}\n          app={CoreApp.CloudAlerting}\n          onChange={onChangeQuery}\n          onRunQuery={noop}\n          datasource={dataSource}\n        />\n      </DataSourcePluginContextProvider>\n      {showPreviewAlertsButton && (\n        <div className={styles.preview}>\n          <Button\n            type=\"button\"\n            onClick={onRunQueriesClick}\n            disabled={alertPreview?.data.state === LoadingState.Loading}\n          >\n            Preview alerts\n          </Button>\n          {previewLoaded && !previewHasAlerts && (\n            <Alert title=\"Alerts preview\" severity=\"info\" className={styles.previewAlert}>\n              There are no firing alerts for your query.\n            </Alert>\n          )}\n          {previewHasAlerts && <CloudAlertPreview preview={previewDataFrame} />}\n        </div>\n      )}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  preview: css({\n    padding: theme.spacing(2, 0),\n    maxWidth: `${theme.breakpoints.values.xl}px`,\n  }),\n  previewAlert: css({\n    margin: theme.spacing(1, 0),\n  }),\n});\n\ntype QueryMappers<T extends DataQuery = DataQuery> = {\n  mapToValue: (query: T) => string;\n  mapToQuery: (existing: T, value: string | undefined) => T;\n};\n\nexport function useQueryMappers(dataSourceName: string): QueryMappers {\n  return useMemo(() => {\n    const settings = getDataSourceSrv().getInstanceSettings(dataSourceName);\n\n    switch (settings?.type) {\n      case 'loki':\n      case 'prometheus':\n        return {\n          mapToValue: (query: DataQuery) => (query as PromQuery | LokiQuery).expr,\n          mapToQuery: (existing: DataQuery, value: string | undefined) => ({ ...existing, expr: value }),\n        };\n      default:\n        throw new Error(`${dataSourceName} is not supported as an expression editor`);\n    }\n  }, [dataSourceName]);\n}\n","import { css } from '@emotion/css';\nimport { useMemo } from 'react';\n\nimport { GrafanaTheme2, PanelData } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { ExpressionQuery, ExpressionQueryType } from 'app/features/expressions/types';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { Expression } from '../expressions/Expression';\n\nimport { errorFromPreviewData, warningFromSeries } from './util';\n\ninterface Props {\n  condition: string | null;\n  onSetCondition: (refId: string) => void;\n  panelData: Record<string, PanelData | undefined>;\n  queries: AlertQuery[];\n  onRemoveExpression: (refId: string) => void;\n  onUpdateRefId: (oldRefId: string, newRefId: string) => void;\n  onUpdateExpressionType: (refId: string, type: ExpressionQueryType) => void;\n  onUpdateQueryExpression: (query: ExpressionQuery) => void;\n}\n\nexport const ExpressionsEditor = ({\n  condition,\n  onSetCondition,\n  queries,\n  panelData,\n  onUpdateRefId,\n  onRemoveExpression,\n  onUpdateExpressionType,\n  onUpdateQueryExpression,\n}: Props) => {\n  const expressionQueries = useMemo(() => {\n    return queries.reduce((acc: ExpressionQuery[], query) => {\n      return isExpressionQuery(query.model) ? acc.concat(query.model) : acc;\n    }, []);\n  }, [queries]);\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.wrapper}>\n      {expressionQueries.map((query) => {\n        const data = panelData[query.refId];\n\n        const isAlertCondition = condition === query.refId;\n        const error = data ? errorFromPreviewData(data) : undefined;\n        const warning = data ? warningFromSeries(data.series) : undefined;\n\n        return (\n          <Expression\n            key={query.refId}\n            isAlertCondition={isAlertCondition}\n            data={data}\n            error={error}\n            warning={warning}\n            queries={queries}\n            query={query}\n            onSetCondition={onSetCondition}\n            onRemoveExpression={onRemoveExpression}\n            onUpdateRefId={onUpdateRefId}\n            onUpdateExpressionType={onUpdateExpressionType}\n            onChangeQuery={onUpdateQueryExpression}\n          />\n        );\n      })}\n    </div>\n  );\n};\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    display: 'flex',\n    gap: theme.spacing(2),\n    alignContent: 'stretch',\n    flexWrap: 'wrap',\n  }),\n});\n","import { css } from '@emotion/css';\nimport { useState } from 'react';\n\nimport { dateTime, getDefaultRelativeTimeRange, GrafanaTheme2, RelativeTimeRange } from '@grafana/data';\nimport { relativeToTimeRange } from '@grafana/data/src/datetime/rangeutil';\nimport { clearButtonStyles, Icon, InlineField, RelativeTimeRangePicker, Toggletip, useStyles2 } from '@grafana/ui';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { AlertQueryOptions, MaxDataPointsOption, MinIntervalOption } from './QueryWrapper';\n\nexport interface QueryOptionsProps {\n  query: AlertQuery;\n  queryOptions: AlertQueryOptions;\n  onChangeTimeRange?: (timeRange: RelativeTimeRange, index: number) => void;\n  onChangeQueryOptions: (options: AlertQueryOptions, index: number) => void;\n  index: number;\n}\n\nexport const QueryOptions = ({\n  query,\n  queryOptions,\n  onChangeTimeRange,\n  onChangeQueryOptions,\n  index,\n}: QueryOptionsProps) => {\n  const styles = useStyles2(getStyles);\n\n  const [showOptions, setShowOptions] = useState(false);\n\n  const timeRange = query.relativeTimeRange ? relativeToTimeRange(query.relativeTimeRange) : undefined;\n\n  return (\n    <>\n      <Toggletip\n        content={\n          <div className={styles.queryOptions}>\n            {onChangeTimeRange && (\n              <InlineField label=\"Time Range\">\n                <RelativeTimeRangePicker\n                  timeRange={query.relativeTimeRange ?? getDefaultRelativeTimeRange()}\n                  onChange={(range) => onChangeTimeRange(range, index)}\n                />\n              </InlineField>\n            )}\n            <MaxDataPointsOption options={queryOptions} onChange={(options) => onChangeQueryOptions(options, index)} />\n            <MinIntervalOption options={queryOptions} onChange={(options) => onChangeQueryOptions(options, index)} />\n          </div>\n        }\n        closeButton={true}\n        placement=\"bottom-start\"\n      >\n        <button type=\"button\" className={styles.actionLink} onClick={() => setShowOptions(!showOptions)}>\n          Options {showOptions ? <Icon name=\"angle-right\" /> : <Icon name=\"angle-down\" />}\n        </button>\n      </Toggletip>\n\n      <div className={styles.staticValues}>\n        <span>{dateTime(timeRange?.from).locale('en').fromNow(true)}</span>\n        {queryOptions.maxDataPoints && <span>, MD = {queryOptions.maxDataPoints}</span>}\n        {queryOptions.minInterval && <span>, Min. Interval = {queryOptions.minInterval}</span>}\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const clearButton = clearButtonStyles(theme);\n\n  return {\n    queryOptions: css({\n      '> div': {\n        justifyContent: 'space-between',\n      },\n    }),\n\n    staticValues: css({\n      color: theme.colors.text.secondary,\n      marginRight: theme.spacing(1),\n    }),\n\n    actionLink: css(clearButton, {\n      color: theme.colors.text.link,\n      cursor: 'pointer',\n\n      '&:hover': {\n        textDecoration: 'underline',\n      },\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport { cloneDeep } from 'lodash';\nimport { ChangeEvent, useState } from 'react';\nimport * as React from 'react';\n\nimport {\n  CoreApp,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  GrafanaTheme2,\n  LoadingState,\n  PanelData,\n  RelativeTimeRange,\n  ThresholdsConfig,\n} from '@grafana/data';\nimport { DataQuery } from '@grafana/schema';\nimport { GraphThresholdsStyleMode, Icon, InlineField, Input, Tooltip, useStyles2, Stack } from '@grafana/ui';\nimport { logInfo } from 'app/features/alerting/unified/Analytics';\nimport { QueryEditorRow } from 'app/features/query/components/QueryEditorRow';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { msToSingleUnitDuration } from '../../utils/time';\nimport { ExpressionStatusIndicator } from '../expressions/ExpressionStatusIndicator';\n\nimport { QueryOptions } from './QueryOptions';\nimport { VizWrapper } from './VizWrapper';\n\nexport const DEFAULT_MAX_DATA_POINTS = 43200;\nexport const DEFAULT_MIN_INTERVAL = '1s';\n\nexport interface AlertQueryOptions {\n  maxDataPoints?: number | undefined;\n  minInterval?: string | undefined;\n}\n\ninterface Props {\n  data: PanelData;\n  error?: Error;\n  query: AlertQuery;\n  queries: AlertQuery[];\n  dsSettings: DataSourceInstanceSettings;\n  onChangeDataSource: (settings: DataSourceInstanceSettings, index: number) => void;\n  onChangeQuery: (query: DataQuery, index: number) => void;\n  onChangeTimeRange?: (timeRange: RelativeTimeRange, index: number) => void;\n  onRemoveQuery: (query: DataQuery) => void;\n  onDuplicateQuery: (query: AlertQuery) => void;\n  onRunQueries: () => void;\n  index: number;\n  thresholds: ThresholdsConfig;\n  thresholdsType?: GraphThresholdsStyleMode;\n  onChangeThreshold?: (thresholds: ThresholdsConfig, index: number) => void;\n  condition: string | null;\n  onSetCondition: (refId: string) => void;\n  onChangeQueryOptions: (options: AlertQueryOptions, index: number) => void;\n}\n\nexport const QueryWrapper = ({\n  data,\n  error,\n  dsSettings,\n  index,\n  onChangeDataSource,\n  onChangeQuery,\n  onChangeTimeRange,\n  onRunQueries,\n  onRemoveQuery,\n  onDuplicateQuery,\n  query,\n  queries,\n  thresholds,\n  thresholdsType,\n  onChangeThreshold,\n  condition,\n  onSetCondition,\n  onChangeQueryOptions,\n}: Props) => {\n  const styles = useStyles2(getStyles);\n  const [dsInstance, setDsInstance] = useState<DataSourceApi>();\n  const defaults = dsInstance?.getDefaultQuery ? dsInstance.getDefaultQuery(CoreApp.UnifiedAlerting) : {};\n\n  const queryWithDefaults = {\n    ...defaults,\n    ...cloneDeep(query.model),\n  };\n\n  if (queryWithDefaults.datasource && queryWithDefaults.datasource?.uid !== query.datasourceUid) {\n    logInfo('rule query datasource and datasourceUid mismatch', {\n      queryModelDatasourceUid: queryWithDefaults.datasource?.uid || '',\n      queryDatasourceUid: query.datasourceUid,\n      datasourceType: query.model.datasource?.type || 'unknown type',\n    });\n    // There are occasions when the rule query model datasource UID and the datasourceUid do not match\n    // It's unclear as to why this happens, but we need better visibility on why this happens,\n    // so we log when it does, and make the query model datasource UID match the datasource UID\n    // We already elsewhere work under the assumption that the datasource settings are fetched from the datasourceUid property\n    queryWithDefaults.datasource.uid = query.datasourceUid;\n  }\n\n  function SelectingDataSourceTooltip() {\n    const styles = useStyles2(getStyles);\n    return (\n      <div className={styles.dsTooltip}>\n        <Tooltip\n          content={\n            <>\n              Not finding the data source you want? Some data sources are not supported for alerting. Click on the icon\n              for more information.\n            </>\n          }\n        >\n          <Icon\n            name=\"info-circle\"\n            onClick={() =>\n              window.open(\n                ' https://grafana.com/docs/grafana/latest/alerting/fundamentals/data-source-alerting/',\n                '_blank'\n              )\n            }\n          />\n        </Tooltip>\n      </div>\n    );\n  }\n\n  // TODO add a warning label here too when the data looks like time series data and is used as an alert condition\n  function HeaderExtras({ query, error, index }: { query: AlertQuery; error?: Error; index: number }) {\n    const queryOptions: AlertQueryOptions = {\n      maxDataPoints: query.model.maxDataPoints,\n      minInterval: query.model.intervalMs ? msToSingleUnitDuration(query.model.intervalMs) : undefined,\n    };\n    const alertQueryOptions: AlertQueryOptions = {\n      maxDataPoints: queryOptions.maxDataPoints,\n      minInterval: queryOptions.minInterval,\n    };\n\n    const isAlertCondition = condition === query.refId;\n\n    return (\n      <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n        <SelectingDataSourceTooltip />\n        <QueryOptions\n          onChangeTimeRange={onChangeTimeRange}\n          query={query}\n          queryOptions={alertQueryOptions}\n          onChangeQueryOptions={onChangeQueryOptions}\n          index={index}\n        />\n        <ExpressionStatusIndicator onSetCondition={() => onSetCondition(query.refId)} isCondition={isAlertCondition} />\n      </Stack>\n    );\n  }\n\n  const showVizualisation = data.state !== LoadingState.NotStarted;\n  // ⚠️ the query editors want the entire array of queries passed as \"DataQuery\" NOT \"AlertQuery\"\n  // TypeScript isn't complaining here because the interfaces just happen to be compatible\n  const editorQueries = cloneDeep(queries.map((query) => query.model));\n\n  return (\n    <Stack direction=\"column\" gap={0.5}>\n      <div className={styles.wrapper}>\n        <QueryEditorRow<DataQuery>\n          alerting\n          collapsable={false}\n          dataSource={dsSettings}\n          onDataSourceLoaded={setDsInstance}\n          onChangeDataSource={(settings) => onChangeDataSource(settings, index)}\n          id={query.refId}\n          index={index}\n          key={query.refId}\n          data={data}\n          query={queryWithDefaults}\n          onChange={(query) => onChangeQuery(query, index)}\n          onRemoveQuery={onRemoveQuery}\n          onAddQuery={() => onDuplicateQuery(cloneDeep(query))}\n          onRunQuery={onRunQueries}\n          queries={editorQueries}\n          renderHeaderExtras={() => <HeaderExtras query={query} index={index} error={error} />}\n          app={CoreApp.UnifiedAlerting}\n          hideHideQueryButton={true}\n        />\n      </div>\n      {showVizualisation && <VizWrapper data={data} thresholds={thresholds} thresholdsType={thresholdsType} />}\n    </Stack>\n  );\n};\n\nexport const EmptyQueryWrapper = ({ children }: React.PropsWithChildren<{}>) => {\n  const styles = useStyles2(getStyles);\n  return <div className={styles.wrapper}>{children}</div>;\n};\n\nexport function MaxDataPointsOption({\n  options,\n  onChange,\n}: {\n  options: AlertQueryOptions;\n  onChange: (options: AlertQueryOptions) => void;\n}) {\n  const value = options.maxDataPoints ?? '';\n\n  const onMaxDataPointsBlur = (event: ChangeEvent<HTMLInputElement>) => {\n    const maxDataPointsNumber = parseInt(event.target.value, 10);\n\n    const maxDataPoints = isNaN(maxDataPointsNumber) || maxDataPointsNumber === 0 ? undefined : maxDataPointsNumber;\n\n    if (maxDataPoints !== options.maxDataPoints) {\n      onChange({\n        ...options,\n        maxDataPoints,\n      });\n    }\n  };\n\n  return (\n    <InlineField\n      labelWidth={24}\n      label=\"Max data points\"\n      tooltip=\"The maximum data points per series. Used directly by some data sources and used in calculation of auto interval. With streaming data this value is used for the rolling buffer.\"\n    >\n      <Input\n        type=\"number\"\n        width={10}\n        placeholder={DEFAULT_MAX_DATA_POINTS.toString()}\n        spellCheck={false}\n        onBlur={onMaxDataPointsBlur}\n        defaultValue={value}\n      />\n    </InlineField>\n  );\n}\n\nexport function MinIntervalOption({\n  options,\n  onChange,\n}: {\n  options: AlertQueryOptions;\n  onChange: (options: AlertQueryOptions) => void;\n}) {\n  const value = options.minInterval ?? '';\n\n  const onMinIntervalBlur = (event: ChangeEvent<HTMLInputElement>) => {\n    const minInterval = event.target.value;\n    if (minInterval !== value) {\n      onChange({\n        ...options,\n        minInterval,\n      });\n    }\n  };\n\n  return (\n    <InlineField\n      label=\"Interval\"\n      labelWidth={24}\n      tooltip={\n        <>\n          Interval sent to the data source. Recommended to be set to write frequency, for example <code>1m</code> if\n          your data is written every minute.\n        </>\n      }\n    >\n      <Input\n        type=\"text\"\n        width={10}\n        placeholder={DEFAULT_MIN_INTERVAL}\n        spellCheck={false}\n        onBlur={onMinIntervalBlur}\n        defaultValue={value}\n      />\n    </InlineField>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    label: 'AlertingQueryWrapper',\n    marginBottom: theme.spacing(1),\n    border: `1px solid ${theme.colors.border.weak}`,\n    borderRadius: theme.shape.radius.default,\n\n    button: {\n      overflow: 'visible',\n    },\n  }),\n  dsTooltip: css({\n    display: 'flex',\n    alignItems: 'center',\n    '&:hover': {\n      opacity: 0.85,\n      cursor: 'pointer',\n    },\n  }),\n});\n","import { DragDropContext, Droppable, DropResult } from '@hello-pangea/dnd';\nimport { omit } from 'lodash';\nimport { PureComponent, useState } from 'react';\n\nimport {\n  DataQuery,\n  DataSourceInstanceSettings,\n  getDataSourceRef,\n  LoadingState,\n  PanelData,\n  rangeUtil,\n  RelativeTimeRange,\n} from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { Button, Card, Icon, Stack } from '@grafana/ui';\nimport { QueryOperationRow } from 'app/core/components/QueryOperationRow/QueryOperationRow';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { AlertDataQuery, AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { AlertQueryOptions, EmptyQueryWrapper, QueryWrapper } from './QueryWrapper';\nimport { errorFromCurrentCondition, errorFromPreviewData, getThresholdsForQueries } from './util';\n\ninterface Props {\n  // The query configuration\n  queries: AlertQuery[];\n  expressions: AlertQuery[];\n  data: Record<string, PanelData>;\n  onRunQueries: () => void;\n\n  // Query editing\n  onQueriesChange: (queries: AlertQuery[]) => void;\n  onDuplicateQuery: (query: AlertQuery) => void;\n  condition: string | null;\n  onSetCondition: (refId: string) => void;\n}\n\nexport class QueryRows extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  onRemoveQuery = (query: DataQuery) => {\n    const { queries, onQueriesChange } = this.props;\n    onQueriesChange(queries.filter((q) => q.refId !== query.refId));\n  };\n\n  onChangeTimeRange = (timeRange: RelativeTimeRange, index: number) => {\n    const { queries, onQueriesChange } = this.props;\n    onQueriesChange(\n      queries.map((item, itemIndex) => {\n        if (itemIndex !== index) {\n          return item;\n        }\n        return {\n          ...item,\n          relativeTimeRange: timeRange,\n        };\n      })\n    );\n  };\n\n  onChangeQueryOptions = (options: AlertQueryOptions, index: number) => {\n    const { queries, onQueriesChange } = this.props;\n    onQueriesChange(\n      queries.map((item, itemIndex) => {\n        if (itemIndex !== index) {\n          return item;\n        }\n        return {\n          ...item,\n          model: {\n            ...item.model,\n            maxDataPoints: options.maxDataPoints,\n            intervalMs: options.minInterval ? rangeUtil.intervalToMs(options.minInterval) : undefined,\n          },\n        };\n      })\n    );\n  };\n\n  onChangeDataSource = (settings: DataSourceInstanceSettings, index: number) => {\n    const { queries, onQueriesChange } = this.props;\n\n    const updatedQueries = queries.map((item, itemIndex) => {\n      if (itemIndex !== index) {\n        return item;\n      }\n\n      const previousSettings = this.getDataSourceSettings(item);\n\n      // Copy model if changing to a datasource of same type.\n      if (settings.type === previousSettings?.type) {\n        return copyModel(item, settings);\n      }\n      return newModel(item, settings);\n    });\n\n    onQueriesChange(updatedQueries);\n  };\n\n  onChangeQuery = (query: DataQuery, index: number) => {\n    const { queries, onQueriesChange } = this.props;\n\n    onQueriesChange(\n      queries.map((item, itemIndex) => {\n        if (itemIndex !== index) {\n          return item;\n        }\n\n        return {\n          ...item,\n          refId: query.refId,\n          queryType: item.model.queryType ?? '',\n          model: {\n            ...item.model,\n            ...query,\n            datasource: query.datasource!,\n          },\n        };\n      })\n    );\n  };\n\n  onDragEnd = (result: DropResult) => {\n    const { queries, onQueriesChange } = this.props;\n\n    if (!result || !result.destination) {\n      return;\n    }\n\n    const startIndex = result.source.index;\n    const endIndex = result.destination.index;\n    if (startIndex === endIndex) {\n      return;\n    }\n\n    const update = Array.from(queries);\n    const [removed] = update.splice(startIndex, 1);\n    update.splice(endIndex, 0, removed);\n    onQueriesChange(update);\n  };\n\n  getDataSourceSettings = (query: AlertQuery): DataSourceInstanceSettings | undefined => {\n    return getDataSourceSrv().getInstanceSettings(query.datasourceUid);\n  };\n\n  render() {\n    const { queries, expressions, condition } = this.props;\n    const thresholdByRefId = getThresholdsForQueries([...queries, ...expressions], condition);\n\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Droppable droppableId=\"alerting-queries\" direction=\"vertical\">\n          {(provided) => {\n            return (\n              <div ref={provided.innerRef} {...provided.droppableProps}>\n                <Stack direction=\"column\">\n                  {queries.map((query, index) => {\n                    const isCondition = this.props.condition === query.refId;\n                    const data: PanelData = this.props.data?.[query.refId] ?? {\n                      series: [],\n                      state: LoadingState.NotStarted,\n                    };\n                    const dsSettings = this.getDataSourceSettings(query);\n                    let error: Error | undefined = undefined;\n                    if (data && isCondition) {\n                      error = errorFromCurrentCondition(data);\n                    } else if (data) {\n                      error = errorFromPreviewData(data);\n                    }\n\n                    if (!dsSettings) {\n                      return (\n                        <DatasourceNotFound\n                          key={`${query.refId}-${index}`}\n                          index={index}\n                          model={query.model}\n                          onUpdateDatasource={() => {\n                            const defaultDataSource = getDatasourceSrv().getInstanceSettings(null);\n                            if (defaultDataSource) {\n                              this.onChangeDataSource(defaultDataSource, index);\n                            }\n                          }}\n                          onRemoveQuery={() => {\n                            this.onRemoveQuery(query);\n                          }}\n                        />\n                      );\n                    }\n\n                    return (\n                      <QueryWrapper\n                        index={index}\n                        key={query.refId}\n                        dsSettings={dsSettings}\n                        data={data}\n                        error={error}\n                        query={query}\n                        onChangeQuery={this.onChangeQuery}\n                        onRemoveQuery={this.onRemoveQuery}\n                        queries={[...queries, ...expressions]}\n                        onChangeDataSource={this.onChangeDataSource}\n                        onDuplicateQuery={this.props.onDuplicateQuery}\n                        onChangeTimeRange={this.onChangeTimeRange}\n                        onChangeQueryOptions={this.onChangeQueryOptions}\n                        thresholds={thresholdByRefId[query.refId]?.config}\n                        thresholdsType={thresholdByRefId[query.refId]?.mode}\n                        onRunQueries={this.props.onRunQueries}\n                        condition={this.props.condition}\n                        onSetCondition={this.props.onSetCondition}\n                      />\n                    );\n                  })}\n                  {provided.placeholder}\n                </Stack>\n              </div>\n            );\n          }}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n}\n\nfunction copyModel(item: AlertQuery, settings: DataSourceInstanceSettings): Omit<AlertQuery, 'datasource'> {\n  return {\n    ...item,\n    model: {\n      ...omit(item.model, 'datasource'),\n      datasource: getDataSourceRef(settings),\n    },\n    datasourceUid: settings.uid,\n  };\n}\n\nfunction newModel(item: AlertQuery, settings: DataSourceInstanceSettings): Omit<AlertQuery, 'datasource'> {\n  return {\n    refId: item.refId,\n    relativeTimeRange: item.relativeTimeRange,\n    queryType: '',\n    datasourceUid: settings.uid,\n    model: {\n      refId: item.refId,\n      hide: false,\n      datasource: getDataSourceRef(settings),\n    },\n  };\n}\n\ninterface DatasourceNotFoundProps {\n  index: number;\n  model: AlertDataQuery;\n  onUpdateDatasource: () => void;\n  onRemoveQuery: () => void;\n}\n\nconst DatasourceNotFound = ({ index, onUpdateDatasource, onRemoveQuery, model }: DatasourceNotFoundProps) => {\n  const refId = model.refId;\n\n  const [showDetails, setShowDetails] = useState<boolean>(false);\n\n  const toggleDetails = () => {\n    setShowDetails((show) => !show);\n  };\n\n  const handleUpdateDatasource = () => {\n    onUpdateDatasource();\n  };\n\n  return (\n    <EmptyQueryWrapper>\n      <QueryOperationRow title={refId} draggable index={index} id={refId} isOpen collapsable={false}>\n        <Card>\n          <Card.Heading>This datasource has been removed</Card.Heading>\n          <Card.Description>\n            The datasource for this query was not found, it was either removed or is not installed correctly.\n          </Card.Description>\n          <Card.Figure>\n            <Icon name=\"question-circle\" />\n          </Card.Figure>\n          <Card.Actions>\n            <Button key=\"update\" variant=\"secondary\" onClick={handleUpdateDatasource}>\n              Update datasource\n            </Button>\n            <Button key=\"remove\" variant=\"destructive\" onClick={onRemoveQuery}>\n              Remove query\n            </Button>\n          </Card.Actions>\n          <Card.SecondaryActions>\n            <Button\n              key=\"details\"\n              onClick={toggleDetails}\n              icon={showDetails ? 'angle-up' : 'angle-down'}\n              fill=\"text\"\n              size=\"sm\"\n            >\n              Show details\n            </Button>\n          </Card.SecondaryActions>\n        </Card>\n        {showDetails && (\n          <div>\n            <pre>\n              <code>{JSON.stringify(model, null, 2)}</code>\n            </pre>\n          </div>\n        )}\n      </QueryOperationRow>\n    </EmptyQueryWrapper>\n  );\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2, PanelData } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { QueryRows } from './QueryRows';\n\ninterface Props {\n  panelData: Record<string, PanelData>;\n  queries: AlertQuery[];\n  expressions: AlertQuery[];\n  onRunQueries: () => void;\n  onChangeQueries: (queries: AlertQuery[]) => void;\n  onDuplicateQuery: (query: AlertQuery) => void;\n  condition: string | null;\n  onSetCondition: (refId: string) => void;\n}\n\nexport const QueryEditor = ({\n  queries,\n  expressions,\n  panelData,\n  onRunQueries,\n  onChangeQueries,\n  onDuplicateQuery,\n  condition,\n  onSetCondition,\n}: Props) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <QueryRows\n        data={panelData}\n        queries={queries}\n        expressions={expressions}\n        onRunQueries={onRunQueries}\n        onQueriesChange={onChangeQueries}\n        onDuplicateQuery={onDuplicateQuery}\n        condition={condition}\n        onSetCondition={onSetCondition}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    backgroundColor: theme.colors.background.primary,\n    height: '100%',\n  }),\n});\n","import { css } from '@emotion/css';\nimport { FC, useEffect, useState } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { PanelData, CoreApp, GrafanaTheme2, LoadingState } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { DataQuery } from '@grafana/schema';\nimport { useStyles2 } from '@grafana/ui';\nimport { DataSourceType } from 'app/features/alerting/unified/utils/datasource';\nimport { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { QueryErrorAlert } from 'app/features/query/components/QueryErrorAlert';\nimport { LokiQueryType } from 'app/plugins/datasource/loki/dataquery.gen';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { isPromOrLokiQuery } from '../../utils/rule-form';\n\nimport { VizWrapper } from './VizWrapper';\n\nexport interface RecordingRuleEditorProps {\n  queries: AlertQuery[];\n  onChangeQuery: (updatedQueries: AlertQuery[]) => void;\n  runQueries: () => void;\n  panelData: Record<string, PanelData>;\n  dataSourceName: string;\n}\n\nexport const RecordingRuleEditor: FC<RecordingRuleEditorProps> = ({\n  queries,\n  onChangeQuery,\n  runQueries,\n  panelData,\n  dataSourceName,\n}) => {\n  const [data, setData] = useState<PanelData>({\n    series: [],\n    state: LoadingState.NotStarted,\n    timeRange: getTimeSrv().timeRange(),\n  });\n\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    setData(panelData?.[queries[0]?.refId]);\n  }, [panelData, queries]);\n\n  const {\n    error,\n    loading,\n    value: dataSource,\n  } = useAsync(() => {\n    return getDataSourceSrv().get(dataSourceName);\n  }, [dataSourceName]);\n\n  const handleChangedQuery = (changedQuery: DataQuery) => {\n    if (!isPromOrLokiQuery(changedQuery) || !dataSource) {\n      return;\n    }\n\n    const [query] = queries;\n    const { uid: dataSourceId, type } = dataSource;\n    const isLoki = type === DataSourceType.Loki;\n    const expr = changedQuery.expr;\n\n    const merged = {\n      ...query,\n      ...changedQuery,\n      datasourceUid: dataSourceId,\n      expr,\n      model: {\n        expr,\n        datasource: changedQuery.datasource,\n        refId: changedQuery.refId,\n        editorMode: changedQuery.editorMode,\n        // Instant and range are used by Prometheus queries\n        instant: changedQuery.instant,\n        range: changedQuery.range,\n        // Query type is used by Loki queries\n        // On first render/when creating a recording rule, the query type is not set\n        // unless the user has changed it betwee range/instant. The cleanest way to handle this\n        // is to default to instant, or whatever the changed type is\n        queryType: isLoki ? changedQuery.queryType || LokiQueryType.Instant : changedQuery.queryType,\n        legendFormat: changedQuery.legendFormat,\n      },\n    };\n    onChangeQuery([merged]);\n  };\n\n  if (loading || dataSource?.name !== dataSourceName) {\n    return null;\n  }\n\n  const dsi = getDataSourceSrv().getInstanceSettings(dataSourceName);\n\n  if (error || !dataSource || !dataSource?.components?.QueryEditor || !dsi) {\n    const errorMessage = error?.message || 'Data source plugin does not export any Query Editor component';\n    return <div>Could not load query editor due to: {errorMessage}</div>;\n  }\n\n  const QueryEditor = dataSource.components.QueryEditor;\n\n  return (\n    <>\n      {queries.length && (\n        <>\n          <QueryEditor\n            query={queries[0]}\n            queries={queries}\n            app={CoreApp.UnifiedAlerting}\n            onChange={handleChangedQuery}\n            onRunQuery={runQueries}\n            datasource={dataSource}\n          />\n          {(data?.errors || []).map((err) => {\n            return <QueryErrorAlert key={err.message} error={err} />;\n          })}\n        </>\n      )}\n\n      {data && (\n        <div className={styles.vizWrapper}>\n          <VizWrapper data={data} />\n        </div>\n      )}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  vizWrapper: css({\n    margin: theme.spacing(1, 0),\n  }),\n});\n","import { useCallback } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { DataSourceInstanceSettings } from '@grafana/data';\nimport { DataSourcePicker } from 'app/features/datasources/components/picker/DataSourcePicker';\nimport { dispatch } from 'app/store/store';\n\nimport { useRulesSourcesWithRuler } from '../../hooks/useRuleSourcesWithRuler';\nimport { fetchAllPromBuildInfoAction } from '../../state/actions';\n\ninterface Props {\n  disabled?: boolean;\n  onChange: (ds: DataSourceInstanceSettings) => void;\n  value: string | null;\n  onBlur?: () => void;\n  name?: string;\n}\n\nexport function CloudRulesSourcePicker({ value, disabled, ...props }: Props): JSX.Element {\n  const rulesSourcesWithRuler = useRulesSourcesWithRuler();\n\n  const { loading = true } = useAsync(() => dispatch(fetchAllPromBuildInfoAction()), [dispatch]);\n\n  const dataSourceFilter = useCallback(\n    (ds: DataSourceInstanceSettings): boolean => {\n      return !!rulesSourcesWithRuler.find(({ id }) => id === ds.id);\n    },\n    [rulesSourcesWithRuler]\n  );\n\n  return (\n    <DataSourcePicker\n      disabled={loading || disabled}\n      noDefault\n      alerting\n      filter={dataSourceFilter}\n      current={value}\n      {...props}\n    />\n  );\n}\n","import { css } from '@emotion/css';\nimport { useFormContext, Controller } from 'react-hook-form';\n\nimport { DataSourceInstanceSettings, GrafanaTheme2 } from '@grafana/data';\nimport { Field, useStyles2 } from '@grafana/ui';\n\nimport { RuleFormType, RuleFormValues } from '../../../types/rule-form';\nimport { CloudRulesSourcePicker } from '../CloudRulesSourcePicker';\n\nexport interface CloudDataSourceSelectorProps {\n  disabled?: boolean;\n  onChangeCloudDatasource: (datasourceUid: string) => void;\n}\nexport const CloudDataSourceSelector = ({ disabled, onChangeCloudDatasource }: CloudDataSourceSelectorProps) => {\n  const {\n    control,\n    formState: { errors },\n    setValue,\n    watch,\n  } = useFormContext<RuleFormValues>();\n\n  const styles = useStyles2(getStyles);\n  const ruleFormType = watch('type');\n\n  return (\n    <>\n      <div className={styles.flexRow}>\n        {(ruleFormType === RuleFormType.cloudAlerting || ruleFormType === RuleFormType.cloudRecording) && (\n          <Field\n            className={styles.formInput}\n            label={disabled ? 'Data source' : 'Select data source'}\n            error={errors.dataSourceName?.message}\n            invalid={!!errors.dataSourceName?.message}\n          >\n            <Controller\n              render={({ field: { onChange, ref, ...field } }) => (\n                <CloudRulesSourcePicker\n                  {...field}\n                  disabled={disabled}\n                  onChange={(ds: DataSourceInstanceSettings) => {\n                    // reset expression as they don't need to persist after changing datasources\n                    setValue('expression', '');\n                    onChange(ds?.name ?? null);\n                    onChangeCloudDatasource(ds?.uid ?? null);\n                  }}\n                />\n              )}\n              name=\"dataSourceName\"\n              control={control}\n              rules={{\n                required: { value: true, message: 'Please select a data source' },\n              }}\n            />\n          </Field>\n        )}\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  formInput: css({\n    width: '330px',\n    '& + &': {\n      marginLeft: theme.spacing(3),\n    },\n  }),\n  flexRow: css({\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    alignItems: 'flex-end',\n  }),\n});\n","import { useFormContext } from 'react-hook-form';\n\nimport { DataSourceInstanceSettings } from '@grafana/data';\nimport { DataSourceJsonData } from '@grafana/schema';\nimport { RadioButtonGroup, Text, Stack } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { ExpressionDatasourceUID } from 'app/features/expressions/types';\nimport { AccessControlAction } from 'app/types';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { RuleFormType, RuleFormValues } from '../../../types/rule-form';\nimport { NeedHelpInfo } from '../NeedHelpInfo';\n\nfunction getAvailableRuleTypes() {\n  const canCreateGrafanaRules = contextSrv.hasPermission(AccessControlAction.AlertingRuleCreate);\n  const canCreateCloudRules = contextSrv.hasPermission(AccessControlAction.AlertingRuleExternalWrite);\n  const defaultRuleType = canCreateGrafanaRules ? RuleFormType.grafana : RuleFormType.cloudAlerting;\n\n  const enabledRuleTypes: RuleFormType[] = [];\n  if (canCreateGrafanaRules) {\n    enabledRuleTypes.push(RuleFormType.grafana);\n  }\n  if (canCreateCloudRules) {\n    enabledRuleTypes.push(RuleFormType.cloudAlerting, RuleFormType.cloudRecording);\n  }\n\n  return { enabledRuleTypes, defaultRuleType };\n}\n\nconst onlyOneDSInQueries = (queries: AlertQuery[]) => {\n  return queries.filter((q) => q.datasourceUid !== ExpressionDatasourceUID).length === 1;\n};\nconst getCanSwitch = ({\n  queries,\n  ruleFormType,\n  rulesSourcesWithRuler,\n}: {\n  rulesSourcesWithRuler: Array<DataSourceInstanceSettings<DataSourceJsonData>>;\n  queries: AlertQuery[];\n  ruleFormType: RuleFormType | undefined;\n}) => {\n  // get available rule types\n  const availableRuleTypes = getAvailableRuleTypes();\n\n  // check if we have only one query in queries and if it's a cloud datasource\n  const onlyOneDS = onlyOneDSInQueries(queries);\n  const dataSourceIdFromQueries = queries[0]?.datasourceUid ?? '';\n  const isRecordingRuleType = ruleFormType === RuleFormType.cloudRecording;\n\n  //let's check if we switch to cloud type\n  const canSwitchToCloudRule =\n    !isRecordingRuleType &&\n    onlyOneDS &&\n    rulesSourcesWithRuler.some((dsJsonData) => dsJsonData.uid === dataSourceIdFromQueries);\n\n  const canSwitchToGrafanaRule = !isRecordingRuleType;\n  // check for enabled types\n  const grafanaTypeEnabled = availableRuleTypes.enabledRuleTypes.includes(RuleFormType.grafana);\n  const cloudTypeEnabled = availableRuleTypes.enabledRuleTypes.includes(RuleFormType.cloudAlerting);\n\n  // can we switch to the other type? (cloud or grafana)\n  const canSwitchFromCloudToGrafana =\n    ruleFormType === RuleFormType.cloudAlerting && grafanaTypeEnabled && canSwitchToGrafanaRule;\n  const canSwitchFromGrafanaToCloud =\n    ruleFormType === RuleFormType.grafana && canSwitchToCloudRule && cloudTypeEnabled && canSwitchToCloudRule;\n\n  return canSwitchFromCloudToGrafana || canSwitchFromGrafanaToCloud;\n};\n\nexport interface SmartAlertTypeDetectorProps {\n  editingExistingRule: boolean;\n  rulesSourcesWithRuler: Array<DataSourceInstanceSettings<DataSourceJsonData>>;\n  queries: AlertQuery[];\n  onClickSwitch: () => void;\n}\n\nexport function SmartAlertTypeDetector({\n  editingExistingRule,\n  rulesSourcesWithRuler,\n  queries,\n  onClickSwitch,\n}: SmartAlertTypeDetectorProps) {\n  const { getValues } = useFormContext<RuleFormValues>();\n  const [ruleFormType] = getValues(['type']);\n  const canSwitch = getCanSwitch({ queries, ruleFormType, rulesSourcesWithRuler });\n\n  const options = [\n    { label: 'Grafana-managed', value: RuleFormType.grafana },\n    { label: 'Data source-managed', value: RuleFormType.cloudAlerting },\n  ];\n\n  // if we can't switch to data-source managed, disable it\n  // TODO figure out how to show a popover to the user to indicate _why_ it's disabled\n  const disabledOptions = canSwitch ? [] : [RuleFormType.cloudAlerting];\n\n  return (\n    <Stack direction=\"column\" gap={1} alignItems=\"flex-start\">\n      <Stack direction=\"column\" gap={0}>\n        <Text variant=\"h5\">Rule type</Text>\n        <Stack direction=\"row\" gap={0.5} alignItems=\"center\">\n          <Text variant=\"bodySmall\" color=\"secondary\">\n            Select where the alert rule will be managed.\n          </Text>\n          <NeedHelpInfo\n            contentText={\n              <>\n                <Text color=\"primary\" variant=\"h6\">\n                  Grafana-managed alert rules\n                </Text>\n                <p>\n                  Grafana-managed alert rules allow you to create alerts that can act on data from any of our supported\n                  data sources, including having multiple data sources in the same rule. You can also add expressions to\n                  transform your data and set alert conditions. Using images in alert notifications is also supported.\n                </p>\n                <Text color=\"primary\" variant=\"h6\">\n                  Data source-managed alert rules\n                </Text>\n                <p>\n                  Data source-managed alert rules can be used for Grafana Mimir or Grafana Loki data sources which have\n                  been configured to support rule creation. The use of expressions or multiple queries is not supported.\n                </p>\n              </>\n            }\n            externalLink=\"https://grafana.com/docs/grafana/latest/alerting/fundamentals/alert-rules/alert-rule-types/\"\n            linkText=\"Read about alert rule types\"\n            title=\"Alert rule types\"\n          />\n        </Stack>\n      </Stack>\n      <RadioButtonGroup\n        options={options}\n        disabled={editingExistingRule}\n        disabledOptions={disabledOptions}\n        value={ruleFormType}\n        onChange={onClickSwitch}\n      />\n      {/* editing an existing rule, we just show \"cannot be changed\" */}\n      {editingExistingRule && (\n        <Text color=\"secondary\">The alert rule type cannot be changed for an existing rule.</Text>\n      )}\n      {/* in regular alert creation we tell the user what options they have when using a cloud data source */}\n      {!editingExistingRule && (\n        <>\n          {canSwitch ? (\n            <Text color=\"secondary\">\n              {ruleFormType === RuleFormType.grafana\n                ? 'The data source selected in your query supports alert rule management. Switch to data source-managed if you want the alert rule to be managed by the data source instead of Grafana.'\n                : 'Switch to Grafana-managed to use expressions, multiple queries, images in notifications and various other features.'}\n            </Text>\n          ) : (\n            <Text color=\"secondary\">Based on the selected data sources this alert rule will be Grafana-managed.</Text>\n          )}\n        </>\n      )}\n    </Stack>\n  );\n}\n","import { RuleFormType } from '../../../types/rule-form';\n\ntype FormDescriptions = {\n  sectionTitle: string;\n  helpLabel: string;\n  helpContent: string;\n  helpLink: string;\n};\n\nexport const DESCRIPTIONS: Record<RuleFormType, FormDescriptions> = {\n  [RuleFormType.cloudRecording]: {\n    sectionTitle: 'Define recording rule',\n    helpLabel: 'Define your recording rule',\n    helpContent:\n      'Pre-compute frequently needed or computationally expensive expressions and save their result as a new set of time series.',\n    helpLink: '',\n  },\n  [RuleFormType.grafanaRecording]: {\n    sectionTitle: 'Define recording rule',\n    helpLabel: 'Define your recording rule',\n    helpContent:\n      'Pre-compute frequently needed or computationally expensive expressions and save their result as a new set of time series.',\n    helpLink: '',\n  },\n  [RuleFormType.grafana]: {\n    sectionTitle: 'Define query and alert condition',\n    helpLabel: 'Define query and alert condition',\n    helpContent:\n      'An alert rule consists of one or more queries and expressions that select the data you want to measure. Define queries and/or expressions and then choose one of them as the alert rule condition. This is the threshold that an alert rule must meet or exceed in order to fire. For more information on queries and expressions, see Query and transform data.',\n    helpLink: 'https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/',\n  },\n  [RuleFormType.cloudAlerting]: {\n    sectionTitle: 'Define query and alert condition',\n    helpLabel: 'Define query and alert condition',\n    helpContent:\n      'An alert rule consists of one or more queries and expressions that select the data you want to measure. Define queries and/or expressions and then choose one of them as the alert rule condition. This is the threshold that an alert rule must meet or exceed in order to fire. For more information on queries and expressions, see Query and transform data.',\n    helpLink: 'https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/',\n  },\n};\n","import { ExpressionDatasourceUID } from 'app/features/expressions/types';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nexport const hasCyclicalReferences = (queries: AlertQuery[]) => {\n  try {\n    JSON.stringify(queries);\n    return false;\n  } catch (e) {\n    return true;\n  }\n};\n\nexport const findDataSourceFromExpressionRecursive = (\n  queries: AlertQuery[],\n  alertQuery: AlertQuery\n): AlertQuery | null | undefined => {\n  //Check if this is not cyclical structre\n  if (hasCyclicalReferences(queries)) {\n    return null;\n  }\n  // We have the data source in this dataQuery\n  if (alertQuery.datasourceUid !== ExpressionDatasourceUID) {\n    return alertQuery;\n  }\n  // alertQuery it's an expression, we have to traverse all the tree up to the data source\n  else {\n    const alertQueryReferenced = queries.find((alertQuery_) => alertQuery_.refId === alertQuery.model.expression);\n    if (alertQueryReferenced) {\n      return findDataSourceFromExpressionRecursive(queries, alertQueryReferenced);\n    } else {\n      return null;\n    }\n  }\n};\n","import { createAction, createReducer } from '@reduxjs/toolkit';\n\nimport {\n  DataQuery,\n  getDataSourceRef,\n  getDefaultRelativeTimeRange,\n  getNextRefId,\n  rangeUtil,\n  RelativeTimeRange,\n} from '@grafana/data';\nimport { findDataSourceFromExpressionRecursive } from 'app/features/alerting/unified/utils/dataSourceFromExpression';\nimport { dataSource as expressionDatasource } from 'app/features/expressions/ExpressionDatasource';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { ExpressionDatasourceUID, ExpressionQuery, ExpressionQueryType } from 'app/features/expressions/types';\nimport { defaultCondition } from 'app/features/expressions/utils/expressionTypes';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { getDefaultOrFirstCompatibleDataSource } from '../../../utils/datasource';\nimport { queriesWithUpdatedReferences, refIdExists } from '../util';\n\nexport interface QueriesAndExpressionsState {\n  queries: AlertQuery[];\n}\n\nconst findDataSourceFromExpression = (\n  queries: AlertQuery[],\n  expression: string | undefined\n): AlertQuery | null | undefined => {\n  const firstReference = queries.find((alertQuery) => alertQuery.refId === expression);\n  const dataSource = firstReference && findDataSourceFromExpressionRecursive(queries, firstReference);\n  return dataSource;\n};\n\nconst initialState: QueriesAndExpressionsState = {\n  queries: [],\n};\n\nexport const duplicateQuery = createAction<AlertQuery>('duplicateQuery');\nexport const addNewDataQuery = createAction('addNewDataQuery');\nexport const setDataQueries = createAction<AlertQuery[]>('setDataQueries');\n\nexport const addNewExpression = createAction<ExpressionQueryType>('addNewExpression');\nexport const removeExpression = createAction<string>('removeExpression');\nexport const removeExpressions = createAction('removeExpressions');\nexport const addExpressions = createAction<AlertQuery[]>('addExpressions');\nexport const updateExpression = createAction<ExpressionQuery>('updateExpression');\nexport const updateExpressionRefId = createAction<{ oldRefId: string; newRefId: string }>('updateExpressionRefId');\nexport const rewireExpressions = createAction<{ oldRefId: string; newRefId: string }>('rewireExpressions');\nexport const updateExpressionType = createAction<{ refId: string; type: ExpressionQueryType }>('updateExpressionType');\nexport const updateExpressionTimeRange = createAction('updateExpressionTimeRange');\nexport const updateMaxDataPoints = createAction<{ refId: string; maxDataPoints: number }>('updateMaxDataPoints');\nexport const updateMinInterval = createAction<{ refId: string; minInterval: string }>('updateMinInterval');\n\nexport const setRecordingRulesQueries = createAction<{ recordingRuleQueries: AlertQuery[]; expression: string }>(\n  'setRecordingRulesQueries'\n);\n\nexport const queriesAndExpressionsReducer = createReducer(initialState, (builder) => {\n  // data queries actions\n  builder\n    .addCase(duplicateQuery, (state, { payload }) => {\n      state.queries = addQuery(state.queries, payload);\n    })\n    .addCase(addNewDataQuery, (state) => {\n      const datasource = getDefaultOrFirstCompatibleDataSource();\n      if (!datasource) {\n        return;\n      }\n\n      state.queries = addQuery(state.queries, {\n        datasourceUid: datasource.uid,\n        model: {\n          refId: '',\n          datasource: getDataSourceRef(datasource),\n        },\n      });\n    })\n    .addCase(setDataQueries, (state, { payload }) => {\n      const expressionQueries = state.queries.filter((query) => isExpressionQuery(query.model));\n      state.queries = [...payload, ...expressionQueries];\n    })\n    .addCase(setRecordingRulesQueries, (state, { payload }) => {\n      const query = payload.recordingRuleQueries[0];\n      const recordingRuleQuery = {\n        ...query,\n        ...{ expr: payload.expression, model: query?.model },\n      };\n\n      state.queries = [recordingRuleQuery];\n    })\n    .addCase(updateMaxDataPoints, (state, action) => {\n      state.queries = state.queries.map((query) => {\n        return query.refId === action.payload.refId\n          ? {\n              ...query,\n              model: {\n                ...query.model,\n                maxDataPoints: action.payload.maxDataPoints,\n              },\n            }\n          : query;\n      });\n    })\n    .addCase(updateMinInterval, (state, action) => {\n      state.queries = state.queries.map((query) => {\n        return query.refId === action.payload.refId\n          ? {\n              ...query,\n              model: {\n                ...query.model,\n                intervalMs: action.payload.minInterval ? rangeUtil.intervalToMs(action.payload.minInterval) : undefined,\n              },\n            }\n          : query;\n      });\n    });\n\n  // expressions actions\n  builder\n    .addCase(addNewExpression, (state, { payload }) => {\n      state.queries = addQuery(state.queries, {\n        datasourceUid: ExpressionDatasourceUID,\n        model: expressionDatasource.newQuery({\n          type: payload,\n          conditions: [{ ...defaultCondition, query: { params: [] } }],\n          expression: '',\n        }),\n      });\n    })\n    .addCase(removeExpression, (state, { payload }) => {\n      state.queries = state.queries.filter((query) => query.refId !== payload);\n    })\n    .addCase(removeExpressions, (state) => {\n      state.queries = state.queries.filter((query) => !isExpressionQuery(query.model));\n    })\n    .addCase(addExpressions, (state, { payload }) => {\n      state.queries = [...state.queries, ...payload];\n    })\n    .addCase(updateExpression, (state, { payload }) => {\n      state.queries = state.queries.map((query) => {\n        const dataSourceAlertQuery = findDataSourceFromExpression(state.queries, payload.expression);\n\n        const relativeTimeRange = dataSourceAlertQuery\n          ? dataSourceAlertQuery.relativeTimeRange\n          : getDefaultRelativeTimeRange();\n\n        if (query.refId === payload.refId) {\n          query.model = payload;\n          if (payload.type === ExpressionQueryType.resample) {\n            query.relativeTimeRange = relativeTimeRange;\n          }\n        }\n        return query;\n      });\n    })\n    .addCase(updateExpressionTimeRange, (state) => {\n      const newState = state.queries.map((query) => {\n        // It's an expression , let's update the relativeTimeRange with its dataSource relativeTimeRange\n        if (query.datasourceUid === ExpressionDatasourceUID) {\n          const dataSource = findDataSourceFromExpression(state.queries, query.model.expression);\n          const relativeTimeRange = dataSource ? dataSource.relativeTimeRange : getDefaultRelativeTimeRange();\n          query.relativeTimeRange = relativeTimeRange;\n        }\n        return query;\n      });\n      state.queries = newState;\n    })\n    .addCase(updateExpressionRefId, (state, { payload }) => {\n      const { newRefId, oldRefId } = payload;\n\n      // if the new refId already exists we just refuse to update the state\n      const newRefIdExists = refIdExists(state.queries, newRefId);\n      if (newRefIdExists) {\n        return;\n      }\n\n      const updatedQueries = queriesWithUpdatedReferences(state.queries, oldRefId, newRefId);\n      state.queries = updatedQueries.map((query) => {\n        if (query.refId === oldRefId) {\n          return {\n            ...query,\n            refId: newRefId,\n            model: {\n              ...query.model,\n              refId: newRefId,\n            },\n          };\n        }\n\n        return query;\n      });\n    })\n    .addCase(rewireExpressions, (state, { payload }) => {\n      state.queries = queriesWithUpdatedReferences(state.queries, payload.oldRefId, payload.newRefId);\n    })\n    .addCase(updateExpressionType, (state, action) => {\n      state.queries = state.queries.map((query) => {\n        return query.refId === action.payload.refId\n          ? {\n              ...query,\n              model: {\n                ...expressionDatasource.newQuery({\n                  type: action.payload.type,\n                  conditions: [{ ...defaultCondition, query: { params: [] } }],\n                  expression: '',\n                }),\n                refId: action.payload.refId,\n              },\n            }\n          : query;\n      });\n    });\n});\n\nconst addQuery = (\n  queries: AlertQuery[],\n  queryToAdd: Pick<AlertQuery, 'model' | 'datasourceUid' | 'relativeTimeRange'>\n): AlertQuery[] => {\n  const refId = getNextRefId(queries);\n  const query: AlertQuery = {\n    ...queryToAdd,\n    refId,\n    queryType: '',\n    model: {\n      ...queryToAdd.model,\n      hide: false,\n      refId,\n    },\n    relativeTimeRange: queryToAdd.relativeTimeRange ?? defaultTimeRange(queryToAdd.model),\n  };\n\n  return [...queries, query];\n};\n\nconst defaultTimeRange = (model: DataQuery): RelativeTimeRange | undefined => {\n  if (isExpressionQuery(model)) {\n    return;\n  }\n\n  return getDefaultRelativeTimeRange();\n};\n","import { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport { LoadingState, PanelData } from '@grafana/data';\n\nimport { AlertQuery } from '../../../../../../types/unified-alerting-dto';\nimport { AlertingQueryRunner } from '../../../state/AlertingQueryRunner';\n\nexport function useAlertQueryRunner() {\n  const [queryPreviewData, setQueryPreviewData] = useState<Record<string, PanelData>>({});\n\n  const runner = useRef(new AlertingQueryRunner());\n\n  useEffect(() => {\n    const currentRunner = runner.current;\n\n    currentRunner.get().subscribe((data) => {\n      setQueryPreviewData(data);\n    });\n\n    return () => {\n      currentRunner.destroy();\n    };\n  }, []);\n\n  const clearPreviewData = useCallback(() => {\n    setQueryPreviewData({});\n  }, []);\n\n  const cancelQueries = useCallback(() => {\n    runner.current.cancel();\n  }, []);\n\n  const runQueries = useCallback((queriesToPreview: AlertQuery[], condition: string) => {\n    runner.current.run(queriesToPreview, condition);\n  }, []);\n\n  const isPreviewLoading = useMemo(() => {\n    return Object.values(queryPreviewData).some((d) => d.state === LoadingState.Loading);\n  }, [queryPreviewData]);\n\n  return { queryPreviewData, runQueries, cancelQueries, isPreviewLoading, clearPreviewData };\n}\n","import { css } from '@emotion/css';\nimport { cloneDeep } from 'lodash';\nimport { useCallback, useEffect, useMemo, useReducer, useState } from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\n\nimport { getDefaultRelativeTimeRange, GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config, getDataSourceSrv } from '@grafana/runtime';\nimport { Alert, Button, Dropdown, Field, Icon, Menu, MenuItem, Stack, Tooltip, useStyles2 } from '@grafana/ui';\nimport { Text } from '@grafana/ui/src/components/Text/Text';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { ExpressionDatasourceUID, ExpressionQueryType, expressionTypes } from 'app/features/expressions/types';\nimport { useDispatch } from 'app/types';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { useRulesSourcesWithRuler } from '../../../hooks/useRuleSourcesWithRuler';\nimport { fetchAllPromBuildInfoAction } from '../../../state/actions';\nimport { RuleFormType, RuleFormValues } from '../../../types/rule-form';\nimport { getDefaultOrFirstCompatibleDataSource } from '../../../utils/datasource';\nimport { isPromOrLokiQuery, PromOrLokiQuery } from '../../../utils/rule-form';\nimport {\n  isCloudAlertingRuleByType,\n  isCloudRecordingRuleByType,\n  isDataSourceManagedRuleByType,\n  isGrafanaAlertingRuleByType,\n  isGrafanaManagedRuleByType,\n} from '../../../utils/rules';\nimport { ExpressionEditor } from '../ExpressionEditor';\nimport { ExpressionsEditor } from '../ExpressionsEditor';\nimport { NeedHelpInfo } from '../NeedHelpInfo';\nimport { QueryEditor } from '../QueryEditor';\nimport { RecordingRuleEditor } from '../RecordingRuleEditor';\nimport { RuleEditorSection } from '../RuleEditorSection';\nimport { errorFromCurrentCondition, errorFromPreviewData, findRenamedDataQueryReferences, refIdExists } from '../util';\n\nimport { CloudDataSourceSelector } from './CloudDataSourceSelector';\nimport { SmartAlertTypeDetector } from './SmartAlertTypeDetector';\nimport { DESCRIPTIONS } from './descriptions';\nimport {\n  addExpressions,\n  addNewDataQuery,\n  addNewExpression,\n  duplicateQuery,\n  queriesAndExpressionsReducer,\n  removeExpression,\n  removeExpressions,\n  rewireExpressions,\n  setDataQueries,\n  setRecordingRulesQueries,\n  updateExpression,\n  updateExpressionRefId,\n  updateExpressionTimeRange,\n  updateExpressionType,\n} from './reducer';\nimport { useAlertQueryRunner } from './useAlertQueryRunner';\n\ninterface Props {\n  editingExistingRule: boolean;\n  onDataChange: (error: string) => void;\n}\n\nexport const QueryAndExpressionsStep = ({ editingExistingRule, onDataChange }: Props) => {\n  const {\n    setValue,\n    getValues,\n    watch,\n    formState: { errors },\n    control,\n  } = useFormContext<RuleFormValues>();\n\n  const { queryPreviewData, runQueries, cancelQueries, isPreviewLoading, clearPreviewData } = useAlertQueryRunner();\n\n  const initialState = {\n    queries: getValues('queries'),\n  };\n\n  const [{ queries }, dispatch] = useReducer(queriesAndExpressionsReducer, initialState);\n  const [type, condition, dataSourceName] = watch(['type', 'condition', 'dataSourceName']);\n\n  const isGrafanaAlertingType = isGrafanaAlertingRuleByType(type);\n  const isRecordingRuleType = isCloudRecordingRuleByType(type);\n  const isCloudAlertRuleType = isCloudAlertingRuleByType(type);\n\n  const dispatchReduxAction = useDispatch();\n  useEffect(() => {\n    dispatchReduxAction(fetchAllPromBuildInfoAction());\n  }, [dispatchReduxAction]);\n\n  const rulesSourcesWithRuler = useRulesSourcesWithRuler();\n\n  const runQueriesPreview = useCallback(\n    (condition?: string) => {\n      if (isCloudAlertRuleType) {\n        // we will skip preview for cloud rules, these do not have any time series preview\n        // Grafana Managed rules and recording rules do\n        return;\n      }\n\n      runQueries(getValues('queries'), condition || (getValues('condition') ?? ''));\n    },\n    [isCloudAlertRuleType, runQueries, getValues]\n  );\n\n  // whenever we update the queries we have to update the form too\n  useEffect(() => {\n    setValue('queries', queries, { shouldValidate: false });\n  }, [queries, runQueries, setValue]);\n\n  const noCompatibleDataSources = getDefaultOrFirstCompatibleDataSource() === undefined;\n\n  // data queries only\n  const dataQueries = useMemo(() => {\n    return queries.filter((query) => !isExpressionQuery(query.model));\n  }, [queries]);\n\n  // expression queries only\n  const expressionQueries = useMemo(() => {\n    return queries.filter((query) => isExpressionQuery(query.model));\n  }, [queries]);\n\n  const emptyQueries = queries.length === 0;\n\n  // apply some validations and asserts to the results of the evaluation when creating or editing\n  // Grafana-managed alert rules and Grafa-managed recording rules\n  useEffect(() => {\n    if (type && !isGrafanaManagedRuleByType(type)) {\n      return;\n    }\n\n    const currentCondition = getValues('condition');\n    if (!currentCondition) {\n      return;\n    }\n\n    const previewData = queryPreviewData[currentCondition];\n    if (!previewData) {\n      return;\n    }\n\n    const error = errorFromPreviewData(previewData) ?? errorFromCurrentCondition(previewData);\n\n    onDataChange(error?.message || '');\n  }, [queryPreviewData, getValues, onDataChange, type]);\n\n  const handleSetCondition = useCallback(\n    (refId: string | null) => {\n      if (!refId) {\n        return;\n      }\n\n      runQueriesPreview(refId); //we need to run the queries to know if the condition is valid\n\n      setValue('condition', refId);\n    },\n    [runQueriesPreview, setValue]\n  );\n\n  const onUpdateRefId = useCallback(\n    (oldRefId: string, newRefId: string) => {\n      const newRefIdExists = refIdExists(queries, newRefId);\n      // TODO we should set an error and explain what went wrong instead of just refusing to update\n      if (newRefIdExists) {\n        return;\n      }\n\n      dispatch(updateExpressionRefId({ oldRefId, newRefId }));\n\n      // update condition too if refId was updated\n      if (condition === oldRefId) {\n        handleSetCondition(newRefId);\n      }\n    },\n    [condition, queries, handleSetCondition]\n  );\n\n  const updateExpressionAndDatasource = useSetExpressionAndDataSource();\n\n  const onChangeQueries = useCallback(\n    (updatedQueries: AlertQuery[]) => {\n      // Most data sources triggers onChange and onRunQueries consecutively\n      // It means our reducer state is always one step behind when runQueries is invoked\n      // Invocation cycle => onChange -> dispatch(setDataQueries) -> onRunQueries -> setDataQueries Reducer\n      // As a workaround we update form values as soon as possible to avoid stale state\n      // This way we can access up to date queries in runQueriesPreview without waiting for re-render\n      const previousQueries = getValues('queries');\n      const expressionQueries = previousQueries.filter((query) => isExpressionQuery(query.model));\n      setValue('queries', [...updatedQueries, ...expressionQueries], { shouldValidate: false });\n      updateExpressionAndDatasource(updatedQueries);\n\n      dispatch(setDataQueries(updatedQueries));\n      dispatch(updateExpressionTimeRange());\n\n      // check if we need to rewire expressions (and which ones)\n      const [oldRefId, newRefId] = findRenamedDataQueryReferences(queries, updatedQueries);\n      if (oldRefId && newRefId) {\n        dispatch(rewireExpressions({ oldRefId, newRefId }));\n      }\n    },\n    [queries, updateExpressionAndDatasource, getValues, setValue]\n  );\n\n  const onChangeRecordingRulesQueries = useCallback(\n    (updatedQueries: AlertQuery[]) => {\n      const query = updatedQueries[0];\n\n      if (!isPromOrLokiQuery(query.model)) {\n        return;\n      }\n\n      const expression = query.model.expr;\n\n      setValue('queries', updatedQueries, { shouldValidate: false });\n      updateExpressionAndDatasource(updatedQueries);\n\n      dispatch(setRecordingRulesQueries({ recordingRuleQueries: updatedQueries, expression }));\n      runQueriesPreview();\n    },\n    [runQueriesPreview, setValue, updateExpressionAndDatasource]\n  );\n\n  const recordingRuleDefaultDatasource = rulesSourcesWithRuler[0];\n\n  useEffect(() => {\n    clearPreviewData();\n    if (type === RuleFormType.cloudRecording) {\n      const expr = getValues('expression');\n\n      if (!recordingRuleDefaultDatasource) {\n        return;\n      }\n\n      const datasourceUid =\n        (editingExistingRule && getDataSourceSrv().getInstanceSettings(dataSourceName)?.uid) ||\n        recordingRuleDefaultDatasource.uid;\n\n      const defaultQuery = {\n        refId: 'A',\n        datasourceUid,\n        queryType: '',\n        relativeTimeRange: getDefaultRelativeTimeRange(),\n        expr,\n        instant: true,\n        model: {\n          refId: 'A',\n          hide: false,\n          expr,\n        },\n      };\n      dispatch(setRecordingRulesQueries({ recordingRuleQueries: [defaultQuery], expression: expr }));\n    }\n  }, [type, recordingRuleDefaultDatasource, editingExistingRule, getValues, dataSourceName, clearPreviewData]);\n\n  const onDuplicateQuery = useCallback((query: AlertQuery) => {\n    dispatch(duplicateQuery(query));\n  }, []);\n\n  // update the condition if it's been removed\n  useEffect(() => {\n    if (!refIdExists(queries, condition)) {\n      const lastRefId = queries.at(-1)?.refId ?? null;\n      handleSetCondition(lastRefId);\n    }\n  }, [condition, queries, handleSetCondition]);\n\n  const onClickType = useCallback(\n    (type: ExpressionQueryType) => {\n      dispatch(addNewExpression(type));\n    },\n    [dispatch]\n  );\n\n  const styles = useStyles2(getStyles);\n\n  // Cloud alerts load data from form values\n  // whereas Grafana managed alerts load data from reducer\n  //when data source is changed in the cloud selector we need to update the queries in the reducer\n\n  const onChangeCloudDatasource = useCallback(\n    (datasourceUid: string) => {\n      const newQueries = cloneDeep(queries);\n      newQueries[0].datasourceUid = datasourceUid;\n      setValue('queries', newQueries, { shouldValidate: false });\n\n      updateExpressionAndDatasource(newQueries);\n\n      dispatch(setDataQueries(newQueries));\n    },\n    [queries, setValue, updateExpressionAndDatasource, dispatch]\n  );\n\n  // ExpressionEditor for cloud query needs to update queries in the reducer and in the form\n  // otherwise the value is not updated for Grafana managed alerts\n\n  const onChangeExpression = (value: string) => {\n    const newQueries = cloneDeep(queries);\n\n    if (newQueries[0].model) {\n      if (isPromOrLokiQuery(newQueries[0].model)) {\n        newQueries[0].model.expr = value;\n      } else {\n        // first time we come from grafana-managed type\n        // we need to convert the model to PromOrLokiQuery\n        const promLoki: PromOrLokiQuery = {\n          ...cloneDeep(newQueries[0].model),\n          expr: value,\n        };\n        newQueries[0].model = promLoki;\n      }\n    }\n\n    setValue('queries', newQueries, { shouldValidate: false });\n\n    updateExpressionAndDatasource(newQueries);\n\n    dispatch(setDataQueries(newQueries));\n    runQueriesPreview();\n  };\n\n  const removeExpressionsInQueries = useCallback(() => dispatch(removeExpressions()), [dispatch]);\n\n  const addExpressionsInQueries = useCallback(\n    (expressions: AlertQuery[]) => dispatch(addExpressions(expressions)),\n    [dispatch]\n  );\n\n  // we need to keep track of the previous expressions and condition reference to be able to restore them when switching back to grafana managed\n  const [prevExpressions, setPrevExpressions] = useState<AlertQuery[]>([]);\n  const [prevCondition, setPrevCondition] = useState<string | null>(null);\n\n  const restoreExpressionsInQueries = useCallback(() => {\n    addExpressionsInQueries(prevExpressions);\n  }, [prevExpressions, addExpressionsInQueries]);\n\n  const onClickSwitch = useCallback(() => {\n    const typeInForm = getValues('type');\n    if (typeInForm === RuleFormType.cloudAlerting) {\n      setValue('type', RuleFormType.grafana);\n      setValue('dataSourceName', null); // set data source name back to \"null\"\n\n      prevExpressions.length > 0 && restoreExpressionsInQueries();\n      prevCondition && setValue('condition', prevCondition);\n    } else {\n      setValue('type', RuleFormType.cloudAlerting);\n      // dataSourceName is used only by Mimir/Loki alerting and recording rules\n      // It should be empty for Grafana managed alert rules\n      const newDsName = getDataSourceSrv().getInstanceSettings(queries[0].datasourceUid)?.name;\n      if (newDsName) {\n        setValue('dataSourceName', newDsName);\n      }\n\n      updateExpressionAndDatasource(queries);\n\n      const expressions = queries.filter((query) => query.datasourceUid === ExpressionDatasourceUID);\n      setPrevExpressions(expressions);\n      removeExpressionsInQueries();\n      setPrevCondition(condition);\n    }\n  }, [\n    getValues,\n    setValue,\n    prevExpressions.length,\n    restoreExpressionsInQueries,\n    prevCondition,\n    updateExpressionAndDatasource,\n    queries,\n    removeExpressionsInQueries,\n    condition,\n  ]);\n\n  const { sectionTitle, helpLabel, helpContent, helpLink } = DESCRIPTIONS[type ?? RuleFormType.grafana];\n  if (!type) {\n    return null;\n  }\n  return (\n    <RuleEditorSection\n      stepNo={2}\n      title={sectionTitle}\n      description={\n        <Stack direction=\"row\" gap={0.5} alignItems=\"center\">\n          <Text variant=\"bodySmall\" color=\"secondary\">\n            {helpLabel}\n          </Text>\n          <NeedHelpInfo\n            contentText={helpContent}\n            externalLink={helpLink}\n            linkText={'Read more on our documentation website'}\n            title={helpLabel}\n          />\n        </Stack>\n      }\n    >\n      {/* This is the cloud data source selector */}\n      {isDataSourceManagedRuleByType(type) && (\n        <CloudDataSourceSelector onChangeCloudDatasource={onChangeCloudDatasource} disabled={editingExistingRule} />\n      )}\n\n      {/* This is the PromQL Editor for recording rules */}\n      {isRecordingRuleType && dataSourceName && (\n        <Field error={errors.expression?.message} invalid={!!errors.expression?.message}>\n          <RecordingRuleEditor\n            dataSourceName={dataSourceName}\n            queries={queries}\n            runQueries={() => runQueriesPreview()}\n            onChangeQuery={onChangeRecordingRulesQueries}\n            panelData={queryPreviewData}\n          />\n        </Field>\n      )}\n\n      {/* This is the PromQL Editor for Cloud rules */}\n      {isCloudAlertRuleType && dataSourceName && (\n        <Stack direction=\"column\">\n          <Field error={errors.expression?.message} invalid={!!errors.expression?.message}>\n            <Controller\n              name=\"expression\"\n              render={({ field: { ref, ...field } }) => {\n                return (\n                  <ExpressionEditor\n                    {...field}\n                    dataSourceName={dataSourceName}\n                    showPreviewAlertsButton={!isRecordingRuleType}\n                    onChange={onChangeExpression}\n                  />\n                );\n              }}\n              control={control}\n              rules={{\n                required: { value: true, message: 'A valid expression is required' },\n              }}\n            />\n          </Field>\n          <SmartAlertTypeDetector\n            editingExistingRule={editingExistingRule}\n            queries={queries}\n            rulesSourcesWithRuler={rulesSourcesWithRuler}\n            onClickSwitch={onClickSwitch}\n          />\n        </Stack>\n      )}\n\n      {/* This is the editor for Grafana managed rules and Grafana managed recording rules */}\n      {isGrafanaManagedRuleByType(type) && (\n        <Stack direction=\"column\">\n          {/* Data Queries */}\n          <QueryEditor\n            queries={dataQueries}\n            expressions={expressionQueries}\n            onRunQueries={() => runQueriesPreview()}\n            onChangeQueries={onChangeQueries}\n            onDuplicateQuery={onDuplicateQuery}\n            panelData={queryPreviewData}\n            condition={condition}\n            onSetCondition={handleSetCondition}\n          />\n          <Tooltip content={'You appear to have no compatible data sources'} show={noCompatibleDataSources}>\n            <Button\n              type=\"button\"\n              onClick={() => {\n                dispatch(addNewDataQuery());\n              }}\n              variant=\"secondary\"\n              data-testid={selectors.components.QueryTab.addQuery}\n              disabled={noCompatibleDataSources}\n              className={styles.addQueryButton}\n            >\n              Add query\n            </Button>\n          </Tooltip>\n          {/* We only show Switch for Grafana managed alerts */}\n          {isGrafanaAlertingType && (\n            <SmartAlertTypeDetector\n              editingExistingRule={editingExistingRule}\n              rulesSourcesWithRuler={rulesSourcesWithRuler}\n              queries={queries}\n              onClickSwitch={onClickSwitch}\n            />\n          )}\n          {/* Expression Queries */}\n          <Stack direction=\"column\" gap={0}>\n            <Text element=\"h5\">Expressions</Text>\n            <Text variant=\"bodySmall\" color=\"secondary\">\n              Manipulate data returned from queries with math and other operations.\n            </Text>\n          </Stack>\n\n          <ExpressionsEditor\n            queries={queries}\n            panelData={queryPreviewData}\n            condition={condition}\n            onSetCondition={handleSetCondition}\n            onRemoveExpression={(refId) => {\n              dispatch(removeExpression(refId));\n            }}\n            onUpdateRefId={onUpdateRefId}\n            onUpdateExpressionType={(refId, type) => {\n              dispatch(updateExpressionType({ refId, type }));\n            }}\n            onUpdateQueryExpression={(model) => {\n              dispatch(updateExpression(model));\n            }}\n          />\n          {/* action buttons */}\n          <Stack direction=\"row\">\n            {config.expressionsEnabled && <TypeSelectorButton onClickType={onClickType} />}\n\n            {isPreviewLoading && (\n              <Button icon=\"spinner\" type=\"button\" variant=\"destructive\" onClick={cancelQueries}>\n                Cancel\n              </Button>\n            )}\n            {!isPreviewLoading && (\n              <Button\n                data-testid={selectors.components.AlertRules.previewButton}\n                icon=\"sync\"\n                type=\"button\"\n                onClick={() => runQueriesPreview()}\n                disabled={emptyQueries}\n              >\n                Preview\n              </Button>\n            )}\n          </Stack>\n\n          {/* No Queries */}\n          {emptyQueries && (\n            <Alert title=\"No queries or expressions have been configured\" severity=\"warning\">\n              Create at least one query or expression to be alerted on\n            </Alert>\n          )}\n        </Stack>\n      )}\n    </RuleEditorSection>\n  );\n};\n\nfunction TypeSelectorButton({ onClickType }: { onClickType: (type: ExpressionQueryType) => void }) {\n  const newMenu = (\n    <Menu>\n      {expressionTypes.map((type) => (\n        <Tooltip key={type.value} content={type.description ?? ''} placement=\"right\">\n          <MenuItem\n            key={type.value}\n            onClick={() => onClickType(type.value ?? ExpressionQueryType.math)}\n            label={type.label ?? ''}\n          />\n        </Tooltip>\n      ))}\n    </Menu>\n  );\n\n  return (\n    <Dropdown overlay={newMenu}>\n      <Button variant=\"secondary\">\n        Add expression\n        <Icon name=\"angle-down\" />\n      </Button>\n    </Dropdown>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  addQueryButton: css({\n    width: 'fit-content',\n  }),\n  helpInfo: css({\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    width: 'fit-content',\n    fontWeight: theme.typography.fontWeightMedium,\n    marginLeft: theme.spacing(1),\n    fontSize: theme.typography.size.sm,\n    cursor: 'pointer',\n  }),\n  helpInfoText: css({\n    marginLeft: theme.spacing(0.5),\n    textDecoration: 'underline',\n  }),\n  infoLink: css({\n    color: theme.colors.text.link,\n  }),\n});\n\nconst useSetExpressionAndDataSource = () => {\n  const { setValue } = useFormContext<RuleFormValues>();\n\n  return (updatedQueries: AlertQuery[]) => {\n    // update data source name and expression if it's been changed in the queries from the reducer when prom or loki query\n    const query = updatedQueries[0];\n    if (!query) {\n      return;\n    }\n\n    const dataSourceSettings = getDataSourceSrv().getInstanceSettings(query.datasourceUid);\n    if (!dataSourceSettings) {\n      throw new Error('The Data source has not been defined.');\n    }\n\n    if (isPromOrLokiQuery(query.model)) {\n      const expression = query.model.expr;\n      setValue('expression', expression);\n    }\n  };\n};\n","import { uniqueId } from 'lodash';\n\nimport { SelectableValue } from '@grafana/data';\nimport { MatcherOperator, ObjectMatcher, Route, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { FormAmRoute } from '../types/amroutes';\nimport { MatcherFieldValue } from '../types/silence-form';\n\nimport { matcherToMatcherField } from './alertmanager';\nimport { GRAFANA_RULES_SOURCE_NAME } from './datasource';\nimport { encodeMatcher, normalizeMatchers, parseMatcherToArray, unquoteWithUnescape } from './matchers';\nimport { findExistingRoute } from './routeTree';\nimport { isValidPrometheusDuration, safeParsePrometheusDuration } from './time';\n\nconst matchersToArrayFieldMatchers = (\n  matchers: Record<string, string> | undefined,\n  isRegex: boolean\n): MatcherFieldValue[] =>\n  Object.entries(matchers ?? {}).reduce<MatcherFieldValue[]>(\n    (acc, [name, value]) => [\n      ...acc,\n      {\n        name,\n        value,\n        operator: isRegex ? MatcherOperator.regex : MatcherOperator.equal,\n      },\n    ],\n    []\n  );\n\nconst selectableValueToString = (selectableValue: SelectableValue<string>): string => selectableValue.value!;\n\nconst selectableValuesToStrings = (arr: Array<SelectableValue<string>> | undefined): string[] =>\n  (arr ?? []).map(selectableValueToString);\n\nexport const emptyArrayFieldMatcher: MatcherFieldValue = {\n  name: '',\n  value: '',\n  operator: MatcherOperator.equal,\n};\n\n// Default route group_by labels for newly created routes.\nexport const defaultGroupBy = ['grafana_folder', 'alertname'];\n\n// Common route group_by options for multiselect drop-down\nexport const commonGroupByOptions = [\n  { label: 'grafana_folder', value: 'grafana_folder', isFixed: true },\n  { label: 'alertname', value: 'alertname', isFixed: true },\n  { label: 'Disable (...)', value: '...' },\n];\n\nexport const emptyRoute: FormAmRoute = {\n  id: '',\n  overrideGrouping: false,\n  groupBy: defaultGroupBy,\n  object_matchers: [],\n  routes: [],\n  continue: false,\n  receiver: '',\n  overrideTimings: false,\n  groupWaitValue: '',\n  groupIntervalValue: '',\n  repeatIntervalValue: '',\n  muteTimeIntervals: [],\n};\n\n// add unique identifiers to each route in the route tree, that way we can figure out what route we've edited / deleted\nexport function addUniqueIdentifierToRoute(route: Route): RouteWithID {\n  return {\n    id: uniqueId('route-'),\n    ...route,\n    routes: (route.routes ?? []).map(addUniqueIdentifierToRoute),\n  };\n}\n\n//returns route, and a record mapping id to existing route\nexport const amRouteToFormAmRoute = (route: RouteWithID | Route | undefined): FormAmRoute => {\n  if (!route) {\n    return emptyRoute;\n  }\n\n  const id = 'id' in route ? route.id : uniqueId('route-');\n\n  if (Object.keys(route).length === 0) {\n    const formAmRoute = { ...emptyRoute, id };\n    return formAmRoute;\n  }\n\n  const formRoutes: FormAmRoute[] = [];\n  route.routes?.forEach((subRoute) => {\n    const subFormRoute = amRouteToFormAmRoute(subRoute);\n    formRoutes.push(subFormRoute);\n  });\n\n  const objectMatchers =\n    route.object_matchers?.map((matcher) => ({ name: matcher[0], operator: matcher[1], value: matcher[2] })) ?? [];\n\n  const matchers =\n    route.matchers\n      ?.flatMap((matcher) => {\n        // parse the matcher to an array of matchers, PromQL-style matchers can contain more than one matcher (in a matcher, yes it's confusing)\n        return parseMatcherToArray(matcher).flatMap(matcherToMatcherField);\n      })\n      .map(({ name, operator, value }) => ({\n        name: unquoteWithUnescape(name),\n        operator,\n        value: unquoteWithUnescape(value),\n      })) ?? [];\n\n  return {\n    id,\n    // Frontend migration to use object_matchers instead of matchers, match, and match_re\n    object_matchers: [\n      ...matchers,\n      ...objectMatchers,\n      ...matchersToArrayFieldMatchers(route.match, false),\n      ...matchersToArrayFieldMatchers(route.match_re, true),\n    ],\n    continue: route.continue ?? false,\n    receiver: route.receiver ?? '',\n    overrideGrouping: Array.isArray(route.group_by) && route.group_by.length > 0,\n    groupBy: route.group_by ?? undefined,\n    overrideTimings: [route.group_wait, route.group_interval, route.repeat_interval].some(Boolean),\n    groupWaitValue: route.group_wait ?? '',\n    groupIntervalValue: route.group_interval ?? '',\n    repeatIntervalValue: route.repeat_interval ?? '',\n    routes: formRoutes,\n    muteTimeIntervals: route.mute_time_intervals ?? [],\n  };\n};\n\n// convert a FormAmRoute to a Route\nexport const formAmRouteToAmRoute = (\n  alertManagerSourceName: string,\n  formAmRoute: Partial<FormAmRoute>,\n  routeTree: RouteWithID\n): Route => {\n  const existing = findExistingRoute(formAmRoute.id ?? '', routeTree);\n\n  const {\n    overrideGrouping,\n    groupBy,\n    overrideTimings,\n    groupWaitValue,\n    groupIntervalValue,\n    repeatIntervalValue,\n    receiver,\n  } = formAmRoute;\n\n  // \"undefined\" means \"inherit from the parent policy\", currently supported by group_by, group_wait, group_interval, and repeat_interval\n  const INHERIT_FROM_PARENT = undefined;\n\n  const group_by = overrideGrouping ? groupBy : INHERIT_FROM_PARENT;\n\n  const overrideGroupWait = overrideTimings && groupWaitValue;\n  const group_wait = overrideGroupWait ? groupWaitValue : INHERIT_FROM_PARENT;\n\n  const overrideGroupInterval = overrideTimings && groupIntervalValue;\n  const group_interval = overrideGroupInterval ? groupIntervalValue : INHERIT_FROM_PARENT;\n\n  const overrideRepeatInterval = overrideTimings && repeatIntervalValue;\n  const repeat_interval = overrideRepeatInterval ? repeatIntervalValue : INHERIT_FROM_PARENT;\n\n  // Empty matcher values are valid. Such matchers require specified label to not exists\n  const object_matchers: ObjectMatcher[] | undefined = formAmRoute.object_matchers\n    ?.filter((route) => route.name && route.operator && route.value !== null && route.value !== undefined)\n    .map(({ name, operator, value }) => [name, operator, value]);\n\n  const routes = formAmRoute.routes?.map((subRoute) =>\n    formAmRouteToAmRoute(alertManagerSourceName, subRoute, routeTree)\n  );\n\n  const amRoute: Route = {\n    ...(existing ?? {}),\n    continue: formAmRoute.continue,\n    group_by: group_by,\n    object_matchers: object_matchers,\n    match: undefined, // DEPRECATED: Use matchers\n    match_re: undefined, // DEPRECATED: Use matchers\n    group_wait,\n    group_interval,\n    repeat_interval,\n    routes: routes,\n    mute_time_intervals: formAmRoute.muteTimeIntervals,\n    receiver: receiver,\n  };\n\n  // non-Grafana managed rules should use \"matchers\", Grafana-managed rules should use \"object_matchers\"\n  // Grafana maintains a fork of AM to support all utf-8 characters in the \"object_matchers\" property values but this\n  // does not exist in upstream AlertManager\n  if (alertManagerSourceName !== GRAFANA_RULES_SOURCE_NAME) {\n    // to support UTF-8 characters we must wrap label keys and values with double quotes if they contain reserved characters.\n    amRoute.matchers = formAmRoute.object_matchers?.map(encodeMatcher);\n    amRoute.object_matchers = undefined;\n  } else {\n    amRoute.object_matchers = normalizeMatchers(amRoute);\n    amRoute.matchers = undefined;\n  }\n\n  if (formAmRoute.receiver) {\n    amRoute.receiver = formAmRoute.receiver;\n  }\n\n  return amRoute;\n};\n\nexport const stringToSelectableValue = (str: string): SelectableValue<string> => ({\n  label: str,\n  value: str,\n});\n\nexport const stringsToSelectableValues = (arr: string[] | undefined): Array<SelectableValue<string>> =>\n  (arr ?? []).map(stringToSelectableValue);\n\nexport const mapSelectValueToString = (selectableValue: SelectableValue<string>): string | null => {\n  // this allows us to deal with cleared values\n  if (selectableValue === null) {\n    return null;\n  }\n\n  if (!selectableValue) {\n    return '';\n  }\n\n  return selectableValueToString(selectableValue) ?? '';\n};\n\nexport const mapMultiSelectValueToStrings = (\n  selectableValues: Array<SelectableValue<string>> | undefined\n): string[] => {\n  if (!selectableValues) {\n    return [];\n  }\n\n  return selectableValuesToStrings(selectableValues);\n};\n\nexport function promDurationValidator(duration?: string) {\n  if (!duration || duration.length === 0) {\n    return true;\n  }\n\n  return isValidPrometheusDuration(duration) || 'Invalid duration format. Must be {number}{time_unit}';\n}\n\n// function to convert ObjectMatchers to a array of strings\nexport const objectMatchersToString = (matchers: ObjectMatcher[]): string[] => {\n  return matchers.map((matcher) => {\n    const [name, operator, value] = matcher;\n    return `${name}${operator}${value}`;\n  });\n};\n\nexport const repeatIntervalValidator = (repeatInterval: string, groupInterval = '') => {\n  if (repeatInterval.length === 0) {\n    return true;\n  }\n\n  const validRepeatInterval = promDurationValidator(repeatInterval);\n  const validGroupInterval = promDurationValidator(groupInterval);\n\n  if (validRepeatInterval !== true) {\n    return validRepeatInterval;\n  }\n\n  if (validGroupInterval !== true) {\n    return validGroupInterval;\n  }\n\n  const repeatDuration = safeParsePrometheusDuration(repeatInterval);\n  const groupDuration = safeParsePrometheusDuration(groupInterval);\n\n  const isRepeatLowerThanGroupDuration = groupDuration !== 0 && repeatDuration < groupDuration;\n\n  return isRepeatLowerThanGroupDuration ? 'Repeat interval should be higher or equal to Group interval' : true;\n};\n","export function generateCopiedName(originalName: string, exisitingNames: string[]) {\n  const nonDuplicateName = originalName.replace(/\\(copy( [0-9]+)?\\)$/, '').trim();\n\n  let newName = `${nonDuplicateName} (copy)`;\n\n  for (let i = 2; exisitingNames.includes(newName); i++) {\n    newName = `${nonDuplicateName} (copy ${i})`;\n  }\n\n  return newName;\n}\n","/**\n * Various helper functions to modify (immutably) the route tree, aka \"notification policies\"\n */\n\nimport { produce } from 'immer';\nimport { omit } from 'lodash';\n\nimport { insertAfterImmutably, insertBeforeImmutably } from '@grafana/data/src/utils/arrayUtils';\nimport { Route, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { FormAmRoute } from '../types/amroutes';\n\nimport { formAmRouteToAmRoute } from './amroutes';\n\n// add a form submission to the route tree\nexport const mergePartialAmRouteWithRouteTree = (\n  alertManagerSourceName: string,\n  partialFormRoute: Partial<FormAmRoute>,\n  routeTree: RouteWithID\n): Route => {\n  const existing = findExistingRoute(partialFormRoute.id ?? '', routeTree);\n  if (!existing) {\n    throw new Error(`No such route with ID '${partialFormRoute.id}'`);\n  }\n\n  function findAndReplace(currentRoute: RouteWithID): Route {\n    let updatedRoute: Route = currentRoute;\n\n    if (currentRoute.id === partialFormRoute.id) {\n      const newRoute = formAmRouteToAmRoute(alertManagerSourceName, partialFormRoute, routeTree);\n      updatedRoute = {\n        ...currentRoute,\n        ...newRoute,\n      };\n    }\n\n    return {\n      ...updatedRoute,\n      routes: currentRoute.routes?.map(findAndReplace),\n    };\n  }\n\n  return findAndReplace(routeTree);\n};\n\n// remove a route from the policy tree, returns a new tree\n// make sure to omit the \"id\" because Prometheus / Loki / Mimir will reject the payload\nexport const omitRouteFromRouteTree = (findRoute: RouteWithID, routeTree: RouteWithID): RouteWithID => {\n  if (findRoute.id === routeTree.id) {\n    throw new Error('You cant remove the root policy');\n  }\n\n  function findAndOmit(currentRoute: RouteWithID): RouteWithID {\n    return {\n      ...currentRoute,\n      routes: currentRoute.routes?.reduce((acc: RouteWithID[] = [], route) => {\n        if (route.id === findRoute.id) {\n          return acc;\n        }\n\n        acc.push(findAndOmit(route));\n        return acc;\n      }, []),\n    };\n  }\n\n  return findAndOmit(routeTree);\n};\n\nexport type InsertPosition = 'above' | 'below' | 'child';\n\n// add a new route to a parent route\nexport const addRouteToReferenceRoute = (\n  alertManagerSourceName: string,\n  partialFormRoute: Partial<FormAmRoute>,\n  referenceRoute: RouteWithID,\n  routeTree: RouteWithID,\n  position: InsertPosition\n): RouteWithID => {\n  const newRoute = formAmRouteToAmRoute(alertManagerSourceName, partialFormRoute, routeTree);\n\n  return produce(routeTree, (draftTree) => {\n    const [routeInTree, parentRoute, positionInParent] = findRouteInTree(draftTree, referenceRoute);\n\n    if (routeInTree === undefined || parentRoute === undefined || positionInParent === undefined) {\n      throw new Error(`could not find reference route \"${referenceRoute.id}\" in tree`);\n    }\n\n    // if user wants to insert new child policy, append to the bottom of children\n    if (position === 'child') {\n      if (routeInTree.routes) {\n        routeInTree.routes.push(newRoute);\n      } else {\n        routeInTree.routes = [newRoute];\n      }\n    }\n\n    // insert new policy before / above the referenceRoute\n    if (position === 'above') {\n      parentRoute.routes = insertBeforeImmutably(parentRoute.routes ?? [], newRoute, positionInParent);\n    }\n\n    // insert new policy after / below the referenceRoute\n    if (position === 'below') {\n      parentRoute.routes = insertAfterImmutably(parentRoute.routes ?? [], newRoute, positionInParent);\n    }\n  });\n};\n\ntype RouteMatch = Route | undefined;\n\nexport function findRouteInTree(\n  routeTree: RouteWithID,\n  referenceRoute: RouteWithID\n): [matchingRoute: RouteMatch, parentRoute: RouteMatch, positionInParent: number | undefined] {\n  let matchingRoute: RouteMatch;\n  let matchingRouteParent: RouteMatch;\n  let matchingRoutePositionInParent: number | undefined;\n\n  // recurse through the tree to find the matching route, its parent and the position of the route in the parent\n  function findRouteInTree(currentRoute: RouteWithID, index: number, parentRoute: RouteWithID) {\n    if (matchingRoute) {\n      return;\n    }\n\n    if (currentRoute.id === referenceRoute.id) {\n      matchingRoute = currentRoute;\n      matchingRouteParent = parentRoute;\n      matchingRoutePositionInParent = index;\n    }\n\n    if (currentRoute.routes) {\n      currentRoute.routes.forEach((route, index) => findRouteInTree(route, index, currentRoute));\n    }\n  }\n\n  findRouteInTree(routeTree, 0, routeTree);\n\n  return [matchingRoute, matchingRouteParent, matchingRoutePositionInParent];\n}\n\nexport function cleanRouteIDs(route: Route | RouteWithID): Route {\n  return omit(\n    {\n      ...route,\n      routes: route.routes?.map((route) => cleanRouteIDs(route)),\n    },\n    'id'\n  );\n}\n\nexport function findExistingRoute(id: string, routeTree: RouteWithID): RouteWithID | undefined {\n  return routeTree.id === id ? routeTree : routeTree.routes?.find((route) => findExistingRoute(id, route));\n}\n","import { css } from '@emotion/css';\nimport { CSSProperties } from 'react';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\ninterface StackProps {\n  direction?: CSSProperties['flexDirection'];\n  alignItems?: CSSProperties['alignItems'];\n  wrap?: boolean;\n  gap?: number;\n  flexGrow?: CSSProperties['flexGrow'];\n  children: React.ReactNode;\n}\n\nexport function Stack(props: StackProps) {\n  const styles = useStyles2(getStyles, props);\n  return <div className={styles.root}>{props.children}</div>;\n}\n\nconst getStyles = (theme: GrafanaTheme2, props: StackProps) => ({\n  root: css({\n    display: 'flex',\n    flexDirection: props.direction ?? 'row',\n    flexWrap: (props.wrap ?? true) ? 'wrap' : undefined,\n    alignItems: props.alignItems,\n    gap: theme.spacing(props.gap ?? 2),\n    flexGrow: props.flexGrow,\n  }),\n});\n"],"names":["AlertWarning","title","children","Alert","warningStyles","theme","GrafanaRuleExportPreview","alertUid","exportFormat","onClose","ruleTextDefinition","isFetching","alertRuleApi","downloadFileName","LoadingPlaceholder","FileExportPreview","GrafanaRuleExporter","activeTab","setActiveTab","GrafanaExportDrawer","GroupAndNamespaceFields","rulesSourceName","control","watch","errors","setValue","style","getStyle","rulerRequests","useUnifiedAlertingSelector","state","dispatch","rulesConfig","namespace","namespaceOptions","groupOptions","group","Field","onChange","ref","field","value","CloudEvaluationBehavior","styles","getStyles","register","type","dataSourceName","RuleEditorSection","Input","Select","time","PreviewRule","RecordingRulesNameSpaceAndGroupStep","AlertRuleForm","existing","prefill","notifyApp","queryParams","useQueryParams","showEditYaml","setShowEditYaml","evaluateEvery","setEvaluateEvery","deleteRuleFromGroup","useDeleteRuleFromGroup","routeParams","ruleType","uidFromParams","returnTo","showDeleteModal","setShowDeleteModal","defaultValues","formValuesFromPrefill","formValuesFromQueryParams","formAPI","handleSubmit","showDataSourceDependantStep","submitState","useCleanup","conditionErrorMsg","setConditionErrorMsg","checkAlertCondition","msg","submit","values","exitOnSave","key","deleteRule","ruleGroupIdentifier","onInvalid","config","cancelRuleCreation","evaluateEveryInForm","actionButtons","Stack","Button","Spinner","isCortexLokiOrRecordingRule","isPaused","AppChromeUpdate","e","InfoPausedRule","CustomScrollbar","QueryAndExpressionsStep","GrafanaEvaluationBehavior","NotificationsStep","AnnotationsStep","ConfirmModal","RuleInspector","ruleDefinition","ruleFromQueryParams","rule","CloneRuleEditor","sourceRuleId","loading","error","ruleClone","cloneRuleDefinition","formPrefill","changeRuleName","newName","ExistingRuleEditor","identifier","id","loadingAlertRule","ruleWithLocation","ruleSourceName","isEditable","loadingEditable","useIsRuleEditable","defaultPageNav","getPageNav","RuleEditor","match","searchParams","useURLSearchParams","copyFromId","copyFromIdentifier","useAsync","canCreateGrafanaRules","canCreateCloudRules","canEditRules","getContent","AlertingPageWrapper","ModifyExportRuleForm","ruleForm","exportData","setExportData","formValues","GrafanaRuleDesignExporter","useGetGroup","nameSpaceUID","dsFeatures","rulerConfig","getPayloadToExport","uid","existingGroup","grafanaRuleDto","updatedRule","alreadyExistsInGroup","updatedRules","useGetPayloadToExport","rulerGroupDto","GrafanaRuleDesignExportPreview","exportValues","getExport","loadingGroup","payload","GrafanaModifyExport","ruleIdentifier","ModifyExportWrapper","RuleModifyExport","rulerRule","PromDurationDocs","getPromDurationStyles","PromDurationDocsTimeUnit","unit","name","example","PromDurationInput","props","HoverCard","Icon","getFormStyles","routeTimingsFields","TIMING_OPTIONS_DEFAULTS","recordingRuleNameValidationPattern","AlertRuleNameAndMetric","ruleFormType","isRecording","isGrafanaRecordingRule","isCloudRecordingRule","entityName","ContactPointDetails","receivers","receiver","index","metadata","pluginMetadata","ContactPoint","MAX_CONTACT_POINTS_RENDERED","ContactPointSelector","alertManager","options","onSelectContactPoint","refetchReceivers","trigger","contactPointInForm","selectedContactPointWithMetadata","option","selectedContactPointSelectableValue","LOADING_SPINNER_DURATION","loadingContactPoints","setLoadingContactPoints","sleep","ms","resolve","validateContactPoint","onClickRefresh","_","IconButton","LinkToContactPoints","FieldValidationMessage","TextLink","rotation","MuteTimingFields","muteTimingOptions","useSelectableMuteTimings","alertmanagerApi","result","interval","RouteTimings","formStyles","getValues","groupInterval","REQUIRED_FIELDS_IN_GROUPBY","DEFAULTS_TIMINGS","DISABLE_GROUPING","RoutingSettings","groupByOptions","setGroupByOptions","groupIntervalValue","groupWaitValue","repeatIntervalValue","overrideGrouping","overrideTimings","groupByCount","InlineField","Switch","Text","opt","opts","data","MultiValue","AlertManagerManualRouting","alertManagerName","isLoading","errorInContactPointStatus","contactPoints","setSelectedContactPointWithMetadata","contactPoint","hasRouteSettings","integrations","description","CollapsableSection","SimplifiedRouting","contactPointsInAlert","alertManagersDataSourcesWithConfigAPI","am","selectedContactPoint","alertManagerContactPoint","LabelsEditorModal","isOpen","initialLabels","Modal","LabelsFieldInForm","onEditClick","labels","hasLabels","label","NeedHelpInfo","NotificationPreviewByAlertManager","NotificationPreview","alertQueries","customLabels","condition","folder","alertName","disabled","previewEndpoint","previewUninitialized","potentialInstances","onPreview","alertManagerDataSources","onlyOneAM","alertManagerSource","RoutingOptions","useHasInternalAlertmanagerEnabled","useGetGrafanaAlertingConfigurationStatusQuery","amChoiceStatus","showLabelsEditor","setShowLabelsEditor","simplifiedRoutingToggleEnabled","shouldRenderpreview","hasInternalAlertmanagerEnabled","shouldAllowSimplifiedRouting","onCloseLabelsEditor","labelsToUpdate","ManualAndAutomaticRouting","AutomaticRooting","manualRouting","routingOptions","onRoutingOptionChange","RadioButtonGroup","RoutingOptionDescription","queries","NeedHelpInfoForNotificationPolicy","NeedHelpInfoForContactpoint","isCloudPreviewRequest","request","isGrafanaPreviewRequest","previewAlertRule","fetchAlertRulePreview","dataSourceUid","withLoadingIndicator","createResponse","map","catchError","of","toDataQueryError","share","PreviewRuleResult","preview","fieldConfig","width","height","PanelRenderer","fields","usePreview","allDataSourcesAvailable","useAlertQueriesStatus","isPreviewAvailable","setPreview","isMounted","useMountedState","createPreviewRequest","takeWhile","response","isCompleted","expression","dsSettings","useRulesSourcesWithRuler","dataSources","ds","dsConfig","mapDataFrameToAlertPreview","labelFields","stateFieldIndex","infoFieldIndex","labelIndexes","labelField","instanceStatusCount","instances","labelValues","labelIndex","info","CloudAlertPreview","alertPreview","instanceTags","AlertStateTag","TagList","Tooltip","ExpressionEditor","showPreviewAlertsButton","mapToValue","mapToQuery","useQueryMappers","dataQuery","dataSource","onChangeQuery","query","onRunQueriesClick","dsi","errorMessage","previewLoaded","QueryEditor","previewDataFrame","s","previewHasAlerts","DataSourcePluginContextProvider","ExpressionsEditor","onSetCondition","panelData","onUpdateRefId","onRemoveExpression","onUpdateExpressionType","onUpdateQueryExpression","expressionQueries","acc","isAlertCondition","warning","Expression","QueryOptions","queryOptions","onChangeTimeRange","onChangeQueryOptions","showOptions","setShowOptions","timeRange","Toggletip","RelativeTimeRangePicker","range","MaxDataPointsOption","MinIntervalOption","clearButton","DEFAULT_MAX_DATA_POINTS","DEFAULT_MIN_INTERVAL","QueryWrapper","onChangeDataSource","onRunQueries","onRemoveQuery","onDuplicateQuery","thresholds","thresholdsType","onChangeThreshold","dsInstance","setDsInstance","queryWithDefaults","SelectingDataSourceTooltip","HeaderExtras","alertQueryOptions","ExpressionStatusIndicator","showVizualisation","editorQueries","QueryEditorRow","settings","VizWrapper","EmptyQueryWrapper","onMaxDataPointsBlur","event","maxDataPointsNumber","maxDataPoints","onMinIntervalBlur","minInterval","QueryRows","onQueriesChange","q","item","itemIndex","updatedQueries","previousSettings","copyModel","newModel","startIndex","endIndex","update","removed","expressions","thresholdByRefId","provided","isCondition","DatasourceNotFound","defaultDataSource","onUpdateDatasource","model","refId","showDetails","setShowDetails","toggleDetails","show","handleUpdateDatasource","QueryOperationRow","Card","onChangeQueries","RecordingRuleEditor","runQueries","setData","handleChangedQuery","changedQuery","dataSourceId","isLoki","expr","merged","err","QueryErrorAlert","CloudRulesSourcePicker","rulesSourcesWithRuler","dataSourceFilter","DataSourcePicker","CloudDataSourceSelector","onChangeCloudDatasource","getAvailableRuleTypes","defaultRuleType","enabledRuleTypes","onlyOneDSInQueries","getCanSwitch","availableRuleTypes","onlyOneDS","dataSourceIdFromQueries","isRecordingRuleType","canSwitchToCloudRule","dsJsonData","canSwitchToGrafanaRule","grafanaTypeEnabled","cloudTypeEnabled","canSwitchFromCloudToGrafana","canSwitchFromGrafanaToCloud","SmartAlertTypeDetector","editingExistingRule","onClickSwitch","canSwitch","disabledOptions","DESCRIPTIONS","hasCyclicalReferences","findDataSourceFromExpressionRecursive","alertQuery","alertQueryReferenced","alertQuery_","findDataSourceFromExpression","firstReference","initialState","duplicateQuery","addNewDataQuery","setDataQueries","addNewExpression","removeExpression","removeExpressions","addExpressions","updateExpression","updateExpressionRefId","rewireExpressions","updateExpressionType","updateExpressionTimeRange","updateMaxDataPoints","updateMinInterval","setRecordingRulesQueries","queriesAndExpressionsReducer","builder","addQuery","datasource","recordingRuleQuery","action","dataSourceAlertQuery","relativeTimeRange","newState","newRefId","oldRefId","queryToAdd","defaultTimeRange","useAlertQueryRunner","queryPreviewData","setQueryPreviewData","runner","AlertingQueryRunner","currentRunner","clearPreviewData","cancelQueries","queriesToPreview","isPreviewLoading","onDataChange","isGrafanaAlertingType","isCloudAlertRuleType","dispatchReduxAction","runQueriesPreview","noCompatibleDataSources","dataQueries","emptyQueries","currentCondition","previewData","handleSetCondition","updateExpressionAndDatasource","useSetExpressionAndDataSource","onChangeRecordingRulesQueries","recordingRuleDefaultDatasource","defaultQuery","lastRefId","onClickType","datasourceUid","newQueries","onChangeExpression","promLoki","removeExpressionsInQueries","addExpressionsInQueries","prevExpressions","setPrevExpressions","prevCondition","setPrevCondition","restoreExpressionsInQueries","newDsName","sectionTitle","helpLabel","helpContent","helpLink","selectors","TypeSelectorButton","newMenu","Menu","MenuItem","Dropdown","matchersToArrayFieldMatchers","matchers","isRegex","selectableValueToString","selectableValue","selectableValuesToStrings","arr","emptyArrayFieldMatcher","defaultGroupBy","commonGroupByOptions","emptyRoute","addUniqueIdentifierToRoute","route","amRouteToFormAmRoute","formRoutes","subRoute","subFormRoute","objectMatchers","matcher","operator","formAmRouteToAmRoute","alertManagerSourceName","formAmRoute","routeTree","groupBy","INHERIT_FROM_PARENT","group_by","group_wait","group_interval","repeat_interval","object_matchers","routes","amRoute","stringToSelectableValue","str","stringsToSelectableValues","mapSelectValueToString","mapMultiSelectValueToStrings","selectableValues","promDurationValidator","duration","objectMatchersToString","repeatIntervalValidator","repeatInterval","validRepeatInterval","validGroupInterval","repeatDuration","groupDuration","generateCopiedName","originalName","exisitingNames","nonDuplicateName","i","mergePartialAmRouteWithRouteTree","partialFormRoute","findExistingRoute","findAndReplace","currentRoute","updatedRoute","newRoute","omitRouteFromRouteTree","findRoute","findAndOmit","addRouteToReferenceRoute","referenceRoute","position","draftTree","routeInTree","parentRoute","positionInParent","findRouteInTree","matchingRoute","matchingRouteParent","matchingRoutePositionInParent","cleanRouteIDs"],"sourceRoot":""}