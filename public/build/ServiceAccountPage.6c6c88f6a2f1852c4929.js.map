{"version":3,"file":"ServiceAccountPage.6c6c88f6a2f1852c4929.js","mappings":"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","sources":["webpack://grafana/./public/app/features/serviceaccounts/ServiceAccountPermissions.tsx","webpack://grafana/./public/app/features/serviceaccounts/components/ServiceAccountProfileRow.tsx","webpack://grafana/./public/app/features/serviceaccounts/components/ServiceAccountRoleRow.tsx","webpack://grafana/./public/app/features/serviceaccounts/components/ServiceAccountProfile.tsx","webpack://grafana/./public/app/features/serviceaccounts/components/ServiceAccountTokensTable.tsx","webpack://grafana/./public/app/features/serviceaccounts/state/actionsServiceAccountPage.ts","webpack://grafana/./public/app/features/serviceaccounts/ServiceAccountPage.tsx","webpack://grafana/./public/app/features/serviceaccounts/components/CreateTokenModal.tsx","webpack://grafana/./public/app/features/serviceaccounts/state/actions.ts"],"sourcesContent":["import { Permissions } from 'app/core/components/AccessControl';\nimport { contextSrv } from 'app/core/services/context_srv';\n\nimport { AccessControlAction, ServiceAccountDTO } from '../../types';\n\ntype ServiceAccountPermissionsProps = {\n  serviceAccount: ServiceAccountDTO;\n};\n\nexport const ServiceAccountPermissions = (props: ServiceAccountPermissionsProps) => {\n  const canSetPermissions = contextSrv.hasPermissionInMetadata(\n    AccessControlAction.ServiceAccountsPermissionsWrite,\n    props.serviceAccount\n  );\n\n  return (\n    <Permissions\n      title=\"Permissions\"\n      addPermissionTitle=\"Add permission\"\n      buttonLabel=\"Add permission\"\n      resource=\"serviceaccounts\"\n      resourceId={props.serviceAccount.id}\n      canSetPermissions={canSetPermissions}\n    />\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport { useEffect, useRef, useState } from 'react';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { ConfirmButton, Input, Label, LegacyInputStatus, useStyles2 } from '@grafana/ui';\n\ninterface Props {\n  label: string;\n  value?: string;\n  inputType?: string;\n  disabled?: boolean;\n  onChange?: (value: string) => void;\n}\n\nexport const ServiceAccountProfileRow = ({ label, value, inputType, disabled, onChange }: Props): JSX.Element => {\n  const inputElem = useRef<HTMLInputElement>(null);\n  const [inputValue, setInputValue] = useState(value);\n  const [isEditing, setIsEditing] = useState(false);\n  const styles = useStyles2(getStyles);\n  const inputId = `${label}-input`;\n\n  useEffect(() => {\n    if (isEditing) {\n      focusInput();\n    }\n  }, [isEditing]);\n\n  const onEditClick = () => {\n    setIsEditing(true);\n  };\n\n  const onCancelClick = () => {\n    setIsEditing(false);\n    setInputValue(value || '');\n  };\n\n  const onInputChange = (event: React.ChangeEvent<HTMLInputElement>, status?: LegacyInputStatus) => {\n    if (status === LegacyInputStatus.Invalid) {\n      return;\n    }\n    setInputValue(event.target.value);\n  };\n\n  const onInputBlur = (event: React.FocusEvent<HTMLInputElement>, status?: LegacyInputStatus) => {\n    if (status === LegacyInputStatus.Invalid) {\n      return;\n    }\n    setInputValue(event.target.value);\n  };\n\n  const focusInput = () => {\n    inputElem?.current?.focus();\n  };\n\n  const onSave = () => {\n    setIsEditing(false);\n    if (onChange) {\n      onChange(inputValue!);\n    }\n  };\n\n  return (\n    <tr>\n      <td>\n        <Label htmlFor={inputId}>{label}</Label>\n      </td>\n      <td className=\"width-25\" colSpan={2}>\n        {!disabled && isEditing ? (\n          <Input\n            id={inputId}\n            type={inputType}\n            defaultValue={value}\n            onBlur={onInputBlur}\n            onChange={onInputChange}\n            ref={inputElem}\n            width={30}\n          />\n        ) : (\n          <span className={cx({ [styles.disabled]: disabled })}>{value}</span>\n        )}\n      </td>\n      <td>\n        {onChange && (\n          <ConfirmButton\n            closeOnConfirm\n            confirmText=\"Save\"\n            onConfirm={onSave}\n            onClick={onEditClick}\n            onCancel={onCancelClick}\n            disabled={disabled}\n          >\n            Edit\n          </ConfirmButton>\n        )}\n      </td>\n    </tr>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    disabled: css`\n      color: ${theme.colors.text.secondary};\n    `,\n  };\n};\n","import { Label } from '@grafana/ui';\nimport { UserRolePicker } from 'app/core/components/RolePicker/UserRolePicker';\nimport { contextSrv } from 'app/core/core';\nimport { OrgRolePicker } from 'app/features/admin/OrgRolePicker';\nimport { AccessControlAction, OrgRole, Role, ServiceAccountDTO } from 'app/types';\n\ninterface Props {\n  label: string;\n  serviceAccount: ServiceAccountDTO;\n  onRoleChange: (role: OrgRole) => void;\n  roleOptions: Role[];\n}\n\nexport const ServiceAccountRoleRow = ({ label, serviceAccount, roleOptions, onRoleChange }: Props): JSX.Element => {\n  const inputId = `${label}-input`;\n  const canUpdateRole = contextSrv.hasPermissionInMetadata(AccessControlAction.ServiceAccountsWrite, serviceAccount);\n\n  return (\n    <tr>\n      <td>\n        <Label htmlFor={inputId}>{label}</Label>\n      </td>\n      {contextSrv.licensedAccessControlEnabled() ? (\n        <td colSpan={3}>\n          <UserRolePicker\n            userId={serviceAccount.id}\n            orgId={serviceAccount.orgId}\n            basicRole={serviceAccount.role}\n            onBasicRoleChange={onRoleChange}\n            roleOptions={roleOptions}\n            basicRoleDisabled={!canUpdateRole}\n            disabled={serviceAccount.isExternal || serviceAccount.isDisabled}\n          />\n        </td>\n      ) : (\n        <>\n          <td>\n            <OrgRolePicker\n              width={24}\n              inputId={inputId}\n              aria-label=\"Role\"\n              value={serviceAccount.role}\n              disabled={serviceAccount.isExternal || serviceAccount.isDisabled}\n              onChange={onRoleChange}\n            />\n          </td>\n          <td colSpan={2}></td>\n        </>\n      )}\n    </tr>\n  );\n};\n","import { css } from '@emotion/css';\nimport { useState, useEffect } from 'react';\n\nimport { dateTimeFormat, GrafanaTheme2, OrgRole, TimeZone } from '@grafana/data';\nimport { Label, TextLink, useStyles2 } from '@grafana/ui';\nimport { fetchRoleOptions } from 'app/core/components/RolePicker/api';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, Role, ServiceAccountDTO } from 'app/types';\n\nimport { ServiceAccountProfileRow } from './ServiceAccountProfileRow';\nimport { ServiceAccountRoleRow } from './ServiceAccountRoleRow';\n\ninterface Props {\n  serviceAccount: ServiceAccountDTO;\n  timeZone: TimeZone;\n  onChange: (serviceAccount: ServiceAccountDTO) => void;\n}\n\nexport function ServiceAccountProfile({ serviceAccount, timeZone, onChange }: Props): JSX.Element {\n  const styles = useStyles2(getStyles);\n  const ableToWrite = contextSrv.hasPermission(AccessControlAction.ServiceAccountsWrite);\n  const [roles, setRoleOptions] = useState<Role[]>([]);\n\n  const onRoleChange = (role: OrgRole) => {\n    onChange({ ...serviceAccount, role: role });\n  };\n\n  const onNameChange = (newValue: string) => {\n    onChange({ ...serviceAccount, name: newValue });\n  };\n\n  useEffect(() => {\n    async function fetchOptions() {\n      try {\n        if (contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n          let options = await fetchRoleOptions(serviceAccount.orgId);\n          setRoleOptions(options);\n        }\n      } catch (e) {\n        console.error('Error loading options for service account');\n      }\n    }\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchOptions();\n    }\n  }, [serviceAccount.orgId]);\n\n  return (\n    <div className={styles.section}>\n      <h3>Information</h3>\n      <table className=\"filter-table\">\n        <tbody>\n          <ServiceAccountProfileRow\n            label=\"Name\"\n            value={serviceAccount.name}\n            onChange={!serviceAccount.isExternal ? onNameChange : undefined}\n            disabled={!ableToWrite || serviceAccount.isDisabled}\n          />\n          <ServiceAccountProfileRow label=\"ID\" value={serviceAccount.login} disabled={serviceAccount.isDisabled} />\n          <ServiceAccountRoleRow\n            label=\"Roles\"\n            serviceAccount={serviceAccount}\n            onRoleChange={onRoleChange}\n            roleOptions={roles}\n          />\n          <ServiceAccountProfileRow\n            label=\"Creation date\"\n            value={dateTimeFormat(serviceAccount.createdAt, { timeZone })}\n            disabled={serviceAccount.isDisabled}\n          />\n          {serviceAccount.isExternal && serviceAccount.requiredBy && (\n            <tr>\n              <td>\n                <Label>Used by</Label>\n              </td>\n              <td>\n                <TextLink href={`/plugins/${serviceAccount.requiredBy}`}>{serviceAccount.requiredBy}</TextLink>\n              </td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  section: css`\n    margin-bottom: ${theme.spacing(4)};\n  `,\n});\n","import { css, cx } from '@emotion/css';\n\nimport { dateTimeFormat, GrafanaTheme2, TimeZone } from '@grafana/data';\nimport { DeleteButton, Icon, Tooltip, useStyles2, useTheme2 } from '@grafana/ui';\nimport { ApiKey } from 'app/types';\n\ninterface Props {\n  tokens: ApiKey[];\n  timeZone: TimeZone;\n  tokenActionsDisabled?: boolean;\n  onDelete: (token: ApiKey) => void;\n}\n\nexport const ServiceAccountTokensTable = ({ tokens, timeZone, tokenActionsDisabled, onDelete }: Props): JSX.Element => {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  return (\n    <table className={cx(styles.section, 'filter-table')}>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Expires</th>\n          <th>Created</th>\n          <th>Last used at</th>\n          <th />\n          <th />\n        </tr>\n      </thead>\n      <tbody>\n        {tokens.map((key) => {\n          return (\n            <tr key={key.id} className={styles.tableRow(key.hasExpired || key.isRevoked)}>\n              <td>{key.name}</td>\n              <td>\n                <TokenExpiration timeZone={timeZone} token={key} />\n              </td>\n              <td>{formatDate(timeZone, key.created)}</td>\n              <td>{formatLastUsedAtDate(timeZone, key.lastUsedAt)}</td>\n              <td className=\"width-1 text-center\">{key.isRevoked && <TokenRevoked />}</td>\n              <td>\n                <DeleteButton\n                  aria-label={`Delete service account token ${key.name}`}\n                  size=\"sm\"\n                  onConfirm={() => onDelete(key)}\n                  disabled={tokenActionsDisabled}\n                />\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nfunction formatLastUsedAtDate(timeZone: TimeZone, lastUsedAt?: string): string {\n  if (!lastUsedAt) {\n    return 'Never';\n  }\n  return dateTimeFormat(lastUsedAt, { timeZone });\n}\n\nfunction formatDate(timeZone: TimeZone, expiration?: string): string {\n  if (!expiration) {\n    return 'No expiration date';\n  }\n  return dateTimeFormat(expiration, { timeZone });\n}\n\nfunction formatSecondsLeftUntilExpiration(secondsUntilExpiration: number): string {\n  const days = Math.ceil(secondsUntilExpiration / (3600 * 24));\n  const daysFormat = days > 1 ? `${days} days` : `${days} day`;\n  return `Expires in ${daysFormat}`;\n}\n\nconst TokenRevoked = () => {\n  const styles = useStyles2(getStyles);\n  return (\n    <span className={styles.hasExpired}>\n      Revoked\n      <span className={styles.tooltipContainer}>\n        <Tooltip content=\"This token has been publicly exposed. Please rotate this token\">\n          <Icon name=\"exclamation-triangle\" className={styles.toolTipIcon} />\n        </Tooltip>\n      </span>\n    </span>\n  );\n};\n\ninterface TokenExpirationProps {\n  timeZone: TimeZone;\n  token: ApiKey;\n}\n\nconst TokenExpiration = ({ timeZone, token }: TokenExpirationProps) => {\n  const styles = useStyles2(getStyles);\n  if (!token.expiration) {\n    return <span className={styles.neverExpire}>Never</span>;\n  }\n  if (token.secondsUntilExpiration) {\n    return (\n      <span className={styles.secondsUntilExpiration}>\n        {formatSecondsLeftUntilExpiration(token.secondsUntilExpiration)}\n      </span>\n    );\n  }\n  if (token.hasExpired) {\n    return (\n      <span className={styles.hasExpired}>\n        Expired\n        <span className={styles.tooltipContainer}>\n          <Tooltip content=\"This token has expired\">\n            <Icon name=\"exclamation-triangle\" className={styles.toolTipIcon} />\n          </Tooltip>\n        </span>\n      </span>\n    );\n  }\n  return <span>{formatDate(timeZone, token.expiration)}</span>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tableRow: (hasExpired: boolean | undefined) => css`\n    color: ${hasExpired ? theme.colors.text.secondary : theme.colors.text.primary};\n  `,\n  tooltipContainer: css`\n    margin-left: ${theme.spacing(1)};\n  `,\n  toolTipIcon: css`\n    color: ${theme.colors.error.text};\n  `,\n  secondsUntilExpiration: css`\n    color: ${theme.colors.warning.text};\n  `,\n  hasExpired: css`\n    color: ${theme.colors.error.text};\n  `,\n  neverExpire: css`\n    color: ${theme.colors.text.secondary};\n  `,\n  section: css`\n    margin-bottom: ${theme.spacing(4)};\n  `,\n});\n","import { getBackendSrv, locationService } from '@grafana/runtime';\nimport { accessControlQueryParam } from 'app/core/utils/accessControl';\nimport { ServiceAccountDTO, ThunkResult } from 'app/types';\n\nimport { ServiceAccountToken } from '../components/CreateTokenModal';\n\nimport {\n  serviceAccountFetchBegin,\n  serviceAccountFetchEnd,\n  serviceAccountLoaded,\n  serviceAccountTokensLoaded,\n} from './reducers';\n\nconst BASE_URL = `/api/serviceaccounts`;\n\nexport function loadServiceAccount(saID: number): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(serviceAccountFetchBegin());\n    try {\n      const response = await getBackendSrv().get(`${BASE_URL}/${saID}`, accessControlQueryParam());\n      dispatch(serviceAccountLoaded(response));\n    } catch (error) {\n      console.error(error);\n    } finally {\n      dispatch(serviceAccountFetchEnd());\n    }\n  };\n}\n\nexport function updateServiceAccount(serviceAccount: ServiceAccountDTO): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().patch(`${BASE_URL}/${serviceAccount.id}?accesscontrol=true`, {\n      ...serviceAccount,\n    });\n    dispatch(loadServiceAccount(serviceAccount.id));\n  };\n}\n\nexport function deleteServiceAccount(serviceAccountId: number): ThunkResult<void> {\n  return async () => {\n    await getBackendSrv().delete(`${BASE_URL}/${serviceAccountId}`);\n    locationService.push('/org/serviceaccounts');\n  };\n}\n\nexport function createServiceAccountToken(\n  saID: number,\n  token: ServiceAccountToken,\n  onTokenCreated: (key: string) => void\n): ThunkResult<void> {\n  return async (dispatch) => {\n    const result = await getBackendSrv().post(`${BASE_URL}/${saID}/tokens`, token);\n    onTokenCreated(result.key);\n    dispatch(loadServiceAccountTokens(saID));\n  };\n}\n\nexport function deleteServiceAccountToken(saID: number, id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`${BASE_URL}/${saID}/tokens/${id}`);\n    dispatch(loadServiceAccountTokens(saID));\n  };\n}\n\nexport function loadServiceAccountTokens(saID: number): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      const response = await getBackendSrv().get(`${BASE_URL}/${saID}/tokens`);\n      dispatch(serviceAccountTokensLoaded(response));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n}\n","import { useEffect, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { getTimeZone, NavModelItem } from '@grafana/data';\nimport { Button, ConfirmModal, IconButton, Stack } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { AccessControlAction, ApiKey, ServiceAccountDTO, StoreState } from 'app/types';\n\nimport { ServiceAccountPermissions } from './ServiceAccountPermissions';\nimport { CreateTokenModal, ServiceAccountToken } from './components/CreateTokenModal';\nimport { ServiceAccountProfile } from './components/ServiceAccountProfile';\nimport { ServiceAccountTokensTable } from './components/ServiceAccountTokensTable';\nimport { fetchACOptions } from './state/actions';\nimport {\n  createServiceAccountToken,\n  deleteServiceAccount,\n  deleteServiceAccountToken,\n  loadServiceAccount,\n  loadServiceAccountTokens,\n  updateServiceAccount,\n} from './state/actionsServiceAccountPage';\n\ninterface OwnProps extends GrafanaRouteComponentProps<{ id: string }> {\n  serviceAccount?: ServiceAccountDTO;\n  tokens: ApiKey[];\n  isLoading: boolean;\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    serviceAccount: state.serviceAccountProfile.serviceAccount,\n    tokens: state.serviceAccountProfile.tokens,\n    isLoading: state.serviceAccountProfile.isLoading,\n    timezone: getTimeZone(state.user),\n  };\n}\n\nconst mapDispatchToProps = {\n  createServiceAccountToken,\n  deleteServiceAccount,\n  deleteServiceAccountToken,\n  loadServiceAccount,\n  loadServiceAccountTokens,\n  updateServiceAccount,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport const ServiceAccountPageUnconnected = ({\n  match,\n  serviceAccount,\n  tokens,\n  timezone,\n  isLoading,\n  createServiceAccountToken,\n  deleteServiceAccount,\n  deleteServiceAccountToken,\n  loadServiceAccount,\n  loadServiceAccountTokens,\n  updateServiceAccount,\n}: Props): JSX.Element => {\n  const [newToken, setNewToken] = useState('');\n  const [isTokenModalOpen, setIsTokenModalOpen] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isDisableModalOpen, setIsDisableModalOpen] = useState(false);\n\n  const serviceAccountId = parseInt(match.params.id, 10);\n  const tokenActionsDisabled =\n    serviceAccount.isDisabled ||\n    serviceAccount.isExternal ||\n    !contextSrv.hasPermission(AccessControlAction.ServiceAccountsWrite);\n\n  const ableToWrite = contextSrv.hasPermission(AccessControlAction.ServiceAccountsWrite);\n  const canReadPermissions = contextSrv.hasPermissionInMetadata(\n    AccessControlAction.ServiceAccountsPermissionsRead,\n    serviceAccount!\n  );\n\n  const pageNav: NavModelItem = {\n    text: serviceAccount.name,\n    img: serviceAccount.avatarUrl,\n    subTitle: 'Manage settings for an individual service account.',\n  };\n\n  useEffect(() => {\n    loadServiceAccount(serviceAccountId);\n    loadServiceAccountTokens(serviceAccountId);\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchACOptions();\n    }\n  }, [loadServiceAccount, loadServiceAccountTokens, serviceAccountId]);\n\n  const onProfileChange = (serviceAccount: ServiceAccountDTO) => {\n    updateServiceAccount(serviceAccount);\n  };\n\n  const showDeleteServiceAccountModal = (show: boolean) => () => {\n    setIsDeleteModalOpen(show);\n  };\n\n  const showDisableServiceAccountModal = (show: boolean) => () => {\n    setIsDisableModalOpen(show);\n  };\n\n  const handleServiceAccountDelete = () => {\n    deleteServiceAccount(serviceAccount.id);\n  };\n\n  const handleServiceAccountDisable = () => {\n    updateServiceAccount({ ...serviceAccount, isDisabled: true });\n    setIsDisableModalOpen(false);\n  };\n\n  const handleServiceAccountEnable = () => {\n    updateServiceAccount({ ...serviceAccount, isDisabled: false });\n  };\n\n  const onDeleteServiceAccountToken = (key: ApiKey) => {\n    deleteServiceAccountToken(serviceAccount?.id, key.id!);\n  };\n\n  const onCreateToken = (token: ServiceAccountToken) => {\n    createServiceAccountToken(serviceAccount?.id, token, setNewToken);\n  };\n\n  const onTokenModalClose = () => {\n    setIsTokenModalOpen(false);\n    setNewToken('');\n  };\n\n  return (\n    <Page navId=\"serviceaccounts\" pageNav={pageNav}>\n      <Page.Contents isLoading={isLoading}>\n        <div>\n          {serviceAccount && !serviceAccount.isExternal && (\n            <Stack gap={2} height=\"auto\" justifyContent=\"flex-end\">\n              <Button\n                type={'button'}\n                variant=\"destructive\"\n                onClick={showDeleteServiceAccountModal(true)}\n                disabled={!contextSrv.hasPermission(AccessControlAction.ServiceAccountsDelete)}\n              >\n                Delete service account\n              </Button>\n              {serviceAccount.isDisabled ? (\n                <Button\n                  type={'button'}\n                  variant=\"secondary\"\n                  onClick={handleServiceAccountEnable}\n                  disabled={!ableToWrite}\n                >\n                  Enable service account\n                </Button>\n              ) : (\n                <Button\n                  type={'button'}\n                  variant=\"secondary\"\n                  onClick={showDisableServiceAccountModal(true)}\n                  disabled={!ableToWrite}\n                >\n                  Disable service account\n                </Button>\n              )}\n            </Stack>\n          )}\n          {serviceAccount && serviceAccount.isExternal && (\n            <Stack gap={2} height=\"auto\" justifyContent=\"flex-end\">\n              <IconButton\n                disabled={true}\n                name=\"lock\"\n                size=\"md\"\n                tooltip={`This is a managed service account and cannot be modified.`}\n              />\n            </Stack>\n          )}\n          {serviceAccount && (\n            <ServiceAccountProfile serviceAccount={serviceAccount} timeZone={timezone} onChange={onProfileChange} />\n          )}\n          <Stack justifyContent=\"space-between\" height=\"auto\">\n            <h3>Tokens</h3>\n            {!serviceAccount.isExternal && (\n              <Button onClick={() => setIsTokenModalOpen(true)} disabled={tokenActionsDisabled}>\n                Add service account token\n              </Button>\n            )}\n          </Stack>\n          {tokens && (\n            <ServiceAccountTokensTable\n              tokens={tokens}\n              timeZone={timezone}\n              onDelete={onDeleteServiceAccountToken}\n              tokenActionsDisabled={tokenActionsDisabled}\n            />\n          )}\n          {!serviceAccount.isExternal && canReadPermissions && (\n            <ServiceAccountPermissions serviceAccount={serviceAccount} />\n          )}\n        </div>\n\n        <ConfirmModal\n          isOpen={isDeleteModalOpen}\n          title=\"Delete service account\"\n          body=\"Are you sure you want to delete this service account?\"\n          confirmText=\"Delete service account\"\n          onConfirm={handleServiceAccountDelete}\n          onDismiss={showDeleteServiceAccountModal(false)}\n        />\n        <ConfirmModal\n          isOpen={isDisableModalOpen}\n          title=\"Disable service account\"\n          body=\"Are you sure you want to disable this service account?\"\n          confirmText=\"Disable service account\"\n          onConfirm={handleServiceAccountDisable}\n          onDismiss={showDisableServiceAccountModal(false)}\n        />\n        <CreateTokenModal\n          isOpen={isTokenModalOpen}\n          token={newToken}\n          serviceAccountLogin={serviceAccount.login}\n          onCreateToken={onCreateToken}\n          onClose={onTokenModalClose}\n        />\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default connector(ServiceAccountPageUnconnected);\n","import { css } from '@emotion/css';\nimport { useEffect, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport {\n  Button,\n  ClipboardButton,\n  DatePickerWithInput,\n  Field,\n  Input,\n  Modal,\n  RadioButtonGroup,\n  useStyles2,\n} from '@grafana/ui';\n\nconst EXPIRATION_OPTIONS = [\n  { label: 'No expiration', value: false },\n  { label: 'Set expiration date', value: true },\n];\n\nexport type ServiceAccountToken = {\n  name: string;\n  secondsToLive?: number;\n};\n\ninterface Props {\n  isOpen: boolean;\n  token: string;\n  serviceAccountLogin: string;\n  onCreateToken: (token: ServiceAccountToken) => void;\n  onClose: () => void;\n}\n\nexport const CreateTokenModal = ({ isOpen, token, serviceAccountLogin, onCreateToken, onClose }: Props) => {\n  const tomorrow = new Date();\n  tomorrow.setDate(tomorrow.getDate() + 1);\n\n  const maxExpirationDate = new Date();\n  if (config.tokenExpirationDayLimit !== undefined && config.tokenExpirationDayLimit > -1) {\n    maxExpirationDate.setDate(maxExpirationDate.getDate() + config.tokenExpirationDayLimit + 1);\n  } else {\n    maxExpirationDate.setDate(8640000000000000);\n  }\n  const defaultExpirationDate = config.tokenExpirationDayLimit !== undefined && config.tokenExpirationDayLimit > 0;\n\n  const [defaultTokenName, setDefaultTokenName] = useState('');\n  const [newTokenName, setNewTokenName] = useState('');\n  const [isWithExpirationDate, setIsWithExpirationDate] = useState(defaultExpirationDate);\n  const [newTokenExpirationDate, setNewTokenExpirationDate] = useState<Date | string>(tomorrow);\n  const [isExpirationDateValid, setIsExpirationDateValid] = useState(newTokenExpirationDate !== '');\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    // Generate new token name every time we open modal\n    if (isOpen) {\n      setDefaultTokenName(`${serviceAccountLogin}-${uuidv4()}`);\n    }\n  }, [serviceAccountLogin, isOpen]);\n\n  const onExpirationDateChange = (value: Date | string) => {\n    const isValid = value !== '';\n    setIsExpirationDateValid(isValid);\n    setNewTokenExpirationDate(value);\n  };\n\n  const onGenerateToken = () => {\n    onCreateToken({\n      name: newTokenName || defaultTokenName,\n      secondsToLive: isWithExpirationDate ? getSecondsToLive(newTokenExpirationDate) : undefined,\n    });\n  };\n\n  const onCloseInternal = () => {\n    setNewTokenName('');\n    setDefaultTokenName('');\n    setIsWithExpirationDate(defaultExpirationDate);\n    setNewTokenExpirationDate(tomorrow);\n    setIsExpirationDateValid(newTokenExpirationDate !== '');\n    onClose();\n  };\n\n  const modalTitle = !token ? 'Add service account token' : 'Service account token created';\n\n  return (\n    <Modal isOpen={isOpen} title={modalTitle} onDismiss={onCloseInternal} className={styles.modal}>\n      {!token ? (\n        <div>\n          <Field\n            label=\"Display name\"\n            description=\"Name to easily identify the token\"\n            // for now this is required\n            // need to make this optional in backend as well\n            required={true}\n          >\n            <Input\n              name=\"tokenName\"\n              value={newTokenName}\n              placeholder={defaultTokenName}\n              onChange={(e) => {\n                setNewTokenName(e.currentTarget.value);\n              }}\n            />\n          </Field>\n          <Field label=\"Expiration\">\n            <RadioButtonGroup\n              options={EXPIRATION_OPTIONS}\n              value={isWithExpirationDate}\n              onChange={setIsWithExpirationDate}\n              size=\"md\"\n            />\n          </Field>\n          {isWithExpirationDate && (\n            <Field label=\"Expiration date\">\n              <DatePickerWithInput\n                onChange={onExpirationDateChange}\n                value={newTokenExpirationDate}\n                placeholder=\"\"\n                minDate={tomorrow}\n                maxDate={maxExpirationDate}\n              />\n            </Field>\n          )}\n          <Modal.ButtonRow>\n            <Button onClick={onGenerateToken} disabled={isWithExpirationDate && !isExpirationDateValid}>\n              Generate token\n            </Button>\n          </Modal.ButtonRow>\n        </div>\n      ) : (\n        <>\n          <Field\n            label=\"Token\"\n            description=\"Copy the token now as you will not be able to see it again. Losing a token requires creating a new one.\"\n          >\n            <div className={styles.modalTokenRow}>\n              <Input name=\"tokenValue\" value={token} readOnly />\n              <ClipboardButton\n                className={styles.modalCopyToClipboardButton}\n                variant=\"primary\"\n                size=\"md\"\n                icon=\"copy\"\n                getText={() => token}\n              >\n                Copy clipboard\n              </ClipboardButton>\n            </div>\n          </Field>\n          <Modal.ButtonRow>\n            <ClipboardButton variant=\"primary\" getText={() => token} onClipboardCopy={onCloseInternal}>\n              Copy to clipboard and close\n            </ClipboardButton>\n            <Button variant=\"secondary\" onClick={onCloseInternal}>\n              Close\n            </Button>\n          </Modal.ButtonRow>\n        </>\n      )}\n    </Modal>\n  );\n};\n\nconst getSecondsToLive = (date: Date | string) => {\n  const dateAsDate = new Date(date);\n  const now = new Date();\n\n  return Math.ceil((dateAsDate.getTime() - now.getTime()) / 1000);\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    modal: css({\n      width: '550px',\n    }),\n    modalTokenRow: css({\n      display: 'flex',\n    }),\n    modalCopyToClipboardButton: css({\n      marginLeft: theme.spacing(0.5),\n    }),\n  };\n};\n","import { debounce } from 'lodash';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { fetchRoleOptions } from 'app/core/components/RolePicker/api';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction, ServiceAccountDTO, ServiceAccountStateFilter, ThunkResult } from 'app/types';\n\nimport { ServiceAccountToken } from '../components/CreateTokenModal';\n\nimport {\n  acOptionsLoaded,\n  pageChanged,\n  queryChanged,\n  rolesFetchBegin,\n  rolesFetchEnd,\n  serviceAccountsFetchBegin,\n  serviceAccountsFetched,\n  serviceAccountsFetchEnd,\n  stateFilterChanged,\n} from './reducers';\n\nconst BASE_URL = `/api/serviceaccounts`;\n\nexport function fetchACOptions(): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      if (contextSrv.licensedAccessControlEnabled() && contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n        const options = await fetchRoleOptions();\n        dispatch(acOptionsLoaded(options));\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n}\n\ninterface FetchServiceAccountsParams {\n  withLoadingIndicator: boolean;\n}\n\nexport function fetchServiceAccounts(\n  { withLoadingIndicator }: FetchServiceAccountsParams = { withLoadingIndicator: false }\n): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    try {\n      if (contextSrv.hasPermission(AccessControlAction.ServiceAccountsRead)) {\n        if (withLoadingIndicator) {\n          dispatch(serviceAccountsFetchBegin());\n        }\n        const { perPage, page, query, serviceAccountStateFilter } = getState().serviceAccounts;\n        const result = await getBackendSrv().get(\n          `/api/serviceaccounts/search?perpage=${perPage}&page=${page}&query=${query}${getStateFilter(\n            serviceAccountStateFilter\n          )}&accesscontrol=true`\n        );\n\n        if (\n          contextSrv.licensedAccessControlEnabled() &&\n          contextSrv.hasPermission(AccessControlAction.ActionUserRolesList)\n        ) {\n          dispatch(rolesFetchBegin());\n          const orgId = contextSrv.user.orgId;\n          const userIds = result?.serviceAccounts.map((u: ServiceAccountDTO) => u.id);\n          const roles = await getBackendSrv().post(`/api/access-control/users/roles/search`, { userIds, orgId });\n          result.serviceAccounts.forEach((u: ServiceAccountDTO) => {\n            u.roles = roles ? roles[u.id] || [] : [];\n          });\n          dispatch(rolesFetchEnd());\n        }\n\n        dispatch(serviceAccountsFetched(result));\n      }\n    } catch (error) {\n      console.error(error);\n    } finally {\n      dispatch(serviceAccountsFetchEnd());\n    }\n  };\n}\n\nconst fetchServiceAccountsWithDebounce = debounce((dispatch) => dispatch(fetchServiceAccounts()), 500, {\n  leading: true,\n});\n\nexport function updateServiceAccount(serviceAccount: ServiceAccountDTO): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().patch(`${BASE_URL}/${serviceAccount.id}?accesscontrol=true`, {\n      ...serviceAccount,\n    });\n    dispatch(fetchServiceAccounts());\n  };\n}\n\nexport function deleteServiceAccount(serviceAccountId: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`${BASE_URL}/${serviceAccountId}`);\n    dispatch(fetchServiceAccounts());\n  };\n}\n\nexport function createServiceAccountToken(\n  saID: number,\n  token: ServiceAccountToken,\n  onTokenCreated: (key: string) => void\n): ThunkResult<void> {\n  return async (dispatch) => {\n    const result = await getBackendSrv().post(`${BASE_URL}/${saID}/tokens`, token);\n    onTokenCreated(result.key);\n    dispatch(fetchServiceAccounts());\n  };\n}\n\n// search / filtering of serviceAccounts\nconst getStateFilter = (value: ServiceAccountStateFilter) => {\n  switch (value) {\n    case ServiceAccountStateFilter.WithExpiredTokens:\n      return '&expiredTokens=true';\n    case ServiceAccountStateFilter.Disabled:\n      return '&disabled=true';\n    case ServiceAccountStateFilter.External:\n      return '&external=true';\n    default:\n      return '';\n  }\n};\n\nexport function changeQuery(query: string): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(queryChanged(query));\n    fetchServiceAccountsWithDebounce(dispatch);\n  };\n}\n\nexport function changeStateFilter(filter: ServiceAccountStateFilter): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(stateFilterChanged(filter));\n    dispatch(fetchServiceAccounts());\n  };\n}\n\nexport function changePage(page: number): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(pageChanged(page));\n    dispatch(fetchServiceAccounts());\n  };\n}\n"],"names":["ServiceAccountPermissions","props","canSetPermissions","ServiceAccountProfileRow","label","value","inputType","disabled","onChange","inputElem","inputValue","setInputValue","isEditing","setIsEditing","styles","getStyles","inputId","focusInput","onEditClick","onCancelClick","onInputChange","event","status","onInputBlur","onSave","Label","ConfirmButton","theme","ServiceAccountRoleRow","serviceAccount","roleOptions","onRoleChange","canUpdateRole","UserRolePicker","OrgRolePicker","ServiceAccountProfile","timeZone","ableToWrite","roles","setRoleOptions","role","onNameChange","newValue","fetchOptions","options","TextLink","ServiceAccountTokensTable","tokens","tokenActionsDisabled","onDelete","key","TokenExpiration","formatDate","formatLastUsedAtDate","TokenRevoked","DeleteButton","lastUsedAt","expiration","formatSecondsLeftUntilExpiration","secondsUntilExpiration","days","Tooltip","Icon","token","hasExpired","BASE_URL","loadServiceAccount","saID","dispatch","response","accessControl","error","updateServiceAccount","deleteServiceAccount","serviceAccountId","createServiceAccountToken","onTokenCreated","result","loadServiceAccountTokens","deleteServiceAccountToken","id","mapStateToProps","state","mapDispatchToProps","connector","ServiceAccountPageUnconnected","match","timezone","isLoading","newToken","setNewToken","isTokenModalOpen","setIsTokenModalOpen","isDeleteModalOpen","setIsDeleteModalOpen","isDisableModalOpen","setIsDisableModalOpen","canReadPermissions","pageNav","onProfileChange","showDeleteServiceAccountModal","show","showDisableServiceAccountModal","handleServiceAccountDelete","handleServiceAccountDisable","handleServiceAccountEnable","onDeleteServiceAccountToken","onCreateToken","onTokenModalClose","Page","Stack","Button","IconButton","ConfirmModal","CreateTokenModal","EXPIRATION_OPTIONS","isOpen","serviceAccountLogin","onClose","tomorrow","maxExpirationDate","defaultExpirationDate","defaultTokenName","setDefaultTokenName","newTokenName","setNewTokenName","isWithExpirationDate","setIsWithExpirationDate","newTokenExpirationDate","setNewTokenExpirationDate","isExpirationDateValid","setIsExpirationDateValid","onExpirationDateChange","onGenerateToken","getSecondsToLive","onCloseInternal","modalTitle","e","date","dateAsDate","now","fetchACOptions","fetchServiceAccounts","withLoadingIndicator","getState","perPage","page","query","serviceAccountStateFilter","getStateFilter","orgId","userIds","u","fetchServiceAccountsWithDebounce","changeQuery","changeStateFilter","filter","changePage"],"sourceRoot":""}