{"version":3,"file":"8107.93308072aac880369fbb.js","mappings":"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","sources":["webpack://grafana/./public/app/features/profile/ChangePasswordForm.tsx","webpack://grafana/./public/app/features/profile/ChangePasswordPage.tsx","webpack://grafana/./public/app/features/profile/api.ts","webpack://grafana/./public/app/features/profile/state/actions.ts","webpack://grafana/./node_modules/react-use/esm/useMount.js"],"sourcesContent":["import { useState } from 'react';\n\nimport { Button, Field, LinkButton, Stack } from '@grafana/ui';\nimport { Form } from 'app/core/components/Form/Form';\nimport {\n  ValidationLabels,\n  strongPasswordValidations,\n  strongPasswordValidationRegister,\n} from 'app/core/components/ValidationLabels/ValidationLabels';\nimport config from 'app/core/config';\nimport { t, Trans } from 'app/core/internationalization';\nimport { UserDTO } from 'app/types';\n\nimport { PasswordField } from '../../core/components/PasswordField/PasswordField';\n\nimport { ChangePasswordFields } from './types';\n\nexport interface Props {\n  user: UserDTO;\n  isSaving: boolean;\n  onChangePassword: (payload: ChangePasswordFields) => void;\n}\n\nexport const ChangePasswordForm = ({ user, onChangePassword, isSaving }: Props) => {\n  const [displayValidationLabels, setDisplayValidationLabels] = useState(false);\n  const [pristine, setPristine] = useState(true);\n\n  const { disableLoginForm } = config;\n  const authSource = user.authLabels?.length && user.authLabels[0];\n\n  if (authSource === 'LDAP' || authSource === 'Auth Proxy') {\n    return (\n      <p>\n        <Trans i18nKey=\"profile.change-password.ldap-auth-proxy-message\">\n          You cannot change password when signed in with LDAP or auth proxy.\n        </Trans>\n      </p>\n    );\n  }\n  if (authSource && disableLoginForm) {\n    return (\n      <p>\n        <Trans i18nKey=\"profile.change-password.cannot-change-password-message\">Password cannot be changed here.</Trans>\n      </p>\n    );\n  }\n\n  return (\n    <Form onSubmit={onChangePassword} maxWidth={400}>\n      {({ register, errors, getValues, watch }) => {\n        const newPassword = watch('newPassword');\n        return (\n          <>\n            <Field\n              label={t('profile.change-password.old-password-label', 'Old password')}\n              invalid={!!errors.oldPassword}\n              error={errors?.oldPassword?.message}\n            >\n              <PasswordField\n                id=\"current-password\"\n                autoComplete=\"current-password\"\n                {...register('oldPassword', {\n                  required: t('profile.change-password.old-password-required', 'Old password is required'),\n                })}\n              />\n            </Field>\n\n            <Field\n              label={t('profile.change-password.new-password-label', 'New password')}\n              invalid={!!errors.newPassword}\n              error={errors?.newPassword?.message}\n            >\n              <PasswordField\n                id=\"new-password\"\n                autoComplete=\"new-password\"\n                onFocus={() => setDisplayValidationLabels(true)}\n                {...register('newPassword', {\n                  onBlur: () => setPristine(false),\n                  required: t('profile.change-password.new-password-required', 'New password is required'),\n                  validate: {\n                    strongPasswordValidationRegister,\n                    confirm: (v) =>\n                      v === getValues().confirmNew ||\n                      t('profile.change-password.passwords-must-match', 'Passwords must match'),\n                    old: (v) =>\n                      v !== getValues().oldPassword ||\n                      t(\n                        'profile.change-password.new-password-same-as-old',\n                        \"New password can't be the same as the old one.\"\n                      ),\n                  },\n                })}\n              />\n            </Field>\n            {displayValidationLabels && (\n              <ValidationLabels\n                pristine={pristine}\n                password={newPassword}\n                strongPasswordValidations={strongPasswordValidations}\n              />\n            )}\n            <Field\n              label={t('profile.change-password.confirm-password-label', 'Confirm password')}\n              invalid={!!errors.confirmNew}\n              error={errors?.confirmNew?.message}\n            >\n              <PasswordField\n                id=\"confirm-new-password\"\n                autoComplete=\"new-password\"\n                {...register('confirmNew', {\n                  required: t(\n                    'profile.change-password.confirm-password-required',\n                    'New password confirmation is required'\n                  ),\n                  validate: (v) =>\n                    v === getValues().newPassword ||\n                    t('profile.change-password.passwords-must-match', 'Passwords must match'),\n                })}\n              />\n            </Field>\n            <Stack>\n              <Button variant=\"primary\" disabled={isSaving} type=\"submit\">\n                <Trans i18nKey=\"profile.change-password.change-password-button\">Change Password</Trans>\n              </Button>\n              <LinkButton variant=\"secondary\" href={`${config.appSubUrl}/profile`} fill=\"outline\">\n                <Trans i18nKey=\"profile.change-password.cancel-button\">Cancel</Trans>\n              </LinkButton>\n            </Stack>\n          </>\n        );\n      }}\n    </Form>\n  );\n};\n","import { connect, ConnectedProps } from 'react-redux';\nimport { useMount } from 'react-use';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { StoreState } from 'app/types';\n\nimport { ChangePasswordForm } from './ChangePasswordForm';\nimport { changePassword, loadUser } from './state/actions';\n\nexport interface OwnProps {}\n\nfunction mapStateToProps(state: StoreState) {\n  const userState = state.user;\n  const { isUpdating, user } = userState;\n  return {\n    isUpdating,\n    user,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadUser,\n  changePassword,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport function ChangePasswordPage({ loadUser, isUpdating, user, changePassword }: Props) {\n  useMount(() => loadUser());\n\n  return (\n    <Page navId=\"profile/password\">\n      <Page.Contents isLoading={!Boolean(user)}>\n        {user ? (\n          <>\n            <ChangePasswordForm user={user} onChangePassword={changePassword} isSaving={isUpdating} />\n          </>\n        ) : null}\n      </Page.Contents>\n    </Page>\n  );\n}\n\nexport default connector(ChangePasswordPage);\n","import { getBackendSrv } from '@grafana/runtime';\n\nimport { Team, UserDTO, UserOrg, UserSession } from '../../types';\n\nimport { ChangePasswordFields, ProfileUpdateFields } from './types';\n\nasync function changePassword(payload: ChangePasswordFields): Promise<void> {\n  try {\n    await getBackendSrv().put('/api/user/password', payload);\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nfunction loadUser(): Promise<UserDTO> {\n  return getBackendSrv().get('/api/user');\n}\n\nfunction loadTeams(): Promise<Team[]> {\n  return getBackendSrv().get('/api/user/teams');\n}\n\nfunction loadOrgs(): Promise<UserOrg[]> {\n  return getBackendSrv().get('/api/user/orgs');\n}\n\nfunction loadSessions(): Promise<UserSession[]> {\n  return getBackendSrv().get('/api/user/auth-tokens');\n}\n\nasync function revokeUserSession(tokenId: number): Promise<void> {\n  await getBackendSrv().post('/api/user/revoke-auth-token', {\n    authTokenId: tokenId,\n  });\n}\n\nasync function setUserOrg(org: UserOrg): Promise<void> {\n  await getBackendSrv().post('/api/user/using/' + org.orgId, {});\n}\n\nasync function updateUserProfile(payload: ProfileUpdateFields): Promise<void> {\n  try {\n    await getBackendSrv().put('/api/user', payload);\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nexport const api = {\n  changePassword,\n  revokeUserSession,\n  loadUser,\n  loadSessions,\n  loadOrgs,\n  loadTeams,\n  setUserOrg,\n  updateUserProfile,\n};\n","import { config } from '@grafana/runtime';\n\nimport { ThunkResult, UserOrg } from '../../../types';\nimport { api } from '../api';\nimport { ChangePasswordFields, ProfileUpdateFields } from '../types';\n\nimport {\n  initLoadOrgs,\n  initLoadSessions,\n  initLoadTeams,\n  orgsLoaded,\n  sessionsLoaded,\n  setUpdating,\n  teamsLoaded,\n  userLoaded,\n  userSessionRevoked,\n} from './reducers';\n\nexport function changePassword(payload: ChangePasswordFields): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.changePassword(payload);\n    dispatch(setUpdating({ updating: false }));\n  };\n}\n\nexport function initUserProfilePage(): ThunkResult<void> {\n  return async function (dispatch) {\n    await dispatch(loadUser());\n    dispatch(loadTeams());\n    dispatch(loadOrgs());\n    dispatch(loadSessions());\n  };\n}\n\nexport function loadUser(): ThunkResult<void> {\n  return async function (dispatch) {\n    const user = await api.loadUser();\n    dispatch(userLoaded({ user }));\n  };\n}\n\nfunction loadTeams(): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(initLoadTeams());\n    const teams = await api.loadTeams();\n    dispatch(teamsLoaded({ teams }));\n  };\n}\n\nfunction loadOrgs(): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(initLoadOrgs());\n    const orgs = await api.loadOrgs();\n    dispatch(orgsLoaded({ orgs }));\n  };\n}\n\nfunction loadSessions(): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(initLoadSessions());\n    const sessions = await api.loadSessions();\n    dispatch(sessionsLoaded({ sessions }));\n  };\n}\n\nexport function revokeUserSession(tokenId: number): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.revokeUserSession(tokenId);\n    dispatch(userSessionRevoked({ tokenId }));\n  };\n}\n\nexport function changeUserOrg(org: UserOrg): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.setUserOrg(org);\n    window.location.href = config.appSubUrl + '/profile';\n  };\n}\n\nexport function updateUserProfile(payload: ProfileUpdateFields): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.updateUserProfile(payload);\n    await dispatch(loadUser());\n    dispatch(setUpdating({ updating: false }));\n  };\n}\n","import useEffectOnce from './useEffectOnce';\nvar useMount = function (fn) {\n    useEffectOnce(function () {\n        fn();\n    });\n};\nexport default useMount;\n"],"names":["ChangePasswordForm","user","onChangePassword","isSaving","displayValidationLabels","setDisplayValidationLabels","pristine","setPristine","disableLoginForm","config","authSource","Form","register","errors","getValues","watch","newPassword","Field","PasswordField","v","ValidationLabels","Stack","Button","mapStateToProps","state","userState","isUpdating","mapDispatchToProps","connector","ChangePasswordPage","loadUser","changePassword","useMount","Page","payload","err","loadTeams","loadOrgs","loadSessions","revokeUserSession","tokenId","setUserOrg","org","updateUserProfile","api","dispatch","initUserProfilePage","teams","orgs","sessions","changeUserOrg","fn"],"sourceRoot":""}