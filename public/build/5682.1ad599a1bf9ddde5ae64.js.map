{"version":3,"file":"5682.1ad599a1bf9ddde5ae64.js","mappings":"8IAcO,MAAMA,EAAiB,CAAC,CAC7B,YAAAC,EACA,SAAAC,EACA,aAAAC,EACA,UAAAC,EACA,KAAAC,EACA,KAAAC,EAAO,KACP,GAAGC,CACL,OAEI,OAAC,MACC,KAAK,SACL,KAAK,OACL,QAAQ,YACR,gBAAe,CAACN,EAChB,gBAAeE,EACf,UAAAC,EACA,KAAMH,EAAc,cAAgB,aACpC,QAAS,IAAMC,EAAS,CAACD,CAAW,EACnC,GAAGM,EAEH,SAAAF,CAAA,CACH,C,kDC5BJ,SAASG,EAAgB,CAAE,SAAAC,EAAU,WAAAC,EAAY,KAAAC,CAAK,EAAyBC,EAAwB,CACrG,OAAOF,KAAa,gBAAaC,EAAKF,CAAQ,CAAC,EAAIA,CACrD,CAEA,WAAe,cAAWD,CAAe,C,6DCLlC,MAAMK,EAAc,CAAC,CAAE,QAAAC,CAAQ,OAA2B,OAAC,IAAI,CAAC,MAAM,UAAW,SAAAA,CAAA,CAAQ,C,+TCLzF,MAAMC,EAA0B,OACrC,OAACC,EAAA,GACC,KAAK,SACL,aAAW,SACX,MAAM,SACN,KAAK,uBAEL,QAAQ,4DACV,ECgBWC,EAAsBC,GAAmC,CACpE,KAAM,CAAE,KAAAC,EAAM,SAAAC,EAAW,GAAO,YAAAC,EAAc,GAAO,SAAAC,EAAW,CAAC,EAAG,SAAAC,CAAS,EAAIL,EAC3EM,KAAS,MAAWC,CAAS,EAE7B,CAACC,EAAiBC,CAAa,KAAI,MAAuB,KAAmB,kBAAkB,EAC/F,CAACC,GAAeC,EAAW,KAAI,MAAuB,KAAmB,kBAAkB,EAC3F,CAACC,EAAiBC,EAAa,KAAI,MAAuB,KAAmB,kBAAkB,EAE/F,CAACC,GAAcC,EAAgB,KAAIC,EAAA,GAAsB,EAEzDC,GAAmBb,EAAS,OAC5Bc,GAA0BD,GAAmB,EAC7CE,GAAgCf,EAAS,KAAMgB,IAAQA,GAAI,MAAM,OAAS,gBAAgB,EAE1FC,EAAUX,IAAiBC,IAAe,CAACR,EAC3CmB,GAAYV,GAAmBC,IAAiB,CAACV,GAAe,CAACgB,GAEjEI,GAA6B,CAAC,EAEhCf,GACFe,GAAY,QACV,QAAC,WAAQ,CACP,oBAACC,EAAA,EAAK,KAAL,CACC,KAAK,eACL,MAAM,SACN,UAAU,SACV,SAAU,CAACf,EACX,cAAY,SACZ,QAAS,IAAMM,GAAiBd,CAAI,EACtC,KACA,OAACuB,EAAA,EAAK,QAAL,EAAa,IATF,sBAUd,CACF,EAGEZ,GACFW,GAAY,QACV,OAACjC,EAAA,GAEC,WAAY,CAACgC,GACb,KAAO/B,OACL,OAACkC,EAAA,EAAO,CAAC,QAAQ,yEAAyE,UAAU,MAClG,mBAAC,QAAM,SAAAlC,EAAA,CAAS,EAClB,EAGF,mBAACiC,EAAA,EAAK,KAAL,CACC,MAAM,SACN,UAAU,SACV,KAAK,YACL,YAAW,GACX,SAAUtB,GAAY,CAACoB,GACvB,QAAS,IAAMjB,EAASJ,CAAI,EAC9B,GAfI,sBAgBN,CACF,EAGF,MAAMyB,MAA2B,KAAE,kCAAmC,0CAA2C,CAC/G,MAAOT,EACT,CAAC,EAED,SACE,QAAC,OAAI,UAAWX,EAAO,cACrB,qBAACqB,EAAA,EAAK,CAAC,UAAU,MAAM,WAAW,SAAS,IAAK,EAC9C,oBAACA,EAAA,EAAK,CAAC,WAAW,SAAS,IAAK,EAC9B,mBAACC,EAAA,EAAI,CAAC,QAAQ,KAAK,QAAQ,OAAO,OAAO,SACtC,SAAA3B,CAAA,CACH,EACF,EACCiB,OACC,OAACW,EAAA,GACC,QAAM,KAAkB,mBAAoB,CAAE,aAAc5B,CAAK,CAAC,EAClE,QAAQ,YACR,MAAM,UACN,OAAQ,GAEP,SAAAyB,EAAA,CACH,EAEDvB,MAAe,OAAC2B,EAAA,GAAiB,EAAC,EAClC,CAACZ,OAA2B,OAACrB,EAAuB,EAAC,KACtD,OAACkC,EAAA,EAAM,EAAC,KACR,OAAC,MACC,iBAAiB,MACjB,QAAS5B,EAAc,wDAA0D,OACjF,QAAQ,YACR,KAAK,KACL,KAAMkB,EAAU,MAAQ,MACxB,KAAK,SACL,SAAAnB,EACA,aAAY,GAAGmB,EAAU,OAAS,MAAM,UACxC,cAAa,GAAGA,EAAU,OAAS,MAAM,UACzC,KAAM,qCAAqC,mBAAmBpB,CAAI,CAAC,QAElE,SAAAoB,EAAU,OAAS,OACtB,EACCE,GAAY,OAAS,MACpB,OAACS,EAAA,EAAQ,CAAC,WAAS,OAACR,EAAA,EAAI,CAAE,SAAAD,EAAA,CAAY,EACpC,mBAACU,EAAA,EAAU,EAAC,EACd,GAEJ,EACCnB,EAAA,EACH,CAEJ,EAEMP,EAAa2B,IAA0B,CAC3C,iBAAe,OAAI,CACjB,WAAY,GAAGA,EAAM,OAAO,WAAW,SAAS,GAChD,QAAS,GAAGA,EAAM,QAAQ,CAAC,CAAC,IAAIA,EAAM,QAAQ,GAAG,CAAC,GAElD,aAAc,aAAaA,EAAM,OAAO,OAAO,IAAI,GACnD,oBAAqB,GAAGA,EAAM,MAAM,OAAO,OAAO,GAClD,qBAAsB,GAAGA,EAAM,MAAM,OAAO,OAAO,EACrD,CAAC,CACH,GC/IaC,EAA4C,CACvD,UAAW,YACX,SAAU,WACV,MAAO,QACP,SAAU,WACV,QAAS,UACT,UAAW,YACX,OAAQ,SACR,QAAS,UACT,MAAO,oBACP,IAAK,aACL,SAAU,WACV,QAAS,iBACX,E,0BCFO,MAAMC,EAAwB,CAAC,CAAE,SAAU,CAAE,KAAAC,EAAM,MAAAC,EAAO,YAAAC,EAAa,QAAAC,CAAQ,CAAE,IAAa,CACnG,MAAMlC,KAAS,MAAW,CAAS,EAEnC,SACE,QAACqB,EAAA,EAAK,CAAC,WAAW,SAAS,IAAK,GAC9B,qBAACA,EAAA,EAAK,CAAC,UAAU,MAAM,WAAW,SAAS,IAAK,GAC7C,UAAAa,KACC,OAACf,EAAA,EAAO,CAAC,QAASe,EAAS,MAAM,QAC/B,mBAACC,EAAA,EAAI,CAAC,KAAK,uBAAuB,UAAWnC,EAAO,SAAU,EAChE,KAEA,OAAC,OAAI,IAAK+B,EAAM,IAAKC,EAAO,OAAO,MAAO,MAE5C,OAAC,QAAM,SAAAA,CAAA,CAAM,GACf,EACCC,MACC,OAAC,KAAU,CAAC,KAAK,oBAAoB,KAAMA,EAAa,OAAO,SAAS,QAAQ,YAAY,KAAK,IAAK,IAE1G,CAEJ,EAEM,EAAaL,IAA0B,CAC3C,YAAU,OAAI,CACZ,KAAMA,EAAM,OAAO,QAAQ,IAC7B,CAAC,CACH,G,0BCPO,MAAMQ,EAAe,CAAC,CAC3B,KAAAzC,EACA,SAAAC,EAAW,GACX,YAAAC,EAAc,GACd,UAAAwC,EACA,SAAAvC,EAAW,CAAC,EACZ,SAAAC,CACF,IAAyB,CACvB,MAAMC,KAAS,MAAW,CAAS,EAG7BsC,EAAmBD,EAAU,KAAME,GAAa,EAAQA,EAAS,IAAiB,CAAE,EAE1F,SACE,OAAC,OAAI,UAAWvC,EAAO,oBAAqB,cAAY,gBACtD,oBAACqB,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAC7B,oBAAC5B,EAAA,CACC,KAAAE,EACA,SAAAG,EACA,YAAAD,EACA,SAAAD,EACA,SAAAG,CAAA,CACF,EACCuC,KACC,OAAC,OACE,SAAAD,EAAU,IAAI,CAACE,EAAUC,KAAU,CAClC,MAAMC,GAAcF,EAAS,IAAmB,EAC1CG,EAAWH,EAAS,IAAiB,EACrCI,GAAkB,CAASJ,EAAS,sBACpCK,GAAiBL,EAAS,IAAwB,EAClDM,GAAMH,EAAS,KAAOF,GAE5B,SACE,OAACM,EAAA,CAEC,KAAMJ,EAAS,KACf,KAAMH,EAAS,KACf,eAAa,MAAuBA,CAAQ,EAC5C,YAAAE,GACA,eAAAG,GACA,gBAAAD,EAAA,EANKE,EAOP,CAEJ,CAAC,EACH,KAEA,OAAC,OAAI,UAAW7C,EAAO,mBACrB,mBAAC+C,EAAA,CAA4B,UAAAV,CAAA,CAAsB,EACrD,GAEJ,EACF,CAEJ,EAWMS,EAAwBpD,GAAqC,CACjE,KAAM,CAAE,KAAAC,EAAM,KAAAqD,EAAM,YAAAC,EAAa,YAAAR,EAAa,eAAAG,EAAgB,gBAAAD,EAAkB,EAAK,EAAIjD,EACnFM,KAAS,MAAW,CAAS,EAE7BkD,EAAcT,IAAgB,OAEpC,SACE,OAAC,OAAI,UAAWzC,EAAO,mBACrB,oBAACqB,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,GAC7B,oBAAC8B,EAAA,CACC,KAAAxD,EACA,KAAAqD,EACA,YAAAC,EACA,eAAAL,CAAA,CACF,EACCM,MAAe,OAACE,EAAA,CAAgC,YAAAX,EAA0B,gBAAAE,CAAA,CAAkC,GAC/G,EACF,CAEJ,EASO,SAASQ,EAA6BzD,EAA0C,CACrF,KAAM,CAAE,KAAAC,EAAM,KAAAqD,EAAM,YAAAC,EAAa,eAAAL,CAAe,EAAIlD,EAE9C2D,EAAW,IAAkBL,CAAI,EAEvC,SACE,QAAC3B,EAAA,EAAK,CAAC,UAAU,MAAM,WAAW,SAAS,IAAK,EAC9C,qBAACA,EAAA,EAAK,CAAC,UAAU,MAAM,WAAW,SAAS,IAAK,GAC7C,UAAAgC,MAAY,OAAClB,EAAA,EAAI,CAAC,KAAMkB,CAAA,CAAU,EAClCT,KACC,OAACd,EAAqB,CAAC,SAAUc,CAAA,CAAgB,KAEjD,OAACtB,EAAA,EAAI,CAAC,QAAQ,OAAO,MAAM,UACxB,SAAA3B,CAAA,CACH,GAEJ,EACCsD,MACC,OAAC3B,EAAA,EAAI,CAAC,QAAQ,YAAY,MAAM,YAC7B,SAAA2B,CAAA,CACH,GAEJ,CAEJ,CAeO,MAAMF,EAA8B,CAAC,CAAE,UAAAV,CAAU,IAAwC,CAC9F,MAAMiB,KAAc,WAAQjB,EAAYE,GAAaA,EAAS,IAAI,EAElE,SACE,OAAClB,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAC7B,mBAACA,EAAA,EAAK,CAAC,UAAU,MAAM,WAAW,SAAS,IAAK,EAC7C,gBAAO,QAAQiC,CAAW,EAAE,IAAI,CAAC,CAACN,EAAMX,CAAS,EAAGG,IAAU,CAC7D,MAAMa,EAAW,IAAkBL,CAAI,EACjCO,EAAe1B,EAAkBmB,CAAI,MAAK,cAAWA,CAAI,EACzDQ,KAAa,QAAKF,CAAW,EAAI,IAAMd,EAE7C,SACE,QAACiB,EAAAA,SAAA,CACC,qBAACpC,EAAA,EAAK,CAAC,UAAU,MAAM,WAAW,SAAS,IAAK,GAC7C,UAAAgC,MAAY,OAAClB,EAAA,EAAI,CAAC,KAAMkB,CAAA,CAAU,KACnC,QAAC/B,EAAA,EAAI,CAAC,QAAQ,OACX,UAAAiC,EACAlB,EAAU,OAAS,GAAKA,EAAU,QACrC,GACF,EACC,CAACmB,GAAc,WARHR,CASf,CAEJ,CAAC,EACH,EACF,CAEJ,EAEMI,EAAkC,CAAC,CAAE,YAAAX,EAAa,gBAAAE,CAAgB,IAAoC,CAC1G,MAAM3C,KAAS,MAAW,CAAS,EAE7B0D,EAAe,EAAQjB,EAAY,uBACnCkB,KAAsB,MAASlB,EAAY,iBAAiB,EAC5DmB,EAA8BnB,EAAY,0BAC1CoB,EAAqBF,EAAoB,QAAQ,EAEvD,SACE,OAAC,OAAI,UAAW3D,EAAO,YACrB,mBAACqB,EAAA,EAAK,CAAC,UAAU,MAAM,IAAK,EAEzB,SAAAqC,KACC,mBACE,mBAACI,EAAA,EAAQ,CAAC,MAAM,QAAQ,KAAK,qBAC3B,mBAAC3C,EAAA,EAAO,CAAC,QAASsB,EAAY,uBAC5B,mBAAC,QACC,mBAAC,KAAK,CAAC,QAAQ,+CAA+C,wCAA4B,EAC5F,EACF,EACF,EACF,KAEA,oBAEG,UAAAoB,MACC,oBACE,qBAACC,EAAA,EAAQ,CAAC,KAAK,aACb,oBAAC,KAAK,CAAC,QAAQ,gDAAgD,iCAAqB,KACpF,OAAC3C,EAAA,EAAO,CAAC,QAASwC,EAAoB,eAAe,EACnD,mBAAC,QACC,mBAACrC,EAAA,EAAI,CAAC,MAAM,UAAW,SAAAqC,EAAoB,OAAO,IAAI,EAAE,QAAQ,EAAE,EACpE,EACF,GACF,KACA,OAACG,EAAA,EAAQ,CAAC,KAAK,YACb,oBAAC,KAAK,CAAC,QAAQ,4CAA4C,mCACtC,OAAC,IAAW,CAAC,QAASF,CAAA,CAA6B,GACxE,EACF,GACF,EAGD,CAACC,MACA,OAACC,EAAA,EAAQ,CAAC,KAAK,aACb,mBAAC,KAAK,CAAC,QAAQ,+CAA+C,gCAAoB,EACpF,EAGD,CAACnB,MACA,OAACmB,EAAA,EAAQ,CAAC,KAAK,cACb,oBAAC,KAAK,CAAC,QAAQ,sCAAsC,2BACxC,OAACxC,EAAA,EAAI,CAAC,MAAM,UAAU,uBAAW,EAAO,kBACrD,EACF,GAEJ,EAEJ,EACF,CAEJ,EAEM,EAAaM,IAA0B,CAC3C,uBAAqB,OAAI,CACvB,aAAc,GAAGA,EAAM,MAAM,OAAO,OAAO,GAC3C,OAAQ,aAAaA,EAAM,OAAO,OAAO,IAAI,GAC7C,aAAc,MAChB,CAAC,EACD,sBAAoB,OAAI,CACtB,SAAU,WAEV,WAAY,GAAGA,EAAM,OAAO,WAAW,OAAO,GAC9C,QAAS,GAAGA,EAAM,QAAQ,CAAC,CAAC,IAAIA,EAAM,QAAQ,GAAG,CAAC,GAElD,aAAc,aAAaA,EAAM,OAAO,OAAO,IAAI,EACrD,CAAC,EACD,eAAa,OAAI,CACf,uBAAwB,GAAGA,EAAM,MAAM,OAAO,OAAO,GACrD,wBAAyB,GAAGA,EAAM,MAAM,OAAO,OAAO,EACxD,CAAC,CACH,E,sDC/QO,MAAMmC,EAAsB,OAAO,iBAAiB,EAC9CC,EAAoB,OAAO,mBAAmB,EAC9CC,EAA2B,OAAO,0BAA0B,C,oGCDlE,MAAMC,EAAc,CAAC,UAAU,EAChCC,EAAiB,KACpB,iBAAiB,CAChB,YAAAD,CACF,CAAC,EACA,gBAAgB,CACf,UAAYE,IAAW,CACrB,uBAAwBA,EAAM,MAAuE,CACnG,MAAQC,IAAc,CACpB,IAAK,gEAAgEA,EAAS,SAAY,aAC1F,OAAQ,CACN,OAAQA,EAAS,OACjB,oBAAqBA,EAAS,oBAC9B,SAAUA,EAAS,SACnB,cAAeA,EAAS,cACxB,cAAeA,EAAS,cACxB,MAAOA,EAAS,MAChB,gBAAiBA,EAAS,gBAC1B,qBAAsBA,EAAS,qBAC/B,kBAAmBA,EAAS,kBAC5B,eAAgBA,EAAS,eACzB,MAAOA,EAAS,KAClB,CACF,GACA,aAAc,CAAC,UAAU,CAC3B,CAAC,CACH,GACA,iBAAkB,EACpB,CAAC,E,4FCJH,MAAMC,EAAmC,GAAK,IAUxC,CACJ,qCAAAC,EACA,6BAAAC,EACA,+BAAAC,EACA,yBAAAC,EACA,yCAAAC,EACA,2CAAAC,CACF,EAAIC,EAAA,EACE,CAAE,kCAAAC,CAAkC,EAAIC,EAAA,GACxC,CAAE,+BAAAC,CAA+B,EAAI,EAErCC,EAAiB,CACrB,eAAgB,GAChB,mBAAoB,EACtB,EAOMC,EAAwB,CAAC,CAAE,KAAAC,CAAK,EAAe,CAAC,IAAM,CAC1D,KAAM,CAAE,UAAAC,EAAW,QAAAC,CAAQ,KAAIC,EAAA,GAAgB,IAAgB,MAAM,EAC/DC,EAA6BT,EAAkC,OAAW,CAAE,KAAMK,GAAQ,CAACC,CAAU,CAAC,EAE5G,SAAO,WAAQ,IACTA,EACKG,EAEF,CACL,UAAWF,EACX,KAAM,MACR,EACC,CAACD,EAAWC,EAASE,CAA0B,CAAC,CACrD,EAMMC,EAAoBC,IACjB,CAAE,KAAMA,EAAK,KAAK,MAAO,iCAAkCA,EAAK,KAAK,YAAa,GAGrFC,EAAsB,IAAI,CAACC,EAAYC,CAAY,IAChDZ,EAA+BW,EAAY,CAChD,GAAGC,EACH,iBAAkB,CAAC,CAAE,KAAAC,EAAM,GAAGC,CAAK,KAC1B,CACL,GAAGA,EACH,KAAMD,GAAM,MAAM,IAAKJ,GAASD,EAAiBC,CAAI,CAAC,CACxD,EAEJ,CAAC,EAOGM,EAA+B,CAAC,CAAE,KAAAZ,CAAK,EAAe,CAAC,IAAM,CACjE,MAAMa,KAAY,KAAgB,EAC5BC,KAAY,KAAgB,IAAyB,EAErDC,EAAkB1B,EAA6B,OAAW,CAAE,KAAMW,GAAQc,CAAU,CAAC,EACrFE,EAAcT,EAAoB,CAAE,UAAAM,CAAU,EAAG,CAAE,KAAMb,GAAQ,CAACc,CAAU,CAAC,EAEnF,OAAOA,EAAYE,EAAcD,CACnC,EAkBaE,EAA0B,CAAC,CACtC,cAAAC,EACA,cAAAC,EACA,KAAAnB,CACF,EAAqC,CAAC,IAAM,CAC1C,MAAMoB,EAAkB,CAAE,KAAApB,CAAK,EACzBqB,EAAiBtB,EAAsBqB,CAAe,EACtDE,EAAiB/B,EAAyB,OAAW6B,CAAe,EACpEG,EAA4BX,EAA6BQ,CAAe,EACxEI,EAA8BlC,EAA+B,OAAW,CAC5E,GAAGQ,EACH,gBAAiBX,EACjB,KAAMa,GAAQ,CAACkB,CACjB,CAAC,EACKO,EAA6BrC,EAAqC,KAA2B,CACjG,KAAMY,GAAQ,CAACmB,CACjB,CAAC,EAED,SAAO,WAAQ,IAAM,CAGnB,GAFkBE,EAAe,WAAaC,EAAe,WAAaC,EAA0B,WAEnF,CAACA,EAA0B,KAC1C,MAAO,CACL,GAAGA,EAKH,UAAW,GACX,cAAe,CAAC,CAClB,EAGF,MAAMG,KAAW,MAAiC,CAChD,OAAQF,EAA4B,KACpC,UAAWF,EAAe,KAC1B,mBAAoBD,GAAgB,KACpC,cAAeE,EAA0B,KACzC,0BAA2BE,EAA2B,IACxD,CAAC,EAED,MAAO,CACL,GAAGF,EACH,cAAeG,CACjB,CACF,EAAG,CACDJ,EACAG,EACAF,EACAC,EACAH,CACF,CAAC,CACH,EAEO,SAASM,EAA2B,CACzC,aAAAC,EACA,cAAAV,EACA,cAAAC,CACF,EAA+C,CAC7C,MAAMU,EAAwBD,IAAiB,KACzCb,EAAkBE,EAAwB,CAC9C,KAAM,CAACY,EACP,cAAAX,EACA,cAAAC,CACF,CAAC,EAEKM,EAA6BrC,EAAqCwC,EAAc,CACpF,GAAG9B,EACH,iBAAmBgC,IAAY,CAC7B,GAAGA,EACH,cAAeA,EAAO,QAClB,MAAiC,CAC/B,UAAW,IACX,cAAeA,EAAO,KAAK,oBAAoB,WAAa,CAAC,EAC7D,0BAA2BA,EAAO,IACpC,CAAC,EACD,CAAC,CACP,GACA,KAAMD,CACR,CAAC,EAED,OAAOA,EAAwBd,EAAkBU,CACnD,CAEO,SAASM,EAAsBC,EAA8B,CAClE,KAAM,CAACC,CAAuB,EAAIzC,EAAyC,EACrE,CAAC0C,EAAoBC,CAAuB,EAAI1C,EAA2C,EAoBjG,MAAO,CACL,cAnBqB2C,GACdH,EAAwBD,CAAoB,EAAE,KAAK,CAAC,CAAE,KAAAtB,CAAK,IAAM,CACtE,GAAI,CAACA,EACH,OAGF,MAAM2B,KAAY,MAAQ3B,EAAO4B,OAC/B,UAAOA,GAAO,qBAAqB,WAAa,CAAC,EAAIlF,GAAaA,EAAS,OAASgF,CAAgB,EAC7FE,EACR,EAED,OAAOJ,EAAmB,CACxB,qBAAAF,EACA,OAAQK,CACV,CAAC,EAAE,OAAO,CACZ,CAAC,EAKD,wBAAAF,CACF,CACF,C,kJCtNA,MAAMI,EAA+B,CAAC,CACpC,aAAAnE,EACA,QAAAoE,EACA,aAAAC,EACA,QAAAC,CACF,IAAyC,CACvC,KAAM,CAAE,YAAaC,EAAqB,GAAI,WAAAC,CAAW,EAAIC,EAAA,GAAa,uBAAuB,CAC/F,aAAAzE,EACA,QAAAoE,EACA,OAAQC,CACV,CAAC,EAEKK,EAAmB,MAAM1E,CAAY,IAAI,IAAI,KAAK,EAAE,QAAQ,CAAC,GAEnE,OAAIwE,KACK,OAACG,EAAA,EAAkB,CAAC,KAAK,aAAc,MAI9C,OAACC,EAAA,GACC,OAAQP,EACR,eAAgBE,EAChB,iBAAAG,EACA,QAAAJ,CAAA,CACF,CAEJ,EAQaO,EAA0B,CAAC,CAAE,QAAAP,EAAS,aAAAtE,EAAc,QAAAoE,CAAQ,IAAoC,CAC3G,KAAM,CAACU,EAAWC,CAAY,KAAI,YAAwB,MAAM,EAEhE,SACE,OAACC,EAAA,GACC,UAAAF,EACA,YAAaC,EACb,QAAAT,EACA,gBAAiB,OAAO,OAAO,IAAyB,EAExD,mBAACH,EAAA,CACC,aAAAnE,EACA,QAAAoE,EACA,aAAcU,EACd,QAAAR,CAAA,CACF,EACF,CAEJ,ECrDMW,EAAgC,CAAC,CAAE,QAAAb,EAAS,aAAAC,EAAc,QAAAC,CAAQ,IAA0C,CAChH,KAAM,CAAE,YAAaC,EAAqB,GAAI,WAAAC,CAAW,EAAIC,EAAA,GAAa,wBAAwB,CAChG,QAAAL,EACA,OAAQC,CACV,CAAC,EAEKK,EAAmB,kBAAkB,IAAI,KAAK,EAAE,QAAQ,CAAC,GAE/D,OAAIF,KACK,OAACG,EAAA,EAAkB,CAAC,KAAK,aAAc,MAI9C,OAACC,EAAA,GACC,OAAQP,EACR,eAAgBE,EAChB,iBAAAG,EACA,QAAAJ,CAAA,CACF,CAEJ,EAOaY,EAA2B,CAAC,CAAE,QAAAZ,EAAS,QAAAF,CAAQ,IAAqC,CAC/F,KAAM,CAACU,EAAWC,CAAY,KAAI,YAAwB,MAAM,EAEhE,SACE,OAACC,EAAA,GACC,UAAAF,EACA,YAAaC,EACb,QAAAT,EACA,gBAAiB,OAAO,OAAO,IAAyB,EAExD,mBAACW,EAAA,CAA8B,QAAAb,EAAkB,aAAcU,EAAW,QAAAR,CAAA,CAAkB,EAC9F,CAEJ,ECjDaa,EAAqB,OAAO,oBAAoB,EAIhDhI,EAAwB,IAAmB,CACtD,KAAM,CAAC6C,EAAcoF,CAAe,KAAI,YAAoD,IAAI,EAC1F,CAACC,EAAoBC,CAAsB,KAAIC,EAAA,GAAU,EAAK,EAC9D,CAACC,EAAyBC,CAAqB,KAAI,MAAuB,KAAmB,cAAc,EAE3GC,EAAiBF,GAA2BC,EAE5CE,KAAc,eAAY,IAAM,CACpCP,EAAgB,IAAI,EACpBE,EAAuB,EAAK,CAC9B,EAAG,CAACA,CAAsB,CAAC,EAErBM,EAAc5F,GAAqD,CACvEoF,EAAgBpF,CAAY,EAC5BsF,EAAuB,EAAI,CAC7B,EAgBA,MAAO,IAdQ,WAAQ,IACjB,CAACtF,GAAgB,CAACqF,EACb,KAGLrF,IAAiBmF,KAEZ,OAACD,EAAwB,CAAC,QAASQ,EAAgB,QAASC,CAAA,CAAa,KAGzE,OAACd,EAAuB,CAAC,aAAA7E,EAA4B,QAAS0F,EAAgB,QAASC,CAAA,CAAa,EAE5G,CAACD,EAAgBL,EAAoBM,EAAa3F,CAAY,CAAC,EAElD4F,CAAU,CAC5B,C,qGCpBO,SAASC,EAAiB7G,EAAoD,CACnF,MAAI,qCAAsCA,EACjCA,EAAS,kCAAoC,CAAC,EAGlC,OAAO,QAAQA,CAAQ,EACzC,OAAO,CAAC,CAACM,CAAG,IAAMA,IAAQ,oCAAsCA,EAAI,SAAS,UAAU,CAAC,EACxF,OAAO,CAAC,CAACwG,EAAGC,CAAK,IAAM,MAAM,QAAQA,CAAK,GAAK,IAAC,WAAQA,CAAK,CAAC,EAC9D,OAAO,CAACC,EAAqC,CAAC1G,EAAKyG,CAAK,IAAM,CAC7D,MAAMtG,EAAOH,EAAI,QAAQ,WAAY,EAAE,EACjC2G,EAAUF,EAAM,IAAKG,IAClB,CACL,KAAMlH,EAAS,KACf,KAAAS,EACA,SAAAyG,EACA,sBAAuB,EACzB,EACD,EAED,OAAOF,EAAI,OAAOC,CAAO,CAC3B,EAAG,CAAC,CAAC,CAGT,C,gDC5BO,MAAME,EAA6C,CACxD,MAH0B,iBAI1B,KALyB,IAAmC,IAAgB,MAAM,CAMpF,EAEO,SAASC,EACdC,EACArH,EACAsH,EAA4B,GACJ,CAMxB,GALI,CAACA,GAKDD,IAAuB,OACzB,OAAOF,EAIT,GAAIE,GAAsB,KACxB,MAAO,CACL,GAAGF,EACH,QAAS,gDACX,EAGF,MAAMI,EAA4BF,EAAmB,KAClDG,GAAgBA,EAAY,kBAAoBxH,EAAS,UAAU,GACtE,EAEA,MAAO,CACL,GAAGmH,EACH,YAAaI,GAA2B,aACxC,YAAaA,KACT,KAAgB,IAAgB,OAAQ,iBAAiBA,EAA0B,KAAK,EAAE,EAC1F,OACJ,QAASA,EAA4B,OAAY,qCACnD,CACF,C,eCnCA,MAAME,EAA4C,uBAE3C,SAASC,EAAcC,EAA0C,CAItE,MAAO,EAFYA,EAAa,kCAAkC,KAAM3H,GAAaA,EAAS,UAAU,GAAG,UAG7G,CAGO,SAAS4H,EAAuB5H,EAA6D,CAClG,GAAI,CAACA,EAAS,SACZ,OAEF,KAAM,CAAE,SAAAkH,CAAS,EAAIlH,EACrB,OAAQA,EAAS,KAAM,CACrB,IAAK,QAAS,CACZ,MAAM6H,EAAYX,EAAS,WAAaA,EAAS,GACjD,OAAOW,EAAYC,EAAwBD,CAAS,EAAI,MAC1D,CACA,IAAK,QAAS,CACZ,MAAME,EAAYb,EAAS,WAAaA,EAAS,QACjD,OAAKa,EAME,IADaA,EAAU,QAAQ,KAAM,EAAE,CACxB,GALpB,MAMJ,CACA,IAAK,QACH,OAAOb,EAAS,WAElB,IAAK,UACH,OAAOA,EAAS,IAElB,KAAK,KAAc,OACjB,OAAOlH,EAAS,IAAwB,GAAG,YAE7C,QACE,OAAOA,EAAS,IAAiB,GAAG,WACxC,CACF,CAIO,SAAS8H,EAAwBD,EAA2B,CAEjE,MAAMG,EAAuB,WAGvBC,EAASJ,EAAU,KAAK,EAAE,MAAMG,CAAoB,EAAE,IAAI,MAAI,EAG9DE,KAAU,QAAKD,EAAQ,CAAmB,EAC1C1E,KAAO,cAAW0E,EAAQC,CAAO,EAEvC,OAAI3E,EAAK,QACP2E,EAAQ,KAAK,IAAI3E,EAAK,MAAM,OAAO,EAG9B2E,EAAQ,KAAK,IAAI,CAC1B,CAoCO,SAASC,EAAiC,CAC/C,OAAAC,EAAS,CAAC,EACV,UAAAC,EAAY,CAAC,EACb,mBAAAhB,EACA,cAAAiB,EACA,0BAAAC,CACF,EAAyD,CAEvD,MAAMC,KAAqB,MAAqBD,GAA2B,qBAAqB,OAAS,CAAC,CAAC,EACrGE,EAAoBC,EAAqBF,CAAkB,EAC3DG,KAA0B,WAAQF,EAAmB,UAAU,EA4BrE,OA1BiBH,EAAc,IAAKX,GAAiB,CACnD,MAAM7H,EAAY+G,EAAiBc,CAAY,EACzCiB,EAAoBR,EAAO,KAAMA,GAAWA,EAAO,OAAST,EAAa,IAAI,EAEnF,MAAO,CACL,GAAGA,EACH,SACEY,GAA6BI,IAA4BA,EAAwBhB,EAAa,IAAI,GAAK,CAAC,GAC1G,iCAAkC7H,EAAU,IAAI,CAACE,EAAUC,IAAU,CACnE,MAAM4I,EAAmB7I,EAAS,OAAS,KAAc,OAIzD,MAAO,CACL,GAAGA,EACH,CAAC,IAAmB,EAAG4I,GAAmB,aAAa3I,CAAK,EAC5D,CAAC,IAAiB,EAAG6I,EAAoBT,EAAWrI,CAAQ,EAE5D,CAAC,IAAwB,EAAG6I,EACxBzB,EAAkBC,EAAoBrH,EAAU,EAAQuI,CAA0B,EAClF,MACN,CACF,CAAC,CACH,CACF,CAAC,EAEe,KAAK,CAACQ,EAAGC,IAAMD,EAAE,KAAK,cAAcC,EAAE,IAAI,CAAC,CAC7D,CAEO,SAASC,EAAsBC,EAAc,CAKlD,MAHI,EADmCC,EAAA,EAAO,eAAe,2BAA6B,KAItF,CAACD,EAAM,gBACF,GAGPA,EAAM,gBAAgB,KAAME,GAExBA,EAAc,CAAC,IAAM3B,GAA6C2B,EAAc,CAAC,IAAM,KAAgB,KAE1G,GAAK,EAEV,CASO,SAASV,EAAqBQ,EAAgC,CACnE,MAAMG,EAAwBH,EAAM,QAAQ,QAASA,GAAUR,EAAqBQ,CAAK,CAAC,GAAK,CAAC,EAEhG,OAAIA,EAAM,SACD,CACL,CACE,SAAUA,EAAM,SAChB,MAAO,CACL,KAAMD,EAAsBC,CAAK,EAAI,iBAAmB,QAC1D,CACF,EACA,GAAGG,CACL,EAGKA,CACT,CAEA,SAASP,EAAoBT,EAA0BrI,EAAwC,CAC7F,MAAMsJ,EAAQjB,EAAU,KAAMkB,GAAaA,EAAS,OAASvJ,EAAS,IAAI,EAE1E,MAAO,CACL,KAAMsJ,GAAO,SAAQ,cAAWtJ,EAAS,IAAI,EAC7C,YAAasJ,GAAO,WACtB,CACF,C,mLC9LO,SAAS1D,EAAkB,CAAE,OAAA4D,EAAQ,eAAAC,EAAgB,iBAAA/D,EAAkB,QAAAJ,CAAQ,EAA2B,CAC/G,MAAM7H,KAAS,MAAWiM,CAAuB,EAC3CC,EAAW,KAA0BH,CAAM,EAE3CI,KAAa,eAAY,IAAM,CACnC,MAAMC,EAAO,IAAI,KAAK,CAACJ,CAAc,EAAG,CACtC,KAAM,eAAeD,CAAM,gBAC7B,CAAC,EACD,IAAOK,EAAM,GAAGnE,CAAgB,IAAI8D,CAAM,EAAE,CAC9C,EAAG,CAACC,EAAgB/D,EAAkB8D,CAAM,CAAC,EAEvCM,KAA0B,WAAQ,IAC/BH,EAAS,UAAYA,EAAS,UAAUF,CAAc,EAAIA,EAChE,CAACE,EAAUF,CAAc,CAAC,EAE7B,SAEE,QAAC,OAAI,UAAWhM,EAAO,UACrB,oBAACsM,EAAA,CAA8B,eAAgBJ,CAAA,CAAU,KACzD,OAAC,OAAI,UAAWlM,EAAO,QACrB,mBAAC,KAAS,CAAC,aAAY,GACpB,UAAC,CAAE,OAAAuM,CAAO,OACT,OAAC,KACC,MAAM,OACN,OAAAA,EACA,SAAUR,EACV,MAAOM,EACP,cAAe,CACb,QAAS,CACP,QAAS,EACX,EACA,qBAAsB,GACtB,YAAa,KACb,SAAU,EACZ,EACF,EAEJ,EACF,KACA,QAAC,OAAI,UAAWrM,EAAO,QACrB,oBAAC,KAAM,CAAC,QAAQ,YAAY,QAAS6H,EAAS,kBAE9C,KACA,OAAC,IAAe,CAAC,KAAK,OAAO,QAAS,IAAMmE,EAAgB,qBAE5D,KACA,OAAC,KAAM,CAAC,KAAK,eAAe,QAASG,EAAY,oBAEjD,GACF,GACF,CAEJ,CAEA,MAAMF,EAA2BrK,IAA0B,CACzD,aAAW,OAAI,CACb,QAAS,OACT,cAAe,SACf,OAAQ,OACR,IAAKA,EAAM,QAAQ,CAAC,CACtB,CAAC,EACD,WAAS,OAAI,CACX,KAAM,UACR,CAAC,EACD,WAAS,OAAI,CACX,KAAM,EACN,eAAgB,WAChB,QAAS,OACT,IAAKA,EAAM,QAAQ,CAAC,CACtB,CAAC,CACH,GAEA,SAAS0K,EAA8B,CAAE,eAAAE,CAAe,EAAgD,CACtG,KAAM,CAAE,KAAA7M,EAAM,KAAAqD,CAAK,EAAIwJ,EAEjBC,EAA2F,CAC/F,KAAM,CACJ,MAAO,2BACP,aACE,oBACG,UAAA9M,EAAK,+CAA6C,OACnD,OAAC,KACC,KAAK,0GACL,SAAQ,GACT,kCAED,GACF,CAEJ,EACA,IAAK,CACH,MAAO,0BACP,aACE,oBACG,UAAAA,EAAK,8CAA4C,OAClD,OAAC,KACC,KAAK,8GACL,SAAQ,GACT,kCAED,GACF,CAEJ,EACA,UAAW,CACT,MAAO,gCACP,aACE,oBACG,UAAAA,EAAK,oDAAkD,OACxD,OAAC,KACC,KAAK,+GACL,SAAQ,GACT,kCAED,GACF,CAEJ,CACF,EAEM,CAAE,MAAAqC,EAAO,UAAA0K,CAAU,EAAID,EAAgBzJ,CAAI,EAEjD,SACE,OAAC,IAAK,CAAC,MAAAhB,EAAc,SAAS,OAAO,cAAe,EAAG,WAAY,EAChE,SAAA0K,CAAA,CACH,CAEJ,C,wEClIO,SAASnE,EAAoB,CAClC,UAAAF,EACA,YAAAsE,EACA,SAAA1N,EACA,QAAA4I,EACA,gBAAA+E,EACA,MAAA5K,EAAQ,QACV,EAA6B,CAC3B,MAAM6K,EAAmB,OAAO,OAAOD,CAAe,EAAE,IAAKV,IAAc,CACzE,MAAOA,EAAS,KAChB,MAAOA,EAAS,YAClB,EAAE,EACF,SACE,OAAC,KACC,MAAAlK,EACA,SAAS,4EACT,QACE,OAAC,KAAiB,CAAgB,KAAM6K,EAAkB,aAAcF,EAAa,UAAAtE,CAAA,CAAsB,EAE7G,QAAAR,EACA,KAAK,KAEJ,SAAA5I,CAAA,CACH,CAEJ,C,oCCjCO,MAAM6N,EAA6C,CACxD,KAAM,OACN,aAAc,OACd,KAAM,OACN,UAAYC,GAAgB,CAC1B,GAAI,CACF,OAAO,KAAK,UAAU,KAAK,MAAMA,CAAG,EAAG,KAAM,CAAC,CAChD,MAAY,CACV,OAAOA,CACT,CACF,CACF,EAEaC,EAA6C,CACxD,KAAM,OACN,aAAc,OACd,KAAM,MACR,EAEaC,EAA2C,CACtD,KAAM,kBACN,aAAc,MACd,KAAM,WACR,EAEaC,EAA4B,CACvC,CAACJ,EAAmB,YAAY,EAAGA,EACnC,CAACE,EAAmB,YAAY,EAAGA,EACnC,CAACC,EAAkB,YAAY,EAAGA,CACpC,EAEaE,EAAoC,CAACL,EAAoBE,CAAkB,C,kDChCjF,MAAMI,EAAsE,CACjF,CAAC,IAAgB,MAAM,EAAG,sCAE1B,CAAC,IAAgB,QAAQ,EAAG,GAC5B,CAAC,IAAgB,eAAe,EAAG,GACnC,CAAC,IAAgB,MAAM,EAAG,GAC1B,CAAC,IAAgB,GAAG,EAAG,EACzB,C,iOCOA,MAAMC,EAAiB,CAAC,CAAE,MAAO,OAAQ,MAAO,MAAO,CAAC,EAE3CC,EAAgB,CAAC,CAAE,QAAAzF,CAAQ,IAAa,CACnD,KAAM,CAACQ,EAAWC,CAAY,KAAI,YAAS,MAAM,EAC3C,CAAE,SAAAiF,CAAS,KAAI,MAA+B,EAC9CvN,KAAS,MAAWwN,CAAY,EAEhCC,EAAWC,GAA+B,CAG9C,UAAW7K,KAAO6K,EAEhBH,EAAS1K,EAAK6K,EAAW7K,CAAG,CAAC,EAE/BgF,EAAQ,CACV,EAEA,SACE,OAAC,KACC,MAAM,qBACN,YACE,OAAC,OAAI,UAAW7H,EAAO,SACrB,mBAAC2N,EAAA,CAAkB,KAAMN,EAAgB,aAAA/E,EAA4B,UAAAD,CAAA,CAAsB,EAC7F,EAEF,QAAAR,EAEC,SAAAQ,IAAc,WAAU,OAACuF,EAAA,CAAiB,SAAUH,CAAA,CAAS,EAChE,CAEJ,EAQO,SAASE,EAAoC,CAAE,KAAAE,EAAM,UAAAxF,EAAW,aAAAC,CAAa,EAA8B,CAChH,SACE,OAAC,IAAO,CACL,SAAAuF,EAAK,IAAI,CAACC,EAAKtL,OAEZ,OAAC,KAEC,MAAOsL,EAAI,MACX,MAAOA,EAAI,MACX,YAAa,IAAMxF,EAAawF,EAAI,KAAK,EACzC,OAAQzF,IAAcyF,EAAI,OAJrB,GAAGA,EAAI,KAAK,IAAItL,CAAK,EAK5B,CAEH,EACH,CAEJ,CAMA,MAAMoL,EAAmB,CAAC,CAAE,SAAAG,CAAS,IAAoB,CACvD,MAAM/N,KAAS,MAAWgO,CAAY,EAChC,CAAE,UAAAC,CAAU,KAAI,MAA+B,EAE/CC,KAAa,MAAyBD,EAAU,CAAC,EACjD,CAACE,EAAiBC,CAAkB,KAAI,eAAS,MAAKF,CAAU,CAAC,EAEjET,EAAU,IAAM,CACpB,MAAMY,KAAY,MAAKF,CAAe,EAChCG,EAAoBL,EAAU,EAE9BM,EAAiBC,EAA0BH,CAAS,EAC1DN,EAAS,CAAE,GAAGO,EAAmB,GAAGC,CAAe,CAAC,CACtD,EAEA,SACE,oBACE,qBAAC,OAAI,UAAWvO,EAAO,YACrB,oBAAC,KAAM,CAAC,KAAK,SAAS,QAASyN,EAAS,iBAExC,KACA,OAAC,IAAO,CAAC,WAAS,OAACgB,EAAA,EAAgB,EAAI,MAAM,OAAO,UAAU,aAAa,YAAa,GACtF,mBAAC,IAAI,CAAC,KAAK,uBAAuB,KAAK,IAAK,GAC9C,GACF,KAEA,OAAC,OAAI,UAAWzO,EAAO,QACrB,mBAAC,KAAS,CAAC,aAAY,GACpB,UAAC,CAAE,OAAAuM,CAAO,OACT,OAAC,KACC,MAAM,OACN,OAAAA,EACA,SAAS,OACT,MAAO4B,EACP,OAAQC,EACR,cAAe,CACb,QAAS,CACP,QAAS,EACX,CACF,EACF,EAEJ,EACF,GACF,CAEJ,EAEA,SAASK,GAAkB,CACzB,SACE,QAAC,OAAI,sFACmE,OAAC,OAAG,EAAE,+DACf,OAC7D,OAAC,KACC,KAAK,6EACL,OAAO,SACP,IAAI,aACL,uCAED,GACF,CAEJ,CAEA,SAASD,EAA0BH,EAAkD,CACnF,SAAI,MAAoBA,CAAS,KACxB,MAA4BA,CAAS,KACnC,MAAqBA,CAAS,KAChC,MAA6BA,CAAS,EAGxC,CAAC,CACV,CAEO,MAAML,EAAgBpM,IAA0B,CACrD,WAAS,OAAI,CACX,SAAU,EACV,OAAQ,OACR,cAAe,OACf,aAAcA,EAAM,QAAQ,CAAC,CAC/B,CAAC,EACD,eAAa,OAAI,CACf,QAAS,OACT,cAAe,MACf,eAAgB,gBAChB,WAAY,SACZ,SAAU,EACV,aAAcA,EAAM,QAAQ,CAAC,CAC/B,CAAC,CACH,GAEa4L,EAAe,KAAO,CACjC,YAAU,OAAI,CACZ,QAAS,OACT,WAAY,SACZ,eAAgB,eAClB,CAAC,CACH,E,mCCjLO,MAAMkB,EAA8C,CACzD,QAAS,UACT,MAAO,WACP,WAAY,sBACZ,QAAS,UACT,KAAM,OACN,UAAW,YACX,MAAO,QACP,MAAO,YACP,SAAU,eACV,QAAS,OACT,IAAK,QACP,C,0DCVA,MAAMC,KAA6C,KACjD,aACA,aACA,gIACA,CACE,QAAS,UACT,eAAgB,IACd,KAAO,WAAY,WAAY,EAAE,KACjC,KAAO,WAAY,WAAY,EAAE,KACjC,KAAO,gBAAiB,gBAAiB,EAAE,CAC7C,CACF,CACF,EAEMC,KAA6C,KAAO,aAAc,aAAc,+BAAgC,CACpH,QAAS,UACT,eAAgB,IACd,KAAO,UAAW,UAAW,yDAAyD,KACtF,KAAO,YAAa,YAAa,2DAA2D,KAC5F,KAAO,WAAY,WAAY,wDAAwD,KACvF,KAAO,cAAe,cAAe,0DAA0D,KAC/F,KAAO,uBAAwB,cAAe,gDAAiD,CAC7F,QAAS,UACX,CAAC,CACH,CACF,CAAC,EAEKC,KAAgD,KAAO,SAAU,SAAU,kCAAmC,CAClH,QAAS,UACT,eAAgB,IACd,KAAO,YAAa,YAAa,uBAAwB,CAAE,SAAU,EAAK,CAAC,KAC3E,KAAO,gBAAiB,gBAAiB,2BAA4B,CAAE,SAAU,EAAK,CAAC,KAOvF,KAAO,YAAa,YAAa,gCAAiC,CAAE,SAAU,EAAK,CAAC,KACpF,KAAO,SAAU,SAAU,iCAAkC,CAC3D,QAAS,cACX,CAAC,KACD,KAAO,kBAAmB,wBAAyB,GAAI,CAAE,QAAS,eAAgB,CAAC,CACrF,CACF,CAAC,EAEKC,KAA8C,KAClD,cACA,cACA,iGACA,CACE,QAAS,UACT,eAAgB,IACd,KAAO,eAAgB,eAAgB,mEAAmE,KAC1G,KACE,oBACA,oBACA,sFACF,KACA,KAAO,YAAa,YAAa,qBAAqB,EACtDH,EACAC,EACAC,CACF,CACF,CACF,EAEaE,EAA4D,CACvE,CACE,KAAM,QACN,YAAa,8BACb,KAAM,QACN,KAAM,GACN,QAAS,iBACT,QAAS,IACP,KACE,KACA,KACA,qGACA,CAAE,SAAU,EAAK,CACnB,KACA,KAAO,OAAQ,OAAQ,qBAAqB,KAC5C,KAAO,YAAa,YAAa,8CAA8C,KAC/E,KAAO,QAAS,QAAS,8CAA8C,KACvE,KAAO,gBAAiB,WAAY,iCAAiC,KACrE,KAAO,gBAAiB,WAAY,iCAAiC,KACrE,KAAO,cAAe,SAAU,iCAAiC,KACjE,KAAO,gBAAiB,WAAY,iCAAiC,KACrE,KAAO,cAAe,cAAe,2BAA4B,CAAE,QAAS,UAAW,CAAC,KACxF,KAAO,OAAQ,kBAAmB,2CAA4C,CAC5E,YAAa,wCACb,QAAS,UACX,CAAC,KACD,KAAO,OAAQ,kBAAmB,2CAA4C,CAAE,QAAS,UAAW,CAAC,KACrG,KACE,UACA,UACA,yHACA,CAAE,QAAS,eAAgB,CAC7B,EACAH,CACF,CACF,EACA,CACE,KAAM,YACN,YAAa,kCACb,KAAM,YACN,KAAM,GACN,QAAS,qBACT,QAAS,IACP,KACE,cACA,cACA,uFACF,KACA,KACE,cACA,cACA,qFACF,KACA,KAAO,MAAO,MAAO,iCAAiC,KACtD,KAAO,SAAU,SAAU,iDAAkD,CAC3E,YAAa,6CACf,CAAC,KACD,KAAO,aAAc,aAAc,gDAAiD,CAClF,YAAa,gDACf,CAAC,KACD,KAAO,cAAe,cAAe,iCAAkC,CACrE,YAAa,iDACf,CAAC,KACD,KAAO,WAAY,WAAY,4BAA6B,CAAE,YAAa,OAAQ,CAAC,KACpF,KACE,UACA,UACA,qFACA,CACE,QAAS,eACX,CACF,KACA,KAAO,SAAU,SAAU,oCAAqC,CAC9D,QAAS,gBACT,eAAgB,IACd,KAAO,OAAQ,MAAO,GAAI,CAAE,SAAU,EAAK,CAAC,KAC5C,KAAO,SAAU,SAAU,GAAI,CAAE,SAAU,EAAK,CAAC,KACjD,KAAO,MAAO,MAAO,GAAI,CAAE,SAAU,EAAK,CAAC,CAC7C,CACF,CAAC,KACD,KAAO,QAAS,QAAS,mCAAoC,CAC3D,QAAS,gBACT,eAAgB,IAAC,KAAO,OAAQ,MAAO,GAAI,CAAE,SAAU,EAAK,CAAC,KAAG,KAAO,OAAQ,OAAQ,GAAI,CAAE,SAAU,EAAK,CAAC,CAAC,CAChH,CAAC,EACDE,CACF,CACF,EACA,CACE,KAAM,WACN,YAAa,iCACb,KAAM,WACN,KAAM,GACN,QAAS,oBACT,QAAS,IACP,KAAO,WAAY,WAAY,sCAAkC,CAAE,SAAU,EAAK,CAAC,KACnF,KAAO,QAAS,QAAS,6EAAyE,CAChG,SAAU,EACZ,CAAC,KACD,KAAO,QAAS,QAAS,sBAAuB,CAC9C,YAAa,2CACf,CAAC,KACD,KAAO,UAAW,UAAW,wBAAyB,CACpD,YAAa,6CACf,CAAC,KACD,KAAO,MAAO,MAAO,mDAAoD,CACvE,YAAa,yCACf,CAAC,KACD,KAAO,WAAY,WAAY,kDAAmD,CAChF,YAAa,mDACf,CAAC,KACD,KACE,QACA,QACA,2GACA,CACE,YAAa,IACf,CACF,KACA,KACE,SACA,SACA,6GACA,CACE,YAAa,IACf,CACF,KACA,KACE,MACA,MACA,yGACA,CAEE,eAAgB,sBAChB,QAAS,OACX,CACF,EACAA,CACF,CACF,EACA,CACE,KAAM,QACN,YAAa,8BACb,KAAM,QACN,KAAM,GACN,QAAS,iBACT,QAAS,IACP,KAAO,UAAW,cAAe,wBAAwB,KACzD,KAAO,UAAW,UAAW,kDAAmD,CAAE,SAAU,EAAK,CAAC,KAClG,KAAO,aAAc,aAAc,EAAE,KACrC,KAAO,WAAY,WAAY,EAAE,KACjC,KAAO,aAAc,aAAc,GAAI,CAAE,QAAS,UAAW,CAAC,KAC9D,KAAO,WAAY,WAAY,GAAI,CAAE,YAAa,2CAA4C,CAAC,KAC/F,KAAO,cAAe,cAAe,GAAI,CAAE,YAAa,6CAA8C,CAAC,KACvG,KAAO,QAAS,QAAS,GAAI,CAAE,YAAa,2DAA4D,CAAC,KACzG,KAAO,WAAY,WAAY,GAAI,CAAE,YAAa,2CAA4C,CAAC,KAC/F,KAAO,SAAU,SAAU,GAAI,CAAE,YAAa,yCAA0C,CAAC,KACzF,KAAO,YAAa,gBAAiB,qEAAsE,CACzG,QAAS,cACX,CAAC,KACD,KAAO,UAAW,WAAY,GAAI,CAAE,YAAa,0CAA2C,CAAC,KAC7F,KAAO,eAAgB,eAAgB,GAAI,CAAE,QAAS,UAAW,CAAC,KAClE,KAAO,OAAQ,eAAgB,GAAI,CAAE,QAAS,WAAY,YAAa,uCAAwC,CAAC,KAChH,KAAO,QAAS,QAAS,GAAI,CAAE,YAAa,wCAAyC,CAAC,KACtF,KAAO,aAAc,aAAc,GAAI,CAAE,YAAa,4CAA6C,CAAC,KACpG,KAAO,YAAa,YAAa,EAAE,KACnC,KAAO,YAAa,gBAAiB,EAAE,KACvC,KAAO,UAAW,UAAW,GAAI,CAC/B,QAAS,gBACT,eAAgB,IACd,KAAO,OAAQ,OAAQ,GAAI,CAAE,SAAU,EAAK,CAAC,KAC7C,KAAO,OAAQ,OAAQ,GAAI,CAAE,SAAU,EAAK,CAAC,KAC7C,KAAO,MAAO,MAAO,6CAA6C,KAClE,KAAO,OAAQ,OAAQ,EAAE,KACzB,KAAO,QAAS,QAAS,EAAE,KAC3B,KAAO,UAAW,UAAW,GAAI,CAC/B,QAAS,UACT,eAAgB,IACd,KAAO,OAAQ,OAAQ,GAAI,CAAE,SAAU,EAAK,CAAC,KAC7C,KAAO,eAAgB,eAAgB,EAAE,KACzC,KAAO,UAAW,UAAW,EAAE,KAC/B,KAAO,QAAS,QAAS,EAAE,CAC7B,CACF,CAAC,KACD,KAAO,QAAS,QAAS,EAAE,CAC7B,CACF,CAAC,KACD,KAAO,SAAU,SAAU,GAAI,CAC7B,QAAS,gBACT,eAAgB,IACd,KAAO,QAAS,QAAS,GAAI,CAAE,SAAU,EAAK,CAAC,KAC/C,KAAO,QAAS,QAAS,GAAI,CAAE,SAAU,EAAK,CAAC,KAC/C,KAAO,QAAS,QAAS,GAAI,CAAE,QAAS,UAAW,CAAC,CACtD,CACF,CAAC,EACDA,CACF,CACF,EACA,CACE,KAAM,WACN,YAAa,iCACb,KAAM,WACN,KAAM,GACN,QAAS,oBACT,QAAS,IACP,KAAO,UAAW,UAAW,sDAAsD,KACnF,KAAO,UAAW,UAAW,4CAA4C,KACzE,KAAO,UAAW,UAAW,uCAAuC,KACpE,KAAO,cAAe,cAAe,iCAAkC,CACrE,YAAa,iDACf,CAAC,KACD,KAAO,SAAU,SAAU,gDAAiD,CAC1E,YAAa,4CACf,CAAC,KACD,KACE,UACA,UACA,qFACA,CACE,QAAS,eACX,CACF,KACA,KAAO,OAAQ,OAAQ,6DAA6D,KACpF,KAAO,OAAQ,OAAQ,wBAAwB,KAC/C,KAAO,WAAY,WAAY,sEAAsE,KACrG,KAAO,aAAc,aAAc,oDAAqD,CACtF,QAAS,gBACT,eAAgB,IACd,KAAO,OAAQ,OAAQ,6CAA8C,CAAE,SAAU,EAAK,CAAC,KACvF,KAAO,KAAM,KAAM,gDAAgD,KACnE,KAAO,OAAQ,OAAQ,gDAAgD,KACvE,KAAO,WAAY,WAAY,gDAAgD,CACjF,CACF,CAAC,EACDA,CACF,CACF,EACA,CACE,KAAM,YACN,YAAa,kCACb,KAAM,YACN,KAAM,GACN,QAAS,qBACT,QAAS,IACP,KAAO,UAAW,UAAW,uDAAuD,KACpF,KAAO,UAAW,UAAW,wBAAwB,KACrD,KAAO,cAAe,cAAe,yCAA0C,CAAE,SAAU,EAAK,CAAC,KACjG,KAAO,eAAgB,eAAgB,gEAAgE,KACvG,KAAO,sBAAuB,sBAAuB,2CAA4C,CAC/F,YAAa,0DACf,CAAC,KACD,KAAO,gBAAiB,gBAAiB,oDAAqD,CAC5F,YAAa,oDACf,CAAC,KACD,KAAO,kBAAmB,kBAAmB,iDAAkD,CAC7F,YAAa,sDACf,CAAC,EACDA,CACF,CACF,EACA,CACE,KAAM,UACN,YAAa,kCACb,KAAM,UACN,KAAM,GACN,QAAS,mBACT,QAAS,IACP,KAAO,MAAO,MAAO,8CAA+C,CAAE,SAAU,EAAK,CAAC,KACtF,KACE,aACA,aACA,wLACA,CACE,YAAa,IACb,UAAW,SACX,eAAgB,cAChB,WAAaxF,GAAU,CACrB,MAAM0F,EAAU,OAAO1F,CAAK,EAC5B,OAAO,OAAO,SAAS0F,CAAO,EAAIA,EAAU,CAC9C,CACF,CACF,EACAF,CACF,CACF,EACA,CACE,KAAM,UACN,YAAa,iCACb,KAAM,UACN,KAAM,GACN,QAAS,mBACT,QAAS,IACP,KAAO,QAAS,QAAS,iCAAkC,CACzD,YAAa,0CACf,CAAC,KACD,KACE,UACA,kBACA,4EACA,CAAE,YAAa,4CAA6C,CAC9D,KACA,KAAO,cAAe,cAAe,GAAI,CAAE,YAAa,sBAAuB,SAAU,EAAK,CAAC,EAC/FA,CACF,CACF,EACA,CACE,KAAM,oBACN,YAAa,2CACb,KAAM,QACN,KAAM,GACN,QAAS,6BACT,QAAS,IACP,KAAO,UAAW,UAAW,0BAA2B,CACtD,YAAa,mCACf,CAAC,KACD,KAAO,UAAW,UAAW,wDAAyD,CACpF,SAAU,EACZ,CAAC,KACD,KAAO,UAAW,UAAW,mBAAoB,CAC/C,YAAa,yCACf,CAAC,EACD,CACE,GAAGA,EACH,SAAU,EACZ,CACF,CACF,EACA,CACE,KAAM,WACN,YAAa,kCACb,KAAM,WACN,KAAM,GACN,QAAS,oBACT,QAAS,IACP,KAAO,UAAW,UAAW,uBAAwB,CACnD,YAAa,0BACf,CAAC,KACD,KAAO,YAAa,YAAa,qBAAsB,CACrD,SAAU,EACZ,CAAC,KACD,KAAO,UAAW,UAAW,4CAA6C,CACxE,SAAU,GACV,WAAaxF,GAAW,OAAOA,GAAU,SAAW,SAASA,EAAO,EAAE,EAAIA,CAC5E,CAAC,KACD,KAAO,UAAW,UAAW,mBAAoB,CAC/C,YAAa,yCACf,CAAC,KACD,KAAO,wBAAyB,wBAAyB,iCAAkC,CACzF,QAAS,UACX,CAAC,KACD,KAAO,aAAc,aAAc,kCAAmC,CACpE,QAAS,SAGT,aAAc,CAAE,MAAO,OAAQ,MAAO,EAAG,EACzC,cAAe,CAGb,CAAE,MAAO,OAAQ,MAAO,EAAG,EAC3B,CAAE,MAAO,aAAc,MAAO,YAAa,EAC3C,CAAE,MAAO,WAAY,MAAO,UAAW,EACvC,CAAE,MAAO,OAAQ,MAAO,MAAO,CACjC,CACF,CAAC,EACDwF,CACF,CACF,EACA,CACE,KAAM,aACN,YAAa,oCACb,KAAM,MACN,KAAM,GACN,QAAS,sBACT,QAAS,IACP,KAAO,UAAW,UAAW,wBAAwB,KACrD,KACE,QACA,uBACA,6EACA,CACE,QAAS,UACT,eAAgB,IACd,KACE,SACA,SACA,iFACF,KACA,KACE,aACA,aACA,uFACF,KACA,KACE,aACA,aACA,0FACF,KACA,KAAO,UAAW,UAAW,wCAAwC,KACrE,KAAO,WAAY,WAAY,oDAAoD,CACrF,CACF,CACF,KACA,KACE,YACA,gBACA,sSACF,KACA,KACE,eACA,eACA,yJACF,KACA,KACE,aACA,aACA,iLACF,KAEA,KAAO,UAAW,UAAW,6CAA8C,CACzE,YAAa,uCACf,CAAC,KACD,KAAO,UAAW,UAAW,8CAA+C,CAC1E,YAAa,uCACf,CAAC,KACD,KAAO,aAAc,aAAc,yBAA0B,CAC3D,QAAS,eACX,CAAC,EACDA,CACF,CACF,EACA,CACE,KAAM,SACN,YAAa,gCACb,KAAM,SACN,KAAM,GACN,QAAS,kBACT,QAAS,IACP,KAAO,UAAW,UAAW,oBAAoB,KACjD,KAAO,aAAc,aAAc,mDAAmD,KACtF,KAAO,UAAW,UAAW,gCAAgC,KAC7D,KAAO,UAAW,UAAW,gDAAiD,CAC5E,YAAa,2CACf,CAAC,KACD,KAAO,eAAgB,eAAgB,2BAA4B,CACjE,QAAS,SACT,aAAc,CAAE,MAAO,OAAQ,MAAO,MAAO,EAC7C,cAAe,CACb,CAAE,MAAO,OAAQ,MAAO,MAAO,EAC/B,CAAE,MAAO,WAAY,MAAO,UAAW,CACzC,CACF,CAAC,KACD,KAAO,WAAY,WAAY,GAAI,CACjC,YAAa,4CACf,CAAC,KACD,KAAO,UAAW,UAAW,GAAI,CAC/B,YAAa,2CACf,CAAC,KACD,KAAO,WAAY,WAAY,GAAI,CACjC,YAAa,4CACf,CAAC,KACD,KAAO,SAAU,SAAU,GAAI,CAC7B,YAAa,0CACf,CAAC,CACH,CACF,EACA,CACE,KAAM,kBACN,YAAa,yCACb,KAAM,UACN,KAAM,GACN,QAAS,2BACT,QAAS,IACP,KAAO,cAAe,cAAe,2BAA2B,KAChE,KAAO,QAAS,QAAS,0BAA2B,CAClD,YAAa,wCACf,CAAC,KACD,KAAO,OAAQ,OAAQ,yBAA0B,CAC/C,YAAa,uCACf,CAAC,CACH,CACF,CACF,EAEaG,EAAmD,IAE9D,KAAO,YAAa,YAAa,qCAAqC,KACtE,KACE,iBACA,iBACA,mMACF,KACA,KAAO,aAAc,aAAc,uDAAwD,CACzF,YAAa,WACf,CAAC,KACD,KACE,qBACA,qBACA,4GACF,KACA,KAAO,qBAAsB,qBAAsB,kCAAkC,KACrF,KAAO,qBAAsB,qBAAsB,wBAAwB,KAC3E,KAAO,mBAAoB,mBAAoB,2BAA2B,KAC1E,KACE,mBACA,mBACA,oHACA,CACE,QAAS,UACX,CACF,KAGA,KAAO,gBAAiB,gBAAiB,EAAE,KAC3C,KAAO,oBAAqB,oBAAqB,EAAE,KACnD,KAAO,oBAAqB,oBAAqB,GAAI,CACnD,YAAa,kEACf,CAAC,KACD,KAAO,gBAAiB,gBAAiB,yCAAyC,KAClF,KAAO,mBAAoB,mBAAoB,EAAE,KACjD,KAAO,mBAAoB,mBAAoB,GAAI,CAAE,YAAa,2BAA4B,CAAC,KAC/F,KAAO,iBAAkB,iBAAkB,GAAI,CAAE,YAAa,sCAAuC,CAAC,KACtG,KAAO,oBAAqB,oBAAqB,EAAE,KACnD,KAAO,qBAAsB,qBAAsB,EAAE,KACrD,KAAO,gBAAiB,4BAA6B,EAAE,KACvD,KAAO,mBAAoB,uBAAwB,EAAE,EACrDH,KACA,KACE,kBACA,kBACA,sQACA,CACE,YAAa,IACf,CACF,CACF,C,qECtlBO,MAAMI,EAAkB,IAAM,IAAO,UAQ/BC,EAAmBpI,GACD,IAAO,eAAe,mBACpBA,IAAiB,I,mGCI3C,MAAMqI,EAAmB,CAAC,WAAY,WAAY,aAAc,iBAAkB,iBAAiB,EAYnG,SAASC,EAAYC,EAA2BC,EAAiC,CACtF,MAAMC,EAAUC,EAAeH,EAAUC,CAAM,EAGzCG,EAA2B,IAAI,IAAIH,EAAO,IAAKI,GAAU,CAACA,EAAO,CAAE,MAAO,GAAO,QAAS,IAAK,CAAC,CAAC,CAAC,EAGxG,OAAAL,EAAS,QAASM,GAAY,CAC5B,MAAMC,EAAgBN,EAAO,KAAMI,GAAUG,EAAaF,EAASD,CAAK,CAAC,EAGrEE,GACFH,EAAY,IAAIG,EAAe,CAC7B,MAAO,GACP,QAAAD,CACF,CAAC,CAEL,CAAC,EAEM,CAAE,QAAAJ,EAAS,YAAAE,CAAY,CAChC,CAGO,SAASD,EAAeH,EAA2BC,EAA0B,CAClF,UAAWK,KAAWN,EACpB,GAAI,CAACS,EAAkBH,EAASL,CAAM,EACpC,MAAO,GAGX,MAAO,EACT,CAiBA,SAASS,EAAoCvE,EAAU8D,EAA6C,CAClG,IAAIU,EAA2C,CAAC,EAGhD,MAAMC,EAAcb,EAAY5D,EAAM,iBAAmB,CAAC,EAAG8D,CAAM,EACnE,GAAI,CAACW,EAAY,QACf,MAAO,CAAC,EAIV,GAAIzE,EAAM,OACR,UAAW0E,KAAS1E,EAAM,OAAQ,CAChC,MAAM2E,EAAmBJ,EAAmBG,EAAOZ,CAAM,EAKzD,GAFAU,EAAeA,EAAa,OAAOG,CAAgB,EAE/CA,EAAiB,QAAU,CAACD,EAAM,SACpC,KAEJ,CAIF,OAAIF,EAAa,SAAW,GAC1BA,EAAa,KAAK,CAAE,MAAAxE,EAAO,YAAayE,EAAY,WAAY,CAAC,EAG5DD,CACT,CAGO,SAASI,EAAeC,EAAqC,CAClE,SAASD,EAAe5E,EAAoB,CAC1CA,EAAM,mBAAkB,MAAkBA,CAAK,EAC/C,OAAOA,EAAM,SACb,OAAOA,EAAM,MACb,OAAOA,EAAM,SACbA,EAAM,QAAQ,QAAQ4E,CAAc,CACtC,CAEA,MAAME,EAAsB,gBAAgBD,CAAS,EACrDD,OAAAA,EAAeE,CAAmB,EAE3BA,CACT,CAEO,SAASC,EAAqB/E,EAAiC,CACpE,SAASgF,EAAahF,EAAoB,CACxCA,EAAM,gBAAkBA,EAAM,iBAAiB,IAAI,CAAC,CAAC9L,EAAM+Q,EAAUpH,CAAK,IACjE,CAAC,oBAAoB3J,CAAI,EAAG+Q,EAAU,oBAAoBpH,CAAK,CAAC,CACxE,EACDmC,EAAM,QAAQ,QAAQgF,CAAY,CACpC,CAEA,MAAME,EAAqB,gBAAgBlF,CAAK,EAChD,OAAAgF,EAAaE,CAAkB,EAExBA,CACT,CAMA,SAASC,EACPC,EACApF,EACAqF,EACqB,CACrB,MAAMC,EAAsC,CAAC,EAE7C,OAAOD,EAAY,OAAO,CAACvH,EAAKyH,IAAU,CAExC,MAAMC,EAAiBD,EAAM,OAAO,OAAQE,GAAU,CACpD,MAAM3B,EAAS,OAAO,QAAQ2B,EAAM,MAAM,EAC1C,OAAOlB,EAAmBa,EAAWtB,CAAM,EAAE,KAAM4B,GAAkBA,EAAc,QAAU1F,CAAK,CACpG,CAAC,EAGD,OAAIwF,EAAe,QACjB1H,EAAI,KAAK,CACP,GAAGyH,EACH,OAAQC,CACV,CAAC,EAGI1H,CACT,EAAGwH,CAAc,CACnB,CAGA,SAASK,EACPC,EACAC,EACAC,EACuB,CAEvB,MAAMC,EAA+C,CACnD,MAF6C,QAAKH,EAAajC,CAAgB,EAG/E,GAAGmC,CACL,EA8BA,SA5BkB,UAChBC,EACA,CAACC,EAA4CC,EAAaC,IAAa,CACrE,MAAMC,EAAiBF,GAAe,KAKhCG,EAHoB,CAAC,OAAW,GAAI,IAAI,EAEF,KAAMvI,GAAUgI,EAAWK,CAAQ,IAAMrI,CAAK,GAC5CsI,EAExCE,EACJH,IAAa,YACbC,MACA,WAAQN,EAAWK,CAAQ,CAAC,GAC5BL,EAAWK,CAAQ,GAAG,SAAW,EAInC,OAF0BE,GAAoBC,KAI5CL,EAAoBE,CAAQ,EAAID,GAG3BD,CACT,EACA,CAAC,CACH,CAGF,CAKO,SAASM,EAAsCC,EAAc,CAClE,MAAO,CACL,GAAGA,EACH,OAAQA,EAAO,QAAQ,IAAK7B,GAAU,CACpC,MAAMsB,EAAsBL,EAAuBY,EAAQ7B,CAAK,EAEhE,OAAO4B,EAAqB,CAC1B,GAAG5B,EACH,GAAGsB,CACL,CAAC,CACH,CAAC,CACH,CACF,CAGA,MAAMQ,EAAgE,CACpE,CAAC,KAAgB,KAAK,EAAG,CAACC,EAAIC,IAAOD,IAAOC,EAC5C,CAAC,KAAgB,QAAQ,EAAG,CAACD,EAAIC,IAAOD,IAAOC,EAI/C,CAAC,KAAgB,KAAK,EAAG,CAACD,EAAIC,IACjB,IAAI,OAAO,OAAOA,CAAE,IAAI,EACzB,KAAKD,CAAE,EAEnB,CAAC,KAAgB,QAAQ,EAAG,CAACA,EAAIC,IAExB,CADI,IAAI,OAAO,OAAOA,CAAE,IAAI,EACxB,KAAKD,CAAE,CAEtB,EAEA,SAASnC,EAAkBH,EAAwBL,EAA0B,CAC3E,KAAM,CAAC6C,EAAY1B,EAAU2B,CAAY,EAAIzC,EAE7C,IAAI0C,EAAa,GACjB,MAAMC,EAAkB,OAAO,YAAYhD,CAAM,EAAE6C,CAAU,EACzDG,IACFD,EAAaC,GAGf,MAAMC,EAAgBP,EAAkBvB,CAAQ,EAChD,GAAI,CAAC8B,EACH,MAAM,IAAI,MAAM,qBAAqB9B,CAAQ,EAAE,EAGjD,OAAO8B,EAAcF,EAAYD,CAAY,CAC/C,CAKA,SAASvC,EAAaF,EAAwBD,EAAuB,CACnE,KAAM,CAAC8C,EAAUH,CAAU,EAAI3C,EACzB,CAACyC,EAAY1B,EAAU2B,CAAY,EAAIzC,EAE7C,GAAI6C,IAAaL,EACf,MAAO,GAGT,MAAMI,EAAgBP,EAAkBvB,CAAQ,EAChD,GAAI,CAAC8B,EACH,MAAM,IAAI,MAAM,qBAAqB9B,CAAQ,EAAE,EAGjD,OAAO8B,EAAcF,EAAYD,CAAY,CAC/C,C,mCCvRO,SAASK,EACdC,EACAhD,EACA1M,EACA6C,EAA2C,CAAC,EACjB,CAC3B,MAAO,CACL,aAAA6M,EACA,MAAAhD,EACA,YAAA1M,EACA,QAAS,QACT,UAAW,GACX,SAAU,GACV,OAAQ,GACR,YAAa,GACb,eAAgB,GAChB,SAAU,CAAE,MAAO,GAAI,GAAI,EAAG,EAC9B,UAAW,GACX,GAAG6C,CACL,CACF,C","sources":["webpack://grafana/./public/app/features/alerting/unified/components/CollapseToggle.tsx","webpack://grafana/./public/app/features/alerting/unified/components/ConditionalWrap.tsx","webpack://grafana/./public/app/features/alerting/unified/components/common/TextVariants.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/components/UnusedBadge.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/ContactPointHeader.tsx","webpack://grafana/./public/app/plugins/datasource/alertmanager/consts.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/grafanaAppReceivers/ReceiverMetadataBadge.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/ContactPoint.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/constants.ts","webpack://grafana/./public/app/features/alerting/unified/openapi/receiversApi.gen.ts","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/useContactPoints.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaReceiverExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaReceiversExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/useExportContactPoint.tsx","webpack://grafana/./public/app/features/alerting/unified/utils/receivers.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/grafanaAppReceivers/useReceiversMetadata.ts","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/utils.ts","webpack://grafana/./public/app/features/alerting/unified/components/export/FileExportPreview.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaExportDrawer.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/providers.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/grafanaAppReceivers/types.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/RuleInspector.tsx","webpack://grafana/./public/app/features/alerting/unified/types/contact-points.ts","webpack://grafana/./public/app/features/alerting/unified/utils/cloud-alertmanager-notifier-types.ts","webpack://grafana/./public/app/features/alerting/unified/utils/k8s/utils.ts","webpack://grafana/./public/app/features/alerting/unified/utils/notification-policies.ts","webpack://grafana/./public/app/features/alerting/unified/utils/notifier-types.ts"],"sourcesContent":["import { HTMLAttributes } from 'react';\n\nimport { IconSize, Button } from '@grafana/ui';\n\ninterface Props extends HTMLAttributes<HTMLButtonElement> {\n  isCollapsed: boolean;\n  onToggle: (isCollapsed: boolean) => void;\n  // Todo: this should be made compulsory for a11y purposes\n  idControlled?: string;\n  size?: IconSize;\n  className?: string;\n  text?: string;\n}\n\nexport const CollapseToggle = ({\n  isCollapsed,\n  onToggle,\n  idControlled,\n  className,\n  text,\n  size = 'xl',\n  ...restOfProps\n}: Props) => {\n  return (\n    <Button\n      type=\"button\"\n      fill=\"text\"\n      variant=\"secondary\"\n      aria-expanded={!isCollapsed}\n      aria-controls={idControlled}\n      className={className}\n      icon={isCollapsed ? 'angle-right' : 'angle-down'}\n      onClick={() => onToggle(!isCollapsed)}\n      {...restOfProps}\n    >\n      {text}\n    </Button>\n  );\n};\n","import { cloneElement, forwardRef, Ref } from 'react';\n\ninterface ConditionalWrapProps {\n  shouldWrap: boolean;\n  children: JSX.Element;\n  wrap: (children: JSX.Element) => JSX.Element;\n}\n\nfunction ConditionalWrap({ children, shouldWrap, wrap }: ConditionalWrapProps, _ref: Ref<HTMLElement>) {\n  return shouldWrap ? cloneElement(wrap(children)) : children;\n}\n\nexport default forwardRef(ConditionalWrap);\n","// These are convenience components to deal with i18n shenanigans\n// (see https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#jsx)\n// These help when we need to interpolate variables inside translated strings,\n// where we need to style them differently\n\nimport { Text } from '@grafana/ui';\n\nexport const PrimaryText = ({ content }: { content: string }) => <Text color=\"primary\">{content}</Text>;\n","import { Badge } from '@grafana/ui';\n\nexport const UnusedContactPointBadge = () => (\n  <Badge\n    text=\"Unused\"\n    aria-label=\"unused\"\n    color=\"orange\"\n    icon=\"exclamation-triangle\"\n    // is not used in any policy, but it can receive notifications from an auto auto generated policy. Non admin users can't see auto generated policies.\n    tooltip=\"This contact point is not used in any notification policy\"\n  />\n);\n","import { css } from '@emotion/css';\nimport { Fragment } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Dropdown, LinkButton, Menu, Stack, Text, TextLink, Tooltip, useStyles2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\nimport ConditionalWrap from 'app/features/alerting/unified/components/ConditionalWrap';\nimport { useExportContactPoint } from 'app/features/alerting/unified/components/contact-points/useExportContactPoint';\n\nimport { AlertmanagerAction, useAlertmanagerAbility } from '../../hooks/useAbilities';\nimport { createRelativeUrl } from '../../utils/url';\nimport MoreButton from '../MoreButton';\nimport { ProvisioningBadge } from '../Provisioning';\nimport { Spacer } from '../Spacer';\n\nimport { UnusedContactPointBadge } from './components/UnusedBadge';\nimport { RouteReference } from './utils';\n\ninterface ContactPointHeaderProps {\n  name: string;\n  disabled?: boolean;\n  provisioned?: boolean;\n  policies?: RouteReference[];\n  onDelete: (name: string) => void;\n}\n\nexport const ContactPointHeader = (props: ContactPointHeaderProps) => {\n  const { name, disabled = false, provisioned = false, policies = [], onDelete } = props;\n  const styles = useStyles2(getStyles);\n\n  const [exportSupported, exportAllowed] = useAlertmanagerAbility(AlertmanagerAction.ExportContactPoint);\n  const [editSupported, editAllowed] = useAlertmanagerAbility(AlertmanagerAction.UpdateContactPoint);\n  const [deleteSupported, deleteAllowed] = useAlertmanagerAbility(AlertmanagerAction.UpdateContactPoint);\n\n  const [ExportDrawer, openExportDrawer] = useExportContactPoint();\n\n  const numberOfPolicies = policies.length;\n  const isReferencedByAnyPolicy = numberOfPolicies > 0;\n  const isReferencedByRegularPolicies = policies.some((ref) => ref.route.type !== 'auto-generated');\n\n  const canEdit = editSupported && editAllowed && !provisioned;\n  const canDelete = deleteSupported && deleteAllowed && !provisioned && !isReferencedByRegularPolicies;\n\n  const menuActions: JSX.Element[] = [];\n\n  if (exportSupported) {\n    menuActions.push(\n      <Fragment key=\"export-contact-point\">\n        <Menu.Item\n          icon=\"download-alt\"\n          label=\"Export\"\n          ariaLabel=\"export\"\n          disabled={!exportAllowed}\n          data-testid=\"export\"\n          onClick={() => openExportDrawer(name)}\n        />\n        <Menu.Divider />\n      </Fragment>\n    );\n  }\n\n  if (deleteSupported) {\n    menuActions.push(\n      <ConditionalWrap\n        key=\"delete-contact-point\"\n        shouldWrap={!canDelete}\n        wrap={(children) => (\n          <Tooltip content=\"Contact point is currently in use by one or more notification policies\" placement=\"top\">\n            <span>{children}</span>\n          </Tooltip>\n        )}\n      >\n        <Menu.Item\n          label=\"Delete\"\n          ariaLabel=\"delete\"\n          icon=\"trash-alt\"\n          destructive\n          disabled={disabled || !canDelete}\n          onClick={() => onDelete(name)}\n        />\n      </ConditionalWrap>\n    );\n  }\n\n  const referencedByPoliciesText = t('alerting.contact-points.used-by', 'Used by {{ count }} notification policy', {\n    count: numberOfPolicies,\n  });\n\n  return (\n    <div className={styles.headerWrapper}>\n      <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n        <Stack alignItems=\"center\" gap={1}>\n          <Text element=\"h2\" variant=\"body\" weight=\"medium\">\n            {name}\n          </Text>\n        </Stack>\n        {isReferencedByAnyPolicy && (\n          <TextLink\n            href={createRelativeUrl('/alerting/routes', { contactPoint: name })}\n            variant=\"bodySmall\"\n            color=\"primary\"\n            inline={false}\n          >\n            {referencedByPoliciesText}\n          </TextLink>\n        )}\n        {provisioned && <ProvisioningBadge />}\n        {!isReferencedByAnyPolicy && <UnusedContactPointBadge />}\n        <Spacer />\n        <LinkButton\n          tooltipPlacement=\"top\"\n          tooltip={provisioned ? 'Provisioned contact points cannot be edited in the UI' : undefined}\n          variant=\"secondary\"\n          size=\"sm\"\n          icon={canEdit ? 'pen' : 'eye'}\n          type=\"button\"\n          disabled={disabled}\n          aria-label={`${canEdit ? 'edit' : 'view'}-action`}\n          data-testid={`${canEdit ? 'edit' : 'view'}-action`}\n          href={`/alerting/notifications/receivers/${encodeURIComponent(name)}/edit`}\n        >\n          {canEdit ? 'Edit' : 'View'}\n        </LinkButton>\n        {menuActions.length > 0 && (\n          <Dropdown overlay={<Menu>{menuActions}</Menu>}>\n            <MoreButton />\n          </Dropdown>\n        )}\n      </Stack>\n      {ExportDrawer}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  headerWrapper: css({\n    background: `${theme.colors.background.secondary}`,\n    padding: `${theme.spacing(1)} ${theme.spacing(1.5)}`,\n\n    borderBottom: `solid 1px ${theme.colors.border.weak}`,\n    borderTopLeftRadius: `${theme.shape.radius.default}`,\n    borderTopRightRadius: `${theme.shape.radius.default}`,\n  }),\n});\n","export const receiverTypeNames: Record<string, string> = {\n  pagerduty: 'PagerDuty',\n  pushover: 'Pushover',\n  slack: 'Slack',\n  opsgenie: 'OpsGenie',\n  webhook: 'Webhook',\n  victorops: 'VictorOps',\n  wechat: 'WeChat',\n  discord: 'Discord',\n  webex: 'Cisco Webex Teams',\n  sns: 'Amazon SNS',\n  telegram: 'Telegram',\n  msteams: 'Microsoft Teams',\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, LinkButton, Tooltip, useStyles2, Stack } from '@grafana/ui';\n\nimport { ReceiverPluginMetadata } from './useReceiversMetadata';\n\ninterface Props {\n  metadata: ReceiverPluginMetadata;\n}\n\nexport const ReceiverMetadataBadge = ({ metadata: { icon, title, externalUrl, warning } }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Stack alignItems=\"center\" gap={0.5}>\n      <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n        {warning ? (\n          <Tooltip content={warning} theme=\"error\">\n            <Icon name=\"exclamation-triangle\" className={styles.warnIcon} />\n          </Tooltip>\n        ) : (\n          <img src={icon} alt={title} height=\"16px\" />\n        )}\n        <span>{title}</span>\n      </Stack>\n      {externalUrl && (\n        <LinkButton icon=\"external-link-alt\" href={externalUrl} target=\"_blank\" variant=\"secondary\" size=\"sm\" />\n      )}\n    </Stack>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  warnIcon: css({\n    fill: theme.colors.warning.text,\n  }),\n});\n","import { css } from '@emotion/css';\nimport { groupBy, size, upperFirst } from 'lodash';\nimport { Fragment, ReactNode } from 'react';\n\nimport { dateTime, GrafanaTheme2 } from '@grafana/data';\nimport { Icon, Stack, Text, Tooltip, useStyles2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\nimport { PrimaryText } from 'app/features/alerting/unified/components/common/TextVariants';\nimport { ContactPointHeader } from 'app/features/alerting/unified/components/contact-points/ContactPointHeader';\nimport { receiverTypeNames } from 'app/plugins/datasource/alertmanager/consts';\nimport { GrafanaManagedReceiverConfig } from 'app/plugins/datasource/alertmanager/types';\nimport { GrafanaNotifierType, NotifierStatus } from 'app/types/alerting';\n\nimport { INTEGRATION_ICONS } from '../../types/contact-points';\nimport { MetaText } from '../MetaText';\nimport { ReceiverMetadataBadge } from '../receivers/grafanaAppReceivers/ReceiverMetadataBadge';\nimport { ReceiverPluginMetadata } from '../receivers/grafanaAppReceivers/useReceiversMetadata';\n\nimport { RECEIVER_META_KEY, RECEIVER_PLUGIN_META_KEY, RECEIVER_STATUS_KEY } from './constants';\nimport { getReceiverDescription, ReceiverConfigWithMetadata, RouteReference } from './utils';\n\ninterface ContactPointProps {\n  name: string;\n  disabled?: boolean;\n  provisioned?: boolean;\n  receivers: ReceiverConfigWithMetadata[];\n  policies?: RouteReference[];\n  onDelete: (name: string) => void;\n}\n\nexport const ContactPoint = ({\n  name,\n  disabled = false,\n  provisioned = false,\n  receivers,\n  policies = [],\n  onDelete,\n}: ContactPointProps) => {\n  const styles = useStyles2(getStyles);\n\n  // TODO probably not the best way to figure out if we want to show either only the summary or full metadata for the receivers?\n  const showFullMetadata = receivers.some((receiver) => Boolean(receiver[RECEIVER_META_KEY]));\n\n  return (\n    <div className={styles.contactPointWrapper} data-testid=\"contact-point\">\n      <Stack direction=\"column\" gap={0}>\n        <ContactPointHeader\n          name={name}\n          policies={policies}\n          provisioned={provisioned}\n          disabled={disabled}\n          onDelete={onDelete}\n        />\n        {showFullMetadata ? (\n          <div>\n            {receivers.map((receiver, index) => {\n              const diagnostics = receiver[RECEIVER_STATUS_KEY];\n              const metadata = receiver[RECEIVER_META_KEY];\n              const sendingResolved = !Boolean(receiver.disableResolveMessage);\n              const pluginMetadata = receiver[RECEIVER_PLUGIN_META_KEY];\n              const key = metadata.name + index;\n\n              return (\n                <ContactPointReceiver\n                  key={key}\n                  name={metadata.name}\n                  type={receiver.type}\n                  description={getReceiverDescription(receiver)}\n                  diagnostics={diagnostics}\n                  pluginMetadata={pluginMetadata}\n                  sendingResolved={sendingResolved}\n                />\n              );\n            })}\n          </div>\n        ) : (\n          <div className={styles.integrationWrapper}>\n            <ContactPointReceiverSummary receivers={receivers} />\n          </div>\n        )}\n      </Stack>\n    </div>\n  );\n};\n\ninterface ContactPointReceiverProps {\n  name: string;\n  type: GrafanaNotifierType | string;\n  description?: ReactNode;\n  sendingResolved?: boolean;\n  diagnostics?: NotifierStatus;\n  pluginMetadata?: ReceiverPluginMetadata;\n}\n\nconst ContactPointReceiver = (props: ContactPointReceiverProps) => {\n  const { name, type, description, diagnostics, pluginMetadata, sendingResolved = true } = props;\n  const styles = useStyles2(getStyles);\n\n  const hasMetadata = diagnostics !== undefined;\n\n  return (\n    <div className={styles.integrationWrapper}>\n      <Stack direction=\"column\" gap={0.5}>\n        <ContactPointReceiverTitleRow\n          name={name}\n          type={type}\n          description={description}\n          pluginMetadata={pluginMetadata}\n        />\n        {hasMetadata && <ContactPointReceiverMetadataRow diagnostics={diagnostics} sendingResolved={sendingResolved} />}\n      </Stack>\n    </div>\n  );\n};\n\nexport interface ContactPointReceiverTitleRowProps {\n  name: string;\n  type: GrafanaNotifierType | string;\n  description?: ReactNode;\n  pluginMetadata?: ReceiverPluginMetadata;\n}\n\nexport function ContactPointReceiverTitleRow(props: ContactPointReceiverTitleRowProps) {\n  const { name, type, description, pluginMetadata } = props;\n\n  const iconName = INTEGRATION_ICONS[type];\n\n  return (\n    <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n      <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n        {iconName && <Icon name={iconName} />}\n        {pluginMetadata ? (\n          <ReceiverMetadataBadge metadata={pluginMetadata} />\n        ) : (\n          <Text variant=\"body\" color=\"primary\">\n            {name}\n          </Text>\n        )}\n      </Stack>\n      {description && (\n        <Text variant=\"bodySmall\" color=\"secondary\">\n          {description}\n        </Text>\n      )}\n    </Stack>\n  );\n}\n\ninterface ContactPointReceiverMetadata {\n  sendingResolved: boolean;\n  diagnostics: NotifierStatus;\n}\n\ntype ContactPointReceiverSummaryProps = {\n  receivers: GrafanaManagedReceiverConfig[];\n};\n\n/**\n * This summary is used when we're dealing with non-Grafana managed alertmanager since they\n * don't have any metadata worth showing other than a summary of what types are configured for the contact point\n */\nexport const ContactPointReceiverSummary = ({ receivers }: ContactPointReceiverSummaryProps) => {\n  const countByType = groupBy(receivers, (receiver) => receiver.type);\n\n  return (\n    <Stack direction=\"column\" gap={0}>\n      <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n        {Object.entries(countByType).map(([type, receivers], index) => {\n          const iconName = INTEGRATION_ICONS[type];\n          const receiverName = receiverTypeNames[type] ?? upperFirst(type);\n          const isLastItem = size(countByType) - 1 === index;\n\n          return (\n            <Fragment key={type}>\n              <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n                {iconName && <Icon name={iconName} />}\n                <Text variant=\"body\">\n                  {receiverName}\n                  {receivers.length > 1 && receivers.length}\n                </Text>\n              </Stack>\n              {!isLastItem && '⋅'}\n            </Fragment>\n          );\n        })}\n      </Stack>\n    </Stack>\n  );\n};\n\nconst ContactPointReceiverMetadataRow = ({ diagnostics, sendingResolved }: ContactPointReceiverMetadata) => {\n  const styles = useStyles2(getStyles);\n\n  const failedToSend = Boolean(diagnostics.lastNotifyAttemptError);\n  const lastDeliveryAttempt = dateTime(diagnostics.lastNotifyAttempt);\n  const lastDeliveryAttemptDuration = diagnostics.lastNotifyAttemptDuration;\n  const hasDeliveryAttempt = lastDeliveryAttempt.isValid();\n\n  return (\n    <div className={styles.metadataRow}>\n      <Stack direction=\"row\" gap={1}>\n        {/* this is shown when the last delivery failed – we don't show any additional metadata */}\n        {failedToSend ? (\n          <>\n            <MetaText color=\"error\" icon=\"exclamation-circle\">\n              <Tooltip content={diagnostics.lastNotifyAttemptError!}>\n                <span>\n                  <Trans i18nKey=\"alerting.contact-points.last-delivery-failed\">Last delivery attempt failed</Trans>\n                </span>\n              </Tooltip>\n            </MetaText>\n          </>\n        ) : (\n          <>\n            {/* this is shown when we have a last delivery attempt */}\n            {hasDeliveryAttempt && (\n              <>\n                <MetaText icon=\"clock-nine\">\n                  <Trans i18nKey=\"alerting.contact-points.last-delivery-attempt\">Last delivery attempt</Trans>\n                  <Tooltip content={lastDeliveryAttempt.toLocaleString()}>\n                    <span>\n                      <Text color=\"primary\">{lastDeliveryAttempt.locale('en').fromNow()}</Text>\n                    </span>\n                  </Tooltip>\n                </MetaText>\n                <MetaText icon=\"stopwatch\">\n                  <Trans i18nKey=\"alerting.contact-points.delivery-duration\">\n                    Last delivery took <PrimaryText content={lastDeliveryAttemptDuration} />\n                  </Trans>\n                </MetaText>\n              </>\n            )}\n            {/* when we have no last delivery attempt */}\n            {!hasDeliveryAttempt && (\n              <MetaText icon=\"clock-nine\">\n                <Trans i18nKey=\"alerting.contact-points.no-delivery-attempts\">No delivery attempts</Trans>\n              </MetaText>\n            )}\n            {/* this is only shown for contact points that only want \"firing\" updates */}\n            {!sendingResolved && (\n              <MetaText icon=\"info-circle\">\n                <Trans i18nKey=\"alerting.contact-points.only-firing\">\n                  Delivering <Text color=\"primary\">only firing</Text> notifications\n                </Trans>\n              </MetaText>\n            )}\n          </>\n        )}\n      </Stack>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  contactPointWrapper: css({\n    borderRadius: `${theme.shape.radius.default}`,\n    border: `solid 1px ${theme.colors.border.weak}`,\n    borderBottom: 'none',\n  }),\n  integrationWrapper: css({\n    position: 'relative',\n\n    background: `${theme.colors.background.primary}`,\n    padding: `${theme.spacing(1)} ${theme.spacing(1.5)}`,\n\n    borderBottom: `solid 1px ${theme.colors.border.weak}`,\n  }),\n  metadataRow: css({\n    borderBottomLeftRadius: `${theme.shape.radius.default}`,\n    borderBottomRightRadius: `${theme.shape.radius.default}`,\n  }),\n});\n","export const RECEIVER_STATUS_KEY = Symbol('receiver_status');\nexport const RECEIVER_META_KEY = Symbol('receiver_metadata');\nexport const RECEIVER_PLUGIN_META_KEY = Symbol('receiver_plugin_metadata');\n","import { alertingApi as api } from '../api/alertingApi';\nexport const addTagTypes = ['Receiver'] as const;\nconst injectedRtkApi = api\n  .enhanceEndpoints({\n    addTagTypes,\n  })\n  .injectEndpoints({\n    endpoints: (build) => ({\n      listNamespacedReceiver: build.query<ListNamespacedReceiverApiResponse, ListNamespacedReceiverApiArg>({\n        query: (queryArg) => ({\n          url: `/apis/notifications.alerting.grafana.app/v0alpha1/namespaces/${queryArg['namespace']}/receivers`,\n          params: {\n            pretty: queryArg.pretty,\n            allowWatchBookmarks: queryArg.allowWatchBookmarks,\n            continue: queryArg['continue'],\n            fieldSelector: queryArg.fieldSelector,\n            labelSelector: queryArg.labelSelector,\n            limit: queryArg.limit,\n            resourceVersion: queryArg.resourceVersion,\n            resourceVersionMatch: queryArg.resourceVersionMatch,\n            sendInitialEvents: queryArg.sendInitialEvents,\n            timeoutSeconds: queryArg.timeoutSeconds,\n            watch: queryArg.watch,\n          },\n        }),\n        providesTags: ['Receiver'],\n      }),\n    }),\n    overrideExisting: false,\n  });\nexport { injectedRtkApi as generatedReceiversApi };\nexport type ListNamespacedReceiverApiResponse =\n  /** status 200 OK */ ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1ReceiverList;\nexport type ListNamespacedReceiverApiArg = {\n  /** object name and auth scope, such as for teams and projects */\n  namespace: string;\n  /** If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget). */\n  pretty?: string;\n  /** allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. */\n  allowWatchBookmarks?: boolean;\n  /** The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\n    This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications. */\n  continue?: string;\n  /** A selector to restrict the list of returned objects by their fields. Defaults to everything. */\n  fieldSelector?: string;\n  /** A selector to restrict the list of returned objects by their labels. Defaults to everything. */\n  labelSelector?: string;\n  /** limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\n    The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned. */\n  limit?: number;\n  /** resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\n    Defaults to unset */\n  resourceVersion?: string;\n  /** resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\n    Defaults to unset */\n  resourceVersionMatch?: string;\n  /** `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \"Bookmark\" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `\"k8s.io/initial-events-end\": \"true\"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.\n\n    When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan\n      is interpreted as \"data at least as new as the provided `resourceVersion`\"\n      and the bookmark event is send when the state is synced\n      to a `resourceVersion` at least as fresh as the one provided by the ListOptions.\n      If `resourceVersion` is unset, this is interpreted as \"consistent read\" and the\n      bookmark event is send when the state is synced at least to the moment\n      when request started being processed.\n    - `resourceVersionMatch` set to any other value or unset\n      Invalid error is returned.\n\n    Defaults to true if `resourceVersion=\"\"` or `resourceVersion=\"0\"` (for backward compatibility reasons) and to false otherwise. */\n  sendInitialEvents?: boolean;\n  /** Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. */\n  timeoutSeconds?: number;\n  /** Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. */\n  watch?: boolean;\n};\nexport type IoK8SApimachineryPkgApisMetaV1Time = string;\nexport type IoK8SApimachineryPkgApisMetaV1FieldsV1 = object;\nexport type IoK8SApimachineryPkgApisMetaV1ManagedFieldsEntry = {\n  /** APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted. */\n  apiVersion?: string;\n  /** FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\" */\n  fieldsType?: string;\n  /** FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type. */\n  fieldsV1?: IoK8SApimachineryPkgApisMetaV1FieldsV1;\n  /** Manager is an identifier of the workflow managing these fields. */\n  manager?: string;\n  /** Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'. */\n  operation?: string;\n  /** Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource. */\n  subresource?: string;\n  /** Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over. */\n  time?: IoK8SApimachineryPkgApisMetaV1Time;\n};\nexport type IoK8SApimachineryPkgApisMetaV1OwnerReference = {\n  /** API version of the referent. */\n  apiVersion: string;\n  /** If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned. */\n  blockOwnerDeletion?: boolean;\n  /** If true, this reference points to the managing controller. */\n  controller?: boolean;\n  /** Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */\n  kind: string;\n  /** Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names */\n  name: string;\n  /** UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids */\n  uid: string;\n};\nexport type IoK8SApimachineryPkgApisMetaV1ObjectMeta = {\n  /** Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations */\n  annotations?: {\n    [key: string]: string;\n  };\n  /** CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\n    Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata */\n  creationTimestamp?: IoK8SApimachineryPkgApisMetaV1Time;\n  /** Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only. */\n  deletionGracePeriodSeconds?: number;\n  /** DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\n    Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata */\n  deletionTimestamp?: IoK8SApimachineryPkgApisMetaV1Time;\n  /** Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list. */\n  finalizers?: string[];\n  /** GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\n    If this field is specified and the generated name exists, the server will return a 409.\n\n    Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency */\n  generateName?: string;\n  /** A sequence number representing a specific generation of the desired state. Populated by the system. Read-only. */\n  generation?: number;\n  /** Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels */\n  labels?: {\n    [key: string]: string;\n  };\n  /** ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object. */\n  managedFields?: IoK8SApimachineryPkgApisMetaV1ManagedFieldsEntry[];\n  /** Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names */\n  name?: string;\n  /** Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\n    Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces */\n  namespace?: string;\n  /** List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller. */\n  ownerReferences?: IoK8SApimachineryPkgApisMetaV1OwnerReference[];\n  /** An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\n    Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency */\n  resourceVersion?: string;\n  /** Deprecated: selfLink is a legacy read-only field that is no longer populated by the system. */\n  selfLink?: string;\n  /** UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\n    Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids */\n  uid?: string;\n};\nexport type ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1Integration = {\n  SecureFields?: {\n    [key: string]: boolean;\n  };\n  disableResolveMessage?: boolean;\n  settings: string;\n  type: string;\n  uid?: string;\n};\nexport type ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1ReceiverSpec = {\n  integrations: ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1Integration[];\n  title: string;\n};\nexport type ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1Receiver = {\n  /** APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources */\n  apiVersion?: string;\n  /** Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */\n  kind?: string;\n  metadata: IoK8SApimachineryPkgApisMetaV1ObjectMeta;\n  spec: ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1ReceiverSpec;\n};\nexport type IoK8SApimachineryPkgApisMetaV1ListMeta = {\n  /** continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message. */\n  continue?: string;\n  /** remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact. */\n  remainingItemCount?: number;\n  /** String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency */\n  resourceVersion?: string;\n  /** Deprecated: selfLink is a legacy read-only field that is no longer populated by the system. */\n  selfLink?: string;\n};\nexport type ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1ReceiverList = {\n  /** APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources */\n  apiVersion?: string;\n  items: ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1Receiver[];\n  /** Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */\n  kind?: string;\n  metadata: IoK8SApimachineryPkgApisMetaV1ListMeta;\n};\n","/**\n * This hook will combine data from both the Alertmanager config\n * and (if available) it will also fetch the status from the Grafana Managed status endpoint\n */\n\nimport { produce } from 'immer';\nimport { remove } from 'lodash';\nimport { useMemo } from 'react';\n\nimport {\n  ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1Receiver,\n  generatedReceiversApi,\n} from 'app/features/alerting/unified/openapi/receiversApi.gen';\nimport { BaseAlertmanagerArgs, Skippable } from 'app/features/alerting/unified/types/hooks';\nimport { cloudNotifierTypes } from 'app/features/alerting/unified/utils/cloud-alertmanager-notifier-types';\nimport { GRAFANA_RULES_SOURCE_NAME } from 'app/features/alerting/unified/utils/datasource';\nimport { getK8sNamespace, shouldUseK8sApi } from 'app/features/alerting/unified/utils/k8s/utils';\n\nimport { alertmanagerApi } from '../../api/alertmanagerApi';\nimport { onCallApi } from '../../api/onCallApi';\nimport { usePluginBridge } from '../../hooks/usePluginBridge';\nimport { SupportedPlugin } from '../../types/pluginBridges';\n\nimport { enhanceContactPointsWithMetadata } from './utils';\n\nconst RECEIVER_STATUS_POLLING_INTERVAL = 10 * 1000; // 10 seconds\n\n/**\n * This hook will combine data from several endpoints;\n * 1. the alertmanager config endpoint where the definition of the receivers are\n * 2. (if available) the alertmanager receiver status endpoint, currently Grafana Managed only\n * 3. (if available) additional metadata about Grafana Managed contact points\n * 4. (if available) the OnCall plugin metadata\n */\n\nconst {\n  useGetAlertmanagerConfigurationQuery,\n  useGetContactPointsListQuery,\n  useGetContactPointsStatusQuery,\n  useGrafanaNotifiersQuery,\n  useLazyGetAlertmanagerConfigurationQuery,\n  useUpdateAlertmanagerConfigurationMutation,\n} = alertmanagerApi;\nconst { useGrafanaOnCallIntegrationsQuery } = onCallApi;\nconst { useListNamespacedReceiverQuery } = generatedReceiversApi;\n\nconst defaultOptions = {\n  refetchOnFocus: true,\n  refetchOnReconnect: true,\n};\n\n/**\n * Check if OnCall is installed, and fetch the list of integrations if so.\n *\n * Otherwise, returns no data\n */\nconst useOnCallIntegrations = ({ skip }: Skippable = {}) => {\n  const { installed, loading } = usePluginBridge(SupportedPlugin.OnCall);\n  const oncallIntegrationsResponse = useGrafanaOnCallIntegrationsQuery(undefined, { skip: skip || !installed });\n\n  return useMemo(() => {\n    if (installed) {\n      return oncallIntegrationsResponse;\n    }\n    return {\n      isLoading: loading,\n      data: undefined,\n    };\n  }, [installed, loading, oncallIntegrationsResponse]);\n};\n\ntype K8sReceiver = ComGithubGrafanaGrafanaPkgApisAlertingNotificationsV0Alpha1Receiver;\n\n// TODO: Make this typed as returning `GrafanaManagedContactPoint` - we can't yet do this as the schema thinks\n// its returning integration settings as a `string` rather than `Record<string, any>`\nconst parseK8sReceiver = (item: K8sReceiver) => {\n  return { name: item.spec.title, grafana_managed_receiver_configs: item.spec.integrations };\n};\n\nconst useK8sContactPoints = (...[hookParams, queryOptions]: Parameters<typeof useListNamespacedReceiverQuery>) => {\n  return useListNamespacedReceiverQuery(hookParams, {\n    ...queryOptions,\n    selectFromResult: ({ data, ...rest }) => {\n      return {\n        ...rest,\n        data: data?.items.map((item) => parseK8sReceiver(item)),\n      };\n    },\n  });\n};\n\n/**\n * Fetch contact points for Grafana Alertmanager, either from the k8s API,\n * or the `/notifications/receivers` endpoint\n */\nconst useFetchGrafanaContactPoints = ({ skip }: Skippable = {}) => {\n  const namespace = getK8sNamespace();\n  const useK8sApi = shouldUseK8sApi(GRAFANA_RULES_SOURCE_NAME);\n\n  const grafanaResponse = useGetContactPointsListQuery(undefined, { skip: skip || useK8sApi });\n  const k8sResponse = useK8sContactPoints({ namespace }, { skip: skip || !useK8sApi });\n\n  return useK8sApi ? k8sResponse : grafanaResponse;\n};\n\ntype GrafanaFetchOptions = {\n  /**\n   * Should we fetch and include status information about each contact point?\n   */\n  fetchStatuses?: boolean;\n  /**\n   * Should we fetch and include the number of notification policies that reference each contact point?\n   */\n  fetchPolicies?: boolean;\n};\n\n/**\n * Fetch contact points from separate endpoint (i.e. not the Alertmanager config) and combine with\n * OnCall integrations and any additional metadata from list of notifiers\n * (e.g. hydrate with additional names/descriptions)\n */\nexport const useGrafanaContactPoints = ({\n  fetchStatuses,\n  fetchPolicies,\n  skip,\n}: GrafanaFetchOptions & Skippable = {}) => {\n  const potentiallySkip = { skip };\n  const onCallResponse = useOnCallIntegrations(potentiallySkip);\n  const alertNotifiers = useGrafanaNotifiersQuery(undefined, potentiallySkip);\n  const contactPointsListResponse = useFetchGrafanaContactPoints(potentiallySkip);\n  const contactPointsStatusResponse = useGetContactPointsStatusQuery(undefined, {\n    ...defaultOptions,\n    pollingInterval: RECEIVER_STATUS_POLLING_INTERVAL,\n    skip: skip || !fetchStatuses,\n  });\n  const alertmanagerConfigResponse = useGetAlertmanagerConfigurationQuery(GRAFANA_RULES_SOURCE_NAME, {\n    skip: skip || !fetchPolicies,\n  });\n\n  return useMemo(() => {\n    const isLoading = onCallResponse.isLoading || alertNotifiers.isLoading || contactPointsListResponse.isLoading;\n\n    if (isLoading || !contactPointsListResponse.data) {\n      return {\n        ...contactPointsListResponse,\n        // If we're inside this block, it means that at least one of the endpoints we care about is still loading,\n        // but the contactPointsListResponse may have in fact finished.\n        // If we were to use _that_ loading state, it might be inaccurate elsewhere when consuming this hook,\n        // so we explicitly say \"yes, this is definitely still loading\"\n        isLoading: true,\n        contactPoints: [],\n      };\n    }\n\n    const enhanced = enhanceContactPointsWithMetadata({\n      status: contactPointsStatusResponse.data,\n      notifiers: alertNotifiers.data,\n      onCallIntegrations: onCallResponse?.data,\n      contactPoints: contactPointsListResponse.data,\n      alertmanagerConfiguration: alertmanagerConfigResponse.data,\n    });\n\n    return {\n      ...contactPointsListResponse,\n      contactPoints: enhanced,\n    };\n  }, [\n    alertNotifiers,\n    alertmanagerConfigResponse,\n    contactPointsListResponse,\n    contactPointsStatusResponse,\n    onCallResponse,\n  ]);\n};\n\nexport function useContactPointsWithStatus({\n  alertmanager,\n  fetchStatuses,\n  fetchPolicies,\n}: GrafanaFetchOptions & BaseAlertmanagerArgs) {\n  const isGrafanaAlertmanager = alertmanager === GRAFANA_RULES_SOURCE_NAME;\n  const grafanaResponse = useGrafanaContactPoints({\n    skip: !isGrafanaAlertmanager,\n    fetchStatuses,\n    fetchPolicies,\n  });\n\n  const alertmanagerConfigResponse = useGetAlertmanagerConfigurationQuery(alertmanager, {\n    ...defaultOptions,\n    selectFromResult: (result) => ({\n      ...result,\n      contactPoints: result.data\n        ? enhanceContactPointsWithMetadata({\n            notifiers: cloudNotifierTypes,\n            contactPoints: result.data.alertmanager_config.receivers ?? [],\n            alertmanagerConfiguration: result.data,\n          })\n        : [],\n    }),\n    skip: isGrafanaAlertmanager,\n  });\n\n  return isGrafanaAlertmanager ? grafanaResponse : alertmanagerConfigResponse;\n}\n\nexport function useDeleteContactPoint(selectedAlertmanager: string) {\n  const [fetchAlertmanagerConfig] = useLazyGetAlertmanagerConfigurationQuery();\n  const [updateAlertManager, updateAlertmanagerState] = useUpdateAlertmanagerConfigurationMutation();\n\n  const deleteTrigger = (contactPointName: string) => {\n    return fetchAlertmanagerConfig(selectedAlertmanager).then(({ data }) => {\n      if (!data) {\n        return;\n      }\n\n      const newConfig = produce(data, (draft) => {\n        remove(draft?.alertmanager_config?.receivers ?? [], (receiver) => receiver.name === contactPointName);\n        return draft;\n      });\n\n      return updateAlertManager({\n        selectedAlertmanager,\n        config: newConfig,\n      }).unwrap();\n    });\n  };\n\n  return {\n    deleteTrigger,\n    updateAlertmanagerState,\n  };\n}\n","import { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { allGrafanaExportProviders, ExportFormats } from './providers';\n\ninterface GrafanaReceiverExportPreviewProps {\n  exportFormat: ExportFormats;\n  onClose: () => void;\n  receiverName: string;\n  decrypt: boolean;\n}\n\nconst GrafanaReceiverExportPreview = ({\n  receiverName,\n  decrypt,\n  exportFormat,\n  onClose,\n}: GrafanaReceiverExportPreviewProps) => {\n  const { currentData: receiverDefinition = '', isFetching } = alertRuleApi.useExportReceiverQuery({\n    receiverName: receiverName,\n    decrypt: decrypt,\n    format: exportFormat,\n  });\n\n  const downloadFileName = `cp-${receiverName}-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={receiverDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n};\n\ninterface GrafanaReceiverExporterProps {\n  onClose: () => void;\n  receiverName: string;\n  decrypt: boolean;\n}\n\nexport const GrafanaReceiverExporter = ({ onClose, receiverName, decrypt }: GrafanaReceiverExporterProps) => {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaReceiverExportPreview\n        receiverName={receiverName}\n        decrypt={decrypt}\n        exportFormat={activeTab}\n        onClose={onClose}\n      />\n    </GrafanaExportDrawer>\n  );\n};\n","import { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { allGrafanaExportProviders, ExportFormats } from './providers';\n\ninterface GrafanaReceiversExportPreviewProps {\n  exportFormat: ExportFormats;\n  onClose: () => void;\n  decrypt: boolean;\n}\n\nconst GrafanaReceiversExportPreview = ({ decrypt, exportFormat, onClose }: GrafanaReceiversExportPreviewProps) => {\n  const { currentData: receiverDefinition = '', isFetching } = alertRuleApi.useExportReceiversQuery({\n    decrypt: decrypt,\n    format: exportFormat,\n  });\n\n  const downloadFileName = `contact-points-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={receiverDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n};\n\ninterface GrafanaReceiversExporterProps {\n  onClose: () => void;\n  decrypt: boolean;\n}\n\nexport const GrafanaReceiversExporter = ({ onClose, decrypt }: GrafanaReceiversExporterProps) => {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaReceiversExportPreview decrypt={decrypt} exportFormat={activeTab} onClose={onClose} />\n    </GrafanaExportDrawer>\n  );\n};\n","import { useCallback, useMemo, useState } from 'react';\nimport { useToggle } from 'react-use';\n\nimport { AlertmanagerAction, useAlertmanagerAbility } from '../../hooks/useAbilities';\nimport { GrafanaReceiverExporter } from '../export/GrafanaReceiverExporter';\nimport { GrafanaReceiversExporter } from '../export/GrafanaReceiversExporter';\n\nexport const ALL_CONTACT_POINTS = Symbol('all contact points');\n\ntype ExportProps = [JSX.Element | null, (receiver: string | typeof ALL_CONTACT_POINTS) => void];\n\nexport const useExportContactPoint = (): ExportProps => {\n  const [receiverName, setReceiverName] = useState<string | typeof ALL_CONTACT_POINTS | null>(null);\n  const [isExportDrawerOpen, toggleShowExportDrawer] = useToggle(false);\n  const [decryptSecretsSupported, decryptSecretsAllowed] = useAlertmanagerAbility(AlertmanagerAction.DecryptSecrets);\n\n  const canReadSecrets = decryptSecretsSupported && decryptSecretsAllowed;\n\n  const handleClose = useCallback(() => {\n    setReceiverName(null);\n    toggleShowExportDrawer(false);\n  }, [toggleShowExportDrawer]);\n\n  const handleOpen = (receiverName: string | typeof ALL_CONTACT_POINTS) => {\n    setReceiverName(receiverName);\n    toggleShowExportDrawer(true);\n  };\n\n  const drawer = useMemo(() => {\n    if (!receiverName || !isExportDrawerOpen) {\n      return null;\n    }\n\n    if (receiverName === ALL_CONTACT_POINTS) {\n      // use this drawer when we want to export all contact points\n      return <GrafanaReceiversExporter decrypt={canReadSecrets} onClose={handleClose} />;\n    } else {\n      // use this one for exporting a single contact point\n      return <GrafanaReceiverExporter receiverName={receiverName} decrypt={canReadSecrets} onClose={handleClose} />;\n    }\n  }, [canReadSecrets, isExportDrawerOpen, handleClose, receiverName]);\n\n  return [drawer, handleOpen];\n};\n","import { isEmpty } from 'lodash';\n\nimport { GrafanaManagedReceiverConfig, Receiver } from 'app/plugins/datasource/alertmanager/types';\n\n/**\n * This function will extract the integrations that have been defined for either grafana managed contact point\n * or vanilla Alertmanager receiver.\n *\n * It will attempt to normalize the data structure to how they have been defined for Grafana managed contact points.\n * That way we can work with the same data structure in the UI.\n *\n * We don't normalize the configuration settings and those are blank for vanilla Alertmanager receivers.\n *\n * Example input:\n *  ```\n * { name: 'my receiver', email_configs: [{ from: \"foo@bar.com\" }] }\n * ```\n *\n * Example output:\n *  ```\n * { name: 'my receiver', grafana_managed_receiver_configs: [{ type: 'email', settings: {} }] }\n * ```\n */\nexport function extractReceivers(receiver: Receiver): GrafanaManagedReceiverConfig[] {\n  if ('grafana_managed_receiver_configs' in receiver) {\n    return receiver.grafana_managed_receiver_configs ?? [];\n  }\n\n  const integrations = Object.entries(receiver)\n    .filter(([key]) => key !== 'grafana_managed_receiver_configs' && key.endsWith('_configs'))\n    .filter(([_, value]) => Array.isArray(value) && !isEmpty(value))\n    .reduce((acc: GrafanaManagedReceiverConfig[], [key, value]) => {\n      const type = key.replace('_configs', '');\n      const configs = value.map((settings: unknown) => {\n        return {\n          name: receiver.name,\n          type,\n          settings,\n          disableResolveMessage: false,\n        };\n      });\n\n      return acc.concat(configs);\n    }, []);\n\n  return integrations;\n}\n","import { GrafanaManagedReceiverConfig } from '../../../../../../plugins/datasource/alertmanager/types';\nimport { OnCallIntegrationDTO } from '../../../api/onCallApi';\nimport { SupportedPlugin } from '../../../types/pluginBridges';\nimport { createBridgeURL } from '../../PluginBridge';\n\nimport { GRAFANA_APP_RECEIVERS_SOURCE_IMAGE } from './types';\n\nexport interface ReceiverPluginMetadata {\n  icon: string;\n  title: string;\n  description?: string;\n  externalUrl?: string;\n  warning?: string;\n}\n\nconst onCallReceiverICon = GRAFANA_APP_RECEIVERS_SOURCE_IMAGE[SupportedPlugin.OnCall];\nconst onCallReceiverTitle = 'Grafana OnCall';\n\nexport const onCallReceiverMeta: ReceiverPluginMetadata = {\n  title: onCallReceiverTitle,\n  icon: onCallReceiverICon,\n};\n\nexport function getOnCallMetadata(\n  onCallIntegrations: OnCallIntegrationDTO[] | undefined | null,\n  receiver: GrafanaManagedReceiverConfig,\n  hasAlertManagerConfigData = true\n): ReceiverPluginMetadata {\n  if (!hasAlertManagerConfigData) {\n    return onCallReceiverMeta;\n  }\n\n  // oncall status is still loading\n  if (onCallIntegrations === undefined) {\n    return onCallReceiverMeta;\n  }\n\n  // indication that onCall is not enabled\n  if (onCallIntegrations == null) {\n    return {\n      ...onCallReceiverMeta,\n      warning: 'Grafana OnCall is not installed or is disabled',\n    };\n  }\n\n  const matchingOnCallIntegration = onCallIntegrations.find(\n    (integration) => integration.integration_url === receiver.settings?.url\n  );\n\n  return {\n    ...onCallReceiverMeta,\n    description: matchingOnCallIntegration?.display_name,\n    externalUrl: matchingOnCallIntegration\n      ? createBridgeURL(SupportedPlugin.OnCall, `/integrations/${matchingOnCallIntegration.value}`)\n      : undefined,\n    warning: matchingOnCallIntegration ? undefined : 'OnCall Integration no longer exists',\n  };\n}\n","import { difference, groupBy, take, trim, upperFirst } from 'lodash';\nimport { ReactNode } from 'react';\n\nimport { config } from '@grafana/runtime';\nimport {\n  AlertManagerCortexConfig,\n  GrafanaManagedContactPoint,\n  GrafanaManagedReceiverConfig,\n  MatcherOperator,\n  Receiver,\n  Route,\n} from 'app/plugins/datasource/alertmanager/types';\nimport { NotifierDTO, NotifierStatus, ReceiversStateDTO } from 'app/types';\n\nimport { OnCallIntegrationDTO } from '../../api/onCallApi';\nimport { computeInheritedTree } from '../../utils/notification-policies';\nimport { extractReceivers } from '../../utils/receivers';\nimport { ReceiverTypes } from '../receivers/grafanaAppReceivers/onCall/onCall';\nimport { getOnCallMetadata, ReceiverPluginMetadata } from '../receivers/grafanaAppReceivers/useReceiversMetadata';\n\nimport { RECEIVER_META_KEY, RECEIVER_PLUGIN_META_KEY, RECEIVER_STATUS_KEY } from './constants';\n\nconst AUTOGENERATED_RECEIVER_POLICY_MATCHER_KEY = '__grafana_receiver__';\n\nexport function isProvisioned(contactPoint: GrafanaManagedContactPoint) {\n  // for some reason the provenance is on the receiver and not the entire contact point\n  const provenance = contactPoint.grafana_managed_receiver_configs?.find((receiver) => receiver.provenance)?.provenance;\n\n  return Boolean(provenance);\n}\n\n// TODO we should really add some type information to these receiver settings...\nexport function getReceiverDescription(receiver: ReceiverConfigWithMetadata): ReactNode | undefined {\n  if (!receiver.settings) {\n    return undefined;\n  }\n  const { settings } = receiver;\n  switch (receiver.type) {\n    case 'email': {\n      const addresses = settings.addresses || settings.to; // when dealing with alertmanager email_configs we don't normalize the settings\n      return addresses ? summarizeEmailAddresses(addresses) : undefined;\n    }\n    case 'slack': {\n      const recipient = settings.recipient || settings.channel;\n      if (!recipient) {\n        return;\n      }\n\n      // Slack channel name might have a \"#\" in the recipient already\n      const channelName = recipient.replace(/^#/, '');\n      return `#${channelName}`;\n    }\n    case 'kafka': {\n      return settings.kafkaTopic;\n    }\n    case 'webhook': {\n      return settings.url;\n    }\n    case ReceiverTypes.OnCall: {\n      return receiver[RECEIVER_PLUGIN_META_KEY]?.description;\n    }\n    default:\n      return receiver[RECEIVER_META_KEY]?.description;\n  }\n}\n\n// input: foo+1@bar.com, foo+2@bar.com, foo+3@bar.com, foo+4@bar.com\n// output: foo+1@bar.com, foo+2@bar.com, +2 more\nexport function summarizeEmailAddresses(addresses: string): string {\n  const MAX_ADDRESSES_SHOWN = 3;\n  const SUPPORTED_SEPARATORS = /,|;|\\n+/g;\n\n  // split all email addresses\n  const emails = addresses.trim().split(SUPPORTED_SEPARATORS).map(trim);\n\n  // grab the first 3 and the rest\n  const summary = take(emails, MAX_ADDRESSES_SHOWN);\n  const rest = difference(emails, summary);\n\n  if (rest.length) {\n    summary.push(`+${rest.length} more`);\n  }\n\n  return summary.join(', ');\n}\n\n// Grafana Managed contact points have receivers with additional diagnostics\nexport interface ReceiverConfigWithMetadata extends GrafanaManagedReceiverConfig {\n  // we're using a symbol here so we'll never have a conflict on keys for a receiver\n  // we also specify that the diagnostics might be \"undefined\" for vanilla Alertmanager\n  [RECEIVER_STATUS_KEY]?: NotifierStatus | undefined;\n  [RECEIVER_META_KEY]: {\n    name: string;\n    description?: string;\n  };\n  // optional metadata that comes from a particular plugin (like Grafana OnCall)\n  [RECEIVER_PLUGIN_META_KEY]?: ReceiverPluginMetadata;\n}\n\nexport interface ContactPointWithMetadata extends GrafanaManagedContactPoint {\n  policies?: RouteReference[]; // now is optional as we don't have the data from the read-only endpoint\n  grafana_managed_receiver_configs: ReceiverConfigWithMetadata[];\n}\n\ntype EnhanceContactPointsArgs = {\n  status?: ReceiversStateDTO[];\n  notifiers?: NotifierDTO[];\n  onCallIntegrations?: OnCallIntegrationDTO[] | undefined | null;\n  contactPoints: Receiver[];\n  alertmanagerConfiguration?: AlertManagerCortexConfig;\n};\n\n/**\n * This function adds the status information for each of the integrations (contact point types) in a contact point\n * 1. we iterate over all contact points\n * 2. for each contact point we \"enhance\" it with the status or \"undefined\" for vanilla Alertmanager\n * contactPoints: list of contact points\n * alertmanagerConfiguration: optional as is passed when we need to get number of policies for each contact point\n * and we prefer using the data from the read-only endpoint.\n */\nexport function enhanceContactPointsWithMetadata({\n  status = [],\n  notifiers = [],\n  onCallIntegrations,\n  contactPoints,\n  alertmanagerConfiguration,\n}: EnhanceContactPointsArgs): ContactPointWithMetadata[] {\n  // compute the entire inherited tree before finding what notification policies are using a particular contact point\n  const fullyInheritedTree = computeInheritedTree(alertmanagerConfiguration?.alertmanager_config?.route ?? {});\n  const usedContactPoints = getUsedContactPoints(fullyInheritedTree);\n  const usedContactPointsByName = groupBy(usedContactPoints, 'receiver');\n\n  const enhanced = contactPoints.map((contactPoint) => {\n    const receivers = extractReceivers(contactPoint);\n    const statusForReceiver = status.find((status) => status.name === contactPoint.name);\n\n    return {\n      ...contactPoint,\n      policies:\n        alertmanagerConfiguration && usedContactPointsByName && (usedContactPointsByName[contactPoint.name] ?? []),\n      grafana_managed_receiver_configs: receivers.map((receiver, index) => {\n        const isOnCallReceiver = receiver.type === ReceiverTypes.OnCall;\n        // if we don't have alertmanagerConfiguration we can't get the metadata for oncall receivers,\n        // because we don't have the url, as we are not using the alertmanager configuration\n        // but the contact points returned by the read only permissions contact points endpoint (/api/v1/notifications/receivers)\n        return {\n          ...receiver,\n          [RECEIVER_STATUS_KEY]: statusForReceiver?.integrations[index],\n          [RECEIVER_META_KEY]: getNotifierMetadata(notifiers, receiver),\n          // if OnCall plugin is installed, we'll add it to the receiver's plugin metadata\n          [RECEIVER_PLUGIN_META_KEY]: isOnCallReceiver\n            ? getOnCallMetadata(onCallIntegrations, receiver, Boolean(alertmanagerConfiguration))\n            : undefined,\n        };\n      }),\n    };\n  });\n\n  return enhanced.sort((a, b) => a.name.localeCompare(b.name));\n}\n\nexport function isAutoGeneratedPolicy(route: Route) {\n  const simplifiedRoutingToggleEnabled = config.featureToggles.alertingSimplifiedRouting ?? false;\n  if (!simplifiedRoutingToggleEnabled) {\n    return false;\n  }\n  if (!route.object_matchers) {\n    return false;\n  }\n  return (\n    route.object_matchers.some((objectMatcher) => {\n      return (\n        objectMatcher[0] === AUTOGENERATED_RECEIVER_POLICY_MATCHER_KEY && objectMatcher[1] === MatcherOperator.equal\n      );\n    }) ?? false\n  );\n}\n\nexport interface RouteReference {\n  receiver: string;\n  route: {\n    type: 'auto-generated' | 'normal';\n  };\n}\n\nexport function getUsedContactPoints(route: Route): RouteReference[] {\n  const childrenContactPoints = route.routes?.flatMap((route) => getUsedContactPoints(route)) ?? [];\n\n  if (route.receiver) {\n    return [\n      {\n        receiver: route.receiver,\n        route: {\n          type: isAutoGeneratedPolicy(route) ? 'auto-generated' : 'normal',\n        },\n      },\n      ...childrenContactPoints,\n    ];\n  }\n\n  return childrenContactPoints;\n}\n\nfunction getNotifierMetadata(notifiers: NotifierDTO[], receiver: GrafanaManagedReceiverConfig) {\n  const match = notifiers.find((notifier) => notifier.type === receiver.type);\n\n  return {\n    name: match?.name ?? upperFirst(receiver.type),\n    description: match?.description,\n  };\n}\n","import { css } from '@emotion/css';\nimport saveAs from 'file-saver';\nimport { useCallback, useMemo } from 'react';\nimport * as React from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, ClipboardButton, CodeEditor, TextLink, useStyles2 } from '@grafana/ui';\n\nimport { allGrafanaExportProviders, ExportFormats, ExportProvider, ProvisioningType } from './providers';\n\ninterface FileExportPreviewProps {\n  format: ExportFormats;\n  textDefinition: string;\n\n  /*** Filename without extension ***/\n  downloadFileName: string;\n  onClose: () => void;\n}\n\nexport function FileExportPreview({ format, textDefinition, downloadFileName, onClose }: FileExportPreviewProps) {\n  const styles = useStyles2(fileExportPreviewStyles);\n  const provider = allGrafanaExportProviders[format];\n\n  const onDownload = useCallback(() => {\n    const blob = new Blob([textDefinition], {\n      type: `application/${format};charset=utf-8`,\n    });\n    saveAs(blob, `${downloadFileName}.${format}`);\n  }, [textDefinition, downloadFileName, format]);\n\n  const formattedTextDefinition = useMemo(() => {\n    return provider.formatter ? provider.formatter(textDefinition) : textDefinition;\n  }, [provider, textDefinition]);\n\n  return (\n    // TODO Handle empty content\n    <div className={styles.container}>\n      <FileExportInlineDocumentation exportProvider={provider} />\n      <div className={styles.content}>\n        <AutoSizer disableWidth>\n          {({ height }) => (\n            <CodeEditor\n              width=\"100%\"\n              height={height}\n              language={format}\n              value={formattedTextDefinition}\n              monacoOptions={{\n                minimap: {\n                  enabled: false,\n                },\n                scrollBeyondLastLine: false,\n                lineNumbers: 'on',\n                readOnly: true,\n              }}\n            />\n          )}\n        </AutoSizer>\n      </div>\n      <div className={styles.actions}>\n        <Button variant=\"secondary\" onClick={onClose}>\n          Cancel\n        </Button>\n        <ClipboardButton icon=\"copy\" getText={() => textDefinition}>\n          Copy code\n        </ClipboardButton>\n        <Button icon=\"download-alt\" onClick={onDownload}>\n          Download\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nconst fileExportPreviewStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100%',\n    gap: theme.spacing(2),\n  }),\n  content: css({\n    flex: '1 1 100%',\n  }),\n  actions: css({\n    flex: 0,\n    justifyContent: 'flex-end',\n    display: 'flex',\n    gap: theme.spacing(1),\n  }),\n});\n\nfunction FileExportInlineDocumentation({ exportProvider }: { exportProvider: ExportProvider<unknown> }) {\n  const { name, type } = exportProvider;\n\n  const exportInlineDoc: Record<ProvisioningType, { title: string; component: React.ReactNode }> = {\n    file: {\n      title: 'File-provisioning format',\n      component: (\n        <>\n          {name} format is only valid for File Provisioning.{' '}\n          <TextLink\n            href=\"https://grafana.com/docs/grafana/latest/alerting/set-up/provision-alerting-resources/file-provisioning/\"\n            external\n          >\n            Read more in the docs.\n          </TextLink>\n        </>\n      ),\n    },\n    api: {\n      title: 'API-provisioning format',\n      component: (\n        <>\n          {name} format is only valid for API Provisioning.{' '}\n          <TextLink\n            href=\"https://grafana.com/docs/grafana/latest/alerting/set-up/provision-alerting-resources/http-api-provisioning/\"\n            external\n          >\n            Read more in the docs.\n          </TextLink>\n        </>\n      ),\n    },\n    terraform: {\n      title: 'Terraform-provisioning format',\n      component: (\n        <>\n          {name} format is only valid for Terraform Provisioning.{' '}\n          <TextLink\n            href=\"https://grafana.com/docs/grafana/latest/alerting/set-up/provision-alerting-resources/terraform-provisioning/\"\n            external\n          >\n            Read more in the docs.\n          </TextLink>\n        </>\n      ),\n    },\n  };\n\n  const { title, component } = exportInlineDoc[type];\n\n  return (\n    <Alert title={title} severity=\"info\" bottomSpacing={0} topSpacing={0}>\n      {component}\n    </Alert>\n  );\n}\n","import * as React from 'react';\n\nimport { Drawer } from '@grafana/ui';\n\nimport { RuleInspectorTabs } from '../rule-editor/RuleInspector';\n\nimport { ExportFormats, ExportProvider } from './providers';\n\ninterface GrafanaExportDrawerProps {\n  activeTab: ExportFormats;\n  onTabChange: (tab: ExportFormats) => void;\n  children: React.ReactNode;\n  onClose: () => void;\n  formatProviders: Array<ExportProvider<ExportFormats>>;\n  title?: string;\n}\n\nexport function GrafanaExportDrawer({\n  activeTab,\n  onTabChange,\n  children,\n  onClose,\n  formatProviders,\n  title = 'Export',\n}: GrafanaExportDrawerProps) {\n  const grafanaRulesTabs = Object.values(formatProviders).map((provider) => ({\n    label: provider.name,\n    value: provider.exportFormat,\n  }));\n  return (\n    <Drawer\n      title={title}\n      subtitle=\"Select the format and download the file or copy the contents to clipboard\"\n      tabs={\n        <RuleInspectorTabs<ExportFormats> tabs={grafanaRulesTabs} setActiveTab={onTabChange} activeTab={activeTab} />\n      }\n      onClose={onClose}\n      size=\"md\"\n    >\n      {children}\n    </Drawer>\n  );\n}\n","export type ProvisioningType = 'file' | 'api' | 'terraform';\n\nexport interface ExportProvider<TFormat> {\n  name: string;\n  exportFormat: TFormat;\n  type: ProvisioningType;\n  formatter?: (raw: string) => string;\n}\n\nexport const JsonExportProvider: ExportProvider<'json'> = {\n  name: 'JSON',\n  exportFormat: 'json',\n  type: 'file',\n  formatter: (raw: string) => {\n    try {\n      return JSON.stringify(JSON.parse(raw), null, 4);\n    } catch (e) {\n      return raw;\n    }\n  },\n};\n\nexport const YamlExportProvider: ExportProvider<'yaml'> = {\n  name: 'YAML',\n  exportFormat: 'yaml',\n  type: 'file',\n};\n\nexport const HclExportProvider: ExportProvider<'hcl'> = {\n  name: 'Terraform (HCL)',\n  exportFormat: 'hcl',\n  type: 'terraform',\n};\n\nexport const allGrafanaExportProviders = {\n  [JsonExportProvider.exportFormat]: JsonExportProvider,\n  [YamlExportProvider.exportFormat]: YamlExportProvider,\n  [HclExportProvider.exportFormat]: HclExportProvider,\n} as const;\n\nexport const jsonAndYamlGrafanaExportProviders = [JsonExportProvider, YamlExportProvider];\n\nexport type ExportFormats = keyof typeof allGrafanaExportProviders;\n","import { SupportedPlugin } from '../../../types/pluginBridges';\n\nexport interface AmRouteReceiver {\n  label: string;\n  value: string;\n  grafanaAppReceiverType?: SupportedPlugin;\n}\n\nexport const GRAFANA_APP_RECEIVERS_SOURCE_IMAGE: Record<SupportedPlugin, string> = {\n  [SupportedPlugin.OnCall]: 'public/img/alerting/oncall_logo.svg',\n\n  [SupportedPlugin.Incident]: '',\n  [SupportedPlugin.MachineLearning]: '',\n  [SupportedPlugin.Labels]: '',\n  [SupportedPlugin.Slo]: '',\n};\n","import { css } from '@emotion/css';\nimport { dump, load } from 'js-yaml';\nimport { useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, CodeEditor, Drawer, Icon, Tab, TabsBar, useStyles2, Tooltip } from '@grafana/ui';\n\nimport { RulerRuleDTO } from '../../../../../types/unified-alerting-dto';\nimport { RuleFormValues } from '../../types/rule-form';\nimport {\n  alertingRulerRuleToRuleForm,\n  formValuesToRulerRuleDTO,\n  recordingRulerRuleToRuleForm,\n} from '../../utils/rule-form';\nimport { isAlertingRulerRule, isRecordingRulerRule } from '../../utils/rules';\n\ninterface Props {\n  onClose: () => void;\n}\n\nconst cloudRulesTabs = [{ label: 'Yaml', value: 'yaml' }];\n\nexport const RuleInspector = ({ onClose }: Props) => {\n  const [activeTab, setActiveTab] = useState('yaml');\n  const { setValue } = useFormContext<RuleFormValues>();\n  const styles = useStyles2(drawerStyles);\n\n  const onApply = (formValues: RuleFormValues) => {\n    // Need to loop through all values and set them individually\n    // TODO this is not type-safe :(\n    for (const key in formValues) {\n      // @ts-ignore\n      setValue(key, formValues[key]);\n    }\n    onClose();\n  };\n\n  return (\n    <Drawer\n      title=\"Inspect Alert rule\"\n      subtitle={\n        <div className={styles.subtitle}>\n          <RuleInspectorTabs tabs={cloudRulesTabs} setActiveTab={setActiveTab} activeTab={activeTab} />\n        </div>\n      }\n      onClose={onClose}\n    >\n      {activeTab === 'yaml' && <InspectorYamlTab onSubmit={onApply} />}\n    </Drawer>\n  );\n};\n\ninterface RuleInspectorTabsProps<T = string> {\n  tabs: Array<{ label: string; value: T }>;\n  activeTab: T;\n  setActiveTab: (tab: T) => void;\n}\n\nexport function RuleInspectorTabs<T extends string>({ tabs, activeTab, setActiveTab }: RuleInspectorTabsProps<T>) {\n  return (\n    <TabsBar>\n      {tabs.map((tab, index) => {\n        return (\n          <Tab\n            key={`${tab.value}-${index}`}\n            label={tab.label}\n            value={tab.value}\n            onChangeTab={() => setActiveTab(tab.value)}\n            active={activeTab === tab.value}\n          />\n        );\n      })}\n    </TabsBar>\n  );\n}\n\ninterface YamlTabProps {\n  onSubmit: (newModel: RuleFormValues) => void;\n}\n\nconst InspectorYamlTab = ({ onSubmit }: YamlTabProps) => {\n  const styles = useStyles2(yamlTabStyle);\n  const { getValues } = useFormContext<RuleFormValues>();\n\n  const yamlValues = formValuesToRulerRuleDTO(getValues());\n  const [alertRuleAsYaml, setAlertRuleAsYaml] = useState(dump(yamlValues));\n\n  const onApply = () => {\n    const rulerRule = load(alertRuleAsYaml) as RulerRuleDTO;\n    const currentFormValues = getValues();\n\n    const yamlFormValues = rulerRuleToRuleFormValues(rulerRule);\n    onSubmit({ ...currentFormValues, ...yamlFormValues });\n  };\n\n  return (\n    <>\n      <div className={styles.applyButton}>\n        <Button type=\"button\" onClick={onApply}>\n          Apply\n        </Button>\n        <Tooltip content={<YamlContentInfo />} theme=\"info\" placement=\"left-start\" interactive={true}>\n          <Icon name=\"exclamation-triangle\" size=\"xl\" />\n        </Tooltip>\n      </div>\n\n      <div className={styles.content}>\n        <AutoSizer disableWidth>\n          {({ height }) => (\n            <CodeEditor\n              width=\"100%\"\n              height={height}\n              language=\"yaml\"\n              value={alertRuleAsYaml}\n              onBlur={setAlertRuleAsYaml}\n              monacoOptions={{\n                minimap: {\n                  enabled: false,\n                },\n              }}\n            />\n          )}\n        </AutoSizer>\n      </div>\n    </>\n  );\n};\n\nfunction YamlContentInfo() {\n  return (\n    <div>\n      The YAML content in the editor only contains alert rule configuration <br />\n      To configure Prometheus, you need to provide the rest of the{' '}\n      <a\n        href=\"https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        configuration file content.\n      </a>\n    </div>\n  );\n}\n\nfunction rulerRuleToRuleFormValues(rulerRule: RulerRuleDTO): Partial<RuleFormValues> {\n  if (isAlertingRulerRule(rulerRule)) {\n    return alertingRulerRuleToRuleForm(rulerRule);\n  } else if (isRecordingRulerRule(rulerRule)) {\n    return recordingRulerRuleToRuleForm(rulerRule);\n  }\n\n  return {};\n}\n\nexport const yamlTabStyle = (theme: GrafanaTheme2) => ({\n  content: css({\n    flexGrow: 1,\n    height: '100%',\n    paddingBottom: '16px',\n    marginBottom: theme.spacing(2),\n  }),\n  applyButton: css({\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    flexGrow: 0,\n    marginBottom: theme.spacing(2),\n  }),\n});\n\nexport const drawerStyles = () => ({\n  subtitle: css({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  }),\n});\n","import { IconName } from '@grafana/ui';\n\nexport const INTEGRATION_ICONS: Record<string, IconName> = {\n  discord: 'discord',\n  email: 'envelope',\n  googlechat: 'google-hangouts-alt',\n  hipchat: 'hipchat',\n  line: 'line',\n  pagerduty: 'pagerduty',\n  slack: 'slack',\n  teams: 'microsoft',\n  telegram: 'telegram-alt',\n  webhook: 'link',\n  sns: 'amazon',\n};\n","import { CloudNotifierType, NotificationChannelOption, NotifierDTO } from 'app/types';\n\nimport { option } from './notifier-types';\n\nconst basicAuthOption: NotificationChannelOption = option(\n  'basic_auth',\n  'Basic auth',\n  'Sets the `Authorization` header with the configured username and password. Password and password_file are mutually exclusive.',\n  {\n    element: 'subform',\n    subformOptions: [\n      option('username', 'Username', ''),\n      option('password', 'Password', ''),\n      option('password_file', 'Password file', ''),\n    ],\n  }\n);\n\nconst tlsConfigOption: NotificationChannelOption = option('tls_config', 'TLS config', 'Configures the TLS settings.', {\n  element: 'subform',\n  subformOptions: [\n    option('ca_file', 'CA file', 'CA certificate to validate the server certificate with.'),\n    option('cert_file', 'Cert file', 'Certificate for client cert authentication to the server.'),\n    option('key_file', 'Key file', 'Key file for client cert authentication to the server.'),\n    option('server_name', 'Server name', 'ServerName extension to indicate the name of the server.'),\n    option('insecure_skip_verify', 'Skip verify', 'Disable validation of the server certificate.', {\n      element: 'checkbox',\n    }),\n  ],\n});\n\nconst oauth2ConfigOption: NotificationChannelOption = option('oauth2', 'OAuth2', 'Configures the OAuth2 settings.', {\n  element: 'subform',\n  subformOptions: [\n    option('client_id', 'Client ID', 'The OAuth2 client ID', { required: true }),\n    option('client_secret', 'Client secret', 'The OAuth2 client secret', { required: true }),\n    // ths \"client_secret_file\" is not allowed for security reasons in Mimir / Cloud Alertmanager so we also disable it for OSS Alertmanager – sorry!\n    // option(\n    //   'client_secret_file',\n    //   'Client secret file',\n    //   'OAuth2 client secret file location. Mutually exclusive with client_secret.',\n    // ),\n    option('token_url', 'Token URL', 'The OAuth2 token exchange URL', { required: true }),\n    option('scopes', 'Scopes', 'Comma-separated list of scopes', {\n      element: 'string_array',\n    }),\n    option('endpoint_params', 'Additional parameters', '', { element: 'key_value_map' }),\n  ],\n});\n\nconst httpConfigOption: NotificationChannelOption = option(\n  'http_config',\n  'HTTP Config',\n  'Note that `basic_auth`, `bearer_token` and `bearer_token_file` options are mutually exclusive.',\n  {\n    element: 'subform',\n    subformOptions: [\n      option('bearer_token', 'Bearer token', 'Sets the `Authorization` header with the configured bearer token.'),\n      option(\n        'bearer_token_file',\n        'Bearer token file',\n        'Sets the `Authorization` header with the bearer token read from the configured file.'\n      ),\n      option('proxy_url', 'Proxy URL', 'Optional proxy URL.'),\n      basicAuthOption,\n      tlsConfigOption,\n      oauth2ConfigOption,\n    ],\n  }\n);\n\nexport const cloudNotifierTypes: Array<NotifierDTO<CloudNotifierType>> = [\n  {\n    name: 'Email',\n    description: 'Send notification over SMTP',\n    type: 'email',\n    info: '',\n    heading: 'Email settings',\n    options: [\n      option(\n        'to',\n        'To',\n        'The email address to send notifications to. You can enter multiple addresses using a \",\" separator',\n        { required: true }\n      ),\n      option('from', 'From', 'The sender address.'),\n      option('smarthost', 'SMTP host', 'The SMTP host through which emails are sent.'),\n      option('hello', 'Hello', 'The hostname to identify to the SMTP server.'),\n      option('auth_username', 'Username', 'SMTP authentication information'),\n      option('auth_password', 'Password', 'SMTP authentication information'),\n      option('auth_secret', 'Secret', 'SMTP authentication information'),\n      option('auth_identity', 'Identity', 'SMTP authentication information'),\n      option('require_tls', 'Require TLS', 'The SMTP TLS requirement', { element: 'checkbox' }),\n      option('html', 'Email HTML body', 'The HTML body of the email notification.', {\n        placeholder: '{{ template \"email.default.html\" . }}',\n        element: 'textarea',\n      }),\n      option('text', 'Email text body', 'The text body of the email notification.', { element: 'textarea' }),\n      option(\n        'headers',\n        'Headers',\n        'Further headers email header key/value pairs. Overrides any headers previously set by the notification implementation.',\n        { element: 'key_value_map' }\n      ),\n      tlsConfigOption,\n    ],\n  },\n  {\n    name: 'PagerDuty',\n    description: 'Send notifications to PagerDuty',\n    type: 'pagerduty',\n    info: '',\n    heading: 'PagerDuty settings',\n    options: [\n      option(\n        'routing_key',\n        'Routing key',\n        'The PagerDuty integration key (when using PagerDuty integration type `Events API v2`)'\n      ),\n      option(\n        'service_key',\n        'Service key',\n        'The PagerDuty integration key (when using PagerDuty integration type `Prometheus`).'\n      ),\n      option('url', 'URL', 'The URL to send API requests to'),\n      option('client', 'Client', 'The client identification of the Alertmanager.', {\n        placeholder: '{{ template \"pagerduty.default.client\" . }}',\n      }),\n      option('client_url', 'Client URL', 'A backlink to the sender of the notification.', {\n        placeholder: '{{ template \"pagerduty.default.clientURL\" . }}',\n      }),\n      option('description', 'Description', 'A description of the incident.', {\n        placeholder: '{{ template \"pagerduty.default.description\" .}}',\n      }),\n      option('severity', 'Severity', 'Severity of the incident.', { placeholder: 'error' }),\n      option(\n        'details',\n        'Details',\n        'A set of arbitrary key/value pairs that provide further detail about the incident.',\n        {\n          element: 'key_value_map',\n        }\n      ),\n      option('images', 'Images', 'Images to attach to the incident.', {\n        element: 'subform_array',\n        subformOptions: [\n          option('href', 'URL', '', { required: true }),\n          option('source', 'Source', '', { required: true }),\n          option('alt', 'Alt', '', { required: true }),\n        ],\n      }),\n      option('links', 'Links', 'Links to attach to the incident.', {\n        element: 'subform_array',\n        subformOptions: [option('href', 'URL', '', { required: true }), option('text', 'Text', '', { required: true })],\n      }),\n      httpConfigOption,\n    ],\n  },\n  {\n    name: 'Pushover',\n    description: 'Send notifications to Pushover',\n    type: 'pushover',\n    info: '',\n    heading: 'Pushover settings',\n    options: [\n      option('user_key', 'User key', 'The recipient user’s user key.', { required: true }),\n      option('token', 'Token', 'Your registered application’s API token, see https://pushover.net/app', {\n        required: true,\n      }),\n      option('title', 'Title', 'Notification title.', {\n        placeholder: '{{ template \"pushover.default.title\" . }}',\n      }),\n      option('message', 'Message', 'Notification message.', {\n        placeholder: '{{ template \"pushover.default.message\" . }}',\n      }),\n      option('url', 'URL', 'A supplementary URL shown alongside the message.', {\n        placeholder: '{{ template \"pushover.default.url\" . }}',\n      }),\n      option('priority', 'Priority', 'Priority, see https://pushover.net/api#priority', {\n        placeholder: '{{ if eq .Status \"firing\" }}2{{ else }}0{{ end }}',\n      }),\n      option(\n        'retry',\n        'Retry',\n        'How often the Pushover servers will send the same notification to the user. Must be at least 30 seconds.',\n        {\n          placeholder: '1m',\n        }\n      ),\n      option(\n        'expire',\n        'Expire',\n        'How long your notification will continue to be retried for, unless the user acknowledges the notification.',\n        {\n          placeholder: '1h',\n        }\n      ),\n      option(\n        'ttl',\n        'TTL',\n        'The number of seconds before a message expires and is deleted automatically. Examples: 10s, 5m30s, 8h.',\n        {\n          // allow 30s, 4m30s, etc\n          validationRule: '^(\\\\d+[s|m|h])+$|^$',\n          element: 'input',\n        }\n      ),\n      httpConfigOption,\n    ],\n  },\n  {\n    name: 'Slack',\n    description: 'Send notifications to Slack',\n    type: 'slack',\n    info: '',\n    heading: 'Slack settings',\n    options: [\n      option('api_url', 'Webhook URL', 'The Slack webhook URL.'),\n      option('channel', 'Channel', 'The #channel or @user to send notifications to.', { required: true }),\n      option('icon_emoji', 'Emoji icon', ''),\n      option('icon_url', 'Icon URL', ''),\n      option('link_names', 'Names link', '', { element: 'checkbox' }),\n      option('username', 'Username', '', { placeholder: '{{ template \"slack.default.username\" . }}' }),\n      option('callback_id', 'Callback ID', '', { placeholder: '{{ template \"slack.default.callbackid\" . }}' }),\n      option('color', 'Color', '', { placeholder: '{{ if eq .Status \"firing\" }}danger{{ else }}good{{ end }}' }),\n      option('fallback', 'Fallback', '', { placeholder: '{{ template \"slack.default.fallback\" . }}' }),\n      option('footer', 'Footer', '', { placeholder: '{{ template \"slack.default.footer\" . }}' }),\n      option('mrkdwn_in', 'Mrkdwn fields', 'An array of field names that should be formatted by mrkdwn syntax.', {\n        element: 'string_array',\n      }),\n      option('pretext', 'Pre-text', '', { placeholder: '{{ template \"slack.default.pretext\" . }}' }),\n      option('short_fields', 'Short fields', '', { element: 'checkbox' }),\n      option('text', 'Message body', '', { element: 'textarea', placeholder: '{{ template \"slack.default.text\" . }}' }),\n      option('title', 'Title', '', { placeholder: '{{ template \"slack.default.title\" . }}' }),\n      option('title_link', 'Title link', '', { placeholder: '{{ template \"slack.default.titlelink\" . }}' }),\n      option('image_url', 'Image URL', ''),\n      option('thumb_url', 'Thumbnail URL', ''),\n      option('actions', 'Actions', '', {\n        element: 'subform_array',\n        subformOptions: [\n          option('text', 'Text', '', { required: true }),\n          option('type', 'Type', '', { required: true }),\n          option('url', 'URL', 'Either url or name and value are mandatory.'),\n          option('name', 'Name', ''),\n          option('value', 'Value', ''),\n          option('confirm', 'Confirm', '', {\n            element: 'subform',\n            subformOptions: [\n              option('text', 'Text', '', { required: true }),\n              option('dismiss_text', 'Dismiss text', ''),\n              option('ok_text', 'OK text', ''),\n              option('title', 'Title', ''),\n            ],\n          }),\n          option('style', 'Style', ''),\n        ],\n      }),\n      option('fields', 'Fields', '', {\n        element: 'subform_array',\n        subformOptions: [\n          option('title', 'Title', '', { required: true }),\n          option('value', 'Value', '', { required: true }),\n          option('short', 'Short', '', { element: 'checkbox' }),\n        ],\n      }),\n      httpConfigOption,\n    ],\n  },\n  {\n    name: 'OpsGenie',\n    description: 'Send notifications to OpsGenie',\n    type: 'opsgenie',\n    info: '',\n    heading: 'OpsGenie settings',\n    options: [\n      option('api_key', 'API key', 'The API key to use when talking to the OpsGenie API.'),\n      option('api_url', 'API URL', 'The host to send OpsGenie API requests to.'),\n      option('message', 'Message', 'Alert text limited to 130 characters.'),\n      option('description', 'Description', 'A description of the incident.', {\n        placeholder: '{{ template \"opsgenie.default.description\" . }}',\n      }),\n      option('source', 'Source', 'A backlink to the sender of the notification.', {\n        placeholder: '{{ template \"opsgenie.default.source\" . }}',\n      }),\n      option(\n        'details',\n        'Details',\n        'A set of arbitrary key/value pairs that provide further detail about the incident.',\n        {\n          element: 'key_value_map',\n        }\n      ),\n      option('tags', 'Tags', 'Comma separated list of tags attached to the notifications.'),\n      option('note', 'Note', 'Additional alert note.'),\n      option('priority', 'Priority', 'Priority level of alert. Possible values are P1, P2, P3, P4, and P5.'),\n      option('responders', 'Responders', 'List of responders responsible for notifications.', {\n        element: 'subform_array',\n        subformOptions: [\n          option('type', 'Type', '\"team\", \"user\", \"escalation\" or schedule\".', { required: true }),\n          option('id', 'ID', 'Exactly one of these fields should be defined.'),\n          option('name', 'Name', 'Exactly one of these fields should be defined.'),\n          option('username', 'Username', 'Exactly one of these fields should be defined.'),\n        ],\n      }),\n      httpConfigOption,\n    ],\n  },\n  {\n    name: 'VictorOps',\n    description: 'Send notifications to VictorOps',\n    type: 'victorops',\n    info: '',\n    heading: 'VictorOps settings',\n    options: [\n      option('api_key', 'API key', 'The API key to use when talking to the VictorOps API.'),\n      option('api_url', 'API URL', 'The VictorOps API URL.'),\n      option('routing_key', 'Routing key', 'A key used to map the alert to a team.', { required: true }),\n      option('message_type', 'Message type', 'Describes the behavior of the alert (CRITICAL, WARNING, INFO).'),\n      option('entity_display_name', 'Entity display name', 'Contains summary of the alerted problem.', {\n        placeholder: '{{ template \"victorops.default.entity_display_name\" . }}',\n      }),\n      option('state_message', 'State message', 'Contains long explanation of the alerted problem.', {\n        placeholder: '{{ template \"victorops.default.state_message\" . }}',\n      }),\n      option('monitoring_tool', 'Monitoring tool', 'The monitoring tool the state message is from.', {\n        placeholder: '{{ template \"victorops.default.monitoring_tool\" . }}',\n      }),\n      httpConfigOption,\n    ],\n  },\n  {\n    name: 'Webhook',\n    description: 'Send notifications to a webhook',\n    type: 'webhook',\n    info: '',\n    heading: 'Webhook settings',\n    options: [\n      option('url', 'URL', 'The endpoint to send HTTP POST requests to.', { required: true }),\n      option(\n        'max_alerts',\n        'Max alerts',\n        'The maximum number of alerts to include in a single webhook message. Alerts above this threshold are truncated. When leaving this at its default value of 0, all alerts are included.',\n        {\n          placeholder: '0',\n          inputType: 'number',\n          validationRule: '(^\\\\d+$|^$)',\n          setValueAs: (value) => {\n            const integer = Number(value);\n            return Number.isFinite(integer) ? integer : 0;\n          },\n        }\n      ),\n      httpConfigOption,\n    ],\n  },\n  {\n    name: 'Discord',\n    description: 'Sends notifications to Discord',\n    type: 'discord',\n    info: '',\n    heading: 'Discord settings',\n    options: [\n      option('title', 'Title', 'Templated title of the message', {\n        placeholder: '{{ template \"discord.default.title\" . }}',\n      }),\n      option(\n        'message',\n        'Message Content',\n        'Mention a group using @ or a user using <@ID> when notifying in a channel',\n        { placeholder: '{{ template \"discord.default.message\" . }}' }\n      ),\n      option('webhook_url', 'Webhook URL', '', { placeholder: 'Discord webhook URL', required: true }),\n      httpConfigOption,\n    ],\n  },\n  {\n    name: 'Cisco Webex Teams',\n    description: 'Sends notifications to Cisco Webex Teams',\n    type: 'webex',\n    info: '',\n    heading: 'Cisco Webex Teams settings',\n    options: [\n      option('api_url', 'API URL', 'The Webex Teams API URL', {\n        placeholder: 'https://webexapis.com/v1/messages',\n      }),\n      option('room_id', 'Room ID', 'ID of the Webex Teams room where to send the messages', {\n        required: true,\n      }),\n      option('message', 'Message', 'Message template', {\n        placeholder: '{{ template \"webex.default.message\" .}}',\n      }),\n      {\n        ...httpConfigOption,\n        required: true,\n      },\n    ],\n  },\n  {\n    name: 'Telegram',\n    description: 'Sends notifications to Telegram',\n    type: 'telegram',\n    info: '',\n    heading: 'Telegram settings',\n    options: [\n      option('api_url', 'API URL', 'The Telegram API URL', {\n        placeholder: 'https://api.telegram.org',\n      }),\n      option('bot_token', 'Bot token', 'Telegram bot token', {\n        required: true,\n      }),\n      option('chat_id', 'Chat ID', 'ID of the chat where to send the messages', {\n        required: true,\n        setValueAs: (value) => (typeof value === 'string' ? parseInt(value, 10) : value),\n      }),\n      option('message', 'Message', 'Message template', {\n        placeholder: '{{ template \"webex.default.message\" .}}',\n      }),\n      option('disable_notifications', 'Disable notifications', 'Disable telegram notifications', {\n        element: 'checkbox',\n      }),\n      option('parse_mode', 'Parse mode', 'Parse mode for telegram message', {\n        element: 'select',\n        // If we've set '' on the API, then the Select won't populate with the correct value,\n        // so the easiest way to fix this is to set the default value to ''\n        defaultValue: { label: 'None', value: '' },\n        selectOptions: [\n          // Note that the value for Cloud AM is '',\n          // and for Grafana AM it is 'None'\n          { label: 'None', value: '' },\n          { label: 'MarkdownV2', value: 'MarkdownV2' },\n          { label: 'Markdown', value: 'Markdown' },\n          { label: 'HTML', value: 'HTML' },\n        ],\n      }),\n      httpConfigOption,\n    ],\n  },\n  {\n    name: 'Amazon SNS',\n    description: 'Sends notifications to Amazon SNS',\n    type: 'sns',\n    info: '',\n    heading: 'Amazon SNS settings',\n    options: [\n      option('api_url', 'API URL', 'The Amazon SNS API URL'),\n      option(\n        'sigv4',\n        'SigV4 authentication',\n        \"Configures AWS's Signature Verification 4 signing process to sign requests\",\n        {\n          element: 'subform',\n          subformOptions: [\n            option(\n              'region',\n              'Region',\n              'The AWS region. If blank, the region from the default credentials chain is used'\n            ),\n            option(\n              'access_key',\n              'Access key',\n              'The AWS API access_key. If blank the environment variable \"AWS_ACCESS_KEY_ID\" is used'\n            ),\n            option(\n              'secret_key',\n              'Secret key',\n              'The AWS API secret_key. If blank the environment variable \"AWS_ACCESS_SECRET_ID\" is used'\n            ),\n            option('profile', 'Profile', 'Named AWS profile used to authenticate'),\n            option('role_arn', 'Role ARN', 'AWS Role ARN, an alternative to using AWS API keys'),\n          ],\n        }\n      ),\n      option(\n        'topic_arn',\n        'SNS topic ARN',\n        \"If you don't specify this value, you must specify a value for the phone_number or target_arn. If you are using a FIFO SNS topic you should set a message group interval longer than 5 minutes to prevent messages with the same group key being deduplicated by the SNS default deduplication window\"\n      ),\n      option(\n        'phone_number',\n        'Phone number',\n        \"Phone number if message is delivered via SMS in E.164 format. If you don't specify this value, you must specify a value for the topic_arn or target_arn\"\n      ),\n      option(\n        'target_arn',\n        'Target ARN',\n        \"The  mobile platform endpoint ARN if message is delivered via mobile notifications. If you don't specify this value, you must specify a value for the topic_arn or phone_number\"\n      ),\n\n      option('subject', 'Subject', 'Subject line when the message is delivered', {\n        placeholder: '{{ template \"sns.default.subject\" .}}',\n      }),\n      option('message', 'Message', 'The message content of the SNS notification', {\n        placeholder: '{{ template \"sns.default.message\" .}}',\n      }),\n      option('attributes', 'Attributes', 'SNS message attributes', {\n        element: 'key_value_map',\n      }),\n      httpConfigOption,\n    ],\n  },\n  {\n    name: 'WeChat',\n    description: 'Sends notifications to WeChat',\n    type: 'wechat',\n    info: '',\n    heading: 'WeChat settings',\n    options: [\n      option('api_url', 'API URL', 'The WeChat API URL'),\n      option('api_secret', 'API Secret', 'The API key to use when talking to the WeChat API'),\n      option('corp_id', 'Corp ID', 'The corp id for authentication'),\n      option('message', 'Message', 'API request data as defined by the WeChat API', {\n        placeholder: '{{ template \"wechat.default.message\" . }}',\n      }),\n      option('message_type', 'Message type', 'Type of the message type', {\n        element: 'select',\n        defaultValue: { label: 'Text', value: 'text' },\n        selectOptions: [\n          { label: 'Text', value: 'text' },\n          { label: 'Markdown', value: 'markdown' },\n        ],\n      }),\n      option('agent_id', 'Agent ID', '', {\n        placeholder: '{{ template \"wechat.default.agent_id\" . }}',\n      }),\n      option('to_user', 'to user', '', {\n        placeholder: '{{ template \"wechat.default.to_user\" . }}',\n      }),\n      option('to_party', 'to party', '', {\n        placeholder: '{{ template \"wechat.default.to_party\" . }}',\n      }),\n      option('to_tag', 'to tag', '', {\n        placeholder: '{{ template \"wechat.default.to_tag\" . }}',\n      }),\n    ],\n  },\n  {\n    name: 'Microsoft Teams',\n    description: 'Sends notifications to Microsoft Teams',\n    type: 'msteams',\n    info: '',\n    heading: 'Microsoft Teams settings',\n    options: [\n      option('webhook_url', 'Webhook URL', 'The incoming webhook URL.'),\n      option('title', 'Title', 'Message title template.', {\n        placeholder: '{{ template \"teams.default.title\" . }}',\n      }),\n      option('text', 'Text', 'Message body template.', {\n        placeholder: '{{ template \"teams.default.text\" . }}',\n      }),\n    ],\n  },\n];\n\nexport const globalConfigOptions: NotificationChannelOption[] = [\n  // email\n  option('smtp_from', 'SMTP from', 'The default SMTP From header field.'),\n  option(\n    'smtp_smarthost',\n    'SMTP smarthost',\n    'The default SMTP smarthost used for sending emails, including port number. Port number usually is 25, or 587 for SMTP over TLS (sometimes referred to as STARTTLS). Example: smtp.example.org:587'\n  ),\n  option('smtp_hello', 'SMTP hello', 'The default hostname to identify to the SMTP server.', {\n    placeholder: 'localhost',\n  }),\n  option(\n    'smtp_auth_username',\n    'SMTP auth username',\n    \"SMTP Auth using CRAM-MD5, LOGIN and PLAIN. If empty, Alertmanager doesn't authenticate to the SMTP server.\"\n  ),\n  option('smtp_auth_password', 'SMTP auth password', 'SMTP Auth using LOGIN and PLAIN.'),\n  option('smtp_auth_identity', 'SMTP auth identity', 'SMTP Auth using PLAIN.'),\n  option('smtp_auth_secret', 'SMTP auth secret', 'SMTP Auth using CRAM-MD5.'),\n  option(\n    'smtp_require_tls',\n    'SMTP require TLS',\n    'The default SMTP TLS requirement. Note that Go does not support unencrypted connections to remote SMTP endpoints.',\n    {\n      element: 'checkbox',\n    }\n  ),\n\n  // slack\n  option('slack_api_url', 'Slack API URL', ''),\n  option('victorops_api_key', 'VictorOps API key', ''),\n  option('victorops_api_url', 'VictorOps API URL', '', {\n    placeholder: 'https://alert.victorops.com/integrations/generic/20131114/alert/',\n  }),\n  option('pagerduty_url', 'PagerDuty URL', 'https://events.pagerduty.com/v2/enqueue'),\n  option('opsgenie_api_key', 'OpsGenie API key', ''),\n  option('opsgenie_api_url', 'OpsGenie API URL', '', { placeholder: 'https://api.opsgenie.com/' }),\n  option('wechat_api_url', 'WeChat API URL', '', { placeholder: 'https://qyapi.weixin.qq.com/cgi-bin/' }),\n  option('wechat_api_secret', 'WeChat API secret', ''),\n  option('wechat_api_corp_id', 'WeChat API corp id', ''),\n  option('webex_api_url', 'Cisco Webex Teams API URL', ''),\n  option('telegram_api_url', 'The Telegram API URL', ''),\n  httpConfigOption,\n  option(\n    'resolve_timeout',\n    'Resolve timeout',\n    'ResolveTimeout is the default value used by alertmanager if the alert does not include EndsAt, after this time passes it can declare the alert as resolved if it has not been updated. This has no impact on alerts from Prometheus, as they always include EndsAt.',\n    {\n      placeholder: '5m',\n    }\n  ),\n];\n","import { config } from '@grafana/runtime';\nimport { GRAFANA_RULES_SOURCE_NAME } from 'app/features/alerting/unified/utils/datasource';\n\n/**\n * Get the correct namespace to use when using the K8S API.\n */\nexport const getK8sNamespace = () => config.namespace;\n\n/**\n * Should we call the kubernetes-style API for managing alertmanager entities?\n *\n * Requires the alertmanager referenced being the Grafana AM,\n * and the `alertingApiServer` feature toggle being enabled\n */\nexport const shouldUseK8sApi = (alertmanager?: string) => {\n  const featureToggleEnabled = config.featureToggles.alertingApiServer;\n  return featureToggleEnabled && alertmanager === GRAFANA_RULES_SOURCE_NAME;\n};\n","import { isArray, pick, reduce } from 'lodash';\n\nimport {\n  AlertmanagerGroup,\n  MatcherOperator,\n  ObjectMatcher,\n  Route,\n  RouteWithID,\n} from 'app/plugins/datasource/alertmanager/types';\nimport { Labels } from 'app/types/unified-alerting-dto';\n\nimport { Label, normalizeMatchers, unquoteWithUnescape } from './matchers';\n\n// If a policy has no matchers it still can be a match, hence matchers can be empty and match can be true\n// So we cannot use null as an indicator of no match\ninterface LabelMatchResult {\n  match: boolean;\n  matcher: ObjectMatcher | null;\n}\n\nexport const INHERITABLE_KEYS = ['receiver', 'group_by', 'group_wait', 'group_interval', 'repeat_interval'] as const;\nexport type InheritableKeys = typeof INHERITABLE_KEYS;\nexport type InheritableProperties = Pick<Route, InheritableKeys[number]>;\n\ntype LabelsMatch = Map<Label, LabelMatchResult>;\n\ninterface MatchingResult {\n  matches: boolean;\n  labelsMatch: LabelsMatch;\n}\n\n// returns a match results for given set of matchers (from a policy for instance) and a set of labels\nexport function matchLabels(matchers: ObjectMatcher[], labels: Label[]): MatchingResult {\n  const matches = matchLabelsSet(matchers, labels);\n\n  // create initial map of label => match result\n  const labelsMatch: LabelsMatch = new Map(labels.map((label) => [label, { match: false, matcher: null }]));\n\n  // for each matcher, check which label it matched for\n  matchers.forEach((matcher) => {\n    const matchingLabel = labels.find((label) => isLabelMatch(matcher, label));\n\n    // record that matcher for the label\n    if (matchingLabel) {\n      labelsMatch.set(matchingLabel, {\n        match: true,\n        matcher,\n      });\n    }\n  });\n\n  return { matches, labelsMatch };\n}\n\n// Compare set of matchers to set of label\nexport function matchLabelsSet(matchers: ObjectMatcher[], labels: Label[]): boolean {\n  for (const matcher of matchers) {\n    if (!isLabelMatchInSet(matcher, labels)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport interface AlertInstanceMatch {\n  instance: Labels;\n  labelsMatch: LabelsMatch;\n}\n\nexport interface RouteMatchResult<T extends Route> {\n  route: T;\n  labelsMatch: LabelsMatch;\n}\n\n// Match does a depth-first left-to-right search through the route tree\n// and returns the matching routing nodes.\n\n// If the current node is not a match, return nothing\n// Normalization should have happened earlier in the code\nfunction findMatchingRoutes<T extends Route>(route: T, labels: Label[]): Array<RouteMatchResult<T>> {\n  let childMatches: Array<RouteMatchResult<T>> = [];\n\n  // If the current node is not a match, return nothing\n  const matchResult = matchLabels(route.object_matchers ?? [], labels);\n  if (!matchResult.matches) {\n    return [];\n  }\n\n  // If the current node matches, recurse through child nodes\n  if (route.routes) {\n    for (const child of route.routes) {\n      const matchingChildren = findMatchingRoutes(child, labels);\n      // TODO how do I solve this typescript thingy? It looks correct to me /shrug\n      // @ts-ignore\n      childMatches = childMatches.concat(matchingChildren);\n      // we have matching children and we don't want to continue, so break here\n      if (matchingChildren.length && !child.continue) {\n        break;\n      }\n    }\n  }\n\n  // If no child nodes were matches, the current node itself is a match.\n  if (childMatches.length === 0) {\n    childMatches.push({ route, labelsMatch: matchResult.labelsMatch });\n  }\n\n  return childMatches;\n}\n\n// This is a performance improvement to normalize matchers only once and use the normalized version later on\nexport function normalizeRoute(rootRoute: RouteWithID): RouteWithID {\n  function normalizeRoute(route: RouteWithID) {\n    route.object_matchers = normalizeMatchers(route);\n    delete route.matchers;\n    delete route.match;\n    delete route.match_re;\n    route.routes?.forEach(normalizeRoute);\n  }\n\n  const normalizedRootRoute = structuredClone(rootRoute);\n  normalizeRoute(normalizedRootRoute);\n\n  return normalizedRootRoute;\n}\n\nexport function unquoteRouteMatchers(route: RouteWithID): RouteWithID {\n  function unquoteRoute(route: RouteWithID) {\n    route.object_matchers = route.object_matchers?.map(([name, operator, value]) => {\n      return [unquoteWithUnescape(name), operator, unquoteWithUnescape(value)];\n    });\n    route.routes?.forEach(unquoteRoute);\n  }\n\n  const unwrappedRootRoute = structuredClone(route);\n  unquoteRoute(unwrappedRootRoute);\n\n  return unwrappedRootRoute;\n}\n\n/**\n * find all of the groups that have instances that match the route, thay way we can find all instances\n * (and their grouping) for the given route\n */\nfunction findMatchingAlertGroups(\n  routeTree: Route,\n  route: Route,\n  alertGroups: AlertmanagerGroup[]\n): AlertmanagerGroup[] {\n  const matchingGroups: AlertmanagerGroup[] = [];\n\n  return alertGroups.reduce((acc, group) => {\n    // find matching alerts in the current group\n    const matchingAlerts = group.alerts.filter((alert) => {\n      const labels = Object.entries(alert.labels);\n      return findMatchingRoutes(routeTree, labels).some((matchingRoute) => matchingRoute.route === route);\n    });\n\n    // if the groups has any alerts left after matching, add it to the results\n    if (matchingAlerts.length) {\n      acc.push({\n        ...group,\n        alerts: matchingAlerts,\n      });\n    }\n\n    return acc;\n  }, matchingGroups);\n}\n\n// inherited properties are config properties that exist on the parent route (or its inherited properties) but not on the child route\nfunction getInheritedProperties(\n  parentRoute: Route,\n  childRoute: Route,\n  propertiesParentInherited?: InheritableProperties\n): InheritableProperties {\n  const propsFromParent: InheritableProperties = pick(parentRoute, INHERITABLE_KEYS);\n  const inheritableProperties: InheritableProperties = {\n    ...propsFromParent,\n    ...propertiesParentInherited,\n  };\n\n  const inherited = reduce(\n    inheritableProperties,\n    (inheritedProperties: InheritableProperties, parentValue, property) => {\n      const parentHasValue = parentValue != null;\n\n      const inheritableValues = [undefined, '', null];\n      // @ts-ignore\n      const childIsInheriting = inheritableValues.some((value) => childRoute[property] === value);\n      const inheritFromValue = childIsInheriting && parentHasValue;\n\n      const inheritEmptyGroupByFromParent =\n        property === 'group_by' &&\n        parentHasValue &&\n        isArray(childRoute[property]) &&\n        childRoute[property]?.length === 0;\n\n      const inheritFromParent = inheritFromValue || inheritEmptyGroupByFromParent;\n\n      if (inheritFromParent) {\n        // @ts-ignore\n        inheritedProperties[property] = parentValue;\n      }\n\n      return inheritedProperties;\n    },\n    {}\n  );\n\n  return inherited;\n}\n\n/**\n * This function will compute the full tree with inherited properties – this is mostly used for search and filtering\n */\nexport function computeInheritedTree<T extends Route>(parent: T): T {\n  return {\n    ...parent,\n    routes: parent.routes?.map((child) => {\n      const inheritedProperties = getInheritedProperties(parent, child);\n\n      return computeInheritedTree({\n        ...child,\n        ...inheritedProperties,\n      });\n    }),\n  };\n}\n\ntype OperatorPredicate = (labelValue: string, matcherValue: string) => boolean;\nconst OperatorFunctions: Record<MatcherOperator, OperatorPredicate> = {\n  [MatcherOperator.equal]: (lv, mv) => lv === mv,\n  [MatcherOperator.notEqual]: (lv, mv) => lv !== mv,\n  // At the time of writing, Alertmanager compiles to another (anchored) Regular Expression,\n  // so we should also anchor our UI matches for consistency with this behaviour\n  // https://github.com/prometheus/alertmanager/blob/fd37ce9c95898ca68be1ab4d4529517174b73c33/pkg/labels/matcher.go#L69\n  [MatcherOperator.regex]: (lv, mv) => {\n    const re = new RegExp(`^(?:${mv})$`);\n    return re.test(lv);\n  },\n  [MatcherOperator.notRegex]: (lv, mv) => {\n    const re = new RegExp(`^(?:${mv})$`);\n    return !re.test(lv);\n  },\n};\n\nfunction isLabelMatchInSet(matcher: ObjectMatcher, labels: Label[]): boolean {\n  const [matcherKey, operator, matcherValue] = matcher;\n\n  let labelValue = ''; // matchers that have no labels are treated as empty string label values\n  const labelForMatcher = Object.fromEntries(labels)[matcherKey];\n  if (labelForMatcher) {\n    labelValue = labelForMatcher;\n  }\n\n  const matchFunction = OperatorFunctions[operator];\n  if (!matchFunction) {\n    throw new Error(`no such operator: ${operator}`);\n  }\n\n  return matchFunction(labelValue, matcherValue);\n}\n\n// ⚠️ DO NOT USE THIS FUNCTION FOR ROUTE SELECTION ALGORITHM\n// for route selection algorithm, always compare a single matcher to the entire label set\n// see \"matchLabelsSet\"\nfunction isLabelMatch(matcher: ObjectMatcher, label: Label): boolean {\n  const [labelKey, labelValue] = label;\n  const [matcherKey, operator, matcherValue] = matcher;\n\n  if (labelKey !== matcherKey) {\n    return false;\n  }\n\n  const matchFunction = OperatorFunctions[operator];\n  if (!matchFunction) {\n    throw new Error(`no such operator: ${operator}`);\n  }\n\n  return matchFunction(labelValue, matcherValue);\n}\n\nexport { findMatchingAlertGroups, findMatchingRoutes, getInheritedProperties, isLabelMatchInSet };\n","import { NotificationChannelOption } from '../../../../types';\n\nexport function option(\n  propertyName: string,\n  label: string,\n  description: string,\n  rest: Partial<NotificationChannelOption> = {}\n): NotificationChannelOption {\n  return {\n    propertyName,\n    label,\n    description,\n    element: 'input',\n    inputType: '',\n    required: false,\n    secure: false,\n    placeholder: '',\n    validationRule: '',\n    showWhen: { field: '', is: '' },\n    dependsOn: '',\n    ...rest,\n  };\n}\n"],"names":["CollapseToggle","isCollapsed","onToggle","idControlled","className","text","size","restOfProps","ConditionalWrap","children","shouldWrap","wrap","_ref","PrimaryText","content","UnusedContactPointBadge","Badge","ContactPointHeader","props","name","disabled","provisioned","policies","onDelete","styles","getStyles","exportSupported","exportAllowed","editSupported","editAllowed","deleteSupported","deleteAllowed","ExportDrawer","openExportDrawer","useExportContactPoint","numberOfPolicies","isReferencedByAnyPolicy","isReferencedByRegularPolicies","ref","canEdit","canDelete","menuActions","Menu","Tooltip","referencedByPoliciesText","Stack","Text","TextLink","Provisioning","Spacer","Dropdown","MoreButton","theme","receiverTypeNames","ReceiverMetadataBadge","icon","title","externalUrl","warning","Icon","ContactPoint","receivers","showFullMetadata","receiver","index","diagnostics","metadata","sendingResolved","pluginMetadata","key","ContactPointReceiver","ContactPointReceiverSummary","type","description","hasMetadata","ContactPointReceiverTitleRow","ContactPointReceiverMetadataRow","iconName","countByType","receiverName","isLastItem","Fragment","failedToSend","lastDeliveryAttempt","lastDeliveryAttemptDuration","hasDeliveryAttempt","MetaText","RECEIVER_STATUS_KEY","RECEIVER_META_KEY","RECEIVER_PLUGIN_META_KEY","addTagTypes","injectedRtkApi","build","queryArg","RECEIVER_STATUS_POLLING_INTERVAL","useGetAlertmanagerConfigurationQuery","useGetContactPointsListQuery","useGetContactPointsStatusQuery","useGrafanaNotifiersQuery","useLazyGetAlertmanagerConfigurationQuery","useUpdateAlertmanagerConfigurationMutation","alertmanagerApi","useGrafanaOnCallIntegrationsQuery","onCallApi","useListNamespacedReceiverQuery","defaultOptions","useOnCallIntegrations","skip","installed","loading","usePluginBridge","oncallIntegrationsResponse","parseK8sReceiver","item","useK8sContactPoints","hookParams","queryOptions","data","rest","useFetchGrafanaContactPoints","namespace","useK8sApi","grafanaResponse","k8sResponse","useGrafanaContactPoints","fetchStatuses","fetchPolicies","potentiallySkip","onCallResponse","alertNotifiers","contactPointsListResponse","contactPointsStatusResponse","alertmanagerConfigResponse","enhanced","useContactPointsWithStatus","alertmanager","isGrafanaAlertmanager","result","useDeleteContactPoint","selectedAlertmanager","fetchAlertmanagerConfig","updateAlertManager","updateAlertmanagerState","contactPointName","newConfig","draft","GrafanaReceiverExportPreview","decrypt","exportFormat","onClose","receiverDefinition","isFetching","alertRuleApi","downloadFileName","LoadingPlaceholder","FileExportPreview","GrafanaReceiverExporter","activeTab","setActiveTab","GrafanaExportDrawer","GrafanaReceiversExportPreview","GrafanaReceiversExporter","ALL_CONTACT_POINTS","setReceiverName","isExportDrawerOpen","toggleShowExportDrawer","useToggle","decryptSecretsSupported","decryptSecretsAllowed","canReadSecrets","handleClose","handleOpen","extractReceivers","_","value","acc","configs","settings","onCallReceiverMeta","getOnCallMetadata","onCallIntegrations","hasAlertManagerConfigData","matchingOnCallIntegration","integration","AUTOGENERATED_RECEIVER_POLICY_MATCHER_KEY","isProvisioned","contactPoint","getReceiverDescription","addresses","summarizeEmailAddresses","recipient","SUPPORTED_SEPARATORS","emails","summary","enhanceContactPointsWithMetadata","status","notifiers","contactPoints","alertmanagerConfiguration","fullyInheritedTree","usedContactPoints","getUsedContactPoints","usedContactPointsByName","statusForReceiver","isOnCallReceiver","getNotifierMetadata","a","b","isAutoGeneratedPolicy","route","config","objectMatcher","childrenContactPoints","match","notifier","format","textDefinition","fileExportPreviewStyles","provider","onDownload","blob","formattedTextDefinition","FileExportInlineDocumentation","height","exportProvider","exportInlineDoc","component","onTabChange","formatProviders","grafanaRulesTabs","JsonExportProvider","raw","YamlExportProvider","HclExportProvider","allGrafanaExportProviders","jsonAndYamlGrafanaExportProviders","GRAFANA_APP_RECEIVERS_SOURCE_IMAGE","cloudRulesTabs","RuleInspector","setValue","drawerStyles","onApply","formValues","RuleInspectorTabs","InspectorYamlTab","tabs","tab","onSubmit","yamlTabStyle","getValues","yamlValues","alertRuleAsYaml","setAlertRuleAsYaml","rulerRule","currentFormValues","yamlFormValues","rulerRuleToRuleFormValues","YamlContentInfo","INTEGRATION_ICONS","basicAuthOption","tlsConfigOption","oauth2ConfigOption","httpConfigOption","cloudNotifierTypes","integer","globalConfigOptions","getK8sNamespace","shouldUseK8sApi","INHERITABLE_KEYS","matchLabels","matchers","labels","matches","matchLabelsSet","labelsMatch","label","matcher","matchingLabel","isLabelMatch","isLabelMatchInSet","findMatchingRoutes","childMatches","matchResult","child","matchingChildren","normalizeRoute","rootRoute","normalizedRootRoute","unquoteRouteMatchers","unquoteRoute","operator","unwrappedRootRoute","findMatchingAlertGroups","routeTree","alertGroups","matchingGroups","group","matchingAlerts","alert","matchingRoute","getInheritedProperties","parentRoute","childRoute","propertiesParentInherited","inheritableProperties","inheritedProperties","parentValue","property","parentHasValue","inheritFromValue","inheritEmptyGroupByFromParent","computeInheritedTree","parent","OperatorFunctions","lv","mv","matcherKey","matcherValue","labelValue","labelForMatcher","matchFunction","labelKey","option","propertyName"],"sourceRoot":""}